/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class SearchResultCollection implements org.apache.thrift.TBase<SearchResultCollection, SearchResultCollection._Fields>, java.io.Serializable, Cloneable, Comparable<SearchResultCollection> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchResultCollection");

  private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HITS_FIELD_DESC = new org.apache.thrift.protocol.TField("hits", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("items", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField HAS_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasNext", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField CAT_FIELD_DESC = new org.apache.thrift.protocol.TField("cat", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("error", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TAB_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("tabTitle", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField SQUARE_CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("squareCategoryId", org.apache.thrift.protocol.TType.I32, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SearchResultCollectionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SearchResultCollectionTupleSchemeFactory();

  public int collection; // required
  public java.lang.String title; // required
  public int rank; // required
  public int hits; // required
  public java.util.List<SearchResultItem> items; // required
  public boolean hasNext; // required
  public java.util.List<java.lang.Integer> cat; // required
  public java.lang.String error; // required
  public java.lang.String tabTitle; // required
  public int start; // required
  public int length; // required
  public int squareCategoryId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLLECTION((short)1, "collection"),
    TITLE((short)2, "title"),
    RANK((short)3, "rank"),
    HITS((short)4, "hits"),
    ITEMS((short)5, "items"),
    HAS_NEXT((short)6, "hasNext"),
    CAT((short)7, "cat"),
    ERROR((short)8, "error"),
    TAB_TITLE((short)9, "tabTitle"),
    START((short)10, "start"),
    LENGTH((short)11, "length"),
    SQUARE_CATEGORY_ID((short)12, "squareCategoryId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION
          return COLLECTION;
        case 2: // TITLE
          return TITLE;
        case 3: // RANK
          return RANK;
        case 4: // HITS
          return HITS;
        case 5: // ITEMS
          return ITEMS;
        case 6: // HAS_NEXT
          return HAS_NEXT;
        case 7: // CAT
          return CAT;
        case 8: // ERROR
          return ERROR;
        case 9: // TAB_TITLE
          return TAB_TITLE;
        case 10: // START
          return START;
        case 11: // LENGTH
          return LENGTH;
        case 12: // SQUARE_CATEGORY_ID
          return SQUARE_CATEGORY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COLLECTION_ISSET_ID = 0;
  private static final int __RANK_ISSET_ID = 1;
  private static final int __HITS_ISSET_ID = 2;
  private static final int __HASNEXT_ISSET_ID = 3;
  private static final int __START_ISSET_ID = 4;
  private static final int __LENGTH_ISSET_ID = 5;
  private static final int __SQUARECATEGORYID_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HITS, new org.apache.thrift.meta_data.FieldMetaData("hits", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ITEMS, new org.apache.thrift.meta_data.FieldMetaData("items", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SearchResultItem.class))));
    tmpMap.put(_Fields.HAS_NEXT, new org.apache.thrift.meta_data.FieldMetaData("hasNext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CAT, new org.apache.thrift.meta_data.FieldMetaData("cat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.ERROR, new org.apache.thrift.meta_data.FieldMetaData("error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAB_TITLE, new org.apache.thrift.meta_data.FieldMetaData("tabTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SQUARE_CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("squareCategoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchResultCollection.class, metaDataMap);
  }

  public SearchResultCollection() {
  }

  public SearchResultCollection(
    int collection,
    java.lang.String title,
    int rank,
    int hits,
    java.util.List<SearchResultItem> items,
    boolean hasNext,
    java.util.List<java.lang.Integer> cat,
    java.lang.String error,
    java.lang.String tabTitle,
    int start,
    int length,
    int squareCategoryId)
  {
    this();
    this.collection = collection;
    setCollectionIsSet(true);
    this.title = title;
    this.rank = rank;
    setRankIsSet(true);
    this.hits = hits;
    setHitsIsSet(true);
    this.items = items;
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    this.cat = cat;
    this.error = error;
    this.tabTitle = tabTitle;
    this.start = start;
    setStartIsSet(true);
    this.length = length;
    setLengthIsSet(true);
    this.squareCategoryId = squareCategoryId;
    setSquareCategoryIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchResultCollection(SearchResultCollection other) {
    __isset_bitfield = other.__isset_bitfield;
    this.collection = other.collection;
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    this.rank = other.rank;
    this.hits = other.hits;
    if (other.isSetItems()) {
      java.util.List<SearchResultItem> __this__items = new java.util.ArrayList<SearchResultItem>(other.items.size());
      for (SearchResultItem other_element : other.items) {
        __this__items.add(new SearchResultItem(other_element));
      }
      this.items = __this__items;
    }
    this.hasNext = other.hasNext;
    if (other.isSetCat()) {
      java.util.List<java.lang.Integer> __this__cat = new java.util.ArrayList<java.lang.Integer>(other.cat);
      this.cat = __this__cat;
    }
    if (other.isSetError()) {
      this.error = other.error;
    }
    if (other.isSetTabTitle()) {
      this.tabTitle = other.tabTitle;
    }
    this.start = other.start;
    this.length = other.length;
    this.squareCategoryId = other.squareCategoryId;
  }

  public SearchResultCollection deepCopy() {
    return new SearchResultCollection(this);
  }

  @Override
  public void clear() {
    setCollectionIsSet(false);
    this.collection = 0;
    this.title = null;
    setRankIsSet(false);
    this.rank = 0;
    setHitsIsSet(false);
    this.hits = 0;
    this.items = null;
    setHasNextIsSet(false);
    this.hasNext = false;
    this.cat = null;
    this.error = null;
    this.tabTitle = null;
    setStartIsSet(false);
    this.start = 0;
    setLengthIsSet(false);
    this.length = 0;
    setSquareCategoryIdIsSet(false);
    this.squareCategoryId = 0;
  }

  public int getCollection() {
    return this.collection;
  }

  public SearchResultCollection setCollection(int collection) {
    this.collection = collection;
    setCollectionIsSet(true);
    return this;
  }

  public void unsetCollection() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COLLECTION_ISSET_ID);
  }

  /** Returns true if field collection is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COLLECTION_ISSET_ID);
  }

  public void setCollectionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COLLECTION_ISSET_ID, value);
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public SearchResultCollection setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public int getRank() {
    return this.rank;
  }

  public SearchResultCollection setRank(int rank) {
    this.rank = rank;
    setRankIsSet(true);
    return this;
  }

  public void unsetRank() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  /** Returns true if field rank is set (has been assigned a value) and false otherwise */
  public boolean isSetRank() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANK_ISSET_ID);
  }

  public void setRankIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANK_ISSET_ID, value);
  }

  public int getHits() {
    return this.hits;
  }

  public SearchResultCollection setHits(int hits) {
    this.hits = hits;
    setHitsIsSet(true);
    return this;
  }

  public void unsetHits() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HITS_ISSET_ID);
  }

  /** Returns true if field hits is set (has been assigned a value) and false otherwise */
  public boolean isSetHits() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HITS_ISSET_ID);
  }

  public void setHitsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HITS_ISSET_ID, value);
  }

  public int getItemsSize() {
    return (this.items == null) ? 0 : this.items.size();
  }

  public java.util.Iterator<SearchResultItem> getItemsIterator() {
    return (this.items == null) ? null : this.items.iterator();
  }

  public void addToItems(SearchResultItem elem) {
    if (this.items == null) {
      this.items = new java.util.ArrayList<SearchResultItem>();
    }
    this.items.add(elem);
  }

  public java.util.List<SearchResultItem> getItems() {
    return this.items;
  }

  public SearchResultCollection setItems(java.util.List<SearchResultItem> items) {
    this.items = items;
    return this;
  }

  public void unsetItems() {
    this.items = null;
  }

  /** Returns true if field items is set (has been assigned a value) and false otherwise */
  public boolean isSetItems() {
    return this.items != null;
  }

  public void setItemsIsSet(boolean value) {
    if (!value) {
      this.items = null;
    }
  }

  public boolean isHasNext() {
    return this.hasNext;
  }

  public SearchResultCollection setHasNext(boolean hasNext) {
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    return this;
  }

  public void unsetHasNext() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  /** Returns true if field hasNext is set (has been assigned a value) and false otherwise */
  public boolean isSetHasNext() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  public void setHasNextIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASNEXT_ISSET_ID, value);
  }

  public int getCatSize() {
    return (this.cat == null) ? 0 : this.cat.size();
  }

  public java.util.Iterator<java.lang.Integer> getCatIterator() {
    return (this.cat == null) ? null : this.cat.iterator();
  }

  public void addToCat(int elem) {
    if (this.cat == null) {
      this.cat = new java.util.ArrayList<java.lang.Integer>();
    }
    this.cat.add(elem);
  }

  public java.util.List<java.lang.Integer> getCat() {
    return this.cat;
  }

  public SearchResultCollection setCat(java.util.List<java.lang.Integer> cat) {
    this.cat = cat;
    return this;
  }

  public void unsetCat() {
    this.cat = null;
  }

  /** Returns true if field cat is set (has been assigned a value) and false otherwise */
  public boolean isSetCat() {
    return this.cat != null;
  }

  public void setCatIsSet(boolean value) {
    if (!value) {
      this.cat = null;
    }
  }

  public java.lang.String getError() {
    return this.error;
  }

  public SearchResultCollection setError(java.lang.String error) {
    this.error = error;
    return this;
  }

  public void unsetError() {
    this.error = null;
  }

  /** Returns true if field error is set (has been assigned a value) and false otherwise */
  public boolean isSetError() {
    return this.error != null;
  }

  public void setErrorIsSet(boolean value) {
    if (!value) {
      this.error = null;
    }
  }

  public java.lang.String getTabTitle() {
    return this.tabTitle;
  }

  public SearchResultCollection setTabTitle(java.lang.String tabTitle) {
    this.tabTitle = tabTitle;
    return this;
  }

  public void unsetTabTitle() {
    this.tabTitle = null;
  }

  /** Returns true if field tabTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetTabTitle() {
    return this.tabTitle != null;
  }

  public void setTabTitleIsSet(boolean value) {
    if (!value) {
      this.tabTitle = null;
    }
  }

  public int getStart() {
    return this.start;
  }

  public SearchResultCollection setStart(int start) {
    this.start = start;
    setStartIsSet(true);
    return this;
  }

  public void unsetStart() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
  }

  /** Returns true if field start is set (has been assigned a value) and false otherwise */
  public boolean isSetStart() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
  }

  public void setStartIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
  }

  public int getLength() {
    return this.length;
  }

  public SearchResultCollection setLength(int length) {
    this.length = length;
    setLengthIsSet(true);
    return this;
  }

  public void unsetLength() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  /** Returns true if field length is set (has been assigned a value) and false otherwise */
  public boolean isSetLength() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
  }

  public void setLengthIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
  }

  public int getSquareCategoryId() {
    return this.squareCategoryId;
  }

  public SearchResultCollection setSquareCategoryId(int squareCategoryId) {
    this.squareCategoryId = squareCategoryId;
    setSquareCategoryIdIsSet(true);
    return this;
  }

  public void unsetSquareCategoryId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SQUARECATEGORYID_ISSET_ID);
  }

  /** Returns true if field squareCategoryId is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareCategoryId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SQUARECATEGORYID_ISSET_ID);
  }

  public void setSquareCategoryIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SQUARECATEGORYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case COLLECTION:
      if (value == null) {
        unsetCollection();
      } else {
        setCollection((java.lang.Integer)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case RANK:
      if (value == null) {
        unsetRank();
      } else {
        setRank((java.lang.Integer)value);
      }
      break;

    case HITS:
      if (value == null) {
        unsetHits();
      } else {
        setHits((java.lang.Integer)value);
      }
      break;

    case ITEMS:
      if (value == null) {
        unsetItems();
      } else {
        setItems((java.util.List<SearchResultItem>)value);
      }
      break;

    case HAS_NEXT:
      if (value == null) {
        unsetHasNext();
      } else {
        setHasNext((java.lang.Boolean)value);
      }
      break;

    case CAT:
      if (value == null) {
        unsetCat();
      } else {
        setCat((java.util.List<java.lang.Integer>)value);
      }
      break;

    case ERROR:
      if (value == null) {
        unsetError();
      } else {
        setError((java.lang.String)value);
      }
      break;

    case TAB_TITLE:
      if (value == null) {
        unsetTabTitle();
      } else {
        setTabTitle((java.lang.String)value);
      }
      break;

    case START:
      if (value == null) {
        unsetStart();
      } else {
        setStart((java.lang.Integer)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((java.lang.Integer)value);
      }
      break;

    case SQUARE_CATEGORY_ID:
      if (value == null) {
        unsetSquareCategoryId();
      } else {
        setSquareCategoryId((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION:
      return getCollection();

    case TITLE:
      return getTitle();

    case RANK:
      return getRank();

    case HITS:
      return getHits();

    case ITEMS:
      return getItems();

    case HAS_NEXT:
      return isHasNext();

    case CAT:
      return getCat();

    case ERROR:
      return getError();

    case TAB_TITLE:
      return getTabTitle();

    case START:
      return getStart();

    case LENGTH:
      return getLength();

    case SQUARE_CATEGORY_ID:
      return getSquareCategoryId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION:
      return isSetCollection();
    case TITLE:
      return isSetTitle();
    case RANK:
      return isSetRank();
    case HITS:
      return isSetHits();
    case ITEMS:
      return isSetItems();
    case HAS_NEXT:
      return isSetHasNext();
    case CAT:
      return isSetCat();
    case ERROR:
      return isSetError();
    case TAB_TITLE:
      return isSetTabTitle();
    case START:
      return isSetStart();
    case LENGTH:
      return isSetLength();
    case SQUARE_CATEGORY_ID:
      return isSetSquareCategoryId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchResultCollection)
      return this.equals((SearchResultCollection)that);
    return false;
  }

  public boolean equals(SearchResultCollection that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_collection = true;
    boolean that_present_collection = true;
    if (this_present_collection || that_present_collection) {
      if (!(this_present_collection && that_present_collection))
        return false;
      if (this.collection != that.collection)
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_rank = true;
    boolean that_present_rank = true;
    if (this_present_rank || that_present_rank) {
      if (!(this_present_rank && that_present_rank))
        return false;
      if (this.rank != that.rank)
        return false;
    }

    boolean this_present_hits = true;
    boolean that_present_hits = true;
    if (this_present_hits || that_present_hits) {
      if (!(this_present_hits && that_present_hits))
        return false;
      if (this.hits != that.hits)
        return false;
    }

    boolean this_present_items = true && this.isSetItems();
    boolean that_present_items = true && that.isSetItems();
    if (this_present_items || that_present_items) {
      if (!(this_present_items && that_present_items))
        return false;
      if (!this.items.equals(that.items))
        return false;
    }

    boolean this_present_hasNext = true;
    boolean that_present_hasNext = true;
    if (this_present_hasNext || that_present_hasNext) {
      if (!(this_present_hasNext && that_present_hasNext))
        return false;
      if (this.hasNext != that.hasNext)
        return false;
    }

    boolean this_present_cat = true && this.isSetCat();
    boolean that_present_cat = true && that.isSetCat();
    if (this_present_cat || that_present_cat) {
      if (!(this_present_cat && that_present_cat))
        return false;
      if (!this.cat.equals(that.cat))
        return false;
    }

    boolean this_present_error = true && this.isSetError();
    boolean that_present_error = true && that.isSetError();
    if (this_present_error || that_present_error) {
      if (!(this_present_error && that_present_error))
        return false;
      if (!this.error.equals(that.error))
        return false;
    }

    boolean this_present_tabTitle = true && this.isSetTabTitle();
    boolean that_present_tabTitle = true && that.isSetTabTitle();
    if (this_present_tabTitle || that_present_tabTitle) {
      if (!(this_present_tabTitle && that_present_tabTitle))
        return false;
      if (!this.tabTitle.equals(that.tabTitle))
        return false;
    }

    boolean this_present_start = true;
    boolean that_present_start = true;
    if (this_present_start || that_present_start) {
      if (!(this_present_start && that_present_start))
        return false;
      if (this.start != that.start)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_squareCategoryId = true;
    boolean that_present_squareCategoryId = true;
    if (this_present_squareCategoryId || that_present_squareCategoryId) {
      if (!(this_present_squareCategoryId && that_present_squareCategoryId))
        return false;
      if (this.squareCategoryId != that.squareCategoryId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + collection;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + rank;

    hashCode = hashCode * 8191 + hits;

    hashCode = hashCode * 8191 + ((isSetItems()) ? 131071 : 524287);
    if (isSetItems())
      hashCode = hashCode * 8191 + items.hashCode();

    hashCode = hashCode * 8191 + ((hasNext) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCat()) ? 131071 : 524287);
    if (isSetCat())
      hashCode = hashCode * 8191 + cat.hashCode();

    hashCode = hashCode * 8191 + ((isSetError()) ? 131071 : 524287);
    if (isSetError())
      hashCode = hashCode * 8191 + error.hashCode();

    hashCode = hashCode * 8191 + ((isSetTabTitle()) ? 131071 : 524287);
    if (isSetTabTitle())
      hashCode = hashCode * 8191 + tabTitle.hashCode();

    hashCode = hashCode * 8191 + start;

    hashCode = hashCode * 8191 + length;

    hashCode = hashCode * 8191 + squareCategoryId;

    return hashCode;
  }

  @Override
  public int compareTo(SearchResultCollection other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCollection()).compareTo(other.isSetCollection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, other.collection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRank()).compareTo(other.isSetRank());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRank()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, other.rank);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHits()).compareTo(other.isSetHits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hits, other.hits);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetItems()).compareTo(other.isSetItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.items, other.items);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHasNext()).compareTo(other.isSetHasNext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasNext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasNext, other.hasNext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCat()).compareTo(other.isSetCat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cat, other.cat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetError()).compareTo(other.isSetError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.error, other.error);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTabTitle()).compareTo(other.isSetTabTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTabTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tabTitle, other.tabTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStart()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLength()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSquareCategoryId()).compareTo(other.isSetSquareCategoryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareCategoryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareCategoryId, other.squareCategoryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SearchResultCollection(");
    boolean first = true;

    sb.append("collection:");
    sb.append(this.collection);
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rank:");
    sb.append(this.rank);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hits:");
    sb.append(this.hits);
    first = false;
    if (!first) sb.append(", ");
    sb.append("items:");
    if (this.items == null) {
      sb.append("null");
    } else {
      sb.append(this.items);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasNext:");
    sb.append(this.hasNext);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cat:");
    if (this.cat == null) {
      sb.append("null");
    } else {
      sb.append(this.cat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("error:");
    if (this.error == null) {
      sb.append("null");
    } else {
      sb.append(this.error);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tabTitle:");
    if (this.tabTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.tabTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("start:");
    sb.append(this.start);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareCategoryId:");
    sb.append(this.squareCategoryId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchResultCollectionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchResultCollectionStandardScheme getScheme() {
      return new SearchResultCollectionStandardScheme();
    }
  }

  private static class SearchResultCollectionStandardScheme extends org.apache.thrift.scheme.StandardScheme<SearchResultCollection> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchResultCollection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.collection = iprot.readI32();
              struct.setCollectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RANK
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rank = iprot.readI32();
              struct.setRankIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HITS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hits = iprot.readI32();
              struct.setHitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list126 = iprot.readListBegin();
                struct.items = new java.util.ArrayList<SearchResultItem>(_list126.size);
                SearchResultItem _elem127;
                for (int _i128 = 0; _i128 < _list126.size; ++_i128)
                {
                  _elem127 = new SearchResultItem();
                  _elem127.read(iprot);
                  struct.items.add(_elem127);
                }
                iprot.readListEnd();
              }
              struct.setItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // HAS_NEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasNext = iprot.readBool();
              struct.setHasNextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CAT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list129 = iprot.readListBegin();
                struct.cat = new java.util.ArrayList<java.lang.Integer>(_list129.size);
                int _elem130;
                for (int _i131 = 0; _i131 < _list129.size; ++_i131)
                {
                  _elem130 = iprot.readI32();
                  struct.cat.add(_elem130);
                }
                iprot.readListEnd();
              }
              struct.setCatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.error = iprot.readString();
              struct.setErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TAB_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tabTitle = iprot.readString();
              struct.setTabTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // START
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.start = iprot.readI32();
              struct.setStartIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // LENGTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.length = iprot.readI32();
              struct.setLengthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SQUARE_CATEGORY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.squareCategoryId = iprot.readI32();
              struct.setSquareCategoryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchResultCollection struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
      oprot.writeI32(struct.collection);
      oprot.writeFieldEnd();
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RANK_FIELD_DESC);
      oprot.writeI32(struct.rank);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HITS_FIELD_DESC);
      oprot.writeI32(struct.hits);
      oprot.writeFieldEnd();
      if (struct.items != null) {
        oprot.writeFieldBegin(ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.items.size()));
          for (SearchResultItem _iter132 : struct.items)
          {
            _iter132.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
      oprot.writeBool(struct.hasNext);
      oprot.writeFieldEnd();
      if (struct.cat != null) {
        oprot.writeFieldBegin(CAT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.cat.size()));
          for (int _iter133 : struct.cat)
          {
            oprot.writeI32(_iter133);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.error != null) {
        oprot.writeFieldBegin(ERROR_FIELD_DESC);
        oprot.writeString(struct.error);
        oprot.writeFieldEnd();
      }
      if (struct.tabTitle != null) {
        oprot.writeFieldBegin(TAB_TITLE_FIELD_DESC);
        oprot.writeString(struct.tabTitle);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(START_FIELD_DESC);
      oprot.writeI32(struct.start);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(struct.length);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SQUARE_CATEGORY_ID_FIELD_DESC);
      oprot.writeI32(struct.squareCategoryId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchResultCollectionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SearchResultCollectionTupleScheme getScheme() {
      return new SearchResultCollectionTupleScheme();
    }
  }

  private static class SearchResultCollectionTupleScheme extends org.apache.thrift.scheme.TupleScheme<SearchResultCollection> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchResultCollection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCollection()) {
        optionals.set(0);
      }
      if (struct.isSetTitle()) {
        optionals.set(1);
      }
      if (struct.isSetRank()) {
        optionals.set(2);
      }
      if (struct.isSetHits()) {
        optionals.set(3);
      }
      if (struct.isSetItems()) {
        optionals.set(4);
      }
      if (struct.isSetHasNext()) {
        optionals.set(5);
      }
      if (struct.isSetCat()) {
        optionals.set(6);
      }
      if (struct.isSetError()) {
        optionals.set(7);
      }
      if (struct.isSetTabTitle()) {
        optionals.set(8);
      }
      if (struct.isSetStart()) {
        optionals.set(9);
      }
      if (struct.isSetLength()) {
        optionals.set(10);
      }
      if (struct.isSetSquareCategoryId()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetCollection()) {
        oprot.writeI32(struct.collection);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetRank()) {
        oprot.writeI32(struct.rank);
      }
      if (struct.isSetHits()) {
        oprot.writeI32(struct.hits);
      }
      if (struct.isSetItems()) {
        {
          oprot.writeI32(struct.items.size());
          for (SearchResultItem _iter134 : struct.items)
          {
            _iter134.write(oprot);
          }
        }
      }
      if (struct.isSetHasNext()) {
        oprot.writeBool(struct.hasNext);
      }
      if (struct.isSetCat()) {
        {
          oprot.writeI32(struct.cat.size());
          for (int _iter135 : struct.cat)
          {
            oprot.writeI32(_iter135);
          }
        }
      }
      if (struct.isSetError()) {
        oprot.writeString(struct.error);
      }
      if (struct.isSetTabTitle()) {
        oprot.writeString(struct.tabTitle);
      }
      if (struct.isSetStart()) {
        oprot.writeI32(struct.start);
      }
      if (struct.isSetLength()) {
        oprot.writeI32(struct.length);
      }
      if (struct.isSetSquareCategoryId()) {
        oprot.writeI32(struct.squareCategoryId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchResultCollection struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.collection = iprot.readI32();
        struct.setCollectionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rank = iprot.readI32();
        struct.setRankIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hits = iprot.readI32();
        struct.setHitsIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list136 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.items = new java.util.ArrayList<SearchResultItem>(_list136.size);
          SearchResultItem _elem137;
          for (int _i138 = 0; _i138 < _list136.size; ++_i138)
          {
            _elem137 = new SearchResultItem();
            _elem137.read(iprot);
            struct.items.add(_elem137);
          }
        }
        struct.setItemsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.hasNext = iprot.readBool();
        struct.setHasNextIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list139 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.cat = new java.util.ArrayList<java.lang.Integer>(_list139.size);
          int _elem140;
          for (int _i141 = 0; _i141 < _list139.size; ++_i141)
          {
            _elem140 = iprot.readI32();
            struct.cat.add(_elem140);
          }
        }
        struct.setCatIsSet(true);
      }
      if (incoming.get(7)) {
        struct.error = iprot.readString();
        struct.setErrorIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tabTitle = iprot.readString();
        struct.setTabTitleIsSet(true);
      }
      if (incoming.get(9)) {
        struct.start = iprot.readI32();
        struct.setStartIsSet(true);
      }
      if (incoming.get(10)) {
        struct.length = iprot.readI32();
        struct.setLengthIsSet(true);
      }
      if (incoming.get(11)) {
        struct.squareCategoryId = iprot.readI32();
        struct.setSquareCategoryIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

