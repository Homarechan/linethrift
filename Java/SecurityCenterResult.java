/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class SecurityCenterResult implements org.apache.thrift.TBase<SecurityCenterResult, SecurityCenterResult._Fields>, java.io.Serializable, Cloneable, Comparable<SecurityCenterResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SecurityCenterResult");

  private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COOKIE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("cookiePath", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SKIP_FIELD_DESC = new org.apache.thrift.protocol.TField("skip", org.apache.thrift.protocol.TType.BOOL, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SecurityCenterResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SecurityCenterResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String uri; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String token; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String cookiePath; // required
  public boolean skip; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    URI((short)1, "uri"),
    TOKEN((short)2, "token"),
    COOKIE_PATH((short)3, "cookiePath"),
    SKIP((short)4, "skip");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // URI
          return URI;
        case 2: // TOKEN
          return TOKEN;
        case 3: // COOKIE_PATH
          return COOKIE_PATH;
        case 4: // SKIP
          return SKIP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SKIP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COOKIE_PATH, new org.apache.thrift.meta_data.FieldMetaData("cookiePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SKIP, new org.apache.thrift.meta_data.FieldMetaData("skip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SecurityCenterResult.class, metaDataMap);
  }

  public SecurityCenterResult() {
  }

  public SecurityCenterResult(
    java.lang.String uri,
    java.lang.String token,
    java.lang.String cookiePath,
    boolean skip)
  {
    this();
    this.uri = uri;
    this.token = token;
    this.cookiePath = cookiePath;
    this.skip = skip;
    setSkipIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SecurityCenterResult(SecurityCenterResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUri()) {
      this.uri = other.uri;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetCookiePath()) {
      this.cookiePath = other.cookiePath;
    }
    this.skip = other.skip;
  }

  public SecurityCenterResult deepCopy() {
    return new SecurityCenterResult(this);
  }

  @Override
  public void clear() {
    this.uri = null;
    this.token = null;
    this.cookiePath = null;
    setSkipIsSet(false);
    this.skip = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUri() {
    return this.uri;
  }

  public SecurityCenterResult setUri(@org.apache.thrift.annotation.Nullable java.lang.String uri) {
    this.uri = uri;
    return this;
  }

  public void unsetUri() {
    this.uri = null;
  }

  /** Returns true if field uri is set (has been assigned a value) and false otherwise */
  public boolean isSetUri() {
    return this.uri != null;
  }

  public void setUriIsSet(boolean value) {
    if (!value) {
      this.uri = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToken() {
    return this.token;
  }

  public SecurityCenterResult setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCookiePath() {
    return this.cookiePath;
  }

  public SecurityCenterResult setCookiePath(@org.apache.thrift.annotation.Nullable java.lang.String cookiePath) {
    this.cookiePath = cookiePath;
    return this;
  }

  public void unsetCookiePath() {
    this.cookiePath = null;
  }

  /** Returns true if field cookiePath is set (has been assigned a value) and false otherwise */
  public boolean isSetCookiePath() {
    return this.cookiePath != null;
  }

  public void setCookiePathIsSet(boolean value) {
    if (!value) {
      this.cookiePath = null;
    }
  }

  public boolean isSkip() {
    return this.skip;
  }

  public SecurityCenterResult setSkip(boolean skip) {
    this.skip = skip;
    setSkipIsSet(true);
    return this;
  }

  public void unsetSkip() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SKIP_ISSET_ID);
  }

  /** Returns true if field skip is set (has been assigned a value) and false otherwise */
  public boolean isSetSkip() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SKIP_ISSET_ID);
  }

  public void setSkipIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SKIP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case URI:
      if (value == null) {
        unsetUri();
      } else {
        setUri((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case COOKIE_PATH:
      if (value == null) {
        unsetCookiePath();
      } else {
        setCookiePath((java.lang.String)value);
      }
      break;

    case SKIP:
      if (value == null) {
        unsetSkip();
      } else {
        setSkip((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case URI:
      return getUri();

    case TOKEN:
      return getToken();

    case COOKIE_PATH:
      return getCookiePath();

    case SKIP:
      return isSkip();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case URI:
      return isSetUri();
    case TOKEN:
      return isSetToken();
    case COOKIE_PATH:
      return isSetCookiePath();
    case SKIP:
      return isSetSkip();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof SecurityCenterResult)
      return this.equals((SecurityCenterResult)that);
    return false;
  }

  public boolean equals(SecurityCenterResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uri = true && this.isSetUri();
    boolean that_present_uri = true && that.isSetUri();
    if (this_present_uri || that_present_uri) {
      if (!(this_present_uri && that_present_uri))
        return false;
      if (!this.uri.equals(that.uri))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_cookiePath = true && this.isSetCookiePath();
    boolean that_present_cookiePath = true && that.isSetCookiePath();
    if (this_present_cookiePath || that_present_cookiePath) {
      if (!(this_present_cookiePath && that_present_cookiePath))
        return false;
      if (!this.cookiePath.equals(that.cookiePath))
        return false;
    }

    boolean this_present_skip = true;
    boolean that_present_skip = true;
    if (this_present_skip || that_present_skip) {
      if (!(this_present_skip && that_present_skip))
        return false;
      if (this.skip != that.skip)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUri()) ? 131071 : 524287);
    if (isSetUri())
      hashCode = hashCode * 8191 + uri.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetCookiePath()) ? 131071 : 524287);
    if (isSetCookiePath())
      hashCode = hashCode * 8191 + cookiePath.hashCode();

    hashCode = hashCode * 8191 + ((skip) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(SecurityCenterResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUri(), other.isSetUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCookiePath(), other.isSetCookiePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCookiePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cookiePath, other.cookiePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSkip(), other.isSetSkip());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSkip()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.skip, other.skip);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SecurityCenterResult(");
    boolean first = true;

    sb.append("uri:");
    if (this.uri == null) {
      sb.append("null");
    } else {
      sb.append(this.uri);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("cookiePath:");
    if (this.cookiePath == null) {
      sb.append("null");
    } else {
      sb.append(this.cookiePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("skip:");
    sb.append(this.skip);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SecurityCenterResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SecurityCenterResultStandardScheme getScheme() {
      return new SecurityCenterResultStandardScheme();
    }
  }

  private static class SecurityCenterResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<SecurityCenterResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SecurityCenterResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uri = iprot.readString();
              struct.setUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COOKIE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cookiePath = iprot.readString();
              struct.setCookiePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SKIP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.skip = iprot.readBool();
              struct.setSkipIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SecurityCenterResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uri != null) {
        oprot.writeFieldBegin(URI_FIELD_DESC);
        oprot.writeString(struct.uri);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.cookiePath != null) {
        oprot.writeFieldBegin(COOKIE_PATH_FIELD_DESC);
        oprot.writeString(struct.cookiePath);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SKIP_FIELD_DESC);
      oprot.writeBool(struct.skip);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SecurityCenterResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SecurityCenterResultTupleScheme getScheme() {
      return new SecurityCenterResultTupleScheme();
    }
  }

  private static class SecurityCenterResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<SecurityCenterResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SecurityCenterResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUri()) {
        optionals.set(0);
      }
      if (struct.isSetToken()) {
        optionals.set(1);
      }
      if (struct.isSetCookiePath()) {
        optionals.set(2);
      }
      if (struct.isSetSkip()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetUri()) {
        oprot.writeString(struct.uri);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetCookiePath()) {
        oprot.writeString(struct.cookiePath);
      }
      if (struct.isSetSkip()) {
        oprot.writeBool(struct.skip);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SecurityCenterResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.uri = iprot.readString();
        struct.setUriIsSet(true);
      }
      if (incoming.get(1)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cookiePath = iprot.readString();
        struct.setCookiePathIsSet(true);
      }
      if (incoming.get(3)) {
        struct.skip = iprot.readBool();
        struct.setSkipIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

