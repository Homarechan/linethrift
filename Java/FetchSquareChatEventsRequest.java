/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class FetchSquareChatEventsRequest implements org.apache.thrift.TBase<FetchSquareChatEventsRequest, FetchSquareChatEventsRequest._Fields>, java.io.Serializable, Cloneable, Comparable<FetchSquareChatEventsRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FetchSquareChatEventsRequest");

  private static final org.apache.thrift.protocol.TField SUBSCRIPTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subscriptionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SQUARE_CHAT_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("squareChatMid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SYNC_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("syncToken", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField DIRECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("direction", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FetchSquareChatEventsRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FetchSquareChatEventsRequestTupleSchemeFactory();

  public long subscriptionId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String squareChatMid; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String syncToken; // required
  public int limit; // required
  /**
   * 
   * @see FetchDirection
   */
  public @org.apache.thrift.annotation.Nullable FetchDirection direction; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SUBSCRIPTION_ID((short)1, "subscriptionId"),
    SQUARE_CHAT_MID((short)2, "squareChatMid"),
    SYNC_TOKEN((short)3, "syncToken"),
    LIMIT((short)4, "limit"),
    /**
     * 
     * @see FetchDirection
     */
    DIRECTION((short)5, "direction");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUBSCRIPTION_ID
          return SUBSCRIPTION_ID;
        case 2: // SQUARE_CHAT_MID
          return SQUARE_CHAT_MID;
        case 3: // SYNC_TOKEN
          return SYNC_TOKEN;
        case 4: // LIMIT
          return LIMIT;
        case 5: // DIRECTION
          return DIRECTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBSCRIPTIONID_ISSET_ID = 0;
  private static final int __LIMIT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUBSCRIPTION_ID, new org.apache.thrift.meta_data.FieldMetaData("subscriptionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SQUARE_CHAT_MID, new org.apache.thrift.meta_data.FieldMetaData("squareChatMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SYNC_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("syncToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DIRECTION, new org.apache.thrift.meta_data.FieldMetaData("direction", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FetchDirection.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FetchSquareChatEventsRequest.class, metaDataMap);
  }

  public FetchSquareChatEventsRequest() {
  }

  public FetchSquareChatEventsRequest(
    long subscriptionId,
    java.lang.String squareChatMid,
    java.lang.String syncToken,
    int limit,
    FetchDirection direction)
  {
    this();
    this.subscriptionId = subscriptionId;
    setSubscriptionIdIsSet(true);
    this.squareChatMid = squareChatMid;
    this.syncToken = syncToken;
    this.limit = limit;
    setLimitIsSet(true);
    this.direction = direction;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FetchSquareChatEventsRequest(FetchSquareChatEventsRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.subscriptionId = other.subscriptionId;
    if (other.isSetSquareChatMid()) {
      this.squareChatMid = other.squareChatMid;
    }
    if (other.isSetSyncToken()) {
      this.syncToken = other.syncToken;
    }
    this.limit = other.limit;
    if (other.isSetDirection()) {
      this.direction = other.direction;
    }
  }

  public FetchSquareChatEventsRequest deepCopy() {
    return new FetchSquareChatEventsRequest(this);
  }

  @Override
  public void clear() {
    setSubscriptionIdIsSet(false);
    this.subscriptionId = 0;
    this.squareChatMid = null;
    this.syncToken = null;
    setLimitIsSet(false);
    this.limit = 0;
    this.direction = null;
  }

  public long getSubscriptionId() {
    return this.subscriptionId;
  }

  public FetchSquareChatEventsRequest setSubscriptionId(long subscriptionId) {
    this.subscriptionId = subscriptionId;
    setSubscriptionIdIsSet(true);
    return this;
  }

  public void unsetSubscriptionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBSCRIPTIONID_ISSET_ID);
  }

  /** Returns true if field subscriptionId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubscriptionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBSCRIPTIONID_ISSET_ID);
  }

  public void setSubscriptionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBSCRIPTIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSquareChatMid() {
    return this.squareChatMid;
  }

  public FetchSquareChatEventsRequest setSquareChatMid(@org.apache.thrift.annotation.Nullable java.lang.String squareChatMid) {
    this.squareChatMid = squareChatMid;
    return this;
  }

  public void unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  /** Returns true if field squareChatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatMid() {
    return this.squareChatMid != null;
  }

  public void setSquareChatMidIsSet(boolean value) {
    if (!value) {
      this.squareChatMid = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSyncToken() {
    return this.syncToken;
  }

  public FetchSquareChatEventsRequest setSyncToken(@org.apache.thrift.annotation.Nullable java.lang.String syncToken) {
    this.syncToken = syncToken;
    return this;
  }

  public void unsetSyncToken() {
    this.syncToken = null;
  }

  /** Returns true if field syncToken is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncToken() {
    return this.syncToken != null;
  }

  public void setSyncTokenIsSet(boolean value) {
    if (!value) {
      this.syncToken = null;
    }
  }

  public int getLimit() {
    return this.limit;
  }

  public FetchSquareChatEventsRequest setLimit(int limit) {
    this.limit = limit;
    setLimitIsSet(true);
    return this;
  }

  public void unsetLimit() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
  }

  public void setLimitIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
  }

  /**
   * 
   * @see FetchDirection
   */
  @org.apache.thrift.annotation.Nullable
  public FetchDirection getDirection() {
    return this.direction;
  }

  /**
   * 
   * @see FetchDirection
   */
  public FetchSquareChatEventsRequest setDirection(@org.apache.thrift.annotation.Nullable FetchDirection direction) {
    this.direction = direction;
    return this;
  }

  public void unsetDirection() {
    this.direction = null;
  }

  /** Returns true if field direction is set (has been assigned a value) and false otherwise */
  public boolean isSetDirection() {
    return this.direction != null;
  }

  public void setDirectionIsSet(boolean value) {
    if (!value) {
      this.direction = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case SUBSCRIPTION_ID:
      if (value == null) {
        unsetSubscriptionId();
      } else {
        setSubscriptionId((java.lang.Long)value);
      }
      break;

    case SQUARE_CHAT_MID:
      if (value == null) {
        unsetSquareChatMid();
      } else {
        setSquareChatMid((java.lang.String)value);
      }
      break;

    case SYNC_TOKEN:
      if (value == null) {
        unsetSyncToken();
      } else {
        setSyncToken((java.lang.String)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((java.lang.Integer)value);
      }
      break;

    case DIRECTION:
      if (value == null) {
        unsetDirection();
      } else {
        setDirection((FetchDirection)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUBSCRIPTION_ID:
      return getSubscriptionId();

    case SQUARE_CHAT_MID:
      return getSquareChatMid();

    case SYNC_TOKEN:
      return getSyncToken();

    case LIMIT:
      return getLimit();

    case DIRECTION:
      return getDirection();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUBSCRIPTION_ID:
      return isSetSubscriptionId();
    case SQUARE_CHAT_MID:
      return isSetSquareChatMid();
    case SYNC_TOKEN:
      return isSetSyncToken();
    case LIMIT:
      return isSetLimit();
    case DIRECTION:
      return isSetDirection();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof FetchSquareChatEventsRequest)
      return this.equals((FetchSquareChatEventsRequest)that);
    return false;
  }

  public boolean equals(FetchSquareChatEventsRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_subscriptionId = true;
    boolean that_present_subscriptionId = true;
    if (this_present_subscriptionId || that_present_subscriptionId) {
      if (!(this_present_subscriptionId && that_present_subscriptionId))
        return false;
      if (this.subscriptionId != that.subscriptionId)
        return false;
    }

    boolean this_present_squareChatMid = true && this.isSetSquareChatMid();
    boolean that_present_squareChatMid = true && that.isSetSquareChatMid();
    if (this_present_squareChatMid || that_present_squareChatMid) {
      if (!(this_present_squareChatMid && that_present_squareChatMid))
        return false;
      if (!this.squareChatMid.equals(that.squareChatMid))
        return false;
    }

    boolean this_present_syncToken = true && this.isSetSyncToken();
    boolean that_present_syncToken = true && that.isSetSyncToken();
    if (this_present_syncToken || that_present_syncToken) {
      if (!(this_present_syncToken && that_present_syncToken))
        return false;
      if (!this.syncToken.equals(that.syncToken))
        return false;
    }

    boolean this_present_limit = true;
    boolean that_present_limit = true;
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (this.limit != that.limit)
        return false;
    }

    boolean this_present_direction = true && this.isSetDirection();
    boolean that_present_direction = true && that.isSetDirection();
    if (this_present_direction || that_present_direction) {
      if (!(this_present_direction && that_present_direction))
        return false;
      if (!this.direction.equals(that.direction))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(subscriptionId);

    hashCode = hashCode * 8191 + ((isSetSquareChatMid()) ? 131071 : 524287);
    if (isSetSquareChatMid())
      hashCode = hashCode * 8191 + squareChatMid.hashCode();

    hashCode = hashCode * 8191 + ((isSetSyncToken()) ? 131071 : 524287);
    if (isSetSyncToken())
      hashCode = hashCode * 8191 + syncToken.hashCode();

    hashCode = hashCode * 8191 + limit;

    hashCode = hashCode * 8191 + ((isSetDirection()) ? 131071 : 524287);
    if (isSetDirection())
      hashCode = hashCode * 8191 + direction.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(FetchSquareChatEventsRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetSubscriptionId(), other.isSetSubscriptionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubscriptionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subscriptionId, other.subscriptionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSquareChatMid(), other.isSetSquareChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareChatMid, other.squareChatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSyncToken(), other.isSetSyncToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.syncToken, other.syncToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLimit(), other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDirection(), other.isSetDirection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDirection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.direction, other.direction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("FetchSquareChatEventsRequest(");
    boolean first = true;

    sb.append("subscriptionId:");
    sb.append(this.subscriptionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareChatMid:");
    if (this.squareChatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncToken:");
    if (this.syncToken == null) {
      sb.append("null");
    } else {
      sb.append(this.syncToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    sb.append(this.limit);
    first = false;
    if (!first) sb.append(", ");
    sb.append("direction:");
    if (this.direction == null) {
      sb.append("null");
    } else {
      sb.append(this.direction);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FetchSquareChatEventsRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FetchSquareChatEventsRequestStandardScheme getScheme() {
      return new FetchSquareChatEventsRequestStandardScheme();
    }
  }

  private static class FetchSquareChatEventsRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<FetchSquareChatEventsRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FetchSquareChatEventsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUBSCRIPTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.subscriptionId = iprot.readI64();
              struct.setSubscriptionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SQUARE_CHAT_MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.squareChatMid = iprot.readString();
              struct.setSquareChatMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SYNC_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.syncToken = iprot.readString();
              struct.setSyncTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limit = iprot.readI32();
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DIRECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.direction = FetchDirection.findByValue(iprot.readI32());
              struct.setDirectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FetchSquareChatEventsRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SUBSCRIPTION_ID_FIELD_DESC);
      oprot.writeI64(struct.subscriptionId);
      oprot.writeFieldEnd();
      if (struct.squareChatMid != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
        oprot.writeString(struct.squareChatMid);
        oprot.writeFieldEnd();
      }
      if (struct.syncToken != null) {
        oprot.writeFieldBegin(SYNC_TOKEN_FIELD_DESC);
        oprot.writeString(struct.syncToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_FIELD_DESC);
      oprot.writeI32(struct.limit);
      oprot.writeFieldEnd();
      if (struct.direction != null) {
        oprot.writeFieldBegin(DIRECTION_FIELD_DESC);
        oprot.writeI32(struct.direction.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FetchSquareChatEventsRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public FetchSquareChatEventsRequestTupleScheme getScheme() {
      return new FetchSquareChatEventsRequestTupleScheme();
    }
  }

  private static class FetchSquareChatEventsRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<FetchSquareChatEventsRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FetchSquareChatEventsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSubscriptionId()) {
        optionals.set(0);
      }
      if (struct.isSetSquareChatMid()) {
        optionals.set(1);
      }
      if (struct.isSetSyncToken()) {
        optionals.set(2);
      }
      if (struct.isSetLimit()) {
        optionals.set(3);
      }
      if (struct.isSetDirection()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetSubscriptionId()) {
        oprot.writeI64(struct.subscriptionId);
      }
      if (struct.isSetSquareChatMid()) {
        oprot.writeString(struct.squareChatMid);
      }
      if (struct.isSetSyncToken()) {
        oprot.writeString(struct.syncToken);
      }
      if (struct.isSetLimit()) {
        oprot.writeI32(struct.limit);
      }
      if (struct.isSetDirection()) {
        oprot.writeI32(struct.direction.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FetchSquareChatEventsRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.subscriptionId = iprot.readI64();
        struct.setSubscriptionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.squareChatMid = iprot.readString();
        struct.setSquareChatMidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.syncToken = iprot.readString();
        struct.setSyncTokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.limit = iprot.readI32();
        struct.setLimitIsSet(true);
      }
      if (incoming.get(4)) {
        struct.direction = FetchDirection.findByValue(iprot.readI32());
        struct.setDirectionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

