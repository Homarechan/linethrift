/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-04-18")
public class Settings implements org.apache.thrift.TBase<Settings, Settings._Fields>, java.io.Serializable, Cloneable, Comparable<Settings> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Settings");

  private static final org.apache.thrift.protocol.TField NOTIFICATION_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationEnable", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_MUTE_EXPIRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationMuteExpiration", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_NEW_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationNewMessage", org.apache.thrift.protocol.TType.BOOL, (short)12);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_GROUP_INVITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationGroupInvitation", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_SHOW_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationShowMessage", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_INCOMING_CALL_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationIncomingCall", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_SOUND_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationSoundMessage", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_SOUND_GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationSoundGroup", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_DISABLED_WITH_SUB_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationDisabledWithSub", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField PRIVACY_SYNC_CONTACTS_FIELD_DESC = new org.apache.thrift.protocol.TField("privacySyncContacts", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField PRIVACY_SEARCH_BY_PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("privacySearchByPhoneNumber", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField PRIVACY_SEARCH_BY_USERID_FIELD_DESC = new org.apache.thrift.protocol.TField("privacySearchByUserid", org.apache.thrift.protocol.TType.BOOL, (short)22);
  private static final org.apache.thrift.protocol.TField PRIVACY_SEARCH_BY_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("privacySearchByEmail", org.apache.thrift.protocol.TType.BOOL, (short)23);
  private static final org.apache.thrift.protocol.TField PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN_FIELD_DESC = new org.apache.thrift.protocol.TField("privacyAllowSecondaryDeviceLogin", org.apache.thrift.protocol.TType.BOOL, (short)24);
  private static final org.apache.thrift.protocol.TField PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME_FIELD_DESC = new org.apache.thrift.protocol.TField("privacyProfileImagePostToMyhome", org.apache.thrift.protocol.TType.BOOL, (short)25);
  private static final org.apache.thrift.protocol.TField PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("privacyReceiveMessagesFromNotFriend", org.apache.thrift.protocol.TType.BOOL, (short)26);
  private static final org.apache.thrift.protocol.TField CONTACT_MY_TICKET_FIELD_DESC = new org.apache.thrift.protocol.TField("contactMyTicket", org.apache.thrift.protocol.TType.STRING, (short)30);
  private static final org.apache.thrift.protocol.TField IDENTITY_PROVIDER_FIELD_DESC = new org.apache.thrift.protocol.TField("identityProvider", org.apache.thrift.protocol.TType.I32, (short)40);
  private static final org.apache.thrift.protocol.TField IDENTITY_IDENTIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("identityIdentifier", org.apache.thrift.protocol.TType.STRING, (short)41);
  private static final org.apache.thrift.protocol.TField SNS_ACCOUNTS_FIELD_DESC = new org.apache.thrift.protocol.TField("snsAccounts", org.apache.thrift.protocol.TType.MAP, (short)42);
  private static final org.apache.thrift.protocol.TField PHONE_REGISTRATION_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneRegistration", org.apache.thrift.protocol.TType.BOOL, (short)43);
  private static final org.apache.thrift.protocol.TField EMAIL_CONFIRMATION_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("emailConfirmationStatus", org.apache.thrift.protocol.TType.I32, (short)44);
  private static final org.apache.thrift.protocol.TField PREFERENCE_LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("preferenceLocale", org.apache.thrift.protocol.TType.STRING, (short)50);
  private static final org.apache.thrift.protocol.TField CUSTOM_MODES_FIELD_DESC = new org.apache.thrift.protocol.TField("customModes", org.apache.thrift.protocol.TType.MAP, (short)60);
  private static final org.apache.thrift.protocol.TField E2EE_ENABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("e2eeEnable", org.apache.thrift.protocol.TType.BOOL, (short)61);
  private static final org.apache.thrift.protocol.TField HITOKOTO_BACKUP_REQUESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("hitokotoBackupRequested", org.apache.thrift.protocol.TType.BOOL, (short)62);
  private static final org.apache.thrift.protocol.TField PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME_FIELD_DESC = new org.apache.thrift.protocol.TField("privacyProfileMusicPostToMyhome", org.apache.thrift.protocol.TType.BOOL, (short)63);
  private static final org.apache.thrift.protocol.TField PRIVACY_ALLOW_NEARBY_FIELD_DESC = new org.apache.thrift.protocol.TField("privacyAllowNearby", org.apache.thrift.protocol.TType.BOOL, (short)65);
  private static final org.apache.thrift.protocol.TField AGREEMENT_NEARBY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("agreementNearbyTime", org.apache.thrift.protocol.TType.I64, (short)66);
  private static final org.apache.thrift.protocol.TField AGREEMENT_SQUARE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("agreementSquareTime", org.apache.thrift.protocol.TType.I64, (short)67);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_MENTION_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationMention", org.apache.thrift.protocol.TType.BOOL, (short)68);
  private static final org.apache.thrift.protocol.TField BOT_USE_AGREEMENT_ACCEPTED_AT_FIELD_DESC = new org.apache.thrift.protocol.TField("botUseAgreementAcceptedAt", org.apache.thrift.protocol.TType.I64, (short)69);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SettingsStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SettingsTupleSchemeFactory();

  public boolean notificationEnable; // required
  public long notificationMuteExpiration; // required
  public boolean notificationNewMessage; // required
  public boolean notificationGroupInvitation; // required
  public boolean notificationShowMessage; // required
  public boolean notificationIncomingCall; // required
  public java.lang.String notificationSoundMessage; // required
  public java.lang.String notificationSoundGroup; // required
  public boolean notificationDisabledWithSub; // required
  public boolean privacySyncContacts; // required
  public boolean privacySearchByPhoneNumber; // required
  public boolean privacySearchByUserid; // required
  public boolean privacySearchByEmail; // required
  public boolean privacyAllowSecondaryDeviceLogin; // required
  public boolean privacyProfileImagePostToMyhome; // required
  public boolean privacyReceiveMessagesFromNotFriend; // required
  public java.lang.String contactMyTicket; // required
  /**
   * 
   * @see IdentityProvider
   */
  public IdentityProvider identityProvider; // required
  public java.lang.String identityIdentifier; // required
  public java.util.Map<SnsIdType,java.lang.String> snsAccounts; // required
  public boolean phoneRegistration; // required
  /**
   * 
   * @see EmailConfirmationStatus
   */
  public EmailConfirmationStatus emailConfirmationStatus; // required
  public java.lang.String preferenceLocale; // required
  public java.util.Map<CustomMode,java.lang.String> customModes; // required
  public boolean e2eeEnable; // required
  public boolean hitokotoBackupRequested; // required
  public boolean privacyProfileMusicPostToMyhome; // required
  public boolean privacyAllowNearby; // required
  public long agreementNearbyTime; // required
  public long agreementSquareTime; // required
  public boolean notificationMention; // required
  public long botUseAgreementAcceptedAt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NOTIFICATION_ENABLE((short)10, "notificationEnable"),
    NOTIFICATION_MUTE_EXPIRATION((short)11, "notificationMuteExpiration"),
    NOTIFICATION_NEW_MESSAGE((short)12, "notificationNewMessage"),
    NOTIFICATION_GROUP_INVITATION((short)13, "notificationGroupInvitation"),
    NOTIFICATION_SHOW_MESSAGE((short)14, "notificationShowMessage"),
    NOTIFICATION_INCOMING_CALL((short)15, "notificationIncomingCall"),
    NOTIFICATION_SOUND_MESSAGE((short)16, "notificationSoundMessage"),
    NOTIFICATION_SOUND_GROUP((short)17, "notificationSoundGroup"),
    NOTIFICATION_DISABLED_WITH_SUB((short)18, "notificationDisabledWithSub"),
    PRIVACY_SYNC_CONTACTS((short)20, "privacySyncContacts"),
    PRIVACY_SEARCH_BY_PHONE_NUMBER((short)21, "privacySearchByPhoneNumber"),
    PRIVACY_SEARCH_BY_USERID((short)22, "privacySearchByUserid"),
    PRIVACY_SEARCH_BY_EMAIL((short)23, "privacySearchByEmail"),
    PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN((short)24, "privacyAllowSecondaryDeviceLogin"),
    PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME((short)25, "privacyProfileImagePostToMyhome"),
    PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND((short)26, "privacyReceiveMessagesFromNotFriend"),
    CONTACT_MY_TICKET((short)30, "contactMyTicket"),
    /**
     * 
     * @see IdentityProvider
     */
    IDENTITY_PROVIDER((short)40, "identityProvider"),
    IDENTITY_IDENTIFIER((short)41, "identityIdentifier"),
    SNS_ACCOUNTS((short)42, "snsAccounts"),
    PHONE_REGISTRATION((short)43, "phoneRegistration"),
    /**
     * 
     * @see EmailConfirmationStatus
     */
    EMAIL_CONFIRMATION_STATUS((short)44, "emailConfirmationStatus"),
    PREFERENCE_LOCALE((short)50, "preferenceLocale"),
    CUSTOM_MODES((short)60, "customModes"),
    E2EE_ENABLE((short)61, "e2eeEnable"),
    HITOKOTO_BACKUP_REQUESTED((short)62, "hitokotoBackupRequested"),
    PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME((short)63, "privacyProfileMusicPostToMyhome"),
    PRIVACY_ALLOW_NEARBY((short)65, "privacyAllowNearby"),
    AGREEMENT_NEARBY_TIME((short)66, "agreementNearbyTime"),
    AGREEMENT_SQUARE_TIME((short)67, "agreementSquareTime"),
    NOTIFICATION_MENTION((short)68, "notificationMention"),
    BOT_USE_AGREEMENT_ACCEPTED_AT((short)69, "botUseAgreementAcceptedAt");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 10: // NOTIFICATION_ENABLE
          return NOTIFICATION_ENABLE;
        case 11: // NOTIFICATION_MUTE_EXPIRATION
          return NOTIFICATION_MUTE_EXPIRATION;
        case 12: // NOTIFICATION_NEW_MESSAGE
          return NOTIFICATION_NEW_MESSAGE;
        case 13: // NOTIFICATION_GROUP_INVITATION
          return NOTIFICATION_GROUP_INVITATION;
        case 14: // NOTIFICATION_SHOW_MESSAGE
          return NOTIFICATION_SHOW_MESSAGE;
        case 15: // NOTIFICATION_INCOMING_CALL
          return NOTIFICATION_INCOMING_CALL;
        case 16: // NOTIFICATION_SOUND_MESSAGE
          return NOTIFICATION_SOUND_MESSAGE;
        case 17: // NOTIFICATION_SOUND_GROUP
          return NOTIFICATION_SOUND_GROUP;
        case 18: // NOTIFICATION_DISABLED_WITH_SUB
          return NOTIFICATION_DISABLED_WITH_SUB;
        case 20: // PRIVACY_SYNC_CONTACTS
          return PRIVACY_SYNC_CONTACTS;
        case 21: // PRIVACY_SEARCH_BY_PHONE_NUMBER
          return PRIVACY_SEARCH_BY_PHONE_NUMBER;
        case 22: // PRIVACY_SEARCH_BY_USERID
          return PRIVACY_SEARCH_BY_USERID;
        case 23: // PRIVACY_SEARCH_BY_EMAIL
          return PRIVACY_SEARCH_BY_EMAIL;
        case 24: // PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN
          return PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN;
        case 25: // PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME
          return PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME;
        case 26: // PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND
          return PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND;
        case 30: // CONTACT_MY_TICKET
          return CONTACT_MY_TICKET;
        case 40: // IDENTITY_PROVIDER
          return IDENTITY_PROVIDER;
        case 41: // IDENTITY_IDENTIFIER
          return IDENTITY_IDENTIFIER;
        case 42: // SNS_ACCOUNTS
          return SNS_ACCOUNTS;
        case 43: // PHONE_REGISTRATION
          return PHONE_REGISTRATION;
        case 44: // EMAIL_CONFIRMATION_STATUS
          return EMAIL_CONFIRMATION_STATUS;
        case 50: // PREFERENCE_LOCALE
          return PREFERENCE_LOCALE;
        case 60: // CUSTOM_MODES
          return CUSTOM_MODES;
        case 61: // E2EE_ENABLE
          return E2EE_ENABLE;
        case 62: // HITOKOTO_BACKUP_REQUESTED
          return HITOKOTO_BACKUP_REQUESTED;
        case 63: // PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME
          return PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME;
        case 65: // PRIVACY_ALLOW_NEARBY
          return PRIVACY_ALLOW_NEARBY;
        case 66: // AGREEMENT_NEARBY_TIME
          return AGREEMENT_NEARBY_TIME;
        case 67: // AGREEMENT_SQUARE_TIME
          return AGREEMENT_SQUARE_TIME;
        case 68: // NOTIFICATION_MENTION
          return NOTIFICATION_MENTION;
        case 69: // BOT_USE_AGREEMENT_ACCEPTED_AT
          return BOT_USE_AGREEMENT_ACCEPTED_AT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOTIFICATIONENABLE_ISSET_ID = 0;
  private static final int __NOTIFICATIONMUTEEXPIRATION_ISSET_ID = 1;
  private static final int __NOTIFICATIONNEWMESSAGE_ISSET_ID = 2;
  private static final int __NOTIFICATIONGROUPINVITATION_ISSET_ID = 3;
  private static final int __NOTIFICATIONSHOWMESSAGE_ISSET_ID = 4;
  private static final int __NOTIFICATIONINCOMINGCALL_ISSET_ID = 5;
  private static final int __NOTIFICATIONDISABLEDWITHSUB_ISSET_ID = 6;
  private static final int __PRIVACYSYNCCONTACTS_ISSET_ID = 7;
  private static final int __PRIVACYSEARCHBYPHONENUMBER_ISSET_ID = 8;
  private static final int __PRIVACYSEARCHBYUSERID_ISSET_ID = 9;
  private static final int __PRIVACYSEARCHBYEMAIL_ISSET_ID = 10;
  private static final int __PRIVACYALLOWSECONDARYDEVICELOGIN_ISSET_ID = 11;
  private static final int __PRIVACYPROFILEIMAGEPOSTTOMYHOME_ISSET_ID = 12;
  private static final int __PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_ISSET_ID = 13;
  private static final int __PHONEREGISTRATION_ISSET_ID = 14;
  private static final int __E2EEENABLE_ISSET_ID = 15;
  private static final int __HITOKOTOBACKUPREQUESTED_ISSET_ID = 16;
  private static final int __PRIVACYPROFILEMUSICPOSTTOMYHOME_ISSET_ID = 17;
  private static final int __PRIVACYALLOWNEARBY_ISSET_ID = 18;
  private static final int __AGREEMENTNEARBYTIME_ISSET_ID = 19;
  private static final int __AGREEMENTSQUARETIME_ISSET_ID = 20;
  private static final int __NOTIFICATIONMENTION_ISSET_ID = 21;
  private static final int __BOTUSEAGREEMENTACCEPTEDAT_ISSET_ID = 22;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NOTIFICATION_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("notificationEnable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_MUTE_EXPIRATION, new org.apache.thrift.meta_data.FieldMetaData("notificationMuteExpiration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NOTIFICATION_NEW_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("notificationNewMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_GROUP_INVITATION, new org.apache.thrift.meta_data.FieldMetaData("notificationGroupInvitation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_SHOW_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("notificationShowMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_INCOMING_CALL, new org.apache.thrift.meta_data.FieldMetaData("notificationIncomingCall", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NOTIFICATION_SOUND_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("notificationSoundMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFICATION_SOUND_GROUP, new org.apache.thrift.meta_data.FieldMetaData("notificationSoundGroup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFICATION_DISABLED_WITH_SUB, new org.apache.thrift.meta_data.FieldMetaData("notificationDisabledWithSub", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_SYNC_CONTACTS, new org.apache.thrift.meta_data.FieldMetaData("privacySyncContacts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_SEARCH_BY_PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("privacySearchByPhoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_SEARCH_BY_USERID, new org.apache.thrift.meta_data.FieldMetaData("privacySearchByUserid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_SEARCH_BY_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("privacySearchByEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN, new org.apache.thrift.meta_data.FieldMetaData("privacyAllowSecondaryDeviceLogin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME, new org.apache.thrift.meta_data.FieldMetaData("privacyProfileImagePostToMyhome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND, new org.apache.thrift.meta_data.FieldMetaData("privacyReceiveMessagesFromNotFriend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CONTACT_MY_TICKET, new org.apache.thrift.meta_data.FieldMetaData("contactMyTicket", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTITY_PROVIDER, new org.apache.thrift.meta_data.FieldMetaData("identityProvider", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IdentityProvider.class)));
    tmpMap.put(_Fields.IDENTITY_IDENTIFIER, new org.apache.thrift.meta_data.FieldMetaData("identityIdentifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SNS_ACCOUNTS, new org.apache.thrift.meta_data.FieldMetaData("snsAccounts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SnsIdType.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.PHONE_REGISTRATION, new org.apache.thrift.meta_data.FieldMetaData("phoneRegistration", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EMAIL_CONFIRMATION_STATUS, new org.apache.thrift.meta_data.FieldMetaData("emailConfirmationStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, EmailConfirmationStatus.class)));
    tmpMap.put(_Fields.PREFERENCE_LOCALE, new org.apache.thrift.meta_data.FieldMetaData("preferenceLocale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CUSTOM_MODES, new org.apache.thrift.meta_data.FieldMetaData("customModes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CustomMode.class), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.E2EE_ENABLE, new org.apache.thrift.meta_data.FieldMetaData("e2eeEnable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HITOKOTO_BACKUP_REQUESTED, new org.apache.thrift.meta_data.FieldMetaData("hitokotoBackupRequested", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME, new org.apache.thrift.meta_data.FieldMetaData("privacyProfileMusicPostToMyhome", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PRIVACY_ALLOW_NEARBY, new org.apache.thrift.meta_data.FieldMetaData("privacyAllowNearby", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.AGREEMENT_NEARBY_TIME, new org.apache.thrift.meta_data.FieldMetaData("agreementNearbyTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AGREEMENT_SQUARE_TIME, new org.apache.thrift.meta_data.FieldMetaData("agreementSquareTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NOTIFICATION_MENTION, new org.apache.thrift.meta_data.FieldMetaData("notificationMention", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BOT_USE_AGREEMENT_ACCEPTED_AT, new org.apache.thrift.meta_data.FieldMetaData("botUseAgreementAcceptedAt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Settings.class, metaDataMap);
  }

  public Settings() {
  }

  public Settings(
    boolean notificationEnable,
    long notificationMuteExpiration,
    boolean notificationNewMessage,
    boolean notificationGroupInvitation,
    boolean notificationShowMessage,
    boolean notificationIncomingCall,
    java.lang.String notificationSoundMessage,
    java.lang.String notificationSoundGroup,
    boolean notificationDisabledWithSub,
    boolean privacySyncContacts,
    boolean privacySearchByPhoneNumber,
    boolean privacySearchByUserid,
    boolean privacySearchByEmail,
    boolean privacyAllowSecondaryDeviceLogin,
    boolean privacyProfileImagePostToMyhome,
    boolean privacyReceiveMessagesFromNotFriend,
    java.lang.String contactMyTicket,
    IdentityProvider identityProvider,
    java.lang.String identityIdentifier,
    java.util.Map<SnsIdType,java.lang.String> snsAccounts,
    boolean phoneRegistration,
    EmailConfirmationStatus emailConfirmationStatus,
    java.lang.String preferenceLocale,
    java.util.Map<CustomMode,java.lang.String> customModes,
    boolean e2eeEnable,
    boolean hitokotoBackupRequested,
    boolean privacyProfileMusicPostToMyhome,
    boolean privacyAllowNearby,
    long agreementNearbyTime,
    long agreementSquareTime,
    boolean notificationMention,
    long botUseAgreementAcceptedAt)
  {
    this();
    this.notificationEnable = notificationEnable;
    setNotificationEnableIsSet(true);
    this.notificationMuteExpiration = notificationMuteExpiration;
    setNotificationMuteExpirationIsSet(true);
    this.notificationNewMessage = notificationNewMessage;
    setNotificationNewMessageIsSet(true);
    this.notificationGroupInvitation = notificationGroupInvitation;
    setNotificationGroupInvitationIsSet(true);
    this.notificationShowMessage = notificationShowMessage;
    setNotificationShowMessageIsSet(true);
    this.notificationIncomingCall = notificationIncomingCall;
    setNotificationIncomingCallIsSet(true);
    this.notificationSoundMessage = notificationSoundMessage;
    this.notificationSoundGroup = notificationSoundGroup;
    this.notificationDisabledWithSub = notificationDisabledWithSub;
    setNotificationDisabledWithSubIsSet(true);
    this.privacySyncContacts = privacySyncContacts;
    setPrivacySyncContactsIsSet(true);
    this.privacySearchByPhoneNumber = privacySearchByPhoneNumber;
    setPrivacySearchByPhoneNumberIsSet(true);
    this.privacySearchByUserid = privacySearchByUserid;
    setPrivacySearchByUseridIsSet(true);
    this.privacySearchByEmail = privacySearchByEmail;
    setPrivacySearchByEmailIsSet(true);
    this.privacyAllowSecondaryDeviceLogin = privacyAllowSecondaryDeviceLogin;
    setPrivacyAllowSecondaryDeviceLoginIsSet(true);
    this.privacyProfileImagePostToMyhome = privacyProfileImagePostToMyhome;
    setPrivacyProfileImagePostToMyhomeIsSet(true);
    this.privacyReceiveMessagesFromNotFriend = privacyReceiveMessagesFromNotFriend;
    setPrivacyReceiveMessagesFromNotFriendIsSet(true);
    this.contactMyTicket = contactMyTicket;
    this.identityProvider = identityProvider;
    this.identityIdentifier = identityIdentifier;
    this.snsAccounts = snsAccounts;
    this.phoneRegistration = phoneRegistration;
    setPhoneRegistrationIsSet(true);
    this.emailConfirmationStatus = emailConfirmationStatus;
    this.preferenceLocale = preferenceLocale;
    this.customModes = customModes;
    this.e2eeEnable = e2eeEnable;
    setE2eeEnableIsSet(true);
    this.hitokotoBackupRequested = hitokotoBackupRequested;
    setHitokotoBackupRequestedIsSet(true);
    this.privacyProfileMusicPostToMyhome = privacyProfileMusicPostToMyhome;
    setPrivacyProfileMusicPostToMyhomeIsSet(true);
    this.privacyAllowNearby = privacyAllowNearby;
    setPrivacyAllowNearbyIsSet(true);
    this.agreementNearbyTime = agreementNearbyTime;
    setAgreementNearbyTimeIsSet(true);
    this.agreementSquareTime = agreementSquareTime;
    setAgreementSquareTimeIsSet(true);
    this.notificationMention = notificationMention;
    setNotificationMentionIsSet(true);
    this.botUseAgreementAcceptedAt = botUseAgreementAcceptedAt;
    setBotUseAgreementAcceptedAtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Settings(Settings other) {
    __isset_bitfield = other.__isset_bitfield;
    this.notificationEnable = other.notificationEnable;
    this.notificationMuteExpiration = other.notificationMuteExpiration;
    this.notificationNewMessage = other.notificationNewMessage;
    this.notificationGroupInvitation = other.notificationGroupInvitation;
    this.notificationShowMessage = other.notificationShowMessage;
    this.notificationIncomingCall = other.notificationIncomingCall;
    if (other.isSetNotificationSoundMessage()) {
      this.notificationSoundMessage = other.notificationSoundMessage;
    }
    if (other.isSetNotificationSoundGroup()) {
      this.notificationSoundGroup = other.notificationSoundGroup;
    }
    this.notificationDisabledWithSub = other.notificationDisabledWithSub;
    this.privacySyncContacts = other.privacySyncContacts;
    this.privacySearchByPhoneNumber = other.privacySearchByPhoneNumber;
    this.privacySearchByUserid = other.privacySearchByUserid;
    this.privacySearchByEmail = other.privacySearchByEmail;
    this.privacyAllowSecondaryDeviceLogin = other.privacyAllowSecondaryDeviceLogin;
    this.privacyProfileImagePostToMyhome = other.privacyProfileImagePostToMyhome;
    this.privacyReceiveMessagesFromNotFriend = other.privacyReceiveMessagesFromNotFriend;
    if (other.isSetContactMyTicket()) {
      this.contactMyTicket = other.contactMyTicket;
    }
    if (other.isSetIdentityProvider()) {
      this.identityProvider = other.identityProvider;
    }
    if (other.isSetIdentityIdentifier()) {
      this.identityIdentifier = other.identityIdentifier;
    }
    if (other.isSetSnsAccounts()) {
      java.util.Map<SnsIdType,java.lang.String> __this__snsAccounts = new java.util.EnumMap<SnsIdType,java.lang.String>(SnsIdType.class);
      for (java.util.Map.Entry<SnsIdType, java.lang.String> other_element : other.snsAccounts.entrySet()) {

        SnsIdType other_element_key = other_element.getKey();
        java.lang.String other_element_value = other_element.getValue();

        SnsIdType __this__snsAccounts_copy_key = other_element_key;

        java.lang.String __this__snsAccounts_copy_value = other_element_value;

        __this__snsAccounts.put(__this__snsAccounts_copy_key, __this__snsAccounts_copy_value);
      }
      this.snsAccounts = __this__snsAccounts;
    }
    this.phoneRegistration = other.phoneRegistration;
    if (other.isSetEmailConfirmationStatus()) {
      this.emailConfirmationStatus = other.emailConfirmationStatus;
    }
    if (other.isSetPreferenceLocale()) {
      this.preferenceLocale = other.preferenceLocale;
    }
    if (other.isSetCustomModes()) {
      java.util.Map<CustomMode,java.lang.String> __this__customModes = new java.util.EnumMap<CustomMode,java.lang.String>(CustomMode.class);
      for (java.util.Map.Entry<CustomMode, java.lang.String> other_element : other.customModes.entrySet()) {

        CustomMode other_element_key = other_element.getKey();
        java.lang.String other_element_value = other_element.getValue();

        CustomMode __this__customModes_copy_key = other_element_key;

        java.lang.String __this__customModes_copy_value = other_element_value;

        __this__customModes.put(__this__customModes_copy_key, __this__customModes_copy_value);
      }
      this.customModes = __this__customModes;
    }
    this.e2eeEnable = other.e2eeEnable;
    this.hitokotoBackupRequested = other.hitokotoBackupRequested;
    this.privacyProfileMusicPostToMyhome = other.privacyProfileMusicPostToMyhome;
    this.privacyAllowNearby = other.privacyAllowNearby;
    this.agreementNearbyTime = other.agreementNearbyTime;
    this.agreementSquareTime = other.agreementSquareTime;
    this.notificationMention = other.notificationMention;
    this.botUseAgreementAcceptedAt = other.botUseAgreementAcceptedAt;
  }

  public Settings deepCopy() {
    return new Settings(this);
  }

  @Override
  public void clear() {
    setNotificationEnableIsSet(false);
    this.notificationEnable = false;
    setNotificationMuteExpirationIsSet(false);
    this.notificationMuteExpiration = 0;
    setNotificationNewMessageIsSet(false);
    this.notificationNewMessage = false;
    setNotificationGroupInvitationIsSet(false);
    this.notificationGroupInvitation = false;
    setNotificationShowMessageIsSet(false);
    this.notificationShowMessage = false;
    setNotificationIncomingCallIsSet(false);
    this.notificationIncomingCall = false;
    this.notificationSoundMessage = null;
    this.notificationSoundGroup = null;
    setNotificationDisabledWithSubIsSet(false);
    this.notificationDisabledWithSub = false;
    setPrivacySyncContactsIsSet(false);
    this.privacySyncContacts = false;
    setPrivacySearchByPhoneNumberIsSet(false);
    this.privacySearchByPhoneNumber = false;
    setPrivacySearchByUseridIsSet(false);
    this.privacySearchByUserid = false;
    setPrivacySearchByEmailIsSet(false);
    this.privacySearchByEmail = false;
    setPrivacyAllowSecondaryDeviceLoginIsSet(false);
    this.privacyAllowSecondaryDeviceLogin = false;
    setPrivacyProfileImagePostToMyhomeIsSet(false);
    this.privacyProfileImagePostToMyhome = false;
    setPrivacyReceiveMessagesFromNotFriendIsSet(false);
    this.privacyReceiveMessagesFromNotFriend = false;
    this.contactMyTicket = null;
    this.identityProvider = null;
    this.identityIdentifier = null;
    this.snsAccounts = null;
    setPhoneRegistrationIsSet(false);
    this.phoneRegistration = false;
    this.emailConfirmationStatus = null;
    this.preferenceLocale = null;
    this.customModes = null;
    setE2eeEnableIsSet(false);
    this.e2eeEnable = false;
    setHitokotoBackupRequestedIsSet(false);
    this.hitokotoBackupRequested = false;
    setPrivacyProfileMusicPostToMyhomeIsSet(false);
    this.privacyProfileMusicPostToMyhome = false;
    setPrivacyAllowNearbyIsSet(false);
    this.privacyAllowNearby = false;
    setAgreementNearbyTimeIsSet(false);
    this.agreementNearbyTime = 0;
    setAgreementSquareTimeIsSet(false);
    this.agreementSquareTime = 0;
    setNotificationMentionIsSet(false);
    this.notificationMention = false;
    setBotUseAgreementAcceptedAtIsSet(false);
    this.botUseAgreementAcceptedAt = 0;
  }

  public boolean isNotificationEnable() {
    return this.notificationEnable;
  }

  public Settings setNotificationEnable(boolean notificationEnable) {
    this.notificationEnable = notificationEnable;
    setNotificationEnableIsSet(true);
    return this;
  }

  public void unsetNotificationEnable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONENABLE_ISSET_ID);
  }

  /** Returns true if field notificationEnable is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationEnable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONENABLE_ISSET_ID);
  }

  public void setNotificationEnableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONENABLE_ISSET_ID, value);
  }

  public long getNotificationMuteExpiration() {
    return this.notificationMuteExpiration;
  }

  public Settings setNotificationMuteExpiration(long notificationMuteExpiration) {
    this.notificationMuteExpiration = notificationMuteExpiration;
    setNotificationMuteExpirationIsSet(true);
    return this;
  }

  public void unsetNotificationMuteExpiration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONMUTEEXPIRATION_ISSET_ID);
  }

  /** Returns true if field notificationMuteExpiration is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationMuteExpiration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONMUTEEXPIRATION_ISSET_ID);
  }

  public void setNotificationMuteExpirationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONMUTEEXPIRATION_ISSET_ID, value);
  }

  public boolean isNotificationNewMessage() {
    return this.notificationNewMessage;
  }

  public Settings setNotificationNewMessage(boolean notificationNewMessage) {
    this.notificationNewMessage = notificationNewMessage;
    setNotificationNewMessageIsSet(true);
    return this;
  }

  public void unsetNotificationNewMessage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONNEWMESSAGE_ISSET_ID);
  }

  /** Returns true if field notificationNewMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationNewMessage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONNEWMESSAGE_ISSET_ID);
  }

  public void setNotificationNewMessageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONNEWMESSAGE_ISSET_ID, value);
  }

  public boolean isNotificationGroupInvitation() {
    return this.notificationGroupInvitation;
  }

  public Settings setNotificationGroupInvitation(boolean notificationGroupInvitation) {
    this.notificationGroupInvitation = notificationGroupInvitation;
    setNotificationGroupInvitationIsSet(true);
    return this;
  }

  public void unsetNotificationGroupInvitation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONGROUPINVITATION_ISSET_ID);
  }

  /** Returns true if field notificationGroupInvitation is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationGroupInvitation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONGROUPINVITATION_ISSET_ID);
  }

  public void setNotificationGroupInvitationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONGROUPINVITATION_ISSET_ID, value);
  }

  public boolean isNotificationShowMessage() {
    return this.notificationShowMessage;
  }

  public Settings setNotificationShowMessage(boolean notificationShowMessage) {
    this.notificationShowMessage = notificationShowMessage;
    setNotificationShowMessageIsSet(true);
    return this;
  }

  public void unsetNotificationShowMessage() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONSHOWMESSAGE_ISSET_ID);
  }

  /** Returns true if field notificationShowMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationShowMessage() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONSHOWMESSAGE_ISSET_ID);
  }

  public void setNotificationShowMessageIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONSHOWMESSAGE_ISSET_ID, value);
  }

  public boolean isNotificationIncomingCall() {
    return this.notificationIncomingCall;
  }

  public Settings setNotificationIncomingCall(boolean notificationIncomingCall) {
    this.notificationIncomingCall = notificationIncomingCall;
    setNotificationIncomingCallIsSet(true);
    return this;
  }

  public void unsetNotificationIncomingCall() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONINCOMINGCALL_ISSET_ID);
  }

  /** Returns true if field notificationIncomingCall is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationIncomingCall() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONINCOMINGCALL_ISSET_ID);
  }

  public void setNotificationIncomingCallIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONINCOMINGCALL_ISSET_ID, value);
  }

  public java.lang.String getNotificationSoundMessage() {
    return this.notificationSoundMessage;
  }

  public Settings setNotificationSoundMessage(java.lang.String notificationSoundMessage) {
    this.notificationSoundMessage = notificationSoundMessage;
    return this;
  }

  public void unsetNotificationSoundMessage() {
    this.notificationSoundMessage = null;
  }

  /** Returns true if field notificationSoundMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationSoundMessage() {
    return this.notificationSoundMessage != null;
  }

  public void setNotificationSoundMessageIsSet(boolean value) {
    if (!value) {
      this.notificationSoundMessage = null;
    }
  }

  public java.lang.String getNotificationSoundGroup() {
    return this.notificationSoundGroup;
  }

  public Settings setNotificationSoundGroup(java.lang.String notificationSoundGroup) {
    this.notificationSoundGroup = notificationSoundGroup;
    return this;
  }

  public void unsetNotificationSoundGroup() {
    this.notificationSoundGroup = null;
  }

  /** Returns true if field notificationSoundGroup is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationSoundGroup() {
    return this.notificationSoundGroup != null;
  }

  public void setNotificationSoundGroupIsSet(boolean value) {
    if (!value) {
      this.notificationSoundGroup = null;
    }
  }

  public boolean isNotificationDisabledWithSub() {
    return this.notificationDisabledWithSub;
  }

  public Settings setNotificationDisabledWithSub(boolean notificationDisabledWithSub) {
    this.notificationDisabledWithSub = notificationDisabledWithSub;
    setNotificationDisabledWithSubIsSet(true);
    return this;
  }

  public void unsetNotificationDisabledWithSub() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONDISABLEDWITHSUB_ISSET_ID);
  }

  /** Returns true if field notificationDisabledWithSub is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationDisabledWithSub() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONDISABLEDWITHSUB_ISSET_ID);
  }

  public void setNotificationDisabledWithSubIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONDISABLEDWITHSUB_ISSET_ID, value);
  }

  public boolean isPrivacySyncContacts() {
    return this.privacySyncContacts;
  }

  public Settings setPrivacySyncContacts(boolean privacySyncContacts) {
    this.privacySyncContacts = privacySyncContacts;
    setPrivacySyncContactsIsSet(true);
    return this;
  }

  public void unsetPrivacySyncContacts() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVACYSYNCCONTACTS_ISSET_ID);
  }

  /** Returns true if field privacySyncContacts is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacySyncContacts() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVACYSYNCCONTACTS_ISSET_ID);
  }

  public void setPrivacySyncContactsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVACYSYNCCONTACTS_ISSET_ID, value);
  }

  public boolean isPrivacySearchByPhoneNumber() {
    return this.privacySearchByPhoneNumber;
  }

  public Settings setPrivacySearchByPhoneNumber(boolean privacySearchByPhoneNumber) {
    this.privacySearchByPhoneNumber = privacySearchByPhoneNumber;
    setPrivacySearchByPhoneNumberIsSet(true);
    return this;
  }

  public void unsetPrivacySearchByPhoneNumber() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVACYSEARCHBYPHONENUMBER_ISSET_ID);
  }

  /** Returns true if field privacySearchByPhoneNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacySearchByPhoneNumber() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVACYSEARCHBYPHONENUMBER_ISSET_ID);
  }

  public void setPrivacySearchByPhoneNumberIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVACYSEARCHBYPHONENUMBER_ISSET_ID, value);
  }

  public boolean isPrivacySearchByUserid() {
    return this.privacySearchByUserid;
  }

  public Settings setPrivacySearchByUserid(boolean privacySearchByUserid) {
    this.privacySearchByUserid = privacySearchByUserid;
    setPrivacySearchByUseridIsSet(true);
    return this;
  }

  public void unsetPrivacySearchByUserid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVACYSEARCHBYUSERID_ISSET_ID);
  }

  /** Returns true if field privacySearchByUserid is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacySearchByUserid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVACYSEARCHBYUSERID_ISSET_ID);
  }

  public void setPrivacySearchByUseridIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVACYSEARCHBYUSERID_ISSET_ID, value);
  }

  public boolean isPrivacySearchByEmail() {
    return this.privacySearchByEmail;
  }

  public Settings setPrivacySearchByEmail(boolean privacySearchByEmail) {
    this.privacySearchByEmail = privacySearchByEmail;
    setPrivacySearchByEmailIsSet(true);
    return this;
  }

  public void unsetPrivacySearchByEmail() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVACYSEARCHBYEMAIL_ISSET_ID);
  }

  /** Returns true if field privacySearchByEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacySearchByEmail() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVACYSEARCHBYEMAIL_ISSET_ID);
  }

  public void setPrivacySearchByEmailIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVACYSEARCHBYEMAIL_ISSET_ID, value);
  }

  public boolean isPrivacyAllowSecondaryDeviceLogin() {
    return this.privacyAllowSecondaryDeviceLogin;
  }

  public Settings setPrivacyAllowSecondaryDeviceLogin(boolean privacyAllowSecondaryDeviceLogin) {
    this.privacyAllowSecondaryDeviceLogin = privacyAllowSecondaryDeviceLogin;
    setPrivacyAllowSecondaryDeviceLoginIsSet(true);
    return this;
  }

  public void unsetPrivacyAllowSecondaryDeviceLogin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVACYALLOWSECONDARYDEVICELOGIN_ISSET_ID);
  }

  /** Returns true if field privacyAllowSecondaryDeviceLogin is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacyAllowSecondaryDeviceLogin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVACYALLOWSECONDARYDEVICELOGIN_ISSET_ID);
  }

  public void setPrivacyAllowSecondaryDeviceLoginIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVACYALLOWSECONDARYDEVICELOGIN_ISSET_ID, value);
  }

  public boolean isPrivacyProfileImagePostToMyhome() {
    return this.privacyProfileImagePostToMyhome;
  }

  public Settings setPrivacyProfileImagePostToMyhome(boolean privacyProfileImagePostToMyhome) {
    this.privacyProfileImagePostToMyhome = privacyProfileImagePostToMyhome;
    setPrivacyProfileImagePostToMyhomeIsSet(true);
    return this;
  }

  public void unsetPrivacyProfileImagePostToMyhome() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVACYPROFILEIMAGEPOSTTOMYHOME_ISSET_ID);
  }

  /** Returns true if field privacyProfileImagePostToMyhome is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacyProfileImagePostToMyhome() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVACYPROFILEIMAGEPOSTTOMYHOME_ISSET_ID);
  }

  public void setPrivacyProfileImagePostToMyhomeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVACYPROFILEIMAGEPOSTTOMYHOME_ISSET_ID, value);
  }

  public boolean isPrivacyReceiveMessagesFromNotFriend() {
    return this.privacyReceiveMessagesFromNotFriend;
  }

  public Settings setPrivacyReceiveMessagesFromNotFriend(boolean privacyReceiveMessagesFromNotFriend) {
    this.privacyReceiveMessagesFromNotFriend = privacyReceiveMessagesFromNotFriend;
    setPrivacyReceiveMessagesFromNotFriendIsSet(true);
    return this;
  }

  public void unsetPrivacyReceiveMessagesFromNotFriend() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_ISSET_ID);
  }

  /** Returns true if field privacyReceiveMessagesFromNotFriend is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacyReceiveMessagesFromNotFriend() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_ISSET_ID);
  }

  public void setPrivacyReceiveMessagesFromNotFriendIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVACYRECEIVEMESSAGESFROMNOTFRIEND_ISSET_ID, value);
  }

  public java.lang.String getContactMyTicket() {
    return this.contactMyTicket;
  }

  public Settings setContactMyTicket(java.lang.String contactMyTicket) {
    this.contactMyTicket = contactMyTicket;
    return this;
  }

  public void unsetContactMyTicket() {
    this.contactMyTicket = null;
  }

  /** Returns true if field contactMyTicket is set (has been assigned a value) and false otherwise */
  public boolean isSetContactMyTicket() {
    return this.contactMyTicket != null;
  }

  public void setContactMyTicketIsSet(boolean value) {
    if (!value) {
      this.contactMyTicket = null;
    }
  }

  /**
   * 
   * @see IdentityProvider
   */
  public IdentityProvider getIdentityProvider() {
    return this.identityProvider;
  }

  /**
   * 
   * @see IdentityProvider
   */
  public Settings setIdentityProvider(IdentityProvider identityProvider) {
    this.identityProvider = identityProvider;
    return this;
  }

  public void unsetIdentityProvider() {
    this.identityProvider = null;
  }

  /** Returns true if field identityProvider is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityProvider() {
    return this.identityProvider != null;
  }

  public void setIdentityProviderIsSet(boolean value) {
    if (!value) {
      this.identityProvider = null;
    }
  }

  public java.lang.String getIdentityIdentifier() {
    return this.identityIdentifier;
  }

  public Settings setIdentityIdentifier(java.lang.String identityIdentifier) {
    this.identityIdentifier = identityIdentifier;
    return this;
  }

  public void unsetIdentityIdentifier() {
    this.identityIdentifier = null;
  }

  /** Returns true if field identityIdentifier is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentityIdentifier() {
    return this.identityIdentifier != null;
  }

  public void setIdentityIdentifierIsSet(boolean value) {
    if (!value) {
      this.identityIdentifier = null;
    }
  }

  public int getSnsAccountsSize() {
    return (this.snsAccounts == null) ? 0 : this.snsAccounts.size();
  }

  public void putToSnsAccounts(SnsIdType key, java.lang.String val) {
    if (this.snsAccounts == null) {
      this.snsAccounts = new java.util.EnumMap<SnsIdType,java.lang.String>(SnsIdType.class);
    }
    this.snsAccounts.put(key, val);
  }

  public java.util.Map<SnsIdType,java.lang.String> getSnsAccounts() {
    return this.snsAccounts;
  }

  public Settings setSnsAccounts(java.util.Map<SnsIdType,java.lang.String> snsAccounts) {
    this.snsAccounts = snsAccounts;
    return this;
  }

  public void unsetSnsAccounts() {
    this.snsAccounts = null;
  }

  /** Returns true if field snsAccounts is set (has been assigned a value) and false otherwise */
  public boolean isSetSnsAccounts() {
    return this.snsAccounts != null;
  }

  public void setSnsAccountsIsSet(boolean value) {
    if (!value) {
      this.snsAccounts = null;
    }
  }

  public boolean isPhoneRegistration() {
    return this.phoneRegistration;
  }

  public Settings setPhoneRegistration(boolean phoneRegistration) {
    this.phoneRegistration = phoneRegistration;
    setPhoneRegistrationIsSet(true);
    return this;
  }

  public void unsetPhoneRegistration() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PHONEREGISTRATION_ISSET_ID);
  }

  /** Returns true if field phoneRegistration is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoneRegistration() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PHONEREGISTRATION_ISSET_ID);
  }

  public void setPhoneRegistrationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PHONEREGISTRATION_ISSET_ID, value);
  }

  /**
   * 
   * @see EmailConfirmationStatus
   */
  public EmailConfirmationStatus getEmailConfirmationStatus() {
    return this.emailConfirmationStatus;
  }

  /**
   * 
   * @see EmailConfirmationStatus
   */
  public Settings setEmailConfirmationStatus(EmailConfirmationStatus emailConfirmationStatus) {
    this.emailConfirmationStatus = emailConfirmationStatus;
    return this;
  }

  public void unsetEmailConfirmationStatus() {
    this.emailConfirmationStatus = null;
  }

  /** Returns true if field emailConfirmationStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEmailConfirmationStatus() {
    return this.emailConfirmationStatus != null;
  }

  public void setEmailConfirmationStatusIsSet(boolean value) {
    if (!value) {
      this.emailConfirmationStatus = null;
    }
  }

  public java.lang.String getPreferenceLocale() {
    return this.preferenceLocale;
  }

  public Settings setPreferenceLocale(java.lang.String preferenceLocale) {
    this.preferenceLocale = preferenceLocale;
    return this;
  }

  public void unsetPreferenceLocale() {
    this.preferenceLocale = null;
  }

  /** Returns true if field preferenceLocale is set (has been assigned a value) and false otherwise */
  public boolean isSetPreferenceLocale() {
    return this.preferenceLocale != null;
  }

  public void setPreferenceLocaleIsSet(boolean value) {
    if (!value) {
      this.preferenceLocale = null;
    }
  }

  public int getCustomModesSize() {
    return (this.customModes == null) ? 0 : this.customModes.size();
  }

  public void putToCustomModes(CustomMode key, java.lang.String val) {
    if (this.customModes == null) {
      this.customModes = new java.util.EnumMap<CustomMode,java.lang.String>(CustomMode.class);
    }
    this.customModes.put(key, val);
  }

  public java.util.Map<CustomMode,java.lang.String> getCustomModes() {
    return this.customModes;
  }

  public Settings setCustomModes(java.util.Map<CustomMode,java.lang.String> customModes) {
    this.customModes = customModes;
    return this;
  }

  public void unsetCustomModes() {
    this.customModes = null;
  }

  /** Returns true if field customModes is set (has been assigned a value) and false otherwise */
  public boolean isSetCustomModes() {
    return this.customModes != null;
  }

  public void setCustomModesIsSet(boolean value) {
    if (!value) {
      this.customModes = null;
    }
  }

  public boolean isE2eeEnable() {
    return this.e2eeEnable;
  }

  public Settings setE2eeEnable(boolean e2eeEnable) {
    this.e2eeEnable = e2eeEnable;
    setE2eeEnableIsSet(true);
    return this;
  }

  public void unsetE2eeEnable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __E2EEENABLE_ISSET_ID);
  }

  /** Returns true if field e2eeEnable is set (has been assigned a value) and false otherwise */
  public boolean isSetE2eeEnable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __E2EEENABLE_ISSET_ID);
  }

  public void setE2eeEnableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __E2EEENABLE_ISSET_ID, value);
  }

  public boolean isHitokotoBackupRequested() {
    return this.hitokotoBackupRequested;
  }

  public Settings setHitokotoBackupRequested(boolean hitokotoBackupRequested) {
    this.hitokotoBackupRequested = hitokotoBackupRequested;
    setHitokotoBackupRequestedIsSet(true);
    return this;
  }

  public void unsetHitokotoBackupRequested() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HITOKOTOBACKUPREQUESTED_ISSET_ID);
  }

  /** Returns true if field hitokotoBackupRequested is set (has been assigned a value) and false otherwise */
  public boolean isSetHitokotoBackupRequested() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HITOKOTOBACKUPREQUESTED_ISSET_ID);
  }

  public void setHitokotoBackupRequestedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HITOKOTOBACKUPREQUESTED_ISSET_ID, value);
  }

  public boolean isPrivacyProfileMusicPostToMyhome() {
    return this.privacyProfileMusicPostToMyhome;
  }

  public Settings setPrivacyProfileMusicPostToMyhome(boolean privacyProfileMusicPostToMyhome) {
    this.privacyProfileMusicPostToMyhome = privacyProfileMusicPostToMyhome;
    setPrivacyProfileMusicPostToMyhomeIsSet(true);
    return this;
  }

  public void unsetPrivacyProfileMusicPostToMyhome() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVACYPROFILEMUSICPOSTTOMYHOME_ISSET_ID);
  }

  /** Returns true if field privacyProfileMusicPostToMyhome is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacyProfileMusicPostToMyhome() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVACYPROFILEMUSICPOSTTOMYHOME_ISSET_ID);
  }

  public void setPrivacyProfileMusicPostToMyhomeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVACYPROFILEMUSICPOSTTOMYHOME_ISSET_ID, value);
  }

  public boolean isPrivacyAllowNearby() {
    return this.privacyAllowNearby;
  }

  public Settings setPrivacyAllowNearby(boolean privacyAllowNearby) {
    this.privacyAllowNearby = privacyAllowNearby;
    setPrivacyAllowNearbyIsSet(true);
    return this;
  }

  public void unsetPrivacyAllowNearby() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVACYALLOWNEARBY_ISSET_ID);
  }

  /** Returns true if field privacyAllowNearby is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivacyAllowNearby() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVACYALLOWNEARBY_ISSET_ID);
  }

  public void setPrivacyAllowNearbyIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVACYALLOWNEARBY_ISSET_ID, value);
  }

  public long getAgreementNearbyTime() {
    return this.agreementNearbyTime;
  }

  public Settings setAgreementNearbyTime(long agreementNearbyTime) {
    this.agreementNearbyTime = agreementNearbyTime;
    setAgreementNearbyTimeIsSet(true);
    return this;
  }

  public void unsetAgreementNearbyTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGREEMENTNEARBYTIME_ISSET_ID);
  }

  /** Returns true if field agreementNearbyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAgreementNearbyTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGREEMENTNEARBYTIME_ISSET_ID);
  }

  public void setAgreementNearbyTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGREEMENTNEARBYTIME_ISSET_ID, value);
  }

  public long getAgreementSquareTime() {
    return this.agreementSquareTime;
  }

  public Settings setAgreementSquareTime(long agreementSquareTime) {
    this.agreementSquareTime = agreementSquareTime;
    setAgreementSquareTimeIsSet(true);
    return this;
  }

  public void unsetAgreementSquareTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AGREEMENTSQUARETIME_ISSET_ID);
  }

  /** Returns true if field agreementSquareTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAgreementSquareTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AGREEMENTSQUARETIME_ISSET_ID);
  }

  public void setAgreementSquareTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AGREEMENTSQUARETIME_ISSET_ID, value);
  }

  public boolean isNotificationMention() {
    return this.notificationMention;
  }

  public Settings setNotificationMention(boolean notificationMention) {
    this.notificationMention = notificationMention;
    setNotificationMentionIsSet(true);
    return this;
  }

  public void unsetNotificationMention() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONMENTION_ISSET_ID);
  }

  /** Returns true if field notificationMention is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationMention() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONMENTION_ISSET_ID);
  }

  public void setNotificationMentionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONMENTION_ISSET_ID, value);
  }

  public long getBotUseAgreementAcceptedAt() {
    return this.botUseAgreementAcceptedAt;
  }

  public Settings setBotUseAgreementAcceptedAt(long botUseAgreementAcceptedAt) {
    this.botUseAgreementAcceptedAt = botUseAgreementAcceptedAt;
    setBotUseAgreementAcceptedAtIsSet(true);
    return this;
  }

  public void unsetBotUseAgreementAcceptedAt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BOTUSEAGREEMENTACCEPTEDAT_ISSET_ID);
  }

  /** Returns true if field botUseAgreementAcceptedAt is set (has been assigned a value) and false otherwise */
  public boolean isSetBotUseAgreementAcceptedAt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BOTUSEAGREEMENTACCEPTEDAT_ISSET_ID);
  }

  public void setBotUseAgreementAcceptedAtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BOTUSEAGREEMENTACCEPTEDAT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NOTIFICATION_ENABLE:
      if (value == null) {
        unsetNotificationEnable();
      } else {
        setNotificationEnable((java.lang.Boolean)value);
      }
      break;

    case NOTIFICATION_MUTE_EXPIRATION:
      if (value == null) {
        unsetNotificationMuteExpiration();
      } else {
        setNotificationMuteExpiration((java.lang.Long)value);
      }
      break;

    case NOTIFICATION_NEW_MESSAGE:
      if (value == null) {
        unsetNotificationNewMessage();
      } else {
        setNotificationNewMessage((java.lang.Boolean)value);
      }
      break;

    case NOTIFICATION_GROUP_INVITATION:
      if (value == null) {
        unsetNotificationGroupInvitation();
      } else {
        setNotificationGroupInvitation((java.lang.Boolean)value);
      }
      break;

    case NOTIFICATION_SHOW_MESSAGE:
      if (value == null) {
        unsetNotificationShowMessage();
      } else {
        setNotificationShowMessage((java.lang.Boolean)value);
      }
      break;

    case NOTIFICATION_INCOMING_CALL:
      if (value == null) {
        unsetNotificationIncomingCall();
      } else {
        setNotificationIncomingCall((java.lang.Boolean)value);
      }
      break;

    case NOTIFICATION_SOUND_MESSAGE:
      if (value == null) {
        unsetNotificationSoundMessage();
      } else {
        setNotificationSoundMessage((java.lang.String)value);
      }
      break;

    case NOTIFICATION_SOUND_GROUP:
      if (value == null) {
        unsetNotificationSoundGroup();
      } else {
        setNotificationSoundGroup((java.lang.String)value);
      }
      break;

    case NOTIFICATION_DISABLED_WITH_SUB:
      if (value == null) {
        unsetNotificationDisabledWithSub();
      } else {
        setNotificationDisabledWithSub((java.lang.Boolean)value);
      }
      break;

    case PRIVACY_SYNC_CONTACTS:
      if (value == null) {
        unsetPrivacySyncContacts();
      } else {
        setPrivacySyncContacts((java.lang.Boolean)value);
      }
      break;

    case PRIVACY_SEARCH_BY_PHONE_NUMBER:
      if (value == null) {
        unsetPrivacySearchByPhoneNumber();
      } else {
        setPrivacySearchByPhoneNumber((java.lang.Boolean)value);
      }
      break;

    case PRIVACY_SEARCH_BY_USERID:
      if (value == null) {
        unsetPrivacySearchByUserid();
      } else {
        setPrivacySearchByUserid((java.lang.Boolean)value);
      }
      break;

    case PRIVACY_SEARCH_BY_EMAIL:
      if (value == null) {
        unsetPrivacySearchByEmail();
      } else {
        setPrivacySearchByEmail((java.lang.Boolean)value);
      }
      break;

    case PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN:
      if (value == null) {
        unsetPrivacyAllowSecondaryDeviceLogin();
      } else {
        setPrivacyAllowSecondaryDeviceLogin((java.lang.Boolean)value);
      }
      break;

    case PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME:
      if (value == null) {
        unsetPrivacyProfileImagePostToMyhome();
      } else {
        setPrivacyProfileImagePostToMyhome((java.lang.Boolean)value);
      }
      break;

    case PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND:
      if (value == null) {
        unsetPrivacyReceiveMessagesFromNotFriend();
      } else {
        setPrivacyReceiveMessagesFromNotFriend((java.lang.Boolean)value);
      }
      break;

    case CONTACT_MY_TICKET:
      if (value == null) {
        unsetContactMyTicket();
      } else {
        setContactMyTicket((java.lang.String)value);
      }
      break;

    case IDENTITY_PROVIDER:
      if (value == null) {
        unsetIdentityProvider();
      } else {
        setIdentityProvider((IdentityProvider)value);
      }
      break;

    case IDENTITY_IDENTIFIER:
      if (value == null) {
        unsetIdentityIdentifier();
      } else {
        setIdentityIdentifier((java.lang.String)value);
      }
      break;

    case SNS_ACCOUNTS:
      if (value == null) {
        unsetSnsAccounts();
      } else {
        setSnsAccounts((java.util.Map<SnsIdType,java.lang.String>)value);
      }
      break;

    case PHONE_REGISTRATION:
      if (value == null) {
        unsetPhoneRegistration();
      } else {
        setPhoneRegistration((java.lang.Boolean)value);
      }
      break;

    case EMAIL_CONFIRMATION_STATUS:
      if (value == null) {
        unsetEmailConfirmationStatus();
      } else {
        setEmailConfirmationStatus((EmailConfirmationStatus)value);
      }
      break;

    case PREFERENCE_LOCALE:
      if (value == null) {
        unsetPreferenceLocale();
      } else {
        setPreferenceLocale((java.lang.String)value);
      }
      break;

    case CUSTOM_MODES:
      if (value == null) {
        unsetCustomModes();
      } else {
        setCustomModes((java.util.Map<CustomMode,java.lang.String>)value);
      }
      break;

    case E2EE_ENABLE:
      if (value == null) {
        unsetE2eeEnable();
      } else {
        setE2eeEnable((java.lang.Boolean)value);
      }
      break;

    case HITOKOTO_BACKUP_REQUESTED:
      if (value == null) {
        unsetHitokotoBackupRequested();
      } else {
        setHitokotoBackupRequested((java.lang.Boolean)value);
      }
      break;

    case PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME:
      if (value == null) {
        unsetPrivacyProfileMusicPostToMyhome();
      } else {
        setPrivacyProfileMusicPostToMyhome((java.lang.Boolean)value);
      }
      break;

    case PRIVACY_ALLOW_NEARBY:
      if (value == null) {
        unsetPrivacyAllowNearby();
      } else {
        setPrivacyAllowNearby((java.lang.Boolean)value);
      }
      break;

    case AGREEMENT_NEARBY_TIME:
      if (value == null) {
        unsetAgreementNearbyTime();
      } else {
        setAgreementNearbyTime((java.lang.Long)value);
      }
      break;

    case AGREEMENT_SQUARE_TIME:
      if (value == null) {
        unsetAgreementSquareTime();
      } else {
        setAgreementSquareTime((java.lang.Long)value);
      }
      break;

    case NOTIFICATION_MENTION:
      if (value == null) {
        unsetNotificationMention();
      } else {
        setNotificationMention((java.lang.Boolean)value);
      }
      break;

    case BOT_USE_AGREEMENT_ACCEPTED_AT:
      if (value == null) {
        unsetBotUseAgreementAcceptedAt();
      } else {
        setBotUseAgreementAcceptedAt((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NOTIFICATION_ENABLE:
      return isNotificationEnable();

    case NOTIFICATION_MUTE_EXPIRATION:
      return getNotificationMuteExpiration();

    case NOTIFICATION_NEW_MESSAGE:
      return isNotificationNewMessage();

    case NOTIFICATION_GROUP_INVITATION:
      return isNotificationGroupInvitation();

    case NOTIFICATION_SHOW_MESSAGE:
      return isNotificationShowMessage();

    case NOTIFICATION_INCOMING_CALL:
      return isNotificationIncomingCall();

    case NOTIFICATION_SOUND_MESSAGE:
      return getNotificationSoundMessage();

    case NOTIFICATION_SOUND_GROUP:
      return getNotificationSoundGroup();

    case NOTIFICATION_DISABLED_WITH_SUB:
      return isNotificationDisabledWithSub();

    case PRIVACY_SYNC_CONTACTS:
      return isPrivacySyncContacts();

    case PRIVACY_SEARCH_BY_PHONE_NUMBER:
      return isPrivacySearchByPhoneNumber();

    case PRIVACY_SEARCH_BY_USERID:
      return isPrivacySearchByUserid();

    case PRIVACY_SEARCH_BY_EMAIL:
      return isPrivacySearchByEmail();

    case PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN:
      return isPrivacyAllowSecondaryDeviceLogin();

    case PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME:
      return isPrivacyProfileImagePostToMyhome();

    case PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND:
      return isPrivacyReceiveMessagesFromNotFriend();

    case CONTACT_MY_TICKET:
      return getContactMyTicket();

    case IDENTITY_PROVIDER:
      return getIdentityProvider();

    case IDENTITY_IDENTIFIER:
      return getIdentityIdentifier();

    case SNS_ACCOUNTS:
      return getSnsAccounts();

    case PHONE_REGISTRATION:
      return isPhoneRegistration();

    case EMAIL_CONFIRMATION_STATUS:
      return getEmailConfirmationStatus();

    case PREFERENCE_LOCALE:
      return getPreferenceLocale();

    case CUSTOM_MODES:
      return getCustomModes();

    case E2EE_ENABLE:
      return isE2eeEnable();

    case HITOKOTO_BACKUP_REQUESTED:
      return isHitokotoBackupRequested();

    case PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME:
      return isPrivacyProfileMusicPostToMyhome();

    case PRIVACY_ALLOW_NEARBY:
      return isPrivacyAllowNearby();

    case AGREEMENT_NEARBY_TIME:
      return getAgreementNearbyTime();

    case AGREEMENT_SQUARE_TIME:
      return getAgreementSquareTime();

    case NOTIFICATION_MENTION:
      return isNotificationMention();

    case BOT_USE_AGREEMENT_ACCEPTED_AT:
      return getBotUseAgreementAcceptedAt();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NOTIFICATION_ENABLE:
      return isSetNotificationEnable();
    case NOTIFICATION_MUTE_EXPIRATION:
      return isSetNotificationMuteExpiration();
    case NOTIFICATION_NEW_MESSAGE:
      return isSetNotificationNewMessage();
    case NOTIFICATION_GROUP_INVITATION:
      return isSetNotificationGroupInvitation();
    case NOTIFICATION_SHOW_MESSAGE:
      return isSetNotificationShowMessage();
    case NOTIFICATION_INCOMING_CALL:
      return isSetNotificationIncomingCall();
    case NOTIFICATION_SOUND_MESSAGE:
      return isSetNotificationSoundMessage();
    case NOTIFICATION_SOUND_GROUP:
      return isSetNotificationSoundGroup();
    case NOTIFICATION_DISABLED_WITH_SUB:
      return isSetNotificationDisabledWithSub();
    case PRIVACY_SYNC_CONTACTS:
      return isSetPrivacySyncContacts();
    case PRIVACY_SEARCH_BY_PHONE_NUMBER:
      return isSetPrivacySearchByPhoneNumber();
    case PRIVACY_SEARCH_BY_USERID:
      return isSetPrivacySearchByUserid();
    case PRIVACY_SEARCH_BY_EMAIL:
      return isSetPrivacySearchByEmail();
    case PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN:
      return isSetPrivacyAllowSecondaryDeviceLogin();
    case PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME:
      return isSetPrivacyProfileImagePostToMyhome();
    case PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND:
      return isSetPrivacyReceiveMessagesFromNotFriend();
    case CONTACT_MY_TICKET:
      return isSetContactMyTicket();
    case IDENTITY_PROVIDER:
      return isSetIdentityProvider();
    case IDENTITY_IDENTIFIER:
      return isSetIdentityIdentifier();
    case SNS_ACCOUNTS:
      return isSetSnsAccounts();
    case PHONE_REGISTRATION:
      return isSetPhoneRegistration();
    case EMAIL_CONFIRMATION_STATUS:
      return isSetEmailConfirmationStatus();
    case PREFERENCE_LOCALE:
      return isSetPreferenceLocale();
    case CUSTOM_MODES:
      return isSetCustomModes();
    case E2EE_ENABLE:
      return isSetE2eeEnable();
    case HITOKOTO_BACKUP_REQUESTED:
      return isSetHitokotoBackupRequested();
    case PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME:
      return isSetPrivacyProfileMusicPostToMyhome();
    case PRIVACY_ALLOW_NEARBY:
      return isSetPrivacyAllowNearby();
    case AGREEMENT_NEARBY_TIME:
      return isSetAgreementNearbyTime();
    case AGREEMENT_SQUARE_TIME:
      return isSetAgreementSquareTime();
    case NOTIFICATION_MENTION:
      return isSetNotificationMention();
    case BOT_USE_AGREEMENT_ACCEPTED_AT:
      return isSetBotUseAgreementAcceptedAt();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Settings)
      return this.equals((Settings)that);
    return false;
  }

  public boolean equals(Settings that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_notificationEnable = true;
    boolean that_present_notificationEnable = true;
    if (this_present_notificationEnable || that_present_notificationEnable) {
      if (!(this_present_notificationEnable && that_present_notificationEnable))
        return false;
      if (this.notificationEnable != that.notificationEnable)
        return false;
    }

    boolean this_present_notificationMuteExpiration = true;
    boolean that_present_notificationMuteExpiration = true;
    if (this_present_notificationMuteExpiration || that_present_notificationMuteExpiration) {
      if (!(this_present_notificationMuteExpiration && that_present_notificationMuteExpiration))
        return false;
      if (this.notificationMuteExpiration != that.notificationMuteExpiration)
        return false;
    }

    boolean this_present_notificationNewMessage = true;
    boolean that_present_notificationNewMessage = true;
    if (this_present_notificationNewMessage || that_present_notificationNewMessage) {
      if (!(this_present_notificationNewMessage && that_present_notificationNewMessage))
        return false;
      if (this.notificationNewMessage != that.notificationNewMessage)
        return false;
    }

    boolean this_present_notificationGroupInvitation = true;
    boolean that_present_notificationGroupInvitation = true;
    if (this_present_notificationGroupInvitation || that_present_notificationGroupInvitation) {
      if (!(this_present_notificationGroupInvitation && that_present_notificationGroupInvitation))
        return false;
      if (this.notificationGroupInvitation != that.notificationGroupInvitation)
        return false;
    }

    boolean this_present_notificationShowMessage = true;
    boolean that_present_notificationShowMessage = true;
    if (this_present_notificationShowMessage || that_present_notificationShowMessage) {
      if (!(this_present_notificationShowMessage && that_present_notificationShowMessage))
        return false;
      if (this.notificationShowMessage != that.notificationShowMessage)
        return false;
    }

    boolean this_present_notificationIncomingCall = true;
    boolean that_present_notificationIncomingCall = true;
    if (this_present_notificationIncomingCall || that_present_notificationIncomingCall) {
      if (!(this_present_notificationIncomingCall && that_present_notificationIncomingCall))
        return false;
      if (this.notificationIncomingCall != that.notificationIncomingCall)
        return false;
    }

    boolean this_present_notificationSoundMessage = true && this.isSetNotificationSoundMessage();
    boolean that_present_notificationSoundMessage = true && that.isSetNotificationSoundMessage();
    if (this_present_notificationSoundMessage || that_present_notificationSoundMessage) {
      if (!(this_present_notificationSoundMessage && that_present_notificationSoundMessage))
        return false;
      if (!this.notificationSoundMessage.equals(that.notificationSoundMessage))
        return false;
    }

    boolean this_present_notificationSoundGroup = true && this.isSetNotificationSoundGroup();
    boolean that_present_notificationSoundGroup = true && that.isSetNotificationSoundGroup();
    if (this_present_notificationSoundGroup || that_present_notificationSoundGroup) {
      if (!(this_present_notificationSoundGroup && that_present_notificationSoundGroup))
        return false;
      if (!this.notificationSoundGroup.equals(that.notificationSoundGroup))
        return false;
    }

    boolean this_present_notificationDisabledWithSub = true;
    boolean that_present_notificationDisabledWithSub = true;
    if (this_present_notificationDisabledWithSub || that_present_notificationDisabledWithSub) {
      if (!(this_present_notificationDisabledWithSub && that_present_notificationDisabledWithSub))
        return false;
      if (this.notificationDisabledWithSub != that.notificationDisabledWithSub)
        return false;
    }

    boolean this_present_privacySyncContacts = true;
    boolean that_present_privacySyncContacts = true;
    if (this_present_privacySyncContacts || that_present_privacySyncContacts) {
      if (!(this_present_privacySyncContacts && that_present_privacySyncContacts))
        return false;
      if (this.privacySyncContacts != that.privacySyncContacts)
        return false;
    }

    boolean this_present_privacySearchByPhoneNumber = true;
    boolean that_present_privacySearchByPhoneNumber = true;
    if (this_present_privacySearchByPhoneNumber || that_present_privacySearchByPhoneNumber) {
      if (!(this_present_privacySearchByPhoneNumber && that_present_privacySearchByPhoneNumber))
        return false;
      if (this.privacySearchByPhoneNumber != that.privacySearchByPhoneNumber)
        return false;
    }

    boolean this_present_privacySearchByUserid = true;
    boolean that_present_privacySearchByUserid = true;
    if (this_present_privacySearchByUserid || that_present_privacySearchByUserid) {
      if (!(this_present_privacySearchByUserid && that_present_privacySearchByUserid))
        return false;
      if (this.privacySearchByUserid != that.privacySearchByUserid)
        return false;
    }

    boolean this_present_privacySearchByEmail = true;
    boolean that_present_privacySearchByEmail = true;
    if (this_present_privacySearchByEmail || that_present_privacySearchByEmail) {
      if (!(this_present_privacySearchByEmail && that_present_privacySearchByEmail))
        return false;
      if (this.privacySearchByEmail != that.privacySearchByEmail)
        return false;
    }

    boolean this_present_privacyAllowSecondaryDeviceLogin = true;
    boolean that_present_privacyAllowSecondaryDeviceLogin = true;
    if (this_present_privacyAllowSecondaryDeviceLogin || that_present_privacyAllowSecondaryDeviceLogin) {
      if (!(this_present_privacyAllowSecondaryDeviceLogin && that_present_privacyAllowSecondaryDeviceLogin))
        return false;
      if (this.privacyAllowSecondaryDeviceLogin != that.privacyAllowSecondaryDeviceLogin)
        return false;
    }

    boolean this_present_privacyProfileImagePostToMyhome = true;
    boolean that_present_privacyProfileImagePostToMyhome = true;
    if (this_present_privacyProfileImagePostToMyhome || that_present_privacyProfileImagePostToMyhome) {
      if (!(this_present_privacyProfileImagePostToMyhome && that_present_privacyProfileImagePostToMyhome))
        return false;
      if (this.privacyProfileImagePostToMyhome != that.privacyProfileImagePostToMyhome)
        return false;
    }

    boolean this_present_privacyReceiveMessagesFromNotFriend = true;
    boolean that_present_privacyReceiveMessagesFromNotFriend = true;
    if (this_present_privacyReceiveMessagesFromNotFriend || that_present_privacyReceiveMessagesFromNotFriend) {
      if (!(this_present_privacyReceiveMessagesFromNotFriend && that_present_privacyReceiveMessagesFromNotFriend))
        return false;
      if (this.privacyReceiveMessagesFromNotFriend != that.privacyReceiveMessagesFromNotFriend)
        return false;
    }

    boolean this_present_contactMyTicket = true && this.isSetContactMyTicket();
    boolean that_present_contactMyTicket = true && that.isSetContactMyTicket();
    if (this_present_contactMyTicket || that_present_contactMyTicket) {
      if (!(this_present_contactMyTicket && that_present_contactMyTicket))
        return false;
      if (!this.contactMyTicket.equals(that.contactMyTicket))
        return false;
    }

    boolean this_present_identityProvider = true && this.isSetIdentityProvider();
    boolean that_present_identityProvider = true && that.isSetIdentityProvider();
    if (this_present_identityProvider || that_present_identityProvider) {
      if (!(this_present_identityProvider && that_present_identityProvider))
        return false;
      if (!this.identityProvider.equals(that.identityProvider))
        return false;
    }

    boolean this_present_identityIdentifier = true && this.isSetIdentityIdentifier();
    boolean that_present_identityIdentifier = true && that.isSetIdentityIdentifier();
    if (this_present_identityIdentifier || that_present_identityIdentifier) {
      if (!(this_present_identityIdentifier && that_present_identityIdentifier))
        return false;
      if (!this.identityIdentifier.equals(that.identityIdentifier))
        return false;
    }

    boolean this_present_snsAccounts = true && this.isSetSnsAccounts();
    boolean that_present_snsAccounts = true && that.isSetSnsAccounts();
    if (this_present_snsAccounts || that_present_snsAccounts) {
      if (!(this_present_snsAccounts && that_present_snsAccounts))
        return false;
      if (!this.snsAccounts.equals(that.snsAccounts))
        return false;
    }

    boolean this_present_phoneRegistration = true;
    boolean that_present_phoneRegistration = true;
    if (this_present_phoneRegistration || that_present_phoneRegistration) {
      if (!(this_present_phoneRegistration && that_present_phoneRegistration))
        return false;
      if (this.phoneRegistration != that.phoneRegistration)
        return false;
    }

    boolean this_present_emailConfirmationStatus = true && this.isSetEmailConfirmationStatus();
    boolean that_present_emailConfirmationStatus = true && that.isSetEmailConfirmationStatus();
    if (this_present_emailConfirmationStatus || that_present_emailConfirmationStatus) {
      if (!(this_present_emailConfirmationStatus && that_present_emailConfirmationStatus))
        return false;
      if (!this.emailConfirmationStatus.equals(that.emailConfirmationStatus))
        return false;
    }

    boolean this_present_preferenceLocale = true && this.isSetPreferenceLocale();
    boolean that_present_preferenceLocale = true && that.isSetPreferenceLocale();
    if (this_present_preferenceLocale || that_present_preferenceLocale) {
      if (!(this_present_preferenceLocale && that_present_preferenceLocale))
        return false;
      if (!this.preferenceLocale.equals(that.preferenceLocale))
        return false;
    }

    boolean this_present_customModes = true && this.isSetCustomModes();
    boolean that_present_customModes = true && that.isSetCustomModes();
    if (this_present_customModes || that_present_customModes) {
      if (!(this_present_customModes && that_present_customModes))
        return false;
      if (!this.customModes.equals(that.customModes))
        return false;
    }

    boolean this_present_e2eeEnable = true;
    boolean that_present_e2eeEnable = true;
    if (this_present_e2eeEnable || that_present_e2eeEnable) {
      if (!(this_present_e2eeEnable && that_present_e2eeEnable))
        return false;
      if (this.e2eeEnable != that.e2eeEnable)
        return false;
    }

    boolean this_present_hitokotoBackupRequested = true;
    boolean that_present_hitokotoBackupRequested = true;
    if (this_present_hitokotoBackupRequested || that_present_hitokotoBackupRequested) {
      if (!(this_present_hitokotoBackupRequested && that_present_hitokotoBackupRequested))
        return false;
      if (this.hitokotoBackupRequested != that.hitokotoBackupRequested)
        return false;
    }

    boolean this_present_privacyProfileMusicPostToMyhome = true;
    boolean that_present_privacyProfileMusicPostToMyhome = true;
    if (this_present_privacyProfileMusicPostToMyhome || that_present_privacyProfileMusicPostToMyhome) {
      if (!(this_present_privacyProfileMusicPostToMyhome && that_present_privacyProfileMusicPostToMyhome))
        return false;
      if (this.privacyProfileMusicPostToMyhome != that.privacyProfileMusicPostToMyhome)
        return false;
    }

    boolean this_present_privacyAllowNearby = true;
    boolean that_present_privacyAllowNearby = true;
    if (this_present_privacyAllowNearby || that_present_privacyAllowNearby) {
      if (!(this_present_privacyAllowNearby && that_present_privacyAllowNearby))
        return false;
      if (this.privacyAllowNearby != that.privacyAllowNearby)
        return false;
    }

    boolean this_present_agreementNearbyTime = true;
    boolean that_present_agreementNearbyTime = true;
    if (this_present_agreementNearbyTime || that_present_agreementNearbyTime) {
      if (!(this_present_agreementNearbyTime && that_present_agreementNearbyTime))
        return false;
      if (this.agreementNearbyTime != that.agreementNearbyTime)
        return false;
    }

    boolean this_present_agreementSquareTime = true;
    boolean that_present_agreementSquareTime = true;
    if (this_present_agreementSquareTime || that_present_agreementSquareTime) {
      if (!(this_present_agreementSquareTime && that_present_agreementSquareTime))
        return false;
      if (this.agreementSquareTime != that.agreementSquareTime)
        return false;
    }

    boolean this_present_notificationMention = true;
    boolean that_present_notificationMention = true;
    if (this_present_notificationMention || that_present_notificationMention) {
      if (!(this_present_notificationMention && that_present_notificationMention))
        return false;
      if (this.notificationMention != that.notificationMention)
        return false;
    }

    boolean this_present_botUseAgreementAcceptedAt = true;
    boolean that_present_botUseAgreementAcceptedAt = true;
    if (this_present_botUseAgreementAcceptedAt || that_present_botUseAgreementAcceptedAt) {
      if (!(this_present_botUseAgreementAcceptedAt && that_present_botUseAgreementAcceptedAt))
        return false;
      if (this.botUseAgreementAcceptedAt != that.botUseAgreementAcceptedAt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((notificationEnable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(notificationMuteExpiration);

    hashCode = hashCode * 8191 + ((notificationNewMessage) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((notificationGroupInvitation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((notificationShowMessage) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((notificationIncomingCall) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNotificationSoundMessage()) ? 131071 : 524287);
    if (isSetNotificationSoundMessage())
      hashCode = hashCode * 8191 + notificationSoundMessage.hashCode();

    hashCode = hashCode * 8191 + ((isSetNotificationSoundGroup()) ? 131071 : 524287);
    if (isSetNotificationSoundGroup())
      hashCode = hashCode * 8191 + notificationSoundGroup.hashCode();

    hashCode = hashCode * 8191 + ((notificationDisabledWithSub) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((privacySyncContacts) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((privacySearchByPhoneNumber) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((privacySearchByUserid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((privacySearchByEmail) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((privacyAllowSecondaryDeviceLogin) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((privacyProfileImagePostToMyhome) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((privacyReceiveMessagesFromNotFriend) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetContactMyTicket()) ? 131071 : 524287);
    if (isSetContactMyTicket())
      hashCode = hashCode * 8191 + contactMyTicket.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdentityProvider()) ? 131071 : 524287);
    if (isSetIdentityProvider())
      hashCode = hashCode * 8191 + identityProvider.getValue();

    hashCode = hashCode * 8191 + ((isSetIdentityIdentifier()) ? 131071 : 524287);
    if (isSetIdentityIdentifier())
      hashCode = hashCode * 8191 + identityIdentifier.hashCode();

    hashCode = hashCode * 8191 + ((isSetSnsAccounts()) ? 131071 : 524287);
    if (isSetSnsAccounts())
      hashCode = hashCode * 8191 + snsAccounts.hashCode();

    hashCode = hashCode * 8191 + ((phoneRegistration) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetEmailConfirmationStatus()) ? 131071 : 524287);
    if (isSetEmailConfirmationStatus())
      hashCode = hashCode * 8191 + emailConfirmationStatus.getValue();

    hashCode = hashCode * 8191 + ((isSetPreferenceLocale()) ? 131071 : 524287);
    if (isSetPreferenceLocale())
      hashCode = hashCode * 8191 + preferenceLocale.hashCode();

    hashCode = hashCode * 8191 + ((isSetCustomModes()) ? 131071 : 524287);
    if (isSetCustomModes())
      hashCode = hashCode * 8191 + customModes.hashCode();

    hashCode = hashCode * 8191 + ((e2eeEnable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((hitokotoBackupRequested) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((privacyProfileMusicPostToMyhome) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((privacyAllowNearby) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(agreementNearbyTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(agreementSquareTime);

    hashCode = hashCode * 8191 + ((notificationMention) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(botUseAgreementAcceptedAt);

    return hashCode;
  }

  @Override
  public int compareTo(Settings other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetNotificationEnable()).compareTo(other.isSetNotificationEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationEnable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationEnable, other.notificationEnable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationMuteExpiration()).compareTo(other.isSetNotificationMuteExpiration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationMuteExpiration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationMuteExpiration, other.notificationMuteExpiration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationNewMessage()).compareTo(other.isSetNotificationNewMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationNewMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationNewMessage, other.notificationNewMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationGroupInvitation()).compareTo(other.isSetNotificationGroupInvitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationGroupInvitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationGroupInvitation, other.notificationGroupInvitation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationShowMessage()).compareTo(other.isSetNotificationShowMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationShowMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationShowMessage, other.notificationShowMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationIncomingCall()).compareTo(other.isSetNotificationIncomingCall());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationIncomingCall()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationIncomingCall, other.notificationIncomingCall);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationSoundMessage()).compareTo(other.isSetNotificationSoundMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationSoundMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationSoundMessage, other.notificationSoundMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationSoundGroup()).compareTo(other.isSetNotificationSoundGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationSoundGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationSoundGroup, other.notificationSoundGroup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationDisabledWithSub()).compareTo(other.isSetNotificationDisabledWithSub());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationDisabledWithSub()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationDisabledWithSub, other.notificationDisabledWithSub);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivacySyncContacts()).compareTo(other.isSetPrivacySyncContacts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacySyncContacts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacySyncContacts, other.privacySyncContacts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivacySearchByPhoneNumber()).compareTo(other.isSetPrivacySearchByPhoneNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacySearchByPhoneNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacySearchByPhoneNumber, other.privacySearchByPhoneNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivacySearchByUserid()).compareTo(other.isSetPrivacySearchByUserid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacySearchByUserid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacySearchByUserid, other.privacySearchByUserid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivacySearchByEmail()).compareTo(other.isSetPrivacySearchByEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacySearchByEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacySearchByEmail, other.privacySearchByEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivacyAllowSecondaryDeviceLogin()).compareTo(other.isSetPrivacyAllowSecondaryDeviceLogin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacyAllowSecondaryDeviceLogin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacyAllowSecondaryDeviceLogin, other.privacyAllowSecondaryDeviceLogin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivacyProfileImagePostToMyhome()).compareTo(other.isSetPrivacyProfileImagePostToMyhome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacyProfileImagePostToMyhome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacyProfileImagePostToMyhome, other.privacyProfileImagePostToMyhome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivacyReceiveMessagesFromNotFriend()).compareTo(other.isSetPrivacyReceiveMessagesFromNotFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacyReceiveMessagesFromNotFriend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacyReceiveMessagesFromNotFriend, other.privacyReceiveMessagesFromNotFriend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContactMyTicket()).compareTo(other.isSetContactMyTicket());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactMyTicket()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contactMyTicket, other.contactMyTicket);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdentityProvider()).compareTo(other.isSetIdentityProvider());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityProvider()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityProvider, other.identityProvider);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdentityIdentifier()).compareTo(other.isSetIdentityIdentifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentityIdentifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identityIdentifier, other.identityIdentifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSnsAccounts()).compareTo(other.isSetSnsAccounts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSnsAccounts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.snsAccounts, other.snsAccounts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhoneRegistration()).compareTo(other.isSetPhoneRegistration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoneRegistration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneRegistration, other.phoneRegistration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmailConfirmationStatus()).compareTo(other.isSetEmailConfirmationStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmailConfirmationStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emailConfirmationStatus, other.emailConfirmationStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPreferenceLocale()).compareTo(other.isSetPreferenceLocale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreferenceLocale()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.preferenceLocale, other.preferenceLocale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCustomModes()).compareTo(other.isSetCustomModes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCustomModes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.customModes, other.customModes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetE2eeEnable()).compareTo(other.isSetE2eeEnable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetE2eeEnable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e2eeEnable, other.e2eeEnable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHitokotoBackupRequested()).compareTo(other.isSetHitokotoBackupRequested());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHitokotoBackupRequested()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hitokotoBackupRequested, other.hitokotoBackupRequested);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivacyProfileMusicPostToMyhome()).compareTo(other.isSetPrivacyProfileMusicPostToMyhome());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacyProfileMusicPostToMyhome()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacyProfileMusicPostToMyhome, other.privacyProfileMusicPostToMyhome);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivacyAllowNearby()).compareTo(other.isSetPrivacyAllowNearby());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivacyAllowNearby()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privacyAllowNearby, other.privacyAllowNearby);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAgreementNearbyTime()).compareTo(other.isSetAgreementNearbyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgreementNearbyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agreementNearbyTime, other.agreementNearbyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAgreementSquareTime()).compareTo(other.isSetAgreementSquareTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAgreementSquareTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.agreementSquareTime, other.agreementSquareTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotificationMention()).compareTo(other.isSetNotificationMention());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationMention()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationMention, other.notificationMention);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBotUseAgreementAcceptedAt()).compareTo(other.isSetBotUseAgreementAcceptedAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBotUseAgreementAcceptedAt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.botUseAgreementAcceptedAt, other.botUseAgreementAcceptedAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Settings(");
    boolean first = true;

    sb.append("notificationEnable:");
    sb.append(this.notificationEnable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationMuteExpiration:");
    sb.append(this.notificationMuteExpiration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationNewMessage:");
    sb.append(this.notificationNewMessage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationGroupInvitation:");
    sb.append(this.notificationGroupInvitation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationShowMessage:");
    sb.append(this.notificationShowMessage);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationIncomingCall:");
    sb.append(this.notificationIncomingCall);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationSoundMessage:");
    if (this.notificationSoundMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.notificationSoundMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationSoundGroup:");
    if (this.notificationSoundGroup == null) {
      sb.append("null");
    } else {
      sb.append(this.notificationSoundGroup);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationDisabledWithSub:");
    sb.append(this.notificationDisabledWithSub);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacySyncContacts:");
    sb.append(this.privacySyncContacts);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacySearchByPhoneNumber:");
    sb.append(this.privacySearchByPhoneNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacySearchByUserid:");
    sb.append(this.privacySearchByUserid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacySearchByEmail:");
    sb.append(this.privacySearchByEmail);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacyAllowSecondaryDeviceLogin:");
    sb.append(this.privacyAllowSecondaryDeviceLogin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacyProfileImagePostToMyhome:");
    sb.append(this.privacyProfileImagePostToMyhome);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacyReceiveMessagesFromNotFriend:");
    sb.append(this.privacyReceiveMessagesFromNotFriend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactMyTicket:");
    if (this.contactMyTicket == null) {
      sb.append("null");
    } else {
      sb.append(this.contactMyTicket);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityProvider:");
    if (this.identityProvider == null) {
      sb.append("null");
    } else {
      sb.append(this.identityProvider);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identityIdentifier:");
    if (this.identityIdentifier == null) {
      sb.append("null");
    } else {
      sb.append(this.identityIdentifier);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("snsAccounts:");
    if (this.snsAccounts == null) {
      sb.append("null");
    } else {
      sb.append(this.snsAccounts);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phoneRegistration:");
    sb.append(this.phoneRegistration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("emailConfirmationStatus:");
    if (this.emailConfirmationStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.emailConfirmationStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("preferenceLocale:");
    if (this.preferenceLocale == null) {
      sb.append("null");
    } else {
      sb.append(this.preferenceLocale);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("customModes:");
    if (this.customModes == null) {
      sb.append("null");
    } else {
      sb.append(this.customModes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("e2eeEnable:");
    sb.append(this.e2eeEnable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hitokotoBackupRequested:");
    sb.append(this.hitokotoBackupRequested);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacyProfileMusicPostToMyhome:");
    sb.append(this.privacyProfileMusicPostToMyhome);
    first = false;
    if (!first) sb.append(", ");
    sb.append("privacyAllowNearby:");
    sb.append(this.privacyAllowNearby);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agreementNearbyTime:");
    sb.append(this.agreementNearbyTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("agreementSquareTime:");
    sb.append(this.agreementSquareTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationMention:");
    sb.append(this.notificationMention);
    first = false;
    if (!first) sb.append(", ");
    sb.append("botUseAgreementAcceptedAt:");
    sb.append(this.botUseAgreementAcceptedAt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SettingsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SettingsStandardScheme getScheme() {
      return new SettingsStandardScheme();
    }
  }

  private static class SettingsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Settings> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Settings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 10: // NOTIFICATION_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationEnable = iprot.readBool();
              struct.setNotificationEnableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NOTIFICATION_MUTE_EXPIRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.notificationMuteExpiration = iprot.readI64();
              struct.setNotificationMuteExpirationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NOTIFICATION_NEW_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationNewMessage = iprot.readBool();
              struct.setNotificationNewMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NOTIFICATION_GROUP_INVITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationGroupInvitation = iprot.readBool();
              struct.setNotificationGroupInvitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NOTIFICATION_SHOW_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationShowMessage = iprot.readBool();
              struct.setNotificationShowMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NOTIFICATION_INCOMING_CALL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationIncomingCall = iprot.readBool();
              struct.setNotificationIncomingCallIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NOTIFICATION_SOUND_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notificationSoundMessage = iprot.readString();
              struct.setNotificationSoundMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NOTIFICATION_SOUND_GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notificationSoundGroup = iprot.readString();
              struct.setNotificationSoundGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NOTIFICATION_DISABLED_WITH_SUB
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationDisabledWithSub = iprot.readBool();
              struct.setNotificationDisabledWithSubIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // PRIVACY_SYNC_CONTACTS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacySyncContacts = iprot.readBool();
              struct.setPrivacySyncContactsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // PRIVACY_SEARCH_BY_PHONE_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacySearchByPhoneNumber = iprot.readBool();
              struct.setPrivacySearchByPhoneNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // PRIVACY_SEARCH_BY_USERID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacySearchByUserid = iprot.readBool();
              struct.setPrivacySearchByUseridIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PRIVACY_SEARCH_BY_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacySearchByEmail = iprot.readBool();
              struct.setPrivacySearchByEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacyAllowSecondaryDeviceLogin = iprot.readBool();
              struct.setPrivacyAllowSecondaryDeviceLoginIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacyProfileImagePostToMyhome = iprot.readBool();
              struct.setPrivacyProfileImagePostToMyhomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 26: // PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacyReceiveMessagesFromNotFriend = iprot.readBool();
              struct.setPrivacyReceiveMessagesFromNotFriendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 30: // CONTACT_MY_TICKET
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contactMyTicket = iprot.readString();
              struct.setContactMyTicketIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 40: // IDENTITY_PROVIDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.identityProvider = IdentityProvider.findByValue(iprot.readI32());
              struct.setIdentityProviderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 41: // IDENTITY_IDENTIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identityIdentifier = iprot.readString();
              struct.setIdentityIdentifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 42: // SNS_ACCOUNTS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map482 = iprot.readMapBegin();
                struct.snsAccounts = new java.util.EnumMap<SnsIdType,java.lang.String>(SnsIdType.class);
                SnsIdType _key483;
                java.lang.String _val484;
                for (int _i485 = 0; _i485 < _map482.size; ++_i485)
                {
                  _key483 = SnsIdType.findByValue(iprot.readI32());
                  _val484 = iprot.readString();
                  if (_key483 != null)
                  {
                    struct.snsAccounts.put(_key483, _val484);
                  }
                }
                iprot.readMapEnd();
              }
              struct.setSnsAccountsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 43: // PHONE_REGISTRATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.phoneRegistration = iprot.readBool();
              struct.setPhoneRegistrationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 44: // EMAIL_CONFIRMATION_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.emailConfirmationStatus = EmailConfirmationStatus.findByValue(iprot.readI32());
              struct.setEmailConfirmationStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 50: // PREFERENCE_LOCALE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.preferenceLocale = iprot.readString();
              struct.setPreferenceLocaleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 60: // CUSTOM_MODES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map486 = iprot.readMapBegin();
                struct.customModes = new java.util.EnumMap<CustomMode,java.lang.String>(CustomMode.class);
                CustomMode _key487;
                java.lang.String _val488;
                for (int _i489 = 0; _i489 < _map486.size; ++_i489)
                {
                  _key487 = CustomMode.findByValue(iprot.readI32());
                  _val488 = iprot.readString();
                  if (_key487 != null)
                  {
                    struct.customModes.put(_key487, _val488);
                  }
                }
                iprot.readMapEnd();
              }
              struct.setCustomModesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 61: // E2EE_ENABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.e2eeEnable = iprot.readBool();
              struct.setE2eeEnableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 62: // HITOKOTO_BACKUP_REQUESTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hitokotoBackupRequested = iprot.readBool();
              struct.setHitokotoBackupRequestedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 63: // PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacyProfileMusicPostToMyhome = iprot.readBool();
              struct.setPrivacyProfileMusicPostToMyhomeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 65: // PRIVACY_ALLOW_NEARBY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privacyAllowNearby = iprot.readBool();
              struct.setPrivacyAllowNearbyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 66: // AGREEMENT_NEARBY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.agreementNearbyTime = iprot.readI64();
              struct.setAgreementNearbyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 67: // AGREEMENT_SQUARE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.agreementSquareTime = iprot.readI64();
              struct.setAgreementSquareTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 68: // NOTIFICATION_MENTION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationMention = iprot.readBool();
              struct.setNotificationMentionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 69: // BOT_USE_AGREEMENT_ACCEPTED_AT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.botUseAgreementAcceptedAt = iprot.readI64();
              struct.setBotUseAgreementAcceptedAtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Settings struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NOTIFICATION_ENABLE_FIELD_DESC);
      oprot.writeBool(struct.notificationEnable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_MUTE_EXPIRATION_FIELD_DESC);
      oprot.writeI64(struct.notificationMuteExpiration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_NEW_MESSAGE_FIELD_DESC);
      oprot.writeBool(struct.notificationNewMessage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_GROUP_INVITATION_FIELD_DESC);
      oprot.writeBool(struct.notificationGroupInvitation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_SHOW_MESSAGE_FIELD_DESC);
      oprot.writeBool(struct.notificationShowMessage);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_INCOMING_CALL_FIELD_DESC);
      oprot.writeBool(struct.notificationIncomingCall);
      oprot.writeFieldEnd();
      if (struct.notificationSoundMessage != null) {
        oprot.writeFieldBegin(NOTIFICATION_SOUND_MESSAGE_FIELD_DESC);
        oprot.writeString(struct.notificationSoundMessage);
        oprot.writeFieldEnd();
      }
      if (struct.notificationSoundGroup != null) {
        oprot.writeFieldBegin(NOTIFICATION_SOUND_GROUP_FIELD_DESC);
        oprot.writeString(struct.notificationSoundGroup);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFICATION_DISABLED_WITH_SUB_FIELD_DESC);
      oprot.writeBool(struct.notificationDisabledWithSub);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SYNC_CONTACTS_FIELD_DESC);
      oprot.writeBool(struct.privacySyncContacts);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SEARCH_BY_PHONE_NUMBER_FIELD_DESC);
      oprot.writeBool(struct.privacySearchByPhoneNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SEARCH_BY_USERID_FIELD_DESC);
      oprot.writeBool(struct.privacySearchByUserid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_SEARCH_BY_EMAIL_FIELD_DESC);
      oprot.writeBool(struct.privacySearchByEmail);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_ALLOW_SECONDARY_DEVICE_LOGIN_FIELD_DESC);
      oprot.writeBool(struct.privacyAllowSecondaryDeviceLogin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_PROFILE_IMAGE_POST_TO_MYHOME_FIELD_DESC);
      oprot.writeBool(struct.privacyProfileImagePostToMyhome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_RECEIVE_MESSAGES_FROM_NOT_FRIEND_FIELD_DESC);
      oprot.writeBool(struct.privacyReceiveMessagesFromNotFriend);
      oprot.writeFieldEnd();
      if (struct.contactMyTicket != null) {
        oprot.writeFieldBegin(CONTACT_MY_TICKET_FIELD_DESC);
        oprot.writeString(struct.contactMyTicket);
        oprot.writeFieldEnd();
      }
      if (struct.identityProvider != null) {
        oprot.writeFieldBegin(IDENTITY_PROVIDER_FIELD_DESC);
        oprot.writeI32(struct.identityProvider.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.identityIdentifier != null) {
        oprot.writeFieldBegin(IDENTITY_IDENTIFIER_FIELD_DESC);
        oprot.writeString(struct.identityIdentifier);
        oprot.writeFieldEnd();
      }
      if (struct.snsAccounts != null) {
        oprot.writeFieldBegin(SNS_ACCOUNTS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.snsAccounts.size()));
          for (java.util.Map.Entry<SnsIdType, java.lang.String> _iter490 : struct.snsAccounts.entrySet())
          {
            oprot.writeI32(_iter490.getKey().getValue());
            oprot.writeString(_iter490.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PHONE_REGISTRATION_FIELD_DESC);
      oprot.writeBool(struct.phoneRegistration);
      oprot.writeFieldEnd();
      if (struct.emailConfirmationStatus != null) {
        oprot.writeFieldBegin(EMAIL_CONFIRMATION_STATUS_FIELD_DESC);
        oprot.writeI32(struct.emailConfirmationStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.preferenceLocale != null) {
        oprot.writeFieldBegin(PREFERENCE_LOCALE_FIELD_DESC);
        oprot.writeString(struct.preferenceLocale);
        oprot.writeFieldEnd();
      }
      if (struct.customModes != null) {
        oprot.writeFieldBegin(CUSTOM_MODES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.customModes.size()));
          for (java.util.Map.Entry<CustomMode, java.lang.String> _iter491 : struct.customModes.entrySet())
          {
            oprot.writeI32(_iter491.getKey().getValue());
            oprot.writeString(_iter491.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(E2EE_ENABLE_FIELD_DESC);
      oprot.writeBool(struct.e2eeEnable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HITOKOTO_BACKUP_REQUESTED_FIELD_DESC);
      oprot.writeBool(struct.hitokotoBackupRequested);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_PROFILE_MUSIC_POST_TO_MYHOME_FIELD_DESC);
      oprot.writeBool(struct.privacyProfileMusicPostToMyhome);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIVACY_ALLOW_NEARBY_FIELD_DESC);
      oprot.writeBool(struct.privacyAllowNearby);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGREEMENT_NEARBY_TIME_FIELD_DESC);
      oprot.writeI64(struct.agreementNearbyTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AGREEMENT_SQUARE_TIME_FIELD_DESC);
      oprot.writeI64(struct.agreementSquareTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NOTIFICATION_MENTION_FIELD_DESC);
      oprot.writeBool(struct.notificationMention);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BOT_USE_AGREEMENT_ACCEPTED_AT_FIELD_DESC);
      oprot.writeI64(struct.botUseAgreementAcceptedAt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SettingsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SettingsTupleScheme getScheme() {
      return new SettingsTupleScheme();
    }
  }

  private static class SettingsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Settings> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Settings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNotificationEnable()) {
        optionals.set(0);
      }
      if (struct.isSetNotificationMuteExpiration()) {
        optionals.set(1);
      }
      if (struct.isSetNotificationNewMessage()) {
        optionals.set(2);
      }
      if (struct.isSetNotificationGroupInvitation()) {
        optionals.set(3);
      }
      if (struct.isSetNotificationShowMessage()) {
        optionals.set(4);
      }
      if (struct.isSetNotificationIncomingCall()) {
        optionals.set(5);
      }
      if (struct.isSetNotificationSoundMessage()) {
        optionals.set(6);
      }
      if (struct.isSetNotificationSoundGroup()) {
        optionals.set(7);
      }
      if (struct.isSetNotificationDisabledWithSub()) {
        optionals.set(8);
      }
      if (struct.isSetPrivacySyncContacts()) {
        optionals.set(9);
      }
      if (struct.isSetPrivacySearchByPhoneNumber()) {
        optionals.set(10);
      }
      if (struct.isSetPrivacySearchByUserid()) {
        optionals.set(11);
      }
      if (struct.isSetPrivacySearchByEmail()) {
        optionals.set(12);
      }
      if (struct.isSetPrivacyAllowSecondaryDeviceLogin()) {
        optionals.set(13);
      }
      if (struct.isSetPrivacyProfileImagePostToMyhome()) {
        optionals.set(14);
      }
      if (struct.isSetPrivacyReceiveMessagesFromNotFriend()) {
        optionals.set(15);
      }
      if (struct.isSetContactMyTicket()) {
        optionals.set(16);
      }
      if (struct.isSetIdentityProvider()) {
        optionals.set(17);
      }
      if (struct.isSetIdentityIdentifier()) {
        optionals.set(18);
      }
      if (struct.isSetSnsAccounts()) {
        optionals.set(19);
      }
      if (struct.isSetPhoneRegistration()) {
        optionals.set(20);
      }
      if (struct.isSetEmailConfirmationStatus()) {
        optionals.set(21);
      }
      if (struct.isSetPreferenceLocale()) {
        optionals.set(22);
      }
      if (struct.isSetCustomModes()) {
        optionals.set(23);
      }
      if (struct.isSetE2eeEnable()) {
        optionals.set(24);
      }
      if (struct.isSetHitokotoBackupRequested()) {
        optionals.set(25);
      }
      if (struct.isSetPrivacyProfileMusicPostToMyhome()) {
        optionals.set(26);
      }
      if (struct.isSetPrivacyAllowNearby()) {
        optionals.set(27);
      }
      if (struct.isSetAgreementNearbyTime()) {
        optionals.set(28);
      }
      if (struct.isSetAgreementSquareTime()) {
        optionals.set(29);
      }
      if (struct.isSetNotificationMention()) {
        optionals.set(30);
      }
      if (struct.isSetBotUseAgreementAcceptedAt()) {
        optionals.set(31);
      }
      oprot.writeBitSet(optionals, 32);
      if (struct.isSetNotificationEnable()) {
        oprot.writeBool(struct.notificationEnable);
      }
      if (struct.isSetNotificationMuteExpiration()) {
        oprot.writeI64(struct.notificationMuteExpiration);
      }
      if (struct.isSetNotificationNewMessage()) {
        oprot.writeBool(struct.notificationNewMessage);
      }
      if (struct.isSetNotificationGroupInvitation()) {
        oprot.writeBool(struct.notificationGroupInvitation);
      }
      if (struct.isSetNotificationShowMessage()) {
        oprot.writeBool(struct.notificationShowMessage);
      }
      if (struct.isSetNotificationIncomingCall()) {
        oprot.writeBool(struct.notificationIncomingCall);
      }
      if (struct.isSetNotificationSoundMessage()) {
        oprot.writeString(struct.notificationSoundMessage);
      }
      if (struct.isSetNotificationSoundGroup()) {
        oprot.writeString(struct.notificationSoundGroup);
      }
      if (struct.isSetNotificationDisabledWithSub()) {
        oprot.writeBool(struct.notificationDisabledWithSub);
      }
      if (struct.isSetPrivacySyncContacts()) {
        oprot.writeBool(struct.privacySyncContacts);
      }
      if (struct.isSetPrivacySearchByPhoneNumber()) {
        oprot.writeBool(struct.privacySearchByPhoneNumber);
      }
      if (struct.isSetPrivacySearchByUserid()) {
        oprot.writeBool(struct.privacySearchByUserid);
      }
      if (struct.isSetPrivacySearchByEmail()) {
        oprot.writeBool(struct.privacySearchByEmail);
      }
      if (struct.isSetPrivacyAllowSecondaryDeviceLogin()) {
        oprot.writeBool(struct.privacyAllowSecondaryDeviceLogin);
      }
      if (struct.isSetPrivacyProfileImagePostToMyhome()) {
        oprot.writeBool(struct.privacyProfileImagePostToMyhome);
      }
      if (struct.isSetPrivacyReceiveMessagesFromNotFriend()) {
        oprot.writeBool(struct.privacyReceiveMessagesFromNotFriend);
      }
      if (struct.isSetContactMyTicket()) {
        oprot.writeString(struct.contactMyTicket);
      }
      if (struct.isSetIdentityProvider()) {
        oprot.writeI32(struct.identityProvider.getValue());
      }
      if (struct.isSetIdentityIdentifier()) {
        oprot.writeString(struct.identityIdentifier);
      }
      if (struct.isSetSnsAccounts()) {
        {
          oprot.writeI32(struct.snsAccounts.size());
          for (java.util.Map.Entry<SnsIdType, java.lang.String> _iter492 : struct.snsAccounts.entrySet())
          {
            oprot.writeI32(_iter492.getKey().getValue());
            oprot.writeString(_iter492.getValue());
          }
        }
      }
      if (struct.isSetPhoneRegistration()) {
        oprot.writeBool(struct.phoneRegistration);
      }
      if (struct.isSetEmailConfirmationStatus()) {
        oprot.writeI32(struct.emailConfirmationStatus.getValue());
      }
      if (struct.isSetPreferenceLocale()) {
        oprot.writeString(struct.preferenceLocale);
      }
      if (struct.isSetCustomModes()) {
        {
          oprot.writeI32(struct.customModes.size());
          for (java.util.Map.Entry<CustomMode, java.lang.String> _iter493 : struct.customModes.entrySet())
          {
            oprot.writeI32(_iter493.getKey().getValue());
            oprot.writeString(_iter493.getValue());
          }
        }
      }
      if (struct.isSetE2eeEnable()) {
        oprot.writeBool(struct.e2eeEnable);
      }
      if (struct.isSetHitokotoBackupRequested()) {
        oprot.writeBool(struct.hitokotoBackupRequested);
      }
      if (struct.isSetPrivacyProfileMusicPostToMyhome()) {
        oprot.writeBool(struct.privacyProfileMusicPostToMyhome);
      }
      if (struct.isSetPrivacyAllowNearby()) {
        oprot.writeBool(struct.privacyAllowNearby);
      }
      if (struct.isSetAgreementNearbyTime()) {
        oprot.writeI64(struct.agreementNearbyTime);
      }
      if (struct.isSetAgreementSquareTime()) {
        oprot.writeI64(struct.agreementSquareTime);
      }
      if (struct.isSetNotificationMention()) {
        oprot.writeBool(struct.notificationMention);
      }
      if (struct.isSetBotUseAgreementAcceptedAt()) {
        oprot.writeI64(struct.botUseAgreementAcceptedAt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Settings struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(32);
      if (incoming.get(0)) {
        struct.notificationEnable = iprot.readBool();
        struct.setNotificationEnableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.notificationMuteExpiration = iprot.readI64();
        struct.setNotificationMuteExpirationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notificationNewMessage = iprot.readBool();
        struct.setNotificationNewMessageIsSet(true);
      }
      if (incoming.get(3)) {
        struct.notificationGroupInvitation = iprot.readBool();
        struct.setNotificationGroupInvitationIsSet(true);
      }
      if (incoming.get(4)) {
        struct.notificationShowMessage = iprot.readBool();
        struct.setNotificationShowMessageIsSet(true);
      }
      if (incoming.get(5)) {
        struct.notificationIncomingCall = iprot.readBool();
        struct.setNotificationIncomingCallIsSet(true);
      }
      if (incoming.get(6)) {
        struct.notificationSoundMessage = iprot.readString();
        struct.setNotificationSoundMessageIsSet(true);
      }
      if (incoming.get(7)) {
        struct.notificationSoundGroup = iprot.readString();
        struct.setNotificationSoundGroupIsSet(true);
      }
      if (incoming.get(8)) {
        struct.notificationDisabledWithSub = iprot.readBool();
        struct.setNotificationDisabledWithSubIsSet(true);
      }
      if (incoming.get(9)) {
        struct.privacySyncContacts = iprot.readBool();
        struct.setPrivacySyncContactsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.privacySearchByPhoneNumber = iprot.readBool();
        struct.setPrivacySearchByPhoneNumberIsSet(true);
      }
      if (incoming.get(11)) {
        struct.privacySearchByUserid = iprot.readBool();
        struct.setPrivacySearchByUseridIsSet(true);
      }
      if (incoming.get(12)) {
        struct.privacySearchByEmail = iprot.readBool();
        struct.setPrivacySearchByEmailIsSet(true);
      }
      if (incoming.get(13)) {
        struct.privacyAllowSecondaryDeviceLogin = iprot.readBool();
        struct.setPrivacyAllowSecondaryDeviceLoginIsSet(true);
      }
      if (incoming.get(14)) {
        struct.privacyProfileImagePostToMyhome = iprot.readBool();
        struct.setPrivacyProfileImagePostToMyhomeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.privacyReceiveMessagesFromNotFriend = iprot.readBool();
        struct.setPrivacyReceiveMessagesFromNotFriendIsSet(true);
      }
      if (incoming.get(16)) {
        struct.contactMyTicket = iprot.readString();
        struct.setContactMyTicketIsSet(true);
      }
      if (incoming.get(17)) {
        struct.identityProvider = IdentityProvider.findByValue(iprot.readI32());
        struct.setIdentityProviderIsSet(true);
      }
      if (incoming.get(18)) {
        struct.identityIdentifier = iprot.readString();
        struct.setIdentityIdentifierIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TMap _map494 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.snsAccounts = new java.util.EnumMap<SnsIdType,java.lang.String>(SnsIdType.class);
          SnsIdType _key495;
          java.lang.String _val496;
          for (int _i497 = 0; _i497 < _map494.size; ++_i497)
          {
            _key495 = SnsIdType.findByValue(iprot.readI32());
            _val496 = iprot.readString();
            if (_key495 != null)
            {
              struct.snsAccounts.put(_key495, _val496);
            }
          }
        }
        struct.setSnsAccountsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.phoneRegistration = iprot.readBool();
        struct.setPhoneRegistrationIsSet(true);
      }
      if (incoming.get(21)) {
        struct.emailConfirmationStatus = EmailConfirmationStatus.findByValue(iprot.readI32());
        struct.setEmailConfirmationStatusIsSet(true);
      }
      if (incoming.get(22)) {
        struct.preferenceLocale = iprot.readString();
        struct.setPreferenceLocaleIsSet(true);
      }
      if (incoming.get(23)) {
        {
          org.apache.thrift.protocol.TMap _map498 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.customModes = new java.util.EnumMap<CustomMode,java.lang.String>(CustomMode.class);
          CustomMode _key499;
          java.lang.String _val500;
          for (int _i501 = 0; _i501 < _map498.size; ++_i501)
          {
            _key499 = CustomMode.findByValue(iprot.readI32());
            _val500 = iprot.readString();
            if (_key499 != null)
            {
              struct.customModes.put(_key499, _val500);
            }
          }
        }
        struct.setCustomModesIsSet(true);
      }
      if (incoming.get(24)) {
        struct.e2eeEnable = iprot.readBool();
        struct.setE2eeEnableIsSet(true);
      }
      if (incoming.get(25)) {
        struct.hitokotoBackupRequested = iprot.readBool();
        struct.setHitokotoBackupRequestedIsSet(true);
      }
      if (incoming.get(26)) {
        struct.privacyProfileMusicPostToMyhome = iprot.readBool();
        struct.setPrivacyProfileMusicPostToMyhomeIsSet(true);
      }
      if (incoming.get(27)) {
        struct.privacyAllowNearby = iprot.readBool();
        struct.setPrivacyAllowNearbyIsSet(true);
      }
      if (incoming.get(28)) {
        struct.agreementNearbyTime = iprot.readI64();
        struct.setAgreementNearbyTimeIsSet(true);
      }
      if (incoming.get(29)) {
        struct.agreementSquareTime = iprot.readI64();
        struct.setAgreementSquareTimeIsSet(true);
      }
      if (incoming.get(30)) {
        struct.notificationMention = iprot.readBool();
        struct.setNotificationMentionIsSet(true);
      }
      if (incoming.get(31)) {
        struct.botUseAgreementAcceptedAt = iprot.readI64();
        struct.setBotUseAgreementAcceptedAtIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

