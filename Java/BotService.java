/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class BotService {

  public interface Iface {

    public void notifyLeaveGroup(java.lang.String groupMid) throws TalkException, org.apache.thrift.TException;

    public void notifyLeaveRoom(java.lang.String roomMid) throws TalkException, org.apache.thrift.TException;

    public BotUseInfo getBotUseInfo(java.lang.String botMid) throws TalkException, org.apache.thrift.TException;

    public void sendChatCheckedByWatermark(int seq, java.lang.String mid, long watermark, int sessionId) throws TalkException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void notifyLeaveGroup(java.lang.String groupMid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void notifyLeaveRoom(java.lang.String roomMid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getBotUseInfo(java.lang.String botMid, org.apache.thrift.async.AsyncMethodCallback<BotUseInfo> resultHandler) throws org.apache.thrift.TException;

    public void sendChatCheckedByWatermark(int seq, java.lang.String mid, long watermark, int sessionId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void notifyLeaveGroup(java.lang.String groupMid) throws TalkException, org.apache.thrift.TException
    {
      send_notifyLeaveGroup(groupMid);
      recv_notifyLeaveGroup();
    }

    public void send_notifyLeaveGroup(java.lang.String groupMid) throws org.apache.thrift.TException
    {
      notifyLeaveGroup_args args = new notifyLeaveGroup_args();
      args.setGroupMid(groupMid);
      sendBase("notifyLeaveGroup", args);
    }

    public void recv_notifyLeaveGroup() throws TalkException, org.apache.thrift.TException
    {
      notifyLeaveGroup_result result = new notifyLeaveGroup_result();
      receiveBase(result, "notifyLeaveGroup");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void notifyLeaveRoom(java.lang.String roomMid) throws TalkException, org.apache.thrift.TException
    {
      send_notifyLeaveRoom(roomMid);
      recv_notifyLeaveRoom();
    }

    public void send_notifyLeaveRoom(java.lang.String roomMid) throws org.apache.thrift.TException
    {
      notifyLeaveRoom_args args = new notifyLeaveRoom_args();
      args.setRoomMid(roomMid);
      sendBase("notifyLeaveRoom", args);
    }

    public void recv_notifyLeaveRoom() throws TalkException, org.apache.thrift.TException
    {
      notifyLeaveRoom_result result = new notifyLeaveRoom_result();
      receiveBase(result, "notifyLeaveRoom");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public BotUseInfo getBotUseInfo(java.lang.String botMid) throws TalkException, org.apache.thrift.TException
    {
      send_getBotUseInfo(botMid);
      return recv_getBotUseInfo();
    }

    public void send_getBotUseInfo(java.lang.String botMid) throws org.apache.thrift.TException
    {
      getBotUseInfo_args args = new getBotUseInfo_args();
      args.setBotMid(botMid);
      sendBase("getBotUseInfo", args);
    }

    public BotUseInfo recv_getBotUseInfo() throws TalkException, org.apache.thrift.TException
    {
      getBotUseInfo_result result = new getBotUseInfo_result();
      receiveBase(result, "getBotUseInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBotUseInfo failed: unknown result");
    }

    public void sendChatCheckedByWatermark(int seq, java.lang.String mid, long watermark, int sessionId) throws TalkException, org.apache.thrift.TException
    {
      send_sendChatCheckedByWatermark(seq, mid, watermark, sessionId);
      recv_sendChatCheckedByWatermark();
    }

    public void send_sendChatCheckedByWatermark(int seq, java.lang.String mid, long watermark, int sessionId) throws org.apache.thrift.TException
    {
      sendChatCheckedByWatermark_args args = new sendChatCheckedByWatermark_args();
      args.setSeq(seq);
      args.setMid(mid);
      args.setWatermark(watermark);
      args.setSessionId(sessionId);
      sendBase("sendChatCheckedByWatermark", args);
    }

    public void recv_sendChatCheckedByWatermark() throws TalkException, org.apache.thrift.TException
    {
      sendChatCheckedByWatermark_result result = new sendChatCheckedByWatermark_result();
      receiveBase(result, "sendChatCheckedByWatermark");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void notifyLeaveGroup(java.lang.String groupMid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyLeaveGroup_call method_call = new notifyLeaveGroup_call(groupMid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyLeaveGroup_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String groupMid;
      public notifyLeaveGroup_call(java.lang.String groupMid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupMid = groupMid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyLeaveGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyLeaveGroup_args args = new notifyLeaveGroup_args();
        args.setGroupMid(groupMid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void notifyLeaveRoom(java.lang.String roomMid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyLeaveRoom_call method_call = new notifyLeaveRoom_call(roomMid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyLeaveRoom_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String roomMid;
      public notifyLeaveRoom_call(java.lang.String roomMid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomMid = roomMid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyLeaveRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyLeaveRoom_args args = new notifyLeaveRoom_args();
        args.setRoomMid(roomMid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getBotUseInfo(java.lang.String botMid, org.apache.thrift.async.AsyncMethodCallback<BotUseInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBotUseInfo_call method_call = new getBotUseInfo_call(botMid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBotUseInfo_call extends org.apache.thrift.async.TAsyncMethodCall<BotUseInfo> {
      private java.lang.String botMid;
      public getBotUseInfo_call(java.lang.String botMid, org.apache.thrift.async.AsyncMethodCallback<BotUseInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.botMid = botMid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBotUseInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBotUseInfo_args args = new getBotUseInfo_args();
        args.setBotMid(botMid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public BotUseInfo getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBotUseInfo();
      }
    }

    public void sendChatCheckedByWatermark(int seq, java.lang.String mid, long watermark, int sessionId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendChatCheckedByWatermark_call method_call = new sendChatCheckedByWatermark_call(seq, mid, watermark, sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendChatCheckedByWatermark_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private int seq;
      private java.lang.String mid;
      private long watermark;
      private int sessionId;
      public sendChatCheckedByWatermark_call(int seq, java.lang.String mid, long watermark, int sessionId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.seq = seq;
        this.mid = mid;
        this.watermark = watermark;
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendChatCheckedByWatermark", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendChatCheckedByWatermark_args args = new sendChatCheckedByWatermark_args();
        args.setSeq(seq);
        args.setMid(mid);
        args.setWatermark(watermark);
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("notifyLeaveGroup", new notifyLeaveGroup());
      processMap.put("notifyLeaveRoom", new notifyLeaveRoom());
      processMap.put("getBotUseInfo", new getBotUseInfo());
      processMap.put("sendChatCheckedByWatermark", new sendChatCheckedByWatermark());
      return processMap;
    }

    public static class notifyLeaveGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyLeaveGroup_args> {
      public notifyLeaveGroup() {
        super("notifyLeaveGroup");
      }

      public notifyLeaveGroup_args getEmptyArgsInstance() {
        return new notifyLeaveGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public notifyLeaveGroup_result getResult(I iface, notifyLeaveGroup_args args) throws org.apache.thrift.TException {
        notifyLeaveGroup_result result = new notifyLeaveGroup_result();
        try {
          iface.notifyLeaveGroup(args.groupMid);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class notifyLeaveRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyLeaveRoom_args> {
      public notifyLeaveRoom() {
        super("notifyLeaveRoom");
      }

      public notifyLeaveRoom_args getEmptyArgsInstance() {
        return new notifyLeaveRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public notifyLeaveRoom_result getResult(I iface, notifyLeaveRoom_args args) throws org.apache.thrift.TException {
        notifyLeaveRoom_result result = new notifyLeaveRoom_result();
        try {
          iface.notifyLeaveRoom(args.roomMid);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getBotUseInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBotUseInfo_args> {
      public getBotUseInfo() {
        super("getBotUseInfo");
      }

      public getBotUseInfo_args getEmptyArgsInstance() {
        return new getBotUseInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getBotUseInfo_result getResult(I iface, getBotUseInfo_args args) throws org.apache.thrift.TException {
        getBotUseInfo_result result = new getBotUseInfo_result();
        try {
          result.success = iface.getBotUseInfo(args.botMid);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class sendChatCheckedByWatermark<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendChatCheckedByWatermark_args> {
      public sendChatCheckedByWatermark() {
        super("sendChatCheckedByWatermark");
      }

      public sendChatCheckedByWatermark_args getEmptyArgsInstance() {
        return new sendChatCheckedByWatermark_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public sendChatCheckedByWatermark_result getResult(I iface, sendChatCheckedByWatermark_args args) throws org.apache.thrift.TException {
        sendChatCheckedByWatermark_result result = new sendChatCheckedByWatermark_result();
        try {
          iface.sendChatCheckedByWatermark(args.seq, args.mid, args.watermark, args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("notifyLeaveGroup", new notifyLeaveGroup());
      processMap.put("notifyLeaveRoom", new notifyLeaveRoom());
      processMap.put("getBotUseInfo", new getBotUseInfo());
      processMap.put("sendChatCheckedByWatermark", new sendChatCheckedByWatermark());
      return processMap;
    }

    public static class notifyLeaveGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyLeaveGroup_args, Void> {
      public notifyLeaveGroup() {
        super("notifyLeaveGroup");
      }

      public notifyLeaveGroup_args getEmptyArgsInstance() {
        return new notifyLeaveGroup_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyLeaveGroup_result result = new notifyLeaveGroup_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            notifyLeaveGroup_result result = new notifyLeaveGroup_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyLeaveGroup_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.notifyLeaveGroup(args.groupMid,resultHandler);
      }
    }

    public static class notifyLeaveRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyLeaveRoom_args, Void> {
      public notifyLeaveRoom() {
        super("notifyLeaveRoom");
      }

      public notifyLeaveRoom_args getEmptyArgsInstance() {
        return new notifyLeaveRoom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyLeaveRoom_result result = new notifyLeaveRoom_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            notifyLeaveRoom_result result = new notifyLeaveRoom_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyLeaveRoom_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.notifyLeaveRoom(args.roomMid,resultHandler);
      }
    }

    public static class getBotUseInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBotUseInfo_args, BotUseInfo> {
      public getBotUseInfo() {
        super("getBotUseInfo");
      }

      public getBotUseInfo_args getEmptyArgsInstance() {
        return new getBotUseInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<BotUseInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<BotUseInfo>() { 
          public void onComplete(BotUseInfo o) {
            getBotUseInfo_result result = new getBotUseInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getBotUseInfo_result result = new getBotUseInfo_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBotUseInfo_args args, org.apache.thrift.async.AsyncMethodCallback<BotUseInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getBotUseInfo(args.botMid,resultHandler);
      }
    }

    public static class sendChatCheckedByWatermark<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendChatCheckedByWatermark_args, Void> {
      public sendChatCheckedByWatermark() {
        super("sendChatCheckedByWatermark");
      }

      public sendChatCheckedByWatermark_args getEmptyArgsInstance() {
        return new sendChatCheckedByWatermark_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendChatCheckedByWatermark_result result = new sendChatCheckedByWatermark_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendChatCheckedByWatermark_result result = new sendChatCheckedByWatermark_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendChatCheckedByWatermark_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sendChatCheckedByWatermark(args.seq, args.mid, args.watermark, args.sessionId,resultHandler);
      }
    }

  }

  public static class notifyLeaveGroup_args implements org.apache.thrift.TBase<notifyLeaveGroup_args, notifyLeaveGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyLeaveGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyLeaveGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupMid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyLeaveGroup_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyLeaveGroup_argsTupleSchemeFactory();

    public java.lang.String groupMid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_MID((short)1, "groupMid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_MID
            return GROUP_MID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_MID, new org.apache.thrift.meta_data.FieldMetaData("groupMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyLeaveGroup_args.class, metaDataMap);
    }

    public notifyLeaveGroup_args() {
    }

    public notifyLeaveGroup_args(
      java.lang.String groupMid)
    {
      this();
      this.groupMid = groupMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyLeaveGroup_args(notifyLeaveGroup_args other) {
      if (other.isSetGroupMid()) {
        this.groupMid = other.groupMid;
      }
    }

    public notifyLeaveGroup_args deepCopy() {
      return new notifyLeaveGroup_args(this);
    }

    @Override
    public void clear() {
      this.groupMid = null;
    }

    public java.lang.String getGroupMid() {
      return this.groupMid;
    }

    public notifyLeaveGroup_args setGroupMid(java.lang.String groupMid) {
      this.groupMid = groupMid;
      return this;
    }

    public void unsetGroupMid() {
      this.groupMid = null;
    }

    /** Returns true if field groupMid is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupMid() {
      return this.groupMid != null;
    }

    public void setGroupMidIsSet(boolean value) {
      if (!value) {
        this.groupMid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case GROUP_MID:
        if (value == null) {
          unsetGroupMid();
        } else {
          setGroupMid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_MID:
        return getGroupMid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GROUP_MID:
        return isSetGroupMid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyLeaveGroup_args)
        return this.equals((notifyLeaveGroup_args)that);
      return false;
    }

    public boolean equals(notifyLeaveGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupMid = true && this.isSetGroupMid();
      boolean that_present_groupMid = true && that.isSetGroupMid();
      if (this_present_groupMid || that_present_groupMid) {
        if (!(this_present_groupMid && that_present_groupMid))
          return false;
        if (!this.groupMid.equals(that.groupMid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGroupMid()) ? 131071 : 524287);
      if (isSetGroupMid())
        hashCode = hashCode * 8191 + groupMid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyLeaveGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetGroupMid()).compareTo(other.isSetGroupMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupMid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupMid, other.groupMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyLeaveGroup_args(");
      boolean first = true;

      sb.append("groupMid:");
      if (this.groupMid == null) {
        sb.append("null");
      } else {
        sb.append(this.groupMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyLeaveGroup_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyLeaveGroup_argsStandardScheme getScheme() {
        return new notifyLeaveGroup_argsStandardScheme();
      }
    }

    private static class notifyLeaveGroup_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyLeaveGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyLeaveGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_MID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupMid = iprot.readString();
                struct.setGroupMidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyLeaveGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupMid != null) {
          oprot.writeFieldBegin(GROUP_MID_FIELD_DESC);
          oprot.writeString(struct.groupMid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyLeaveGroup_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyLeaveGroup_argsTupleScheme getScheme() {
        return new notifyLeaveGroup_argsTupleScheme();
      }
    }

    private static class notifyLeaveGroup_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyLeaveGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyLeaveGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGroupMid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroupMid()) {
          oprot.writeString(struct.groupMid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyLeaveGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.groupMid = iprot.readString();
          struct.setGroupMidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyLeaveGroup_result implements org.apache.thrift.TBase<notifyLeaveGroup_result, notifyLeaveGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyLeaveGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyLeaveGroup_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyLeaveGroup_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyLeaveGroup_resultTupleSchemeFactory();

    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyLeaveGroup_result.class, metaDataMap);
    }

    public notifyLeaveGroup_result() {
    }

    public notifyLeaveGroup_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyLeaveGroup_result(notifyLeaveGroup_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyLeaveGroup_result deepCopy() {
      return new notifyLeaveGroup_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public notifyLeaveGroup_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyLeaveGroup_result)
        return this.equals((notifyLeaveGroup_result)that);
      return false;
    }

    public boolean equals(notifyLeaveGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyLeaveGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyLeaveGroup_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyLeaveGroup_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyLeaveGroup_resultStandardScheme getScheme() {
        return new notifyLeaveGroup_resultStandardScheme();
      }
    }

    private static class notifyLeaveGroup_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyLeaveGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyLeaveGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyLeaveGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyLeaveGroup_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyLeaveGroup_resultTupleScheme getScheme() {
        return new notifyLeaveGroup_resultTupleScheme();
      }
    }

    private static class notifyLeaveGroup_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyLeaveGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyLeaveGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyLeaveGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyLeaveRoom_args implements org.apache.thrift.TBase<notifyLeaveRoom_args, notifyLeaveRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyLeaveRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyLeaveRoom_args");

    private static final org.apache.thrift.protocol.TField ROOM_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomMid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyLeaveRoom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyLeaveRoom_argsTupleSchemeFactory();

    public java.lang.String roomMid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_MID((short)1, "roomMid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_MID
            return ROOM_MID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_MID, new org.apache.thrift.meta_data.FieldMetaData("roomMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyLeaveRoom_args.class, metaDataMap);
    }

    public notifyLeaveRoom_args() {
    }

    public notifyLeaveRoom_args(
      java.lang.String roomMid)
    {
      this();
      this.roomMid = roomMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyLeaveRoom_args(notifyLeaveRoom_args other) {
      if (other.isSetRoomMid()) {
        this.roomMid = other.roomMid;
      }
    }

    public notifyLeaveRoom_args deepCopy() {
      return new notifyLeaveRoom_args(this);
    }

    @Override
    public void clear() {
      this.roomMid = null;
    }

    public java.lang.String getRoomMid() {
      return this.roomMid;
    }

    public notifyLeaveRoom_args setRoomMid(java.lang.String roomMid) {
      this.roomMid = roomMid;
      return this;
    }

    public void unsetRoomMid() {
      this.roomMid = null;
    }

    /** Returns true if field roomMid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomMid() {
      return this.roomMid != null;
    }

    public void setRoomMidIsSet(boolean value) {
      if (!value) {
        this.roomMid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ROOM_MID:
        if (value == null) {
          unsetRoomMid();
        } else {
          setRoomMid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_MID:
        return getRoomMid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROOM_MID:
        return isSetRoomMid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyLeaveRoom_args)
        return this.equals((notifyLeaveRoom_args)that);
      return false;
    }

    public boolean equals(notifyLeaveRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomMid = true && this.isSetRoomMid();
      boolean that_present_roomMid = true && that.isSetRoomMid();
      if (this_present_roomMid || that_present_roomMid) {
        if (!(this_present_roomMid && that_present_roomMid))
          return false;
        if (!this.roomMid.equals(that.roomMid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRoomMid()) ? 131071 : 524287);
      if (isSetRoomMid())
        hashCode = hashCode * 8191 + roomMid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyLeaveRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoomMid()).compareTo(other.isSetRoomMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomMid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomMid, other.roomMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyLeaveRoom_args(");
      boolean first = true;

      sb.append("roomMid:");
      if (this.roomMid == null) {
        sb.append("null");
      } else {
        sb.append(this.roomMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyLeaveRoom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyLeaveRoom_argsStandardScheme getScheme() {
        return new notifyLeaveRoom_argsStandardScheme();
      }
    }

    private static class notifyLeaveRoom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyLeaveRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyLeaveRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_MID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomMid = iprot.readString();
                struct.setRoomMidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyLeaveRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomMid != null) {
          oprot.writeFieldBegin(ROOM_MID_FIELD_DESC);
          oprot.writeString(struct.roomMid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyLeaveRoom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyLeaveRoom_argsTupleScheme getScheme() {
        return new notifyLeaveRoom_argsTupleScheme();
      }
    }

    private static class notifyLeaveRoom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyLeaveRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyLeaveRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoomMid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomMid()) {
          oprot.writeString(struct.roomMid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyLeaveRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomMid = iprot.readString();
          struct.setRoomMidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyLeaveRoom_result implements org.apache.thrift.TBase<notifyLeaveRoom_result, notifyLeaveRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyLeaveRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyLeaveRoom_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyLeaveRoom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyLeaveRoom_resultTupleSchemeFactory();

    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyLeaveRoom_result.class, metaDataMap);
    }

    public notifyLeaveRoom_result() {
    }

    public notifyLeaveRoom_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyLeaveRoom_result(notifyLeaveRoom_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyLeaveRoom_result deepCopy() {
      return new notifyLeaveRoom_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public notifyLeaveRoom_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyLeaveRoom_result)
        return this.equals((notifyLeaveRoom_result)that);
      return false;
    }

    public boolean equals(notifyLeaveRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyLeaveRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyLeaveRoom_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyLeaveRoom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyLeaveRoom_resultStandardScheme getScheme() {
        return new notifyLeaveRoom_resultStandardScheme();
      }
    }

    private static class notifyLeaveRoom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyLeaveRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyLeaveRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyLeaveRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyLeaveRoom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyLeaveRoom_resultTupleScheme getScheme() {
        return new notifyLeaveRoom_resultTupleScheme();
      }
    }

    private static class notifyLeaveRoom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyLeaveRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyLeaveRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyLeaveRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBotUseInfo_args implements org.apache.thrift.TBase<getBotUseInfo_args, getBotUseInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBotUseInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBotUseInfo_args");

    private static final org.apache.thrift.protocol.TField BOT_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("botMid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBotUseInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBotUseInfo_argsTupleSchemeFactory();

    public java.lang.String botMid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOT_MID((short)2, "botMid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // BOT_MID
            return BOT_MID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOT_MID, new org.apache.thrift.meta_data.FieldMetaData("botMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBotUseInfo_args.class, metaDataMap);
    }

    public getBotUseInfo_args() {
    }

    public getBotUseInfo_args(
      java.lang.String botMid)
    {
      this();
      this.botMid = botMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBotUseInfo_args(getBotUseInfo_args other) {
      if (other.isSetBotMid()) {
        this.botMid = other.botMid;
      }
    }

    public getBotUseInfo_args deepCopy() {
      return new getBotUseInfo_args(this);
    }

    @Override
    public void clear() {
      this.botMid = null;
    }

    public java.lang.String getBotMid() {
      return this.botMid;
    }

    public getBotUseInfo_args setBotMid(java.lang.String botMid) {
      this.botMid = botMid;
      return this;
    }

    public void unsetBotMid() {
      this.botMid = null;
    }

    /** Returns true if field botMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBotMid() {
      return this.botMid != null;
    }

    public void setBotMidIsSet(boolean value) {
      if (!value) {
        this.botMid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case BOT_MID:
        if (value == null) {
          unsetBotMid();
        } else {
          setBotMid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BOT_MID:
        return getBotMid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BOT_MID:
        return isSetBotMid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBotUseInfo_args)
        return this.equals((getBotUseInfo_args)that);
      return false;
    }

    public boolean equals(getBotUseInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_botMid = true && this.isSetBotMid();
      boolean that_present_botMid = true && that.isSetBotMid();
      if (this_present_botMid || that_present_botMid) {
        if (!(this_present_botMid && that_present_botMid))
          return false;
        if (!this.botMid.equals(that.botMid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBotMid()) ? 131071 : 524287);
      if (isSetBotMid())
        hashCode = hashCode * 8191 + botMid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBotUseInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetBotMid()).compareTo(other.isSetBotMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBotMid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.botMid, other.botMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBotUseInfo_args(");
      boolean first = true;

      sb.append("botMid:");
      if (this.botMid == null) {
        sb.append("null");
      } else {
        sb.append(this.botMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBotUseInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBotUseInfo_argsStandardScheme getScheme() {
        return new getBotUseInfo_argsStandardScheme();
      }
    }

    private static class getBotUseInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBotUseInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBotUseInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // BOT_MID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.botMid = iprot.readString();
                struct.setBotMidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBotUseInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.botMid != null) {
          oprot.writeFieldBegin(BOT_MID_FIELD_DESC);
          oprot.writeString(struct.botMid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBotUseInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBotUseInfo_argsTupleScheme getScheme() {
        return new getBotUseInfo_argsTupleScheme();
      }
    }

    private static class getBotUseInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBotUseInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBotUseInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBotMid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBotMid()) {
          oprot.writeString(struct.botMid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBotUseInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.botMid = iprot.readString();
          struct.setBotMidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getBotUseInfo_result implements org.apache.thrift.TBase<getBotUseInfo_result, getBotUseInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBotUseInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBotUseInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getBotUseInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getBotUseInfo_resultTupleSchemeFactory();

    public BotUseInfo success; // required
    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BotUseInfo.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBotUseInfo_result.class, metaDataMap);
    }

    public getBotUseInfo_result() {
    }

    public getBotUseInfo_result(
      BotUseInfo success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBotUseInfo_result(getBotUseInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new BotUseInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBotUseInfo_result deepCopy() {
      return new getBotUseInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public BotUseInfo getSuccess() {
      return this.success;
    }

    public getBotUseInfo_result setSuccess(BotUseInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public getBotUseInfo_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BotUseInfo)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getBotUseInfo_result)
        return this.equals((getBotUseInfo_result)that);
      return false;
    }

    public boolean equals(getBotUseInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getBotUseInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getBotUseInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBotUseInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBotUseInfo_resultStandardScheme getScheme() {
        return new getBotUseInfo_resultStandardScheme();
      }
    }

    private static class getBotUseInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getBotUseInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBotUseInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new BotUseInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBotUseInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBotUseInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getBotUseInfo_resultTupleScheme getScheme() {
        return new getBotUseInfo_resultTupleScheme();
      }
    }

    private static class getBotUseInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getBotUseInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBotUseInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBotUseInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new BotUseInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendChatCheckedByWatermark_args implements org.apache.thrift.TBase<sendChatCheckedByWatermark_args, sendChatCheckedByWatermark_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendChatCheckedByWatermark_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendChatCheckedByWatermark_args");

    private static final org.apache.thrift.protocol.TField SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("seq", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField WATERMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("watermark", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendChatCheckedByWatermark_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendChatCheckedByWatermark_argsTupleSchemeFactory();

    public int seq; // required
    public java.lang.String mid; // required
    public long watermark; // required
    public int sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SEQ((short)1, "seq"),
      MID((short)2, "mid"),
      WATERMARK((short)3, "watermark"),
      SESSION_ID((short)4, "sessionId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SEQ
            return SEQ;
          case 2: // MID
            return MID;
          case 3: // WATERMARK
            return WATERMARK;
          case 4: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private static final int __WATERMARK_ISSET_ID = 1;
    private static final int __SESSIONID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SEQ, new org.apache.thrift.meta_data.FieldMetaData("seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WATERMARK, new org.apache.thrift.meta_data.FieldMetaData("watermark", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendChatCheckedByWatermark_args.class, metaDataMap);
    }

    public sendChatCheckedByWatermark_args() {
    }

    public sendChatCheckedByWatermark_args(
      int seq,
      java.lang.String mid,
      long watermark,
      int sessionId)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.mid = mid;
      this.watermark = watermark;
      setWatermarkIsSet(true);
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatCheckedByWatermark_args(sendChatCheckedByWatermark_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.seq = other.seq;
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      this.watermark = other.watermark;
      this.sessionId = other.sessionId;
    }

    public sendChatCheckedByWatermark_args deepCopy() {
      return new sendChatCheckedByWatermark_args(this);
    }

    @Override
    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.mid = null;
      setWatermarkIsSet(false);
      this.watermark = 0;
      setSessionIdIsSet(false);
      this.sessionId = 0;
    }

    public int getSeq() {
      return this.seq;
    }

    public sendChatCheckedByWatermark_args setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
      return this;
    }

    public void unsetSeq() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SEQ_ISSET_ID);
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SEQ_ISSET_ID);
    }

    public void setSeqIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SEQ_ISSET_ID, value);
    }

    public java.lang.String getMid() {
      return this.mid;
    }

    public sendChatCheckedByWatermark_args setMid(java.lang.String mid) {
      this.mid = mid;
      return this;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public long getWatermark() {
      return this.watermark;
    }

    public sendChatCheckedByWatermark_args setWatermark(long watermark) {
      this.watermark = watermark;
      setWatermarkIsSet(true);
      return this;
    }

    public void unsetWatermark() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WATERMARK_ISSET_ID);
    }

    /** Returns true if field watermark is set (has been assigned a value) and false otherwise */
    public boolean isSetWatermark() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WATERMARK_ISSET_ID);
    }

    public void setWatermarkIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WATERMARK_ISSET_ID, value);
    }

    public int getSessionId() {
      return this.sessionId;
    }

    public sendChatCheckedByWatermark_args setSessionId(int sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
      return this;
    }

    public void unsetSessionId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SESSIONID_ISSET_ID);
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SESSIONID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SEQ:
        if (value == null) {
          unsetSeq();
        } else {
          setSeq((java.lang.Integer)value);
        }
        break;

      case MID:
        if (value == null) {
          unsetMid();
        } else {
          setMid((java.lang.String)value);
        }
        break;

      case WATERMARK:
        if (value == null) {
          unsetWatermark();
        } else {
          setWatermark((java.lang.Long)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SEQ:
        return getSeq();

      case MID:
        return getMid();

      case WATERMARK:
        return getWatermark();

      case SESSION_ID:
        return getSessionId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SEQ:
        return isSetSeq();
      case MID:
        return isSetMid();
      case WATERMARK:
        return isSetWatermark();
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatCheckedByWatermark_args)
        return this.equals((sendChatCheckedByWatermark_args)that);
      return false;
    }

    public boolean equals(sendChatCheckedByWatermark_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_watermark = true;
      boolean that_present_watermark = true;
      if (this_present_watermark || that_present_watermark) {
        if (!(this_present_watermark && that_present_watermark))
          return false;
        if (this.watermark != that.watermark)
          return false;
      }

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + seq;

      hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
      if (isSetMid())
        hashCode = hashCode * 8191 + mid.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(watermark);

      hashCode = hashCode * 8191 + sessionId;

      return hashCode;
    }

    @Override
    public int compareTo(sendChatCheckedByWatermark_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSeq()).compareTo(other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWatermark()).compareTo(other.isSetWatermark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWatermark()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.watermark, other.watermark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendChatCheckedByWatermark_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("watermark:");
      sb.append(this.watermark);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendChatCheckedByWatermark_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendChatCheckedByWatermark_argsStandardScheme getScheme() {
        return new sendChatCheckedByWatermark_argsStandardScheme();
      }
    }

    private static class sendChatCheckedByWatermark_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendChatCheckedByWatermark_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendChatCheckedByWatermark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.seq = iprot.readI32();
                struct.setSeqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mid = iprot.readString();
                struct.setMidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WATERMARK
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.watermark = iprot.readI64();
                struct.setWatermarkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sessionId = iprot.readI32();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendChatCheckedByWatermark_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(SEQ_FIELD_DESC);
        oprot.writeI32(struct.seq);
        oprot.writeFieldEnd();
        if (struct.mid != null) {
          oprot.writeFieldBegin(MID_FIELD_DESC);
          oprot.writeString(struct.mid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WATERMARK_FIELD_DESC);
        oprot.writeI64(struct.watermark);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
        oprot.writeI32(struct.sessionId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendChatCheckedByWatermark_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendChatCheckedByWatermark_argsTupleScheme getScheme() {
        return new sendChatCheckedByWatermark_argsTupleScheme();
      }
    }

    private static class sendChatCheckedByWatermark_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendChatCheckedByWatermark_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendChatCheckedByWatermark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSeq()) {
          optionals.set(0);
        }
        if (struct.isSetMid()) {
          optionals.set(1);
        }
        if (struct.isSetWatermark()) {
          optionals.set(2);
        }
        if (struct.isSetSessionId()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSeq()) {
          oprot.writeI32(struct.seq);
        }
        if (struct.isSetMid()) {
          oprot.writeString(struct.mid);
        }
        if (struct.isSetWatermark()) {
          oprot.writeI64(struct.watermark);
        }
        if (struct.isSetSessionId()) {
          oprot.writeI32(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendChatCheckedByWatermark_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.seq = iprot.readI32();
          struct.setSeqIsSet(true);
        }
        if (incoming.get(1)) {
          struct.mid = iprot.readString();
          struct.setMidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.watermark = iprot.readI64();
          struct.setWatermarkIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sessionId = iprot.readI32();
          struct.setSessionIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendChatCheckedByWatermark_result implements org.apache.thrift.TBase<sendChatCheckedByWatermark_result, sendChatCheckedByWatermark_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendChatCheckedByWatermark_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendChatCheckedByWatermark_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendChatCheckedByWatermark_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendChatCheckedByWatermark_resultTupleSchemeFactory();

    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendChatCheckedByWatermark_result.class, metaDataMap);
    }

    public sendChatCheckedByWatermark_result() {
    }

    public sendChatCheckedByWatermark_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatCheckedByWatermark_result(sendChatCheckedByWatermark_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendChatCheckedByWatermark_result deepCopy() {
      return new sendChatCheckedByWatermark_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public sendChatCheckedByWatermark_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatCheckedByWatermark_result)
        return this.equals((sendChatCheckedByWatermark_result)that);
      return false;
    }

    public boolean equals(sendChatCheckedByWatermark_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendChatCheckedByWatermark_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendChatCheckedByWatermark_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendChatCheckedByWatermark_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendChatCheckedByWatermark_resultStandardScheme getScheme() {
        return new sendChatCheckedByWatermark_resultStandardScheme();
      }
    }

    private static class sendChatCheckedByWatermark_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendChatCheckedByWatermark_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendChatCheckedByWatermark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendChatCheckedByWatermark_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendChatCheckedByWatermark_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendChatCheckedByWatermark_resultTupleScheme getScheme() {
        return new sendChatCheckedByWatermark_resultTupleScheme();
      }
    }

    private static class sendChatCheckedByWatermark_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendChatCheckedByWatermark_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendChatCheckedByWatermark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendChatCheckedByWatermark_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
