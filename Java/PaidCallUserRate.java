/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-09-28")
public class PaidCallUserRate implements org.apache.thrift.TBase<PaidCallUserRate, PaidCallUserRate._Fields>, java.io.Serializable, Cloneable, Comparable<PaidCallUserRate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaidCallUserRate");

  private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RATE_DIVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("rateDivision", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RATE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("rateName", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PaidCallUserRateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PaidCallUserRateTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String countryCode; // required
  public int rate; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String rateDivision; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String rateName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COUNTRY_CODE((short)1, "countryCode"),
    RATE((short)2, "rate"),
    RATE_DIVISION((short)3, "rateDivision"),
    RATE_NAME((short)4, "rateName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COUNTRY_CODE
          return COUNTRY_CODE;
        case 2: // RATE
          return RATE;
        case 3: // RATE_DIVISION
          return RATE_DIVISION;
        case 4: // RATE_NAME
          return RATE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RATE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RATE_DIVISION, new org.apache.thrift.meta_data.FieldMetaData("rateDivision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE_NAME, new org.apache.thrift.meta_data.FieldMetaData("rateName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaidCallUserRate.class, metaDataMap);
  }

  public PaidCallUserRate() {
  }

  public PaidCallUserRate(
    java.lang.String countryCode,
    int rate,
    java.lang.String rateDivision,
    java.lang.String rateName)
  {
    this();
    this.countryCode = countryCode;
    this.rate = rate;
    setRateIsSet(true);
    this.rateDivision = rateDivision;
    this.rateName = rateName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaidCallUserRate(PaidCallUserRate other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCountryCode()) {
      this.countryCode = other.countryCode;
    }
    this.rate = other.rate;
    if (other.isSetRateDivision()) {
      this.rateDivision = other.rateDivision;
    }
    if (other.isSetRateName()) {
      this.rateName = other.rateName;
    }
  }

  public PaidCallUserRate deepCopy() {
    return new PaidCallUserRate(this);
  }

  @Override
  public void clear() {
    this.countryCode = null;
    setRateIsSet(false);
    this.rate = 0;
    this.rateDivision = null;
    this.rateName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCountryCode() {
    return this.countryCode;
  }

  public PaidCallUserRate setCountryCode(@org.apache.thrift.annotation.Nullable java.lang.String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  public void unsetCountryCode() {
    this.countryCode = null;
  }

  /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryCode() {
    return this.countryCode != null;
  }

  public void setCountryCodeIsSet(boolean value) {
    if (!value) {
      this.countryCode = null;
    }
  }

  public int getRate() {
    return this.rate;
  }

  public PaidCallUserRate setRate(int rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRateDivision() {
    return this.rateDivision;
  }

  public PaidCallUserRate setRateDivision(@org.apache.thrift.annotation.Nullable java.lang.String rateDivision) {
    this.rateDivision = rateDivision;
    return this;
  }

  public void unsetRateDivision() {
    this.rateDivision = null;
  }

  /** Returns true if field rateDivision is set (has been assigned a value) and false otherwise */
  public boolean isSetRateDivision() {
    return this.rateDivision != null;
  }

  public void setRateDivisionIsSet(boolean value) {
    if (!value) {
      this.rateDivision = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRateName() {
    return this.rateName;
  }

  public PaidCallUserRate setRateName(@org.apache.thrift.annotation.Nullable java.lang.String rateName) {
    this.rateName = rateName;
    return this;
  }

  public void unsetRateName() {
    this.rateName = null;
  }

  /** Returns true if field rateName is set (has been assigned a value) and false otherwise */
  public boolean isSetRateName() {
    return this.rateName != null;
  }

  public void setRateNameIsSet(boolean value) {
    if (!value) {
      this.rateName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case COUNTRY_CODE:
      if (value == null) {
        unsetCountryCode();
      } else {
        setCountryCode((java.lang.String)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((java.lang.Integer)value);
      }
      break;

    case RATE_DIVISION:
      if (value == null) {
        unsetRateDivision();
      } else {
        setRateDivision((java.lang.String)value);
      }
      break;

    case RATE_NAME:
      if (value == null) {
        unsetRateName();
      } else {
        setRateName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case COUNTRY_CODE:
      return getCountryCode();

    case RATE:
      return getRate();

    case RATE_DIVISION:
      return getRateDivision();

    case RATE_NAME:
      return getRateName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case COUNTRY_CODE:
      return isSetCountryCode();
    case RATE:
      return isSetRate();
    case RATE_DIVISION:
      return isSetRateDivision();
    case RATE_NAME:
      return isSetRateName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PaidCallUserRate)
      return this.equals((PaidCallUserRate)that);
    return false;
  }

  public boolean equals(PaidCallUserRate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_countryCode = true && this.isSetCountryCode();
    boolean that_present_countryCode = true && that.isSetCountryCode();
    if (this_present_countryCode || that_present_countryCode) {
      if (!(this_present_countryCode && that_present_countryCode))
        return false;
      if (!this.countryCode.equals(that.countryCode))
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_rateDivision = true && this.isSetRateDivision();
    boolean that_present_rateDivision = true && that.isSetRateDivision();
    if (this_present_rateDivision || that_present_rateDivision) {
      if (!(this_present_rateDivision && that_present_rateDivision))
        return false;
      if (!this.rateDivision.equals(that.rateDivision))
        return false;
    }

    boolean this_present_rateName = true && this.isSetRateName();
    boolean that_present_rateName = true && that.isSetRateName();
    if (this_present_rateName || that_present_rateName) {
      if (!(this_present_rateName && that_present_rateName))
        return false;
      if (!this.rateName.equals(that.rateName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCountryCode()) ? 131071 : 524287);
    if (isSetCountryCode())
      hashCode = hashCode * 8191 + countryCode.hashCode();

    hashCode = hashCode * 8191 + rate;

    hashCode = hashCode * 8191 + ((isSetRateDivision()) ? 131071 : 524287);
    if (isSetRateDivision())
      hashCode = hashCode * 8191 + rateDivision.hashCode();

    hashCode = hashCode * 8191 + ((isSetRateName()) ? 131071 : 524287);
    if (isSetRateName())
      hashCode = hashCode * 8191 + rateName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PaidCallUserRate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCountryCode()).compareTo(other.isSetCountryCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRateDivision()).compareTo(other.isSetRateDivision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRateDivision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rateDivision, other.rateDivision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRateName()).compareTo(other.isSetRateName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRateName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rateName, other.rateName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PaidCallUserRate(");
    boolean first = true;

    sb.append("countryCode:");
    if (this.countryCode == null) {
      sb.append("null");
    } else {
      sb.append(this.countryCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("rateDivision:");
    if (this.rateDivision == null) {
      sb.append("null");
    } else {
      sb.append(this.rateDivision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rateName:");
    if (this.rateName == null) {
      sb.append("null");
    } else {
      sb.append(this.rateName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaidCallUserRateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaidCallUserRateStandardScheme getScheme() {
      return new PaidCallUserRateStandardScheme();
    }
  }

  private static class PaidCallUserRateStandardScheme extends org.apache.thrift.scheme.StandardScheme<PaidCallUserRate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaidCallUserRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COUNTRY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryCode = iprot.readString();
              struct.setCountryCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rate = iprot.readI32();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RATE_DIVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rateDivision = iprot.readString();
              struct.setRateDivisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RATE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rateName = iprot.readString();
              struct.setRateNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaidCallUserRate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.countryCode != null) {
        oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
        oprot.writeString(struct.countryCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeI32(struct.rate);
      oprot.writeFieldEnd();
      if (struct.rateDivision != null) {
        oprot.writeFieldBegin(RATE_DIVISION_FIELD_DESC);
        oprot.writeString(struct.rateDivision);
        oprot.writeFieldEnd();
      }
      if (struct.rateName != null) {
        oprot.writeFieldBegin(RATE_NAME_FIELD_DESC);
        oprot.writeString(struct.rateName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaidCallUserRateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaidCallUserRateTupleScheme getScheme() {
      return new PaidCallUserRateTupleScheme();
    }
  }

  private static class PaidCallUserRateTupleScheme extends org.apache.thrift.scheme.TupleScheme<PaidCallUserRate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaidCallUserRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCountryCode()) {
        optionals.set(0);
      }
      if (struct.isSetRate()) {
        optionals.set(1);
      }
      if (struct.isSetRateDivision()) {
        optionals.set(2);
      }
      if (struct.isSetRateName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetCountryCode()) {
        oprot.writeString(struct.countryCode);
      }
      if (struct.isSetRate()) {
        oprot.writeI32(struct.rate);
      }
      if (struct.isSetRateDivision()) {
        oprot.writeString(struct.rateDivision);
      }
      if (struct.isSetRateName()) {
        oprot.writeString(struct.rateName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaidCallUserRate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.countryCode = iprot.readString();
        struct.setCountryCodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rate = iprot.readI32();
        struct.setRateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.rateDivision = iprot.readString();
        struct.setRateDivisionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.rateName = iprot.readString();
        struct.setRateNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

