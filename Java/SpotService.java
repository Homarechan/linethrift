/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class SpotService {

  public interface Iface {

    public SpotPhoneNumberResponse lookupByPhoneNumber(java.lang.String countryAreaCode, java.lang.String phoneNumber) throws TalkException, org.apache.thrift.TException;

    public SpotNearbyResponse lookupNearby(Location location, SpotCategory category, java.lang.String query, java.lang.String countryAreaCode) throws TalkException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void lookupByPhoneNumber(java.lang.String countryAreaCode, java.lang.String phoneNumber, org.apache.thrift.async.AsyncMethodCallback<SpotPhoneNumberResponse> resultHandler) throws org.apache.thrift.TException;

    public void lookupNearby(Location location, SpotCategory category, java.lang.String query, java.lang.String countryAreaCode, org.apache.thrift.async.AsyncMethodCallback<SpotNearbyResponse> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public SpotPhoneNumberResponse lookupByPhoneNumber(java.lang.String countryAreaCode, java.lang.String phoneNumber) throws TalkException, org.apache.thrift.TException
    {
      send_lookupByPhoneNumber(countryAreaCode, phoneNumber);
      return recv_lookupByPhoneNumber();
    }

    public void send_lookupByPhoneNumber(java.lang.String countryAreaCode, java.lang.String phoneNumber) throws org.apache.thrift.TException
    {
      lookupByPhoneNumber_args args = new lookupByPhoneNumber_args();
      args.setCountryAreaCode(countryAreaCode);
      args.setPhoneNumber(phoneNumber);
      sendBase("lookupByPhoneNumber", args);
    }

    public SpotPhoneNumberResponse recv_lookupByPhoneNumber() throws TalkException, org.apache.thrift.TException
    {
      lookupByPhoneNumber_result result = new lookupByPhoneNumber_result();
      receiveBase(result, "lookupByPhoneNumber");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lookupByPhoneNumber failed: unknown result");
    }

    public SpotNearbyResponse lookupNearby(Location location, SpotCategory category, java.lang.String query, java.lang.String countryAreaCode) throws TalkException, org.apache.thrift.TException
    {
      send_lookupNearby(location, category, query, countryAreaCode);
      return recv_lookupNearby();
    }

    public void send_lookupNearby(Location location, SpotCategory category, java.lang.String query, java.lang.String countryAreaCode) throws org.apache.thrift.TException
    {
      lookupNearby_args args = new lookupNearby_args();
      args.setLocation(location);
      args.setCategory(category);
      args.setQuery(query);
      args.setCountryAreaCode(countryAreaCode);
      sendBase("lookupNearby", args);
    }

    public SpotNearbyResponse recv_lookupNearby() throws TalkException, org.apache.thrift.TException
    {
      lookupNearby_result result = new lookupNearby_result();
      receiveBase(result, "lookupNearby");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "lookupNearby failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void lookupByPhoneNumber(java.lang.String countryAreaCode, java.lang.String phoneNumber, org.apache.thrift.async.AsyncMethodCallback<SpotPhoneNumberResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lookupByPhoneNumber_call method_call = new lookupByPhoneNumber_call(countryAreaCode, phoneNumber, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lookupByPhoneNumber_call extends org.apache.thrift.async.TAsyncMethodCall<SpotPhoneNumberResponse> {
      private java.lang.String countryAreaCode;
      private java.lang.String phoneNumber;
      public lookupByPhoneNumber_call(java.lang.String countryAreaCode, java.lang.String phoneNumber, org.apache.thrift.async.AsyncMethodCallback<SpotPhoneNumberResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.countryAreaCode = countryAreaCode;
        this.phoneNumber = phoneNumber;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lookupByPhoneNumber", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lookupByPhoneNumber_args args = new lookupByPhoneNumber_args();
        args.setCountryAreaCode(countryAreaCode);
        args.setPhoneNumber(phoneNumber);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SpotPhoneNumberResponse getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lookupByPhoneNumber();
      }
    }

    public void lookupNearby(Location location, SpotCategory category, java.lang.String query, java.lang.String countryAreaCode, org.apache.thrift.async.AsyncMethodCallback<SpotNearbyResponse> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lookupNearby_call method_call = new lookupNearby_call(location, category, query, countryAreaCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lookupNearby_call extends org.apache.thrift.async.TAsyncMethodCall<SpotNearbyResponse> {
      private Location location;
      private SpotCategory category;
      private java.lang.String query;
      private java.lang.String countryAreaCode;
      public lookupNearby_call(Location location, SpotCategory category, java.lang.String query, java.lang.String countryAreaCode, org.apache.thrift.async.AsyncMethodCallback<SpotNearbyResponse> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.location = location;
        this.category = category;
        this.query = query;
        this.countryAreaCode = countryAreaCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lookupNearby", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lookupNearby_args args = new lookupNearby_args();
        args.setLocation(location);
        args.setCategory(category);
        args.setQuery(query);
        args.setCountryAreaCode(countryAreaCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SpotNearbyResponse getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_lookupNearby();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("lookupByPhoneNumber", new lookupByPhoneNumber());
      processMap.put("lookupNearby", new lookupNearby());
      return processMap;
    }

    public static class lookupByPhoneNumber<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lookupByPhoneNumber_args> {
      public lookupByPhoneNumber() {
        super("lookupByPhoneNumber");
      }

      public lookupByPhoneNumber_args getEmptyArgsInstance() {
        return new lookupByPhoneNumber_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public lookupByPhoneNumber_result getResult(I iface, lookupByPhoneNumber_args args) throws org.apache.thrift.TException {
        lookupByPhoneNumber_result result = new lookupByPhoneNumber_result();
        try {
          result.success = iface.lookupByPhoneNumber(args.countryAreaCode, args.phoneNumber);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class lookupNearby<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lookupNearby_args> {
      public lookupNearby() {
        super("lookupNearby");
      }

      public lookupNearby_args getEmptyArgsInstance() {
        return new lookupNearby_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public lookupNearby_result getResult(I iface, lookupNearby_args args) throws org.apache.thrift.TException {
        lookupNearby_result result = new lookupNearby_result();
        try {
          result.success = iface.lookupNearby(args.location, args.category, args.query, args.countryAreaCode);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("lookupByPhoneNumber", new lookupByPhoneNumber());
      processMap.put("lookupNearby", new lookupNearby());
      return processMap;
    }

    public static class lookupByPhoneNumber<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lookupByPhoneNumber_args, SpotPhoneNumberResponse> {
      public lookupByPhoneNumber() {
        super("lookupByPhoneNumber");
      }

      public lookupByPhoneNumber_args getEmptyArgsInstance() {
        return new lookupByPhoneNumber_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SpotPhoneNumberResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SpotPhoneNumberResponse>() { 
          public void onComplete(SpotPhoneNumberResponse o) {
            lookupByPhoneNumber_result result = new lookupByPhoneNumber_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lookupByPhoneNumber_result result = new lookupByPhoneNumber_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lookupByPhoneNumber_args args, org.apache.thrift.async.AsyncMethodCallback<SpotPhoneNumberResponse> resultHandler) throws org.apache.thrift.TException {
        iface.lookupByPhoneNumber(args.countryAreaCode, args.phoneNumber,resultHandler);
      }
    }

    public static class lookupNearby<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lookupNearby_args, SpotNearbyResponse> {
      public lookupNearby() {
        super("lookupNearby");
      }

      public lookupNearby_args getEmptyArgsInstance() {
        return new lookupNearby_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SpotNearbyResponse> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SpotNearbyResponse>() { 
          public void onComplete(SpotNearbyResponse o) {
            lookupNearby_result result = new lookupNearby_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lookupNearby_result result = new lookupNearby_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lookupNearby_args args, org.apache.thrift.async.AsyncMethodCallback<SpotNearbyResponse> resultHandler) throws org.apache.thrift.TException {
        iface.lookupNearby(args.location, args.category, args.query, args.countryAreaCode,resultHandler);
      }
    }

  }

  public static class lookupByPhoneNumber_args implements org.apache.thrift.TBase<lookupByPhoneNumber_args, lookupByPhoneNumber_args._Fields>, java.io.Serializable, Cloneable, Comparable<lookupByPhoneNumber_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lookupByPhoneNumber_args");

    private static final org.apache.thrift.protocol.TField COUNTRY_AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryAreaCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lookupByPhoneNumber_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lookupByPhoneNumber_argsTupleSchemeFactory();

    public java.lang.String countryAreaCode; // required
    public java.lang.String phoneNumber; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNTRY_AREA_CODE((short)2, "countryAreaCode"),
      PHONE_NUMBER((short)3, "phoneNumber");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // COUNTRY_AREA_CODE
            return COUNTRY_AREA_CODE;
          case 3: // PHONE_NUMBER
            return PHONE_NUMBER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNTRY_AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryAreaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookupByPhoneNumber_args.class, metaDataMap);
    }

    public lookupByPhoneNumber_args() {
    }

    public lookupByPhoneNumber_args(
      java.lang.String countryAreaCode,
      java.lang.String phoneNumber)
    {
      this();
      this.countryAreaCode = countryAreaCode;
      this.phoneNumber = phoneNumber;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupByPhoneNumber_args(lookupByPhoneNumber_args other) {
      if (other.isSetCountryAreaCode()) {
        this.countryAreaCode = other.countryAreaCode;
      }
      if (other.isSetPhoneNumber()) {
        this.phoneNumber = other.phoneNumber;
      }
    }

    public lookupByPhoneNumber_args deepCopy() {
      return new lookupByPhoneNumber_args(this);
    }

    @Override
    public void clear() {
      this.countryAreaCode = null;
      this.phoneNumber = null;
    }

    public java.lang.String getCountryAreaCode() {
      return this.countryAreaCode;
    }

    public lookupByPhoneNumber_args setCountryAreaCode(java.lang.String countryAreaCode) {
      this.countryAreaCode = countryAreaCode;
      return this;
    }

    public void unsetCountryAreaCode() {
      this.countryAreaCode = null;
    }

    /** Returns true if field countryAreaCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryAreaCode() {
      return this.countryAreaCode != null;
    }

    public void setCountryAreaCodeIsSet(boolean value) {
      if (!value) {
        this.countryAreaCode = null;
      }
    }

    public java.lang.String getPhoneNumber() {
      return this.phoneNumber;
    }

    public lookupByPhoneNumber_args setPhoneNumber(java.lang.String phoneNumber) {
      this.phoneNumber = phoneNumber;
      return this;
    }

    public void unsetPhoneNumber() {
      this.phoneNumber = null;
    }

    /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPhoneNumber() {
      return this.phoneNumber != null;
    }

    public void setPhoneNumberIsSet(boolean value) {
      if (!value) {
        this.phoneNumber = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case COUNTRY_AREA_CODE:
        if (value == null) {
          unsetCountryAreaCode();
        } else {
          setCountryAreaCode((java.lang.String)value);
        }
        break;

      case PHONE_NUMBER:
        if (value == null) {
          unsetPhoneNumber();
        } else {
          setPhoneNumber((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNTRY_AREA_CODE:
        return getCountryAreaCode();

      case PHONE_NUMBER:
        return getPhoneNumber();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COUNTRY_AREA_CODE:
        return isSetCountryAreaCode();
      case PHONE_NUMBER:
        return isSetPhoneNumber();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupByPhoneNumber_args)
        return this.equals((lookupByPhoneNumber_args)that);
      return false;
    }

    public boolean equals(lookupByPhoneNumber_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_countryAreaCode = true && this.isSetCountryAreaCode();
      boolean that_present_countryAreaCode = true && that.isSetCountryAreaCode();
      if (this_present_countryAreaCode || that_present_countryAreaCode) {
        if (!(this_present_countryAreaCode && that_present_countryAreaCode))
          return false;
        if (!this.countryAreaCode.equals(that.countryAreaCode))
          return false;
      }

      boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
      boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
      if (this_present_phoneNumber || that_present_phoneNumber) {
        if (!(this_present_phoneNumber && that_present_phoneNumber))
          return false;
        if (!this.phoneNumber.equals(that.phoneNumber))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCountryAreaCode()) ? 131071 : 524287);
      if (isSetCountryAreaCode())
        hashCode = hashCode * 8191 + countryAreaCode.hashCode();

      hashCode = hashCode * 8191 + ((isSetPhoneNumber()) ? 131071 : 524287);
      if (isSetPhoneNumber())
        hashCode = hashCode * 8191 + phoneNumber.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lookupByPhoneNumber_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCountryAreaCode()).compareTo(other.isSetCountryAreaCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryAreaCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryAreaCode, other.countryAreaCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPhoneNumber()).compareTo(other.isSetPhoneNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhoneNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lookupByPhoneNumber_args(");
      boolean first = true;

      sb.append("countryAreaCode:");
      if (this.countryAreaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryAreaCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lookupByPhoneNumber_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupByPhoneNumber_argsStandardScheme getScheme() {
        return new lookupByPhoneNumber_argsStandardScheme();
      }
    }

    private static class lookupByPhoneNumber_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lookupByPhoneNumber_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lookupByPhoneNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // COUNTRY_AREA_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countryAreaCode = iprot.readString();
                struct.setCountryAreaCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PHONE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phoneNumber = iprot.readString();
                struct.setPhoneNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lookupByPhoneNumber_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.countryAreaCode != null) {
          oprot.writeFieldBegin(COUNTRY_AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.countryAreaCode);
          oprot.writeFieldEnd();
        }
        if (struct.phoneNumber != null) {
          oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.phoneNumber);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lookupByPhoneNumber_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupByPhoneNumber_argsTupleScheme getScheme() {
        return new lookupByPhoneNumber_argsTupleScheme();
      }
    }

    private static class lookupByPhoneNumber_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lookupByPhoneNumber_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lookupByPhoneNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCountryAreaCode()) {
          optionals.set(0);
        }
        if (struct.isSetPhoneNumber()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCountryAreaCode()) {
          oprot.writeString(struct.countryAreaCode);
        }
        if (struct.isSetPhoneNumber()) {
          oprot.writeString(struct.phoneNumber);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lookupByPhoneNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.countryAreaCode = iprot.readString();
          struct.setCountryAreaCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.phoneNumber = iprot.readString();
          struct.setPhoneNumberIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lookupByPhoneNumber_result implements org.apache.thrift.TBase<lookupByPhoneNumber_result, lookupByPhoneNumber_result._Fields>, java.io.Serializable, Cloneable, Comparable<lookupByPhoneNumber_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lookupByPhoneNumber_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lookupByPhoneNumber_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lookupByPhoneNumber_resultTupleSchemeFactory();

    public SpotPhoneNumberResponse success; // required
    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpotPhoneNumberResponse.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookupByPhoneNumber_result.class, metaDataMap);
    }

    public lookupByPhoneNumber_result() {
    }

    public lookupByPhoneNumber_result(
      SpotPhoneNumberResponse success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupByPhoneNumber_result(lookupByPhoneNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = new SpotPhoneNumberResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public lookupByPhoneNumber_result deepCopy() {
      return new lookupByPhoneNumber_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SpotPhoneNumberResponse getSuccess() {
      return this.success;
    }

    public lookupByPhoneNumber_result setSuccess(SpotPhoneNumberResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public lookupByPhoneNumber_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SpotPhoneNumberResponse)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupByPhoneNumber_result)
        return this.equals((lookupByPhoneNumber_result)that);
      return false;
    }

    public boolean equals(lookupByPhoneNumber_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lookupByPhoneNumber_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lookupByPhoneNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lookupByPhoneNumber_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupByPhoneNumber_resultStandardScheme getScheme() {
        return new lookupByPhoneNumber_resultStandardScheme();
      }
    }

    private static class lookupByPhoneNumber_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lookupByPhoneNumber_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lookupByPhoneNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SpotPhoneNumberResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lookupByPhoneNumber_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lookupByPhoneNumber_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupByPhoneNumber_resultTupleScheme getScheme() {
        return new lookupByPhoneNumber_resultTupleScheme();
      }
    }

    private static class lookupByPhoneNumber_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lookupByPhoneNumber_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lookupByPhoneNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lookupByPhoneNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SpotPhoneNumberResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lookupNearby_args implements org.apache.thrift.TBase<lookupNearby_args, lookupNearby_args._Fields>, java.io.Serializable, Cloneable, Comparable<lookupNearby_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lookupNearby_args");

    private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("location", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField COUNTRY_AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryAreaCode", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lookupNearby_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lookupNearby_argsTupleSchemeFactory();

    public Location location; // required
    /**
     * 
     * @see SpotCategory
     */
    public SpotCategory category; // required
    public java.lang.String query; // required
    public java.lang.String countryAreaCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCATION((short)2, "location"),
      /**
       * 
       * @see SpotCategory
       */
      CATEGORY((short)3, "category"),
      QUERY((short)4, "query"),
      COUNTRY_AREA_CODE((short)5, "countryAreaCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LOCATION
            return LOCATION;
          case 3: // CATEGORY
            return CATEGORY;
          case 4: // QUERY
            return QUERY;
          case 5: // COUNTRY_AREA_CODE
            return COUNTRY_AREA_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Location.class)));
      tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SpotCategory.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNTRY_AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryAreaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookupNearby_args.class, metaDataMap);
    }

    public lookupNearby_args() {
    }

    public lookupNearby_args(
      Location location,
      SpotCategory category,
      java.lang.String query,
      java.lang.String countryAreaCode)
    {
      this();
      this.location = location;
      this.category = category;
      this.query = query;
      this.countryAreaCode = countryAreaCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupNearby_args(lookupNearby_args other) {
      if (other.isSetLocation()) {
        this.location = new Location(other.location);
      }
      if (other.isSetCategory()) {
        this.category = other.category;
      }
      if (other.isSetQuery()) {
        this.query = other.query;
      }
      if (other.isSetCountryAreaCode()) {
        this.countryAreaCode = other.countryAreaCode;
      }
    }

    public lookupNearby_args deepCopy() {
      return new lookupNearby_args(this);
    }

    @Override
    public void clear() {
      this.location = null;
      this.category = null;
      this.query = null;
      this.countryAreaCode = null;
    }

    public Location getLocation() {
      return this.location;
    }

    public lookupNearby_args setLocation(Location location) {
      this.location = location;
      return this;
    }

    public void unsetLocation() {
      this.location = null;
    }

    /** Returns true if field location is set (has been assigned a value) and false otherwise */
    public boolean isSetLocation() {
      return this.location != null;
    }

    public void setLocationIsSet(boolean value) {
      if (!value) {
        this.location = null;
      }
    }

    /**
     * 
     * @see SpotCategory
     */
    public SpotCategory getCategory() {
      return this.category;
    }

    /**
     * 
     * @see SpotCategory
     */
    public lookupNearby_args setCategory(SpotCategory category) {
      this.category = category;
      return this;
    }

    public void unsetCategory() {
      this.category = null;
    }

    /** Returns true if field category is set (has been assigned a value) and false otherwise */
    public boolean isSetCategory() {
      return this.category != null;
    }

    public void setCategoryIsSet(boolean value) {
      if (!value) {
        this.category = null;
      }
    }

    public java.lang.String getQuery() {
      return this.query;
    }

    public lookupNearby_args setQuery(java.lang.String query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public java.lang.String getCountryAreaCode() {
      return this.countryAreaCode;
    }

    public lookupNearby_args setCountryAreaCode(java.lang.String countryAreaCode) {
      this.countryAreaCode = countryAreaCode;
      return this;
    }

    public void unsetCountryAreaCode() {
      this.countryAreaCode = null;
    }

    /** Returns true if field countryAreaCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryAreaCode() {
      return this.countryAreaCode != null;
    }

    public void setCountryAreaCodeIsSet(boolean value) {
      if (!value) {
        this.countryAreaCode = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCATION:
        if (value == null) {
          unsetLocation();
        } else {
          setLocation((Location)value);
        }
        break;

      case CATEGORY:
        if (value == null) {
          unsetCategory();
        } else {
          setCategory((SpotCategory)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((java.lang.String)value);
        }
        break;

      case COUNTRY_AREA_CODE:
        if (value == null) {
          unsetCountryAreaCode();
        } else {
          setCountryAreaCode((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCATION:
        return getLocation();

      case CATEGORY:
        return getCategory();

      case QUERY:
        return getQuery();

      case COUNTRY_AREA_CODE:
        return getCountryAreaCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCATION:
        return isSetLocation();
      case CATEGORY:
        return isSetCategory();
      case QUERY:
        return isSetQuery();
      case COUNTRY_AREA_CODE:
        return isSetCountryAreaCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupNearby_args)
        return this.equals((lookupNearby_args)that);
      return false;
    }

    public boolean equals(lookupNearby_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_location = true && this.isSetLocation();
      boolean that_present_location = true && that.isSetLocation();
      if (this_present_location || that_present_location) {
        if (!(this_present_location && that_present_location))
          return false;
        if (!this.location.equals(that.location))
          return false;
      }

      boolean this_present_category = true && this.isSetCategory();
      boolean that_present_category = true && that.isSetCategory();
      if (this_present_category || that_present_category) {
        if (!(this_present_category && that_present_category))
          return false;
        if (!this.category.equals(that.category))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_countryAreaCode = true && this.isSetCountryAreaCode();
      boolean that_present_countryAreaCode = true && that.isSetCountryAreaCode();
      if (this_present_countryAreaCode || that_present_countryAreaCode) {
        if (!(this_present_countryAreaCode && that_present_countryAreaCode))
          return false;
        if (!this.countryAreaCode.equals(that.countryAreaCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
      if (isSetLocation())
        hashCode = hashCode * 8191 + location.hashCode();

      hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
      if (isSetCategory())
        hashCode = hashCode * 8191 + category.getValue();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + ((isSetCountryAreaCode()) ? 131071 : 524287);
      if (isSetCountryAreaCode())
        hashCode = hashCode * 8191 + countryAreaCode.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lookupNearby_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategory()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCountryAreaCode()).compareTo(other.isSetCountryAreaCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryAreaCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryAreaCode, other.countryAreaCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lookupNearby_args(");
      boolean first = true;

      sb.append("location:");
      if (this.location == null) {
        sb.append("null");
      } else {
        sb.append(this.location);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("category:");
      if (this.category == null) {
        sb.append("null");
      } else {
        sb.append(this.category);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("countryAreaCode:");
      if (this.countryAreaCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryAreaCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (location != null) {
        location.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lookupNearby_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupNearby_argsStandardScheme getScheme() {
        return new lookupNearby_argsStandardScheme();
      }
    }

    private static class lookupNearby_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lookupNearby_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lookupNearby_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LOCATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.location = new Location();
                struct.location.read(iprot);
                struct.setLocationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CATEGORY
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.category = SpotCategory.findByValue(iprot.readI32());
                struct.setCategoryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.query = iprot.readString();
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COUNTRY_AREA_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countryAreaCode = iprot.readString();
                struct.setCountryAreaCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lookupNearby_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.location != null) {
          oprot.writeFieldBegin(LOCATION_FIELD_DESC);
          struct.location.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.category != null) {
          oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
          oprot.writeI32(struct.category.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          oprot.writeString(struct.query);
          oprot.writeFieldEnd();
        }
        if (struct.countryAreaCode != null) {
          oprot.writeFieldBegin(COUNTRY_AREA_CODE_FIELD_DESC);
          oprot.writeString(struct.countryAreaCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lookupNearby_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupNearby_argsTupleScheme getScheme() {
        return new lookupNearby_argsTupleScheme();
      }
    }

    private static class lookupNearby_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lookupNearby_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lookupNearby_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocation()) {
          optionals.set(0);
        }
        if (struct.isSetCategory()) {
          optionals.set(1);
        }
        if (struct.isSetQuery()) {
          optionals.set(2);
        }
        if (struct.isSetCountryAreaCode()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetLocation()) {
          struct.location.write(oprot);
        }
        if (struct.isSetCategory()) {
          oprot.writeI32(struct.category.getValue());
        }
        if (struct.isSetQuery()) {
          oprot.writeString(struct.query);
        }
        if (struct.isSetCountryAreaCode()) {
          oprot.writeString(struct.countryAreaCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lookupNearby_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.location = new Location();
          struct.location.read(iprot);
          struct.setLocationIsSet(true);
        }
        if (incoming.get(1)) {
          struct.category = SpotCategory.findByValue(iprot.readI32());
          struct.setCategoryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.query = iprot.readString();
          struct.setQueryIsSet(true);
        }
        if (incoming.get(3)) {
          struct.countryAreaCode = iprot.readString();
          struct.setCountryAreaCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lookupNearby_result implements org.apache.thrift.TBase<lookupNearby_result, lookupNearby_result._Fields>, java.io.Serializable, Cloneable, Comparable<lookupNearby_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lookupNearby_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lookupNearby_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lookupNearby_resultTupleSchemeFactory();

    public SpotNearbyResponse success; // required
    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpotNearbyResponse.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lookupNearby_result.class, metaDataMap);
    }

    public lookupNearby_result() {
    }

    public lookupNearby_result(
      SpotNearbyResponse success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lookupNearby_result(lookupNearby_result other) {
      if (other.isSetSuccess()) {
        this.success = new SpotNearbyResponse(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public lookupNearby_result deepCopy() {
      return new lookupNearby_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SpotNearbyResponse getSuccess() {
      return this.success;
    }

    public lookupNearby_result setSuccess(SpotNearbyResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public lookupNearby_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SpotNearbyResponse)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lookupNearby_result)
        return this.equals((lookupNearby_result)that);
      return false;
    }

    public boolean equals(lookupNearby_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lookupNearby_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lookupNearby_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lookupNearby_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupNearby_resultStandardScheme getScheme() {
        return new lookupNearby_resultStandardScheme();
      }
    }

    private static class lookupNearby_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lookupNearby_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lookupNearby_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SpotNearbyResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lookupNearby_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lookupNearby_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lookupNearby_resultTupleScheme getScheme() {
        return new lookupNearby_resultTupleScheme();
      }
    }

    private static class lookupNearby_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lookupNearby_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lookupNearby_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lookupNearby_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SpotNearbyResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
