/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class TMessageReadRange implements org.apache.thrift.TBase<TMessageReadRange, TMessageReadRange._Fields>, java.io.Serializable, Cloneable, Comparable<TMessageReadRange> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TMessageReadRange");

  private static final org.apache.thrift.protocol.TField CHAT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RANGES_FIELD_DESC = new org.apache.thrift.protocol.TField("ranges", org.apache.thrift.protocol.TType.MAP, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TMessageReadRangeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TMessageReadRangeTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String chatId; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<TMessageReadRangeEntry>> ranges; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHAT_ID((short)1, "chatId"),
    RANGES((short)2, "ranges");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHAT_ID
          return CHAT_ID;
        case 2: // RANGES
          return RANGES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHAT_ID, new org.apache.thrift.meta_data.FieldMetaData("chatId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RANGES, new org.apache.thrift.meta_data.FieldMetaData("ranges", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMessageReadRangeEntry.class)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TMessageReadRange.class, metaDataMap);
  }

  public TMessageReadRange() {
  }

  public TMessageReadRange(
    java.lang.String chatId,
    java.util.Map<java.lang.String,java.util.List<TMessageReadRangeEntry>> ranges)
  {
    this();
    this.chatId = chatId;
    this.ranges = ranges;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TMessageReadRange(TMessageReadRange other) {
    if (other.isSetChatId()) {
      this.chatId = other.chatId;
    }
    if (other.isSetRanges()) {
      java.util.Map<java.lang.String,java.util.List<TMessageReadRangeEntry>> __this__ranges = new java.util.HashMap<java.lang.String,java.util.List<TMessageReadRangeEntry>>(other.ranges.size());
      for (java.util.Map.Entry<java.lang.String, java.util.List<TMessageReadRangeEntry>> other_element : other.ranges.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.List<TMessageReadRangeEntry> other_element_value = other_element.getValue();

        java.lang.String __this__ranges_copy_key = other_element_key;

        java.util.List<TMessageReadRangeEntry> __this__ranges_copy_value = new java.util.ArrayList<TMessageReadRangeEntry>(other_element_value.size());
        for (TMessageReadRangeEntry other_element_value_element : other_element_value) {
          __this__ranges_copy_value.add(new TMessageReadRangeEntry(other_element_value_element));
        }

        __this__ranges.put(__this__ranges_copy_key, __this__ranges_copy_value);
      }
      this.ranges = __this__ranges;
    }
  }

  public TMessageReadRange deepCopy() {
    return new TMessageReadRange(this);
  }

  @Override
  public void clear() {
    this.chatId = null;
    this.ranges = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChatId() {
    return this.chatId;
  }

  public TMessageReadRange setChatId(@org.apache.thrift.annotation.Nullable java.lang.String chatId) {
    this.chatId = chatId;
    return this;
  }

  public void unsetChatId() {
    this.chatId = null;
  }

  /** Returns true if field chatId is set (has been assigned a value) and false otherwise */
  public boolean isSetChatId() {
    return this.chatId != null;
  }

  public void setChatIdIsSet(boolean value) {
    if (!value) {
      this.chatId = null;
    }
  }

  public int getRangesSize() {
    return (this.ranges == null) ? 0 : this.ranges.size();
  }

  public void putToRanges(java.lang.String key, java.util.List<TMessageReadRangeEntry> val) {
    if (this.ranges == null) {
      this.ranges = new java.util.HashMap<java.lang.String,java.util.List<TMessageReadRangeEntry>>();
    }
    this.ranges.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.util.List<TMessageReadRangeEntry>> getRanges() {
    return this.ranges;
  }

  public TMessageReadRange setRanges(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.util.List<TMessageReadRangeEntry>> ranges) {
    this.ranges = ranges;
    return this;
  }

  public void unsetRanges() {
    this.ranges = null;
  }

  /** Returns true if field ranges is set (has been assigned a value) and false otherwise */
  public boolean isSetRanges() {
    return this.ranges != null;
  }

  public void setRangesIsSet(boolean value) {
    if (!value) {
      this.ranges = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHAT_ID:
      if (value == null) {
        unsetChatId();
      } else {
        setChatId((java.lang.String)value);
      }
      break;

    case RANGES:
      if (value == null) {
        unsetRanges();
      } else {
        setRanges((java.util.Map<java.lang.String,java.util.List<TMessageReadRangeEntry>>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHAT_ID:
      return getChatId();

    case RANGES:
      return getRanges();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHAT_ID:
      return isSetChatId();
    case RANGES:
      return isSetRanges();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TMessageReadRange)
      return this.equals((TMessageReadRange)that);
    return false;
  }

  public boolean equals(TMessageReadRange that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_chatId = true && this.isSetChatId();
    boolean that_present_chatId = true && that.isSetChatId();
    if (this_present_chatId || that_present_chatId) {
      if (!(this_present_chatId && that_present_chatId))
        return false;
      if (!this.chatId.equals(that.chatId))
        return false;
    }

    boolean this_present_ranges = true && this.isSetRanges();
    boolean that_present_ranges = true && that.isSetRanges();
    if (this_present_ranges || that_present_ranges) {
      if (!(this_present_ranges && that_present_ranges))
        return false;
      if (!this.ranges.equals(that.ranges))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetChatId()) ? 131071 : 524287);
    if (isSetChatId())
      hashCode = hashCode * 8191 + chatId.hashCode();

    hashCode = hashCode * 8191 + ((isSetRanges()) ? 131071 : 524287);
    if (isSetRanges())
      hashCode = hashCode * 8191 + ranges.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TMessageReadRange other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetChatId(), other.isSetChatId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatId, other.chatId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRanges(), other.isSetRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRanges()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ranges, other.ranges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TMessageReadRange(");
    boolean first = true;

    sb.append("chatId:");
    if (this.chatId == null) {
      sb.append("null");
    } else {
      sb.append(this.chatId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ranges:");
    if (this.ranges == null) {
      sb.append("null");
    } else {
      sb.append(this.ranges);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TMessageReadRangeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TMessageReadRangeStandardScheme getScheme() {
      return new TMessageReadRangeStandardScheme();
    }
  }

  private static class TMessageReadRangeStandardScheme extends org.apache.thrift.scheme.StandardScheme<TMessageReadRange> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TMessageReadRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHAT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatId = iprot.readString();
              struct.setChatIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RANGES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map534 = iprot.readMapBegin();
                struct.ranges = new java.util.HashMap<java.lang.String,java.util.List<TMessageReadRangeEntry>>(2*_map534.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key535;
                @org.apache.thrift.annotation.Nullable java.util.List<TMessageReadRangeEntry> _val536;
                for (int _i537 = 0; _i537 < _map534.size; ++_i537)
                {
                  _key535 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list538 = iprot.readListBegin();
                    _val536 = new java.util.ArrayList<TMessageReadRangeEntry>(_list538.size);
                    @org.apache.thrift.annotation.Nullable TMessageReadRangeEntry _elem539;
                    for (int _i540 = 0; _i540 < _list538.size; ++_i540)
                    {
                      _elem539 = new TMessageReadRangeEntry();
                      _elem539.read(iprot);
                      _val536.add(_elem539);
                    }
                    iprot.readListEnd();
                  }
                  struct.ranges.put(_key535, _val536);
                }
                iprot.readMapEnd();
              }
              struct.setRangesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TMessageReadRange struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.chatId != null) {
        oprot.writeFieldBegin(CHAT_ID_FIELD_DESC);
        oprot.writeString(struct.chatId);
        oprot.writeFieldEnd();
      }
      if (struct.ranges != null) {
        oprot.writeFieldBegin(RANGES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.ranges.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.List<TMessageReadRangeEntry>> _iter541 : struct.ranges.entrySet())
          {
            oprot.writeString(_iter541.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, _iter541.getValue().size()));
              for (TMessageReadRangeEntry _iter542 : _iter541.getValue())
              {
                _iter542.write(oprot);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TMessageReadRangeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TMessageReadRangeTupleScheme getScheme() {
      return new TMessageReadRangeTupleScheme();
    }
  }

  private static class TMessageReadRangeTupleScheme extends org.apache.thrift.scheme.TupleScheme<TMessageReadRange> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TMessageReadRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChatId()) {
        optionals.set(0);
      }
      if (struct.isSetRanges()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetChatId()) {
        oprot.writeString(struct.chatId);
      }
      if (struct.isSetRanges()) {
        {
          oprot.writeI32(struct.ranges.size());
          for (java.util.Map.Entry<java.lang.String, java.util.List<TMessageReadRangeEntry>> _iter543 : struct.ranges.entrySet())
          {
            oprot.writeString(_iter543.getKey());
            {
              oprot.writeI32(_iter543.getValue().size());
              for (TMessageReadRangeEntry _iter544 : _iter543.getValue())
              {
                _iter544.write(oprot);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TMessageReadRange struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.chatId = iprot.readString();
        struct.setChatIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map545 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.ranges = new java.util.HashMap<java.lang.String,java.util.List<TMessageReadRangeEntry>>(2*_map545.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key546;
          @org.apache.thrift.annotation.Nullable java.util.List<TMessageReadRangeEntry> _val547;
          for (int _i548 = 0; _i548 < _map545.size; ++_i548)
          {
            _key546 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list549 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
              _val547 = new java.util.ArrayList<TMessageReadRangeEntry>(_list549.size);
              @org.apache.thrift.annotation.Nullable TMessageReadRangeEntry _elem550;
              for (int _i551 = 0; _i551 < _list549.size; ++_i551)
              {
                _elem550 = new TMessageReadRangeEntry();
                _elem550.read(iprot);
                _val547.add(_elem550);
              }
            }
            struct.ranges.put(_key546, _val547);
          }
        }
        struct.setRangesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

