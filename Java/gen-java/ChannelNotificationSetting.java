/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class ChannelNotificationSetting implements org.apache.thrift.TBase<ChannelNotificationSetting, ChannelNotificationSetting._Fields>, java.io.Serializable, Cloneable, Comparable<ChannelNotificationSetting> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ChannelNotificationSetting");

  private static final org.apache.thrift.protocol.TField CHANNEL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("channelId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NOTIFICATION_RECEIVABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("notificationReceivable", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_RECEIVABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageReceivable", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField SHOW_DEFAULT_FIELD_DESC = new org.apache.thrift.protocol.TField("showDefault", org.apache.thrift.protocol.TType.BOOL, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ChannelNotificationSettingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ChannelNotificationSettingTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String channelId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public boolean notificationReceivable; // required
  public boolean messageReceivable; // required
  public boolean showDefault; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CHANNEL_ID((short)1, "channelId"),
    NAME((short)2, "name"),
    NOTIFICATION_RECEIVABLE((short)3, "notificationReceivable"),
    MESSAGE_RECEIVABLE((short)4, "messageReceivable"),
    SHOW_DEFAULT((short)5, "showDefault");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHANNEL_ID
          return CHANNEL_ID;
        case 2: // NAME
          return NAME;
        case 3: // NOTIFICATION_RECEIVABLE
          return NOTIFICATION_RECEIVABLE;
        case 4: // MESSAGE_RECEIVABLE
          return MESSAGE_RECEIVABLE;
        case 5: // SHOW_DEFAULT
          return SHOW_DEFAULT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NOTIFICATIONRECEIVABLE_ISSET_ID = 0;
  private static final int __MESSAGERECEIVABLE_ISSET_ID = 1;
  private static final int __SHOWDEFAULT_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHANNEL_ID, new org.apache.thrift.meta_data.FieldMetaData("channelId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTIFICATION_RECEIVABLE, new org.apache.thrift.meta_data.FieldMetaData("notificationReceivable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.MESSAGE_RECEIVABLE, new org.apache.thrift.meta_data.FieldMetaData("messageReceivable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.SHOW_DEFAULT, new org.apache.thrift.meta_data.FieldMetaData("showDefault", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ChannelNotificationSetting.class, metaDataMap);
  }

  public ChannelNotificationSetting() {
  }

  public ChannelNotificationSetting(
    java.lang.String channelId,
    java.lang.String name,
    boolean notificationReceivable,
    boolean messageReceivable,
    boolean showDefault)
  {
    this();
    this.channelId = channelId;
    this.name = name;
    this.notificationReceivable = notificationReceivable;
    setNotificationReceivableIsSet(true);
    this.messageReceivable = messageReceivable;
    setMessageReceivableIsSet(true);
    this.showDefault = showDefault;
    setShowDefaultIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ChannelNotificationSetting(ChannelNotificationSetting other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetChannelId()) {
      this.channelId = other.channelId;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    this.notificationReceivable = other.notificationReceivable;
    this.messageReceivable = other.messageReceivable;
    this.showDefault = other.showDefault;
  }

  public ChannelNotificationSetting deepCopy() {
    return new ChannelNotificationSetting(this);
  }

  @Override
  public void clear() {
    this.channelId = null;
    this.name = null;
    setNotificationReceivableIsSet(false);
    this.notificationReceivable = false;
    setMessageReceivableIsSet(false);
    this.messageReceivable = false;
    setShowDefaultIsSet(false);
    this.showDefault = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getChannelId() {
    return this.channelId;
  }

  public ChannelNotificationSetting setChannelId(@org.apache.thrift.annotation.Nullable java.lang.String channelId) {
    this.channelId = channelId;
    return this;
  }

  public void unsetChannelId() {
    this.channelId = null;
  }

  /** Returns true if field channelId is set (has been assigned a value) and false otherwise */
  public boolean isSetChannelId() {
    return this.channelId != null;
  }

  public void setChannelIdIsSet(boolean value) {
    if (!value) {
      this.channelId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public ChannelNotificationSetting setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public boolean isNotificationReceivable() {
    return this.notificationReceivable;
  }

  public ChannelNotificationSetting setNotificationReceivable(boolean notificationReceivable) {
    this.notificationReceivable = notificationReceivable;
    setNotificationReceivableIsSet(true);
    return this;
  }

  public void unsetNotificationReceivable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NOTIFICATIONRECEIVABLE_ISSET_ID);
  }

  /** Returns true if field notificationReceivable is set (has been assigned a value) and false otherwise */
  public boolean isSetNotificationReceivable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NOTIFICATIONRECEIVABLE_ISSET_ID);
  }

  public void setNotificationReceivableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NOTIFICATIONRECEIVABLE_ISSET_ID, value);
  }

  public boolean isMessageReceivable() {
    return this.messageReceivable;
  }

  public ChannelNotificationSetting setMessageReceivable(boolean messageReceivable) {
    this.messageReceivable = messageReceivable;
    setMessageReceivableIsSet(true);
    return this;
  }

  public void unsetMessageReceivable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MESSAGERECEIVABLE_ISSET_ID);
  }

  /** Returns true if field messageReceivable is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageReceivable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MESSAGERECEIVABLE_ISSET_ID);
  }

  public void setMessageReceivableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MESSAGERECEIVABLE_ISSET_ID, value);
  }

  public boolean isShowDefault() {
    return this.showDefault;
  }

  public ChannelNotificationSetting setShowDefault(boolean showDefault) {
    this.showDefault = showDefault;
    setShowDefaultIsSet(true);
    return this;
  }

  public void unsetShowDefault() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHOWDEFAULT_ISSET_ID);
  }

  /** Returns true if field showDefault is set (has been assigned a value) and false otherwise */
  public boolean isSetShowDefault() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHOWDEFAULT_ISSET_ID);
  }

  public void setShowDefaultIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHOWDEFAULT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case CHANNEL_ID:
      if (value == null) {
        unsetChannelId();
      } else {
        setChannelId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case NOTIFICATION_RECEIVABLE:
      if (value == null) {
        unsetNotificationReceivable();
      } else {
        setNotificationReceivable((java.lang.Boolean)value);
      }
      break;

    case MESSAGE_RECEIVABLE:
      if (value == null) {
        unsetMessageReceivable();
      } else {
        setMessageReceivable((java.lang.Boolean)value);
      }
      break;

    case SHOW_DEFAULT:
      if (value == null) {
        unsetShowDefault();
      } else {
        setShowDefault((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHANNEL_ID:
      return getChannelId();

    case NAME:
      return getName();

    case NOTIFICATION_RECEIVABLE:
      return isNotificationReceivable();

    case MESSAGE_RECEIVABLE:
      return isMessageReceivable();

    case SHOW_DEFAULT:
      return isShowDefault();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHANNEL_ID:
      return isSetChannelId();
    case NAME:
      return isSetName();
    case NOTIFICATION_RECEIVABLE:
      return isSetNotificationReceivable();
    case MESSAGE_RECEIVABLE:
      return isSetMessageReceivable();
    case SHOW_DEFAULT:
      return isSetShowDefault();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ChannelNotificationSetting)
      return this.equals((ChannelNotificationSetting)that);
    return false;
  }

  public boolean equals(ChannelNotificationSetting that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_channelId = true && this.isSetChannelId();
    boolean that_present_channelId = true && that.isSetChannelId();
    if (this_present_channelId || that_present_channelId) {
      if (!(this_present_channelId && that_present_channelId))
        return false;
      if (!this.channelId.equals(that.channelId))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_notificationReceivable = true;
    boolean that_present_notificationReceivable = true;
    if (this_present_notificationReceivable || that_present_notificationReceivable) {
      if (!(this_present_notificationReceivable && that_present_notificationReceivable))
        return false;
      if (this.notificationReceivable != that.notificationReceivable)
        return false;
    }

    boolean this_present_messageReceivable = true;
    boolean that_present_messageReceivable = true;
    if (this_present_messageReceivable || that_present_messageReceivable) {
      if (!(this_present_messageReceivable && that_present_messageReceivable))
        return false;
      if (this.messageReceivable != that.messageReceivable)
        return false;
    }

    boolean this_present_showDefault = true;
    boolean that_present_showDefault = true;
    if (this_present_showDefault || that_present_showDefault) {
      if (!(this_present_showDefault && that_present_showDefault))
        return false;
      if (this.showDefault != that.showDefault)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetChannelId()) ? 131071 : 524287);
    if (isSetChannelId())
      hashCode = hashCode * 8191 + channelId.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((notificationReceivable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((messageReceivable) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((showDefault) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ChannelNotificationSetting other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetChannelId(), other.isSetChannelId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChannelId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.channelId, other.channelId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNotificationReceivable(), other.isSetNotificationReceivable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotificationReceivable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notificationReceivable, other.notificationReceivable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMessageReceivable(), other.isSetMessageReceivable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageReceivable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageReceivable, other.messageReceivable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShowDefault(), other.isSetShowDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShowDefault()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.showDefault, other.showDefault);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ChannelNotificationSetting(");
    boolean first = true;

    sb.append("channelId:");
    if (this.channelId == null) {
      sb.append("null");
    } else {
      sb.append(this.channelId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notificationReceivable:");
    sb.append(this.notificationReceivable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageReceivable:");
    sb.append(this.messageReceivable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("showDefault:");
    sb.append(this.showDefault);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ChannelNotificationSettingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelNotificationSettingStandardScheme getScheme() {
      return new ChannelNotificationSettingStandardScheme();
    }
  }

  private static class ChannelNotificationSettingStandardScheme extends org.apache.thrift.scheme.StandardScheme<ChannelNotificationSetting> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ChannelNotificationSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHANNEL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.channelId = iprot.readString();
              struct.setChannelIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NOTIFICATION_RECEIVABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.notificationReceivable = iprot.readBool();
              struct.setNotificationReceivableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE_RECEIVABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.messageReceivable = iprot.readBool();
              struct.setMessageReceivableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SHOW_DEFAULT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.showDefault = iprot.readBool();
              struct.setShowDefaultIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ChannelNotificationSetting struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.channelId != null) {
        oprot.writeFieldBegin(CHANNEL_ID_FIELD_DESC);
        oprot.writeString(struct.channelId);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NOTIFICATION_RECEIVABLE_FIELD_DESC);
      oprot.writeBool(struct.notificationReceivable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MESSAGE_RECEIVABLE_FIELD_DESC);
      oprot.writeBool(struct.messageReceivable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SHOW_DEFAULT_FIELD_DESC);
      oprot.writeBool(struct.showDefault);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ChannelNotificationSettingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ChannelNotificationSettingTupleScheme getScheme() {
      return new ChannelNotificationSettingTupleScheme();
    }
  }

  private static class ChannelNotificationSettingTupleScheme extends org.apache.thrift.scheme.TupleScheme<ChannelNotificationSetting> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ChannelNotificationSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChannelId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetNotificationReceivable()) {
        optionals.set(2);
      }
      if (struct.isSetMessageReceivable()) {
        optionals.set(3);
      }
      if (struct.isSetShowDefault()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetChannelId()) {
        oprot.writeString(struct.channelId);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetNotificationReceivable()) {
        oprot.writeBool(struct.notificationReceivable);
      }
      if (struct.isSetMessageReceivable()) {
        oprot.writeBool(struct.messageReceivable);
      }
      if (struct.isSetShowDefault()) {
        oprot.writeBool(struct.showDefault);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ChannelNotificationSetting struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.channelId = iprot.readString();
        struct.setChannelIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.notificationReceivable = iprot.readBool();
        struct.setNotificationReceivableIsSet(true);
      }
      if (incoming.get(3)) {
        struct.messageReceivable = iprot.readBool();
        struct.setMessageReceivableIsSet(true);
      }
      if (incoming.get(4)) {
        struct.showDefault = iprot.readBool();
        struct.setShowDefaultIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

