/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class NotificationFetchResult implements org.apache.thrift.TBase<NotificationFetchResult, NotificationFetchResult._Fields>, java.io.Serializable, Cloneable, Comparable<NotificationFetchResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotificationFetchResult");

  private static final org.apache.thrift.protocol.TField FETCH_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("fetchMode", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField ITEM_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("itemList", org.apache.thrift.protocol.TType.LIST, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NotificationFetchResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NotificationFetchResultTupleSchemeFactory();

  /**
   * 
   * @see NotificationItemFetchMode
   */
  public @org.apache.thrift.annotation.Nullable NotificationItemFetchMode fetchMode; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<NotificationItem> itemList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see NotificationItemFetchMode
     */
    FETCH_MODE((short)1, "fetchMode"),
    ITEM_LIST((short)2, "itemList");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FETCH_MODE
          return FETCH_MODE;
        case 2: // ITEM_LIST
          return ITEM_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FETCH_MODE, new org.apache.thrift.meta_data.FieldMetaData("fetchMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NotificationItemFetchMode.class)));
    tmpMap.put(_Fields.ITEM_LIST, new org.apache.thrift.meta_data.FieldMetaData("itemList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NotificationItem.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotificationFetchResult.class, metaDataMap);
  }

  public NotificationFetchResult() {
  }

  public NotificationFetchResult(
    NotificationItemFetchMode fetchMode,
    java.util.List<NotificationItem> itemList)
  {
    this();
    this.fetchMode = fetchMode;
    this.itemList = itemList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotificationFetchResult(NotificationFetchResult other) {
    if (other.isSetFetchMode()) {
      this.fetchMode = other.fetchMode;
    }
    if (other.isSetItemList()) {
      java.util.List<NotificationItem> __this__itemList = new java.util.ArrayList<NotificationItem>(other.itemList.size());
      for (NotificationItem other_element : other.itemList) {
        __this__itemList.add(new NotificationItem(other_element));
      }
      this.itemList = __this__itemList;
    }
  }

  public NotificationFetchResult deepCopy() {
    return new NotificationFetchResult(this);
  }

  @Override
  public void clear() {
    this.fetchMode = null;
    this.itemList = null;
  }

  /**
   * 
   * @see NotificationItemFetchMode
   */
  @org.apache.thrift.annotation.Nullable
  public NotificationItemFetchMode getFetchMode() {
    return this.fetchMode;
  }

  /**
   * 
   * @see NotificationItemFetchMode
   */
  public NotificationFetchResult setFetchMode(@org.apache.thrift.annotation.Nullable NotificationItemFetchMode fetchMode) {
    this.fetchMode = fetchMode;
    return this;
  }

  public void unsetFetchMode() {
    this.fetchMode = null;
  }

  /** Returns true if field fetchMode is set (has been assigned a value) and false otherwise */
  public boolean isSetFetchMode() {
    return this.fetchMode != null;
  }

  public void setFetchModeIsSet(boolean value) {
    if (!value) {
      this.fetchMode = null;
    }
  }

  public int getItemListSize() {
    return (this.itemList == null) ? 0 : this.itemList.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<NotificationItem> getItemListIterator() {
    return (this.itemList == null) ? null : this.itemList.iterator();
  }

  public void addToItemList(NotificationItem elem) {
    if (this.itemList == null) {
      this.itemList = new java.util.ArrayList<NotificationItem>();
    }
    this.itemList.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<NotificationItem> getItemList() {
    return this.itemList;
  }

  public NotificationFetchResult setItemList(@org.apache.thrift.annotation.Nullable java.util.List<NotificationItem> itemList) {
    this.itemList = itemList;
    return this;
  }

  public void unsetItemList() {
    this.itemList = null;
  }

  /** Returns true if field itemList is set (has been assigned a value) and false otherwise */
  public boolean isSetItemList() {
    return this.itemList != null;
  }

  public void setItemListIsSet(boolean value) {
    if (!value) {
      this.itemList = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case FETCH_MODE:
      if (value == null) {
        unsetFetchMode();
      } else {
        setFetchMode((NotificationItemFetchMode)value);
      }
      break;

    case ITEM_LIST:
      if (value == null) {
        unsetItemList();
      } else {
        setItemList((java.util.List<NotificationItem>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FETCH_MODE:
      return getFetchMode();

    case ITEM_LIST:
      return getItemList();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FETCH_MODE:
      return isSetFetchMode();
    case ITEM_LIST:
      return isSetItemList();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof NotificationFetchResult)
      return this.equals((NotificationFetchResult)that);
    return false;
  }

  public boolean equals(NotificationFetchResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_fetchMode = true && this.isSetFetchMode();
    boolean that_present_fetchMode = true && that.isSetFetchMode();
    if (this_present_fetchMode || that_present_fetchMode) {
      if (!(this_present_fetchMode && that_present_fetchMode))
        return false;
      if (!this.fetchMode.equals(that.fetchMode))
        return false;
    }

    boolean this_present_itemList = true && this.isSetItemList();
    boolean that_present_itemList = true && that.isSetItemList();
    if (this_present_itemList || that_present_itemList) {
      if (!(this_present_itemList && that_present_itemList))
        return false;
      if (!this.itemList.equals(that.itemList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFetchMode()) ? 131071 : 524287);
    if (isSetFetchMode())
      hashCode = hashCode * 8191 + fetchMode.getValue();

    hashCode = hashCode * 8191 + ((isSetItemList()) ? 131071 : 524287);
    if (isSetItemList())
      hashCode = hashCode * 8191 + itemList.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(NotificationFetchResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetFetchMode(), other.isSetFetchMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFetchMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fetchMode, other.fetchMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetItemList(), other.isSetItemList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemList, other.itemList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NotificationFetchResult(");
    boolean first = true;

    sb.append("fetchMode:");
    if (this.fetchMode == null) {
      sb.append("null");
    } else {
      sb.append(this.fetchMode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemList:");
    if (this.itemList == null) {
      sb.append("null");
    } else {
      sb.append(this.itemList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotificationFetchResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NotificationFetchResultStandardScheme getScheme() {
      return new NotificationFetchResultStandardScheme();
    }
  }

  private static class NotificationFetchResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<NotificationFetchResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotificationFetchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FETCH_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fetchMode = NotificationItemFetchMode.findByValue(iprot.readI32());
              struct.setFetchModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ITEM_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list368 = iprot.readListBegin();
                struct.itemList = new java.util.ArrayList<NotificationItem>(_list368.size);
                @org.apache.thrift.annotation.Nullable NotificationItem _elem369;
                for (int _i370 = 0; _i370 < _list368.size; ++_i370)
                {
                  _elem369 = new NotificationItem();
                  _elem369.read(iprot);
                  struct.itemList.add(_elem369);
                }
                iprot.readListEnd();
              }
              struct.setItemListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotificationFetchResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.fetchMode != null) {
        oprot.writeFieldBegin(FETCH_MODE_FIELD_DESC);
        oprot.writeI32(struct.fetchMode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.itemList != null) {
        oprot.writeFieldBegin(ITEM_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.itemList.size()));
          for (NotificationItem _iter371 : struct.itemList)
          {
            _iter371.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotificationFetchResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NotificationFetchResultTupleScheme getScheme() {
      return new NotificationFetchResultTupleScheme();
    }
  }

  private static class NotificationFetchResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<NotificationFetchResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotificationFetchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFetchMode()) {
        optionals.set(0);
      }
      if (struct.isSetItemList()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFetchMode()) {
        oprot.writeI32(struct.fetchMode.getValue());
      }
      if (struct.isSetItemList()) {
        {
          oprot.writeI32(struct.itemList.size());
          for (NotificationItem _iter372 : struct.itemList)
          {
            _iter372.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotificationFetchResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.fetchMode = NotificationItemFetchMode.findByValue(iprot.readI32());
        struct.setFetchModeIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list373 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.itemList = new java.util.ArrayList<NotificationItem>(_list373.size);
          @org.apache.thrift.annotation.Nullable NotificationItem _elem374;
          for (int _i375 = 0; _i375 < _list373.size; ++_i375)
          {
            _elem374 = new NotificationItem();
            _elem374.read(iprot);
            struct.itemList.add(_elem374);
          }
        }
        struct.setItemListIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

