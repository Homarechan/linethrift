/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class AuthService {

  public interface Iface {

    public java.lang.String normalizePhoneNumber(java.lang.String countryCode, java.lang.String phoneNumber, java.lang.String countryCodeHint) throws TalkException, org.apache.thrift.TException;

    public void respondE2EELoginRequest(java.lang.String verifier, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain, ErrorCode errorCode) throws TalkException, org.apache.thrift.TException;

    public java.lang.String confirmE2EELogin(java.lang.String verifier, java.nio.ByteBuffer deviceSecret) throws TalkException, org.apache.thrift.TException;

    public void logoutZ() throws TalkException, org.apache.thrift.TException;

    public LoginResult loginZ(LoginRequest loginRequest) throws TalkException, org.apache.thrift.TException;

    public SecurityCenterResult issueTokenForAccountMigrationSettings(boolean enforce) throws TalkException, org.apache.thrift.TException;

    public SecurityCenterResult issueTokenForAccountMigration(java.lang.String migrationSessionId) throws TalkException, org.apache.thrift.TException;

    public java.lang.String verifyQrcodeWithE2EE(java.lang.String verifier, java.lang.String pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain) throws TalkException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void normalizePhoneNumber(java.lang.String countryCode, java.lang.String phoneNumber, java.lang.String countryCodeHint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void respondE2EELoginRequest(java.lang.String verifier, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain, ErrorCode errorCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void confirmE2EELogin(java.lang.String verifier, java.nio.ByteBuffer deviceSecret, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void logoutZ(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void loginZ(LoginRequest loginRequest, org.apache.thrift.async.AsyncMethodCallback<LoginResult> resultHandler) throws org.apache.thrift.TException;

    public void issueTokenForAccountMigrationSettings(boolean enforce, org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> resultHandler) throws org.apache.thrift.TException;

    public void issueTokenForAccountMigration(java.lang.String migrationSessionId, org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> resultHandler) throws org.apache.thrift.TException;

    public void verifyQrcodeWithE2EE(java.lang.String verifier, java.lang.String pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String normalizePhoneNumber(java.lang.String countryCode, java.lang.String phoneNumber, java.lang.String countryCodeHint) throws TalkException, org.apache.thrift.TException
    {
      send_normalizePhoneNumber(countryCode, phoneNumber, countryCodeHint);
      return recv_normalizePhoneNumber();
    }

    public void send_normalizePhoneNumber(java.lang.String countryCode, java.lang.String phoneNumber, java.lang.String countryCodeHint) throws org.apache.thrift.TException
    {
      normalizePhoneNumber_args args = new normalizePhoneNumber_args();
      args.setCountryCode(countryCode);
      args.setPhoneNumber(phoneNumber);
      args.setCountryCodeHint(countryCodeHint);
      sendBase("normalizePhoneNumber", args);
    }

    public java.lang.String recv_normalizePhoneNumber() throws TalkException, org.apache.thrift.TException
    {
      normalizePhoneNumber_result result = new normalizePhoneNumber_result();
      receiveBase(result, "normalizePhoneNumber");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "normalizePhoneNumber failed: unknown result");
    }

    public void respondE2EELoginRequest(java.lang.String verifier, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain, ErrorCode errorCode) throws TalkException, org.apache.thrift.TException
    {
      send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
      recv_respondE2EELoginRequest();
    }

    public void send_respondE2EELoginRequest(java.lang.String verifier, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain, ErrorCode errorCode) throws org.apache.thrift.TException
    {
      respondE2EELoginRequest_args args = new respondE2EELoginRequest_args();
      args.setVerifier(verifier);
      args.setPublicKey(publicKey);
      args.setEncryptedKeyChain(encryptedKeyChain);
      args.setHashKeyChain(hashKeyChain);
      args.setErrorCode(errorCode);
      sendBase("respondE2EELoginRequest", args);
    }

    public void recv_respondE2EELoginRequest() throws TalkException, org.apache.thrift.TException
    {
      respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
      receiveBase(result, "respondE2EELoginRequest");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public java.lang.String confirmE2EELogin(java.lang.String verifier, java.nio.ByteBuffer deviceSecret) throws TalkException, org.apache.thrift.TException
    {
      send_confirmE2EELogin(verifier, deviceSecret);
      return recv_confirmE2EELogin();
    }

    public void send_confirmE2EELogin(java.lang.String verifier, java.nio.ByteBuffer deviceSecret) throws org.apache.thrift.TException
    {
      confirmE2EELogin_args args = new confirmE2EELogin_args();
      args.setVerifier(verifier);
      args.setDeviceSecret(deviceSecret);
      sendBase("confirmE2EELogin", args);
    }

    public java.lang.String recv_confirmE2EELogin() throws TalkException, org.apache.thrift.TException
    {
      confirmE2EELogin_result result = new confirmE2EELogin_result();
      receiveBase(result, "confirmE2EELogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "confirmE2EELogin failed: unknown result");
    }

    public void logoutZ() throws TalkException, org.apache.thrift.TException
    {
      send_logoutZ();
      recv_logoutZ();
    }

    public void send_logoutZ() throws org.apache.thrift.TException
    {
      logoutZ_args args = new logoutZ_args();
      sendBase("logoutZ", args);
    }

    public void recv_logoutZ() throws TalkException, org.apache.thrift.TException
    {
      logoutZ_result result = new logoutZ_result();
      receiveBase(result, "logoutZ");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public LoginResult loginZ(LoginRequest loginRequest) throws TalkException, org.apache.thrift.TException
    {
      send_loginZ(loginRequest);
      return recv_loginZ();
    }

    public void send_loginZ(LoginRequest loginRequest) throws org.apache.thrift.TException
    {
      loginZ_args args = new loginZ_args();
      args.setLoginRequest(loginRequest);
      sendBase("loginZ", args);
    }

    public LoginResult recv_loginZ() throws TalkException, org.apache.thrift.TException
    {
      loginZ_result result = new loginZ_result();
      receiveBase(result, "loginZ");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginZ failed: unknown result");
    }

    public SecurityCenterResult issueTokenForAccountMigrationSettings(boolean enforce) throws TalkException, org.apache.thrift.TException
    {
      send_issueTokenForAccountMigrationSettings(enforce);
      return recv_issueTokenForAccountMigrationSettings();
    }

    public void send_issueTokenForAccountMigrationSettings(boolean enforce) throws org.apache.thrift.TException
    {
      issueTokenForAccountMigrationSettings_args args = new issueTokenForAccountMigrationSettings_args();
      args.setEnforce(enforce);
      sendBase("issueTokenForAccountMigrationSettings", args);
    }

    public SecurityCenterResult recv_issueTokenForAccountMigrationSettings() throws TalkException, org.apache.thrift.TException
    {
      issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
      receiveBase(result, "issueTokenForAccountMigrationSettings");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueTokenForAccountMigrationSettings failed: unknown result");
    }

    public SecurityCenterResult issueTokenForAccountMigration(java.lang.String migrationSessionId) throws TalkException, org.apache.thrift.TException
    {
      send_issueTokenForAccountMigration(migrationSessionId);
      return recv_issueTokenForAccountMigration();
    }

    public void send_issueTokenForAccountMigration(java.lang.String migrationSessionId) throws org.apache.thrift.TException
    {
      issueTokenForAccountMigration_args args = new issueTokenForAccountMigration_args();
      args.setMigrationSessionId(migrationSessionId);
      sendBase("issueTokenForAccountMigration", args);
    }

    public SecurityCenterResult recv_issueTokenForAccountMigration() throws TalkException, org.apache.thrift.TException
    {
      issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
      receiveBase(result, "issueTokenForAccountMigration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "issueTokenForAccountMigration failed: unknown result");
    }

    public java.lang.String verifyQrcodeWithE2EE(java.lang.String verifier, java.lang.String pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain) throws TalkException, org.apache.thrift.TException
    {
      send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
      return recv_verifyQrcodeWithE2EE();
    }

    public void send_verifyQrcodeWithE2EE(java.lang.String verifier, java.lang.String pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain) throws org.apache.thrift.TException
    {
      verifyQrcodeWithE2EE_args args = new verifyQrcodeWithE2EE_args();
      args.setVerifier(verifier);
      args.setPinCode(pinCode);
      args.setErrorCode(errorCode);
      args.setPublicKey(publicKey);
      args.setEncryptedKeyChain(encryptedKeyChain);
      args.setHashKeyChain(hashKeyChain);
      sendBase("verifyQrcodeWithE2EE", args);
    }

    public java.lang.String recv_verifyQrcodeWithE2EE() throws TalkException, org.apache.thrift.TException
    {
      verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
      receiveBase(result, "verifyQrcodeWithE2EE");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "verifyQrcodeWithE2EE failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void normalizePhoneNumber(java.lang.String countryCode, java.lang.String phoneNumber, java.lang.String countryCodeHint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      normalizePhoneNumber_call method_call = new normalizePhoneNumber_call(countryCode, phoneNumber, countryCodeHint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class normalizePhoneNumber_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String countryCode;
      private java.lang.String phoneNumber;
      private java.lang.String countryCodeHint;
      public normalizePhoneNumber_call(java.lang.String countryCode, java.lang.String phoneNumber, java.lang.String countryCodeHint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.countryCode = countryCode;
        this.phoneNumber = phoneNumber;
        this.countryCodeHint = countryCodeHint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("normalizePhoneNumber", org.apache.thrift.protocol.TMessageType.CALL, 0));
        normalizePhoneNumber_args args = new normalizePhoneNumber_args();
        args.setCountryCode(countryCode);
        args.setPhoneNumber(phoneNumber);
        args.setCountryCodeHint(countryCodeHint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_normalizePhoneNumber();
      }
    }

    public void respondE2EELoginRequest(java.lang.String verifier, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain, ErrorCode errorCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      respondE2EELoginRequest_call method_call = new respondE2EELoginRequest_call(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class respondE2EELoginRequest_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String verifier;
      private E2EEPublicKey publicKey;
      private java.nio.ByteBuffer encryptedKeyChain;
      private java.nio.ByteBuffer hashKeyChain;
      private ErrorCode errorCode;
      public respondE2EELoginRequest_call(java.lang.String verifier, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain, ErrorCode errorCode, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.verifier = verifier;
        this.publicKey = publicKey;
        this.encryptedKeyChain = encryptedKeyChain;
        this.hashKeyChain = hashKeyChain;
        this.errorCode = errorCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("respondE2EELoginRequest", org.apache.thrift.protocol.TMessageType.CALL, 0));
        respondE2EELoginRequest_args args = new respondE2EELoginRequest_args();
        args.setVerifier(verifier);
        args.setPublicKey(publicKey);
        args.setEncryptedKeyChain(encryptedKeyChain);
        args.setHashKeyChain(hashKeyChain);
        args.setErrorCode(errorCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void confirmE2EELogin(java.lang.String verifier, java.nio.ByteBuffer deviceSecret, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      confirmE2EELogin_call method_call = new confirmE2EELogin_call(verifier, deviceSecret, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class confirmE2EELogin_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String verifier;
      private java.nio.ByteBuffer deviceSecret;
      public confirmE2EELogin_call(java.lang.String verifier, java.nio.ByteBuffer deviceSecret, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.verifier = verifier;
        this.deviceSecret = deviceSecret;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("confirmE2EELogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        confirmE2EELogin_args args = new confirmE2EELogin_args();
        args.setVerifier(verifier);
        args.setDeviceSecret(deviceSecret);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_confirmE2EELogin();
      }
    }

    public void logoutZ(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      logoutZ_call method_call = new logoutZ_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class logoutZ_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public logoutZ_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("logoutZ", org.apache.thrift.protocol.TMessageType.CALL, 0));
        logoutZ_args args = new logoutZ_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void loginZ(LoginRequest loginRequest, org.apache.thrift.async.AsyncMethodCallback<LoginResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginZ_call method_call = new loginZ_call(loginRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginZ_call extends org.apache.thrift.async.TAsyncMethodCall<LoginResult> {
      private LoginRequest loginRequest;
      public loginZ_call(LoginRequest loginRequest, org.apache.thrift.async.AsyncMethodCallback<LoginResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loginRequest = loginRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginZ", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginZ_args args = new loginZ_args();
        args.setLoginRequest(loginRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoginResult getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginZ();
      }
    }

    public void issueTokenForAccountMigrationSettings(boolean enforce, org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueTokenForAccountMigrationSettings_call method_call = new issueTokenForAccountMigrationSettings_call(enforce, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueTokenForAccountMigrationSettings_call extends org.apache.thrift.async.TAsyncMethodCall<SecurityCenterResult> {
      private boolean enforce;
      public issueTokenForAccountMigrationSettings_call(boolean enforce, org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.enforce = enforce;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueTokenForAccountMigrationSettings", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueTokenForAccountMigrationSettings_args args = new issueTokenForAccountMigrationSettings_args();
        args.setEnforce(enforce);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SecurityCenterResult getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issueTokenForAccountMigrationSettings();
      }
    }

    public void issueTokenForAccountMigration(java.lang.String migrationSessionId, org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      issueTokenForAccountMigration_call method_call = new issueTokenForAccountMigration_call(migrationSessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class issueTokenForAccountMigration_call extends org.apache.thrift.async.TAsyncMethodCall<SecurityCenterResult> {
      private java.lang.String migrationSessionId;
      public issueTokenForAccountMigration_call(java.lang.String migrationSessionId, org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.migrationSessionId = migrationSessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("issueTokenForAccountMigration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        issueTokenForAccountMigration_args args = new issueTokenForAccountMigration_args();
        args.setMigrationSessionId(migrationSessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public SecurityCenterResult getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_issueTokenForAccountMigration();
      }
    }

    public void verifyQrcodeWithE2EE(java.lang.String verifier, java.lang.String pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      verifyQrcodeWithE2EE_call method_call = new verifyQrcodeWithE2EE_call(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class verifyQrcodeWithE2EE_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String verifier;
      private java.lang.String pinCode;
      private ErrorCode errorCode;
      private E2EEPublicKey publicKey;
      private java.nio.ByteBuffer encryptedKeyChain;
      private java.nio.ByteBuffer hashKeyChain;
      public verifyQrcodeWithE2EE_call(java.lang.String verifier, java.lang.String pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, java.nio.ByteBuffer encryptedKeyChain, java.nio.ByteBuffer hashKeyChain, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.verifier = verifier;
        this.pinCode = pinCode;
        this.errorCode = errorCode;
        this.publicKey = publicKey;
        this.encryptedKeyChain = encryptedKeyChain;
        this.hashKeyChain = hashKeyChain;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("verifyQrcodeWithE2EE", org.apache.thrift.protocol.TMessageType.CALL, 0));
        verifyQrcodeWithE2EE_args args = new verifyQrcodeWithE2EE_args();
        args.setVerifier(verifier);
        args.setPinCode(pinCode);
        args.setErrorCode(errorCode);
        args.setPublicKey(publicKey);
        args.setEncryptedKeyChain(encryptedKeyChain);
        args.setHashKeyChain(hashKeyChain);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_verifyQrcodeWithE2EE();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("normalizePhoneNumber", new normalizePhoneNumber());
      processMap.put("respondE2EELoginRequest", new respondE2EELoginRequest());
      processMap.put("confirmE2EELogin", new confirmE2EELogin());
      processMap.put("logoutZ", new logoutZ());
      processMap.put("loginZ", new loginZ());
      processMap.put("issueTokenForAccountMigrationSettings", new issueTokenForAccountMigrationSettings());
      processMap.put("issueTokenForAccountMigration", new issueTokenForAccountMigration());
      processMap.put("verifyQrcodeWithE2EE", new verifyQrcodeWithE2EE());
      return processMap;
    }

    public static class normalizePhoneNumber<I extends Iface> extends org.apache.thrift.ProcessFunction<I, normalizePhoneNumber_args> {
      public normalizePhoneNumber() {
        super("normalizePhoneNumber");
      }

      public normalizePhoneNumber_args getEmptyArgsInstance() {
        return new normalizePhoneNumber_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public normalizePhoneNumber_result getResult(I iface, normalizePhoneNumber_args args) throws org.apache.thrift.TException {
        normalizePhoneNumber_result result = new normalizePhoneNumber_result();
        try {
          result.success = iface.normalizePhoneNumber(args.countryCode, args.phoneNumber, args.countryCodeHint);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class respondE2EELoginRequest<I extends Iface> extends org.apache.thrift.ProcessFunction<I, respondE2EELoginRequest_args> {
      public respondE2EELoginRequest() {
        super("respondE2EELoginRequest");
      }

      public respondE2EELoginRequest_args getEmptyArgsInstance() {
        return new respondE2EELoginRequest_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public respondE2EELoginRequest_result getResult(I iface, respondE2EELoginRequest_args args) throws org.apache.thrift.TException {
        respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
        try {
          iface.respondE2EELoginRequest(args.verifier, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, args.errorCode);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class confirmE2EELogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, confirmE2EELogin_args> {
      public confirmE2EELogin() {
        super("confirmE2EELogin");
      }

      public confirmE2EELogin_args getEmptyArgsInstance() {
        return new confirmE2EELogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public confirmE2EELogin_result getResult(I iface, confirmE2EELogin_args args) throws org.apache.thrift.TException {
        confirmE2EELogin_result result = new confirmE2EELogin_result();
        try {
          result.success = iface.confirmE2EELogin(args.verifier, args.deviceSecret);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class logoutZ<I extends Iface> extends org.apache.thrift.ProcessFunction<I, logoutZ_args> {
      public logoutZ() {
        super("logoutZ");
      }

      public logoutZ_args getEmptyArgsInstance() {
        return new logoutZ_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public logoutZ_result getResult(I iface, logoutZ_args args) throws org.apache.thrift.TException {
        logoutZ_result result = new logoutZ_result();
        try {
          iface.logoutZ();
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class loginZ<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginZ_args> {
      public loginZ() {
        super("loginZ");
      }

      public loginZ_args getEmptyArgsInstance() {
        return new loginZ_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public loginZ_result getResult(I iface, loginZ_args args) throws org.apache.thrift.TException {
        loginZ_result result = new loginZ_result();
        try {
          result.success = iface.loginZ(args.loginRequest);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class issueTokenForAccountMigrationSettings<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueTokenForAccountMigrationSettings_args> {
      public issueTokenForAccountMigrationSettings() {
        super("issueTokenForAccountMigrationSettings");
      }

      public issueTokenForAccountMigrationSettings_args getEmptyArgsInstance() {
        return new issueTokenForAccountMigrationSettings_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public issueTokenForAccountMigrationSettings_result getResult(I iface, issueTokenForAccountMigrationSettings_args args) throws org.apache.thrift.TException {
        issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
        try {
          result.success = iface.issueTokenForAccountMigrationSettings(args.enforce);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class issueTokenForAccountMigration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, issueTokenForAccountMigration_args> {
      public issueTokenForAccountMigration() {
        super("issueTokenForAccountMigration");
      }

      public issueTokenForAccountMigration_args getEmptyArgsInstance() {
        return new issueTokenForAccountMigration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public issueTokenForAccountMigration_result getResult(I iface, issueTokenForAccountMigration_args args) throws org.apache.thrift.TException {
        issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
        try {
          result.success = iface.issueTokenForAccountMigration(args.migrationSessionId);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class verifyQrcodeWithE2EE<I extends Iface> extends org.apache.thrift.ProcessFunction<I, verifyQrcodeWithE2EE_args> {
      public verifyQrcodeWithE2EE() {
        super("verifyQrcodeWithE2EE");
      }

      public verifyQrcodeWithE2EE_args getEmptyArgsInstance() {
        return new verifyQrcodeWithE2EE_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public verifyQrcodeWithE2EE_result getResult(I iface, verifyQrcodeWithE2EE_args args) throws org.apache.thrift.TException {
        verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
        try {
          result.success = iface.verifyQrcodeWithE2EE(args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("normalizePhoneNumber", new normalizePhoneNumber());
      processMap.put("respondE2EELoginRequest", new respondE2EELoginRequest());
      processMap.put("confirmE2EELogin", new confirmE2EELogin());
      processMap.put("logoutZ", new logoutZ());
      processMap.put("loginZ", new loginZ());
      processMap.put("issueTokenForAccountMigrationSettings", new issueTokenForAccountMigrationSettings());
      processMap.put("issueTokenForAccountMigration", new issueTokenForAccountMigration());
      processMap.put("verifyQrcodeWithE2EE", new verifyQrcodeWithE2EE());
      return processMap;
    }

    public static class normalizePhoneNumber<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, normalizePhoneNumber_args, java.lang.String> {
      public normalizePhoneNumber() {
        super("normalizePhoneNumber");
      }

      public normalizePhoneNumber_args getEmptyArgsInstance() {
        return new normalizePhoneNumber_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            normalizePhoneNumber_result result = new normalizePhoneNumber_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            normalizePhoneNumber_result result = new normalizePhoneNumber_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, normalizePhoneNumber_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.normalizePhoneNumber(args.countryCode, args.phoneNumber, args.countryCodeHint,resultHandler);
      }
    }

    public static class respondE2EELoginRequest<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, respondE2EELoginRequest_args, Void> {
      public respondE2EELoginRequest() {
        super("respondE2EELoginRequest");
      }

      public respondE2EELoginRequest_args getEmptyArgsInstance() {
        return new respondE2EELoginRequest_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, respondE2EELoginRequest_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.respondE2EELoginRequest(args.verifier, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, args.errorCode,resultHandler);
      }
    }

    public static class confirmE2EELogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, confirmE2EELogin_args, java.lang.String> {
      public confirmE2EELogin() {
        super("confirmE2EELogin");
      }

      public confirmE2EELogin_args getEmptyArgsInstance() {
        return new confirmE2EELogin_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            confirmE2EELogin_result result = new confirmE2EELogin_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            confirmE2EELogin_result result = new confirmE2EELogin_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, confirmE2EELogin_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.confirmE2EELogin(args.verifier, args.deviceSecret,resultHandler);
      }
    }

    public static class logoutZ<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, logoutZ_args, Void> {
      public logoutZ() {
        super("logoutZ");
      }

      public logoutZ_args getEmptyArgsInstance() {
        return new logoutZ_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            logoutZ_result result = new logoutZ_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            logoutZ_result result = new logoutZ_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, logoutZ_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.logoutZ(resultHandler);
      }
    }

    public static class loginZ<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginZ_args, LoginResult> {
      public loginZ() {
        super("loginZ");
      }

      public loginZ_args getEmptyArgsInstance() {
        return new loginZ_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<LoginResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<LoginResult>() { 
          public void onComplete(LoginResult o) {
            loginZ_result result = new loginZ_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            loginZ_result result = new loginZ_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginZ_args args, org.apache.thrift.async.AsyncMethodCallback<LoginResult> resultHandler) throws org.apache.thrift.TException {
        iface.loginZ(args.loginRequest,resultHandler);
      }
    }

    public static class issueTokenForAccountMigrationSettings<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueTokenForAccountMigrationSettings_args, SecurityCenterResult> {
      public issueTokenForAccountMigrationSettings() {
        super("issueTokenForAccountMigrationSettings");
      }

      public issueTokenForAccountMigrationSettings_args getEmptyArgsInstance() {
        return new issueTokenForAccountMigrationSettings_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult>() { 
          public void onComplete(SecurityCenterResult o) {
            issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueTokenForAccountMigrationSettings_args args, org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> resultHandler) throws org.apache.thrift.TException {
        iface.issueTokenForAccountMigrationSettings(args.enforce,resultHandler);
      }
    }

    public static class issueTokenForAccountMigration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, issueTokenForAccountMigration_args, SecurityCenterResult> {
      public issueTokenForAccountMigration() {
        super("issueTokenForAccountMigration");
      }

      public issueTokenForAccountMigration_args getEmptyArgsInstance() {
        return new issueTokenForAccountMigration_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult>() { 
          public void onComplete(SecurityCenterResult o) {
            issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, issueTokenForAccountMigration_args args, org.apache.thrift.async.AsyncMethodCallback<SecurityCenterResult> resultHandler) throws org.apache.thrift.TException {
        iface.issueTokenForAccountMigration(args.migrationSessionId,resultHandler);
      }
    }

    public static class verifyQrcodeWithE2EE<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, verifyQrcodeWithE2EE_args, java.lang.String> {
      public verifyQrcodeWithE2EE() {
        super("verifyQrcodeWithE2EE");
      }

      public verifyQrcodeWithE2EE_args getEmptyArgsInstance() {
        return new verifyQrcodeWithE2EE_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, verifyQrcodeWithE2EE_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.verifyQrcodeWithE2EE(args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain,resultHandler);
      }
    }

  }

  public static class normalizePhoneNumber_args implements org.apache.thrift.TBase<normalizePhoneNumber_args, normalizePhoneNumber_args._Fields>, java.io.Serializable, Cloneable, Comparable<normalizePhoneNumber_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("normalizePhoneNumber_args");

    private static final org.apache.thrift.protocol.TField COUNTRY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCode", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PHONE_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("phoneNumber", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField COUNTRY_CODE_HINT_FIELD_DESC = new org.apache.thrift.protocol.TField("countryCodeHint", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new normalizePhoneNumber_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new normalizePhoneNumber_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String countryCode; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String phoneNumber; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String countryCodeHint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COUNTRY_CODE((short)2, "countryCode"),
      PHONE_NUMBER((short)3, "phoneNumber"),
      COUNTRY_CODE_HINT((short)4, "countryCodeHint");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // COUNTRY_CODE
            return COUNTRY_CODE;
          case 3: // PHONE_NUMBER
            return PHONE_NUMBER;
          case 4: // COUNTRY_CODE_HINT
            return COUNTRY_CODE_HINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COUNTRY_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PHONE_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("phoneNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COUNTRY_CODE_HINT, new org.apache.thrift.meta_data.FieldMetaData("countryCodeHint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(normalizePhoneNumber_args.class, metaDataMap);
    }

    public normalizePhoneNumber_args() {
    }

    public normalizePhoneNumber_args(
      java.lang.String countryCode,
      java.lang.String phoneNumber,
      java.lang.String countryCodeHint)
    {
      this();
      this.countryCode = countryCode;
      this.phoneNumber = phoneNumber;
      this.countryCodeHint = countryCodeHint;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public normalizePhoneNumber_args(normalizePhoneNumber_args other) {
      if (other.isSetCountryCode()) {
        this.countryCode = other.countryCode;
      }
      if (other.isSetPhoneNumber()) {
        this.phoneNumber = other.phoneNumber;
      }
      if (other.isSetCountryCodeHint()) {
        this.countryCodeHint = other.countryCodeHint;
      }
    }

    public normalizePhoneNumber_args deepCopy() {
      return new normalizePhoneNumber_args(this);
    }

    @Override
    public void clear() {
      this.countryCode = null;
      this.phoneNumber = null;
      this.countryCodeHint = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCountryCode() {
      return this.countryCode;
    }

    public normalizePhoneNumber_args setCountryCode(@org.apache.thrift.annotation.Nullable java.lang.String countryCode) {
      this.countryCode = countryCode;
      return this;
    }

    public void unsetCountryCode() {
      this.countryCode = null;
    }

    /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryCode() {
      return this.countryCode != null;
    }

    public void setCountryCodeIsSet(boolean value) {
      if (!value) {
        this.countryCode = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPhoneNumber() {
      return this.phoneNumber;
    }

    public normalizePhoneNumber_args setPhoneNumber(@org.apache.thrift.annotation.Nullable java.lang.String phoneNumber) {
      this.phoneNumber = phoneNumber;
      return this;
    }

    public void unsetPhoneNumber() {
      this.phoneNumber = null;
    }

    /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPhoneNumber() {
      return this.phoneNumber != null;
    }

    public void setPhoneNumberIsSet(boolean value) {
      if (!value) {
        this.phoneNumber = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCountryCodeHint() {
      return this.countryCodeHint;
    }

    public normalizePhoneNumber_args setCountryCodeHint(@org.apache.thrift.annotation.Nullable java.lang.String countryCodeHint) {
      this.countryCodeHint = countryCodeHint;
      return this;
    }

    public void unsetCountryCodeHint() {
      this.countryCodeHint = null;
    }

    /** Returns true if field countryCodeHint is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryCodeHint() {
      return this.countryCodeHint != null;
    }

    public void setCountryCodeHintIsSet(boolean value) {
      if (!value) {
        this.countryCodeHint = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case COUNTRY_CODE:
        if (value == null) {
          unsetCountryCode();
        } else {
          setCountryCode((java.lang.String)value);
        }
        break;

      case PHONE_NUMBER:
        if (value == null) {
          unsetPhoneNumber();
        } else {
          setPhoneNumber((java.lang.String)value);
        }
        break;

      case COUNTRY_CODE_HINT:
        if (value == null) {
          unsetCountryCodeHint();
        } else {
          setCountryCodeHint((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case COUNTRY_CODE:
        return getCountryCode();

      case PHONE_NUMBER:
        return getPhoneNumber();

      case COUNTRY_CODE_HINT:
        return getCountryCodeHint();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case COUNTRY_CODE:
        return isSetCountryCode();
      case PHONE_NUMBER:
        return isSetPhoneNumber();
      case COUNTRY_CODE_HINT:
        return isSetCountryCodeHint();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof normalizePhoneNumber_args)
        return this.equals((normalizePhoneNumber_args)that);
      return false;
    }

    public boolean equals(normalizePhoneNumber_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_countryCode = true && this.isSetCountryCode();
      boolean that_present_countryCode = true && that.isSetCountryCode();
      if (this_present_countryCode || that_present_countryCode) {
        if (!(this_present_countryCode && that_present_countryCode))
          return false;
        if (!this.countryCode.equals(that.countryCode))
          return false;
      }

      boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
      boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
      if (this_present_phoneNumber || that_present_phoneNumber) {
        if (!(this_present_phoneNumber && that_present_phoneNumber))
          return false;
        if (!this.phoneNumber.equals(that.phoneNumber))
          return false;
      }

      boolean this_present_countryCodeHint = true && this.isSetCountryCodeHint();
      boolean that_present_countryCodeHint = true && that.isSetCountryCodeHint();
      if (this_present_countryCodeHint || that_present_countryCodeHint) {
        if (!(this_present_countryCodeHint && that_present_countryCodeHint))
          return false;
        if (!this.countryCodeHint.equals(that.countryCodeHint))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCountryCode()) ? 131071 : 524287);
      if (isSetCountryCode())
        hashCode = hashCode * 8191 + countryCode.hashCode();

      hashCode = hashCode * 8191 + ((isSetPhoneNumber()) ? 131071 : 524287);
      if (isSetPhoneNumber())
        hashCode = hashCode * 8191 + phoneNumber.hashCode();

      hashCode = hashCode * 8191 + ((isSetCountryCodeHint()) ? 131071 : 524287);
      if (isSetCountryCodeHint())
        hashCode = hashCode * 8191 + countryCodeHint.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(normalizePhoneNumber_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCountryCode(), other.isSetCountryCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCode, other.countryCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPhoneNumber(), other.isSetPhoneNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhoneNumber()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCountryCodeHint(), other.isSetCountryCodeHint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryCodeHint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryCodeHint, other.countryCodeHint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("normalizePhoneNumber_args(");
      boolean first = true;

      sb.append("countryCode:");
      if (this.countryCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("countryCodeHint:");
      if (this.countryCodeHint == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCodeHint);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class normalizePhoneNumber_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public normalizePhoneNumber_argsStandardScheme getScheme() {
        return new normalizePhoneNumber_argsStandardScheme();
      }
    }

    private static class normalizePhoneNumber_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<normalizePhoneNumber_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, normalizePhoneNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // COUNTRY_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countryCode = iprot.readString();
                struct.setCountryCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PHONE_NUMBER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.phoneNumber = iprot.readString();
                struct.setPhoneNumberIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNTRY_CODE_HINT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.countryCodeHint = iprot.readString();
                struct.setCountryCodeHintIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, normalizePhoneNumber_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.countryCode != null) {
          oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
          oprot.writeString(struct.countryCode);
          oprot.writeFieldEnd();
        }
        if (struct.phoneNumber != null) {
          oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
          oprot.writeString(struct.phoneNumber);
          oprot.writeFieldEnd();
        }
        if (struct.countryCodeHint != null) {
          oprot.writeFieldBegin(COUNTRY_CODE_HINT_FIELD_DESC);
          oprot.writeString(struct.countryCodeHint);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class normalizePhoneNumber_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public normalizePhoneNumber_argsTupleScheme getScheme() {
        return new normalizePhoneNumber_argsTupleScheme();
      }
    }

    private static class normalizePhoneNumber_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<normalizePhoneNumber_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, normalizePhoneNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCountryCode()) {
          optionals.set(0);
        }
        if (struct.isSetPhoneNumber()) {
          optionals.set(1);
        }
        if (struct.isSetCountryCodeHint()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCountryCode()) {
          oprot.writeString(struct.countryCode);
        }
        if (struct.isSetPhoneNumber()) {
          oprot.writeString(struct.phoneNumber);
        }
        if (struct.isSetCountryCodeHint()) {
          oprot.writeString(struct.countryCodeHint);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, normalizePhoneNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.countryCode = iprot.readString();
          struct.setCountryCodeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.phoneNumber = iprot.readString();
          struct.setPhoneNumberIsSet(true);
        }
        if (incoming.get(2)) {
          struct.countryCodeHint = iprot.readString();
          struct.setCountryCodeHintIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class normalizePhoneNumber_result implements org.apache.thrift.TBase<normalizePhoneNumber_result, normalizePhoneNumber_result._Fields>, java.io.Serializable, Cloneable, Comparable<normalizePhoneNumber_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("normalizePhoneNumber_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new normalizePhoneNumber_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new normalizePhoneNumber_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(normalizePhoneNumber_result.class, metaDataMap);
    }

    public normalizePhoneNumber_result() {
    }

    public normalizePhoneNumber_result(
      java.lang.String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public normalizePhoneNumber_result(normalizePhoneNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public normalizePhoneNumber_result deepCopy() {
      return new normalizePhoneNumber_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public normalizePhoneNumber_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public normalizePhoneNumber_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof normalizePhoneNumber_result)
        return this.equals((normalizePhoneNumber_result)that);
      return false;
    }

    public boolean equals(normalizePhoneNumber_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(normalizePhoneNumber_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("normalizePhoneNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class normalizePhoneNumber_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public normalizePhoneNumber_resultStandardScheme getScheme() {
        return new normalizePhoneNumber_resultStandardScheme();
      }
    }

    private static class normalizePhoneNumber_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<normalizePhoneNumber_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, normalizePhoneNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, normalizePhoneNumber_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class normalizePhoneNumber_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public normalizePhoneNumber_resultTupleScheme getScheme() {
        return new normalizePhoneNumber_resultTupleScheme();
      }
    }

    private static class normalizePhoneNumber_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<normalizePhoneNumber_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, normalizePhoneNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, normalizePhoneNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class respondE2EELoginRequest_args implements org.apache.thrift.TBase<respondE2EELoginRequest_args, respondE2EELoginRequest_args._Fields>, java.io.Serializable, Cloneable, Comparable<respondE2EELoginRequest_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("respondE2EELoginRequest_args");

    private static final org.apache.thrift.protocol.TField VERIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("verifier", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_KEY_CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedKeyChain", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField HASH_KEY_CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("hashKeyChain", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new respondE2EELoginRequest_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new respondE2EELoginRequest_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String verifier; // required
    public @org.apache.thrift.annotation.Nullable E2EEPublicKey publicKey; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encryptedKeyChain; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hashKeyChain; // required
    /**
     * 
     * @see ErrorCode
     */
    public @org.apache.thrift.annotation.Nullable ErrorCode errorCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERIFIER((short)1, "verifier"),
      PUBLIC_KEY((short)2, "publicKey"),
      ENCRYPTED_KEY_CHAIN((short)3, "encryptedKeyChain"),
      HASH_KEY_CHAIN((short)4, "hashKeyChain"),
      /**
       * 
       * @see ErrorCode
       */
      ERROR_CODE((short)5, "errorCode");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERIFIER
            return VERIFIER;
          case 2: // PUBLIC_KEY
            return PUBLIC_KEY;
          case 3: // ENCRYPTED_KEY_CHAIN
            return ENCRYPTED_KEY_CHAIN;
          case 4: // HASH_KEY_CHAIN
            return HASH_KEY_CHAIN;
          case 5: // ERROR_CODE
            return ERROR_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERIFIER, new org.apache.thrift.meta_data.FieldMetaData("verifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, E2EEPublicKey.class)));
      tmpMap.put(_Fields.ENCRYPTED_KEY_CHAIN, new org.apache.thrift.meta_data.FieldMetaData("encryptedKeyChain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.HASH_KEY_CHAIN, new org.apache.thrift.meta_data.FieldMetaData("hashKeyChain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ErrorCode.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(respondE2EELoginRequest_args.class, metaDataMap);
    }

    public respondE2EELoginRequest_args() {
    }

    public respondE2EELoginRequest_args(
      java.lang.String verifier,
      E2EEPublicKey publicKey,
      java.nio.ByteBuffer encryptedKeyChain,
      java.nio.ByteBuffer hashKeyChain,
      ErrorCode errorCode)
    {
      this();
      this.verifier = verifier;
      this.publicKey = publicKey;
      this.encryptedKeyChain = org.apache.thrift.TBaseHelper.copyBinary(encryptedKeyChain);
      this.hashKeyChain = org.apache.thrift.TBaseHelper.copyBinary(hashKeyChain);
      this.errorCode = errorCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public respondE2EELoginRequest_args(respondE2EELoginRequest_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetPublicKey()) {
        this.publicKey = new E2EEPublicKey(other.publicKey);
      }
      if (other.isSetEncryptedKeyChain()) {
        this.encryptedKeyChain = org.apache.thrift.TBaseHelper.copyBinary(other.encryptedKeyChain);
      }
      if (other.isSetHashKeyChain()) {
        this.hashKeyChain = org.apache.thrift.TBaseHelper.copyBinary(other.hashKeyChain);
      }
      if (other.isSetErrorCode()) {
        this.errorCode = other.errorCode;
      }
    }

    public respondE2EELoginRequest_args deepCopy() {
      return new respondE2EELoginRequest_args(this);
    }

    @Override
    public void clear() {
      this.verifier = null;
      this.publicKey = null;
      this.encryptedKeyChain = null;
      this.hashKeyChain = null;
      this.errorCode = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVerifier() {
      return this.verifier;
    }

    public respondE2EELoginRequest_args setVerifier(@org.apache.thrift.annotation.Nullable java.lang.String verifier) {
      this.verifier = verifier;
      return this;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public E2EEPublicKey getPublicKey() {
      return this.publicKey;
    }

    public respondE2EELoginRequest_args setPublicKey(@org.apache.thrift.annotation.Nullable E2EEPublicKey publicKey) {
      this.publicKey = publicKey;
      return this;
    }

    public void unsetPublicKey() {
      this.publicKey = null;
    }

    /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicKey() {
      return this.publicKey != null;
    }

    public void setPublicKeyIsSet(boolean value) {
      if (!value) {
        this.publicKey = null;
      }
    }

    public byte[] getEncryptedKeyChain() {
      setEncryptedKeyChain(org.apache.thrift.TBaseHelper.rightSize(encryptedKeyChain));
      return encryptedKeyChain == null ? null : encryptedKeyChain.array();
    }

    public java.nio.ByteBuffer bufferForEncryptedKeyChain() {
      return org.apache.thrift.TBaseHelper.copyBinary(encryptedKeyChain);
    }

    public respondE2EELoginRequest_args setEncryptedKeyChain(byte[] encryptedKeyChain) {
      this.encryptedKeyChain = encryptedKeyChain == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(encryptedKeyChain.clone());
      return this;
    }

    public respondE2EELoginRequest_args setEncryptedKeyChain(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encryptedKeyChain) {
      this.encryptedKeyChain = org.apache.thrift.TBaseHelper.copyBinary(encryptedKeyChain);
      return this;
    }

    public void unsetEncryptedKeyChain() {
      this.encryptedKeyChain = null;
    }

    /** Returns true if field encryptedKeyChain is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedKeyChain() {
      return this.encryptedKeyChain != null;
    }

    public void setEncryptedKeyChainIsSet(boolean value) {
      if (!value) {
        this.encryptedKeyChain = null;
      }
    }

    public byte[] getHashKeyChain() {
      setHashKeyChain(org.apache.thrift.TBaseHelper.rightSize(hashKeyChain));
      return hashKeyChain == null ? null : hashKeyChain.array();
    }

    public java.nio.ByteBuffer bufferForHashKeyChain() {
      return org.apache.thrift.TBaseHelper.copyBinary(hashKeyChain);
    }

    public respondE2EELoginRequest_args setHashKeyChain(byte[] hashKeyChain) {
      this.hashKeyChain = hashKeyChain == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(hashKeyChain.clone());
      return this;
    }

    public respondE2EELoginRequest_args setHashKeyChain(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hashKeyChain) {
      this.hashKeyChain = org.apache.thrift.TBaseHelper.copyBinary(hashKeyChain);
      return this;
    }

    public void unsetHashKeyChain() {
      this.hashKeyChain = null;
    }

    /** Returns true if field hashKeyChain is set (has been assigned a value) and false otherwise */
    public boolean isSetHashKeyChain() {
      return this.hashKeyChain != null;
    }

    public void setHashKeyChainIsSet(boolean value) {
      if (!value) {
        this.hashKeyChain = null;
      }
    }

    /**
     * 
     * @see ErrorCode
     */
    @org.apache.thrift.annotation.Nullable
    public ErrorCode getErrorCode() {
      return this.errorCode;
    }

    /**
     * 
     * @see ErrorCode
     */
    public respondE2EELoginRequest_args setErrorCode(@org.apache.thrift.annotation.Nullable ErrorCode errorCode) {
      this.errorCode = errorCode;
      return this;
    }

    public void unsetErrorCode() {
      this.errorCode = null;
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return this.errorCode != null;
    }

    public void setErrorCodeIsSet(boolean value) {
      if (!value) {
        this.errorCode = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          setVerifier((java.lang.String)value);
        }
        break;

      case PUBLIC_KEY:
        if (value == null) {
          unsetPublicKey();
        } else {
          setPublicKey((E2EEPublicKey)value);
        }
        break;

      case ENCRYPTED_KEY_CHAIN:
        if (value == null) {
          unsetEncryptedKeyChain();
        } else {
          if (value instanceof byte[]) {
            setEncryptedKeyChain((byte[])value);
          } else {
            setEncryptedKeyChain((java.nio.ByteBuffer)value);
          }
        }
        break;

      case HASH_KEY_CHAIN:
        if (value == null) {
          unsetHashKeyChain();
        } else {
          if (value instanceof byte[]) {
            setHashKeyChain((byte[])value);
          } else {
            setHashKeyChain((java.nio.ByteBuffer)value);
          }
        }
        break;

      case ERROR_CODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          setErrorCode((ErrorCode)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VERIFIER:
        return getVerifier();

      case PUBLIC_KEY:
        return getPublicKey();

      case ENCRYPTED_KEY_CHAIN:
        return getEncryptedKeyChain();

      case HASH_KEY_CHAIN:
        return getHashKeyChain();

      case ERROR_CODE:
        return getErrorCode();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VERIFIER:
        return isSetVerifier();
      case PUBLIC_KEY:
        return isSetPublicKey();
      case ENCRYPTED_KEY_CHAIN:
        return isSetEncryptedKeyChain();
      case HASH_KEY_CHAIN:
        return isSetHashKeyChain();
      case ERROR_CODE:
        return isSetErrorCode();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof respondE2EELoginRequest_args)
        return this.equals((respondE2EELoginRequest_args)that);
      return false;
    }

    public boolean equals(respondE2EELoginRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_publicKey = true && this.isSetPublicKey();
      boolean that_present_publicKey = true && that.isSetPublicKey();
      if (this_present_publicKey || that_present_publicKey) {
        if (!(this_present_publicKey && that_present_publicKey))
          return false;
        if (!this.publicKey.equals(that.publicKey))
          return false;
      }

      boolean this_present_encryptedKeyChain = true && this.isSetEncryptedKeyChain();
      boolean that_present_encryptedKeyChain = true && that.isSetEncryptedKeyChain();
      if (this_present_encryptedKeyChain || that_present_encryptedKeyChain) {
        if (!(this_present_encryptedKeyChain && that_present_encryptedKeyChain))
          return false;
        if (!this.encryptedKeyChain.equals(that.encryptedKeyChain))
          return false;
      }

      boolean this_present_hashKeyChain = true && this.isSetHashKeyChain();
      boolean that_present_hashKeyChain = true && that.isSetHashKeyChain();
      if (this_present_hashKeyChain || that_present_hashKeyChain) {
        if (!(this_present_hashKeyChain && that_present_hashKeyChain))
          return false;
        if (!this.hashKeyChain.equals(that.hashKeyChain))
          return false;
      }

      boolean this_present_errorCode = true && this.isSetErrorCode();
      boolean that_present_errorCode = true && that.isSetErrorCode();
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (!this.errorCode.equals(that.errorCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVerifier()) ? 131071 : 524287);
      if (isSetVerifier())
        hashCode = hashCode * 8191 + verifier.hashCode();

      hashCode = hashCode * 8191 + ((isSetPublicKey()) ? 131071 : 524287);
      if (isSetPublicKey())
        hashCode = hashCode * 8191 + publicKey.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedKeyChain()) ? 131071 : 524287);
      if (isSetEncryptedKeyChain())
        hashCode = hashCode * 8191 + encryptedKeyChain.hashCode();

      hashCode = hashCode * 8191 + ((isSetHashKeyChain()) ? 131071 : 524287);
      if (isSetHashKeyChain())
        hashCode = hashCode * 8191 + hashKeyChain.hashCode();

      hashCode = hashCode * 8191 + ((isSetErrorCode()) ? 131071 : 524287);
      if (isSetErrorCode())
        hashCode = hashCode * 8191 + errorCode.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(respondE2EELoginRequest_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPublicKey(), other.isSetPublicKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEncryptedKeyChain(), other.isSetEncryptedKeyChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedKeyChain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedKeyChain, other.encryptedKeyChain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHashKeyChain(), other.isSetHashKeyChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHashKeyChain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashKeyChain, other.hashKeyChain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorCode(), other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("respondE2EELoginRequest_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicKey:");
      if (this.publicKey == null) {
        sb.append("null");
      } else {
        sb.append(this.publicKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedKeyChain:");
      if (this.encryptedKeyChain == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.encryptedKeyChain, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hashKeyChain:");
      if (this.hashKeyChain == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.hashKeyChain, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      if (this.errorCode == null) {
        sb.append("null");
      } else {
        sb.append(this.errorCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (publicKey != null) {
        publicKey.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class respondE2EELoginRequest_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public respondE2EELoginRequest_argsStandardScheme getScheme() {
        return new respondE2EELoginRequest_argsStandardScheme();
      }
    }

    private static class respondE2EELoginRequest_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<respondE2EELoginRequest_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, respondE2EELoginRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verifier = iprot.readString();
                struct.setVerifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PUBLIC_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.publicKey = new E2EEPublicKey();
                struct.publicKey.read(iprot);
                struct.setPublicKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENCRYPTED_KEY_CHAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedKeyChain = iprot.readBinary();
                struct.setEncryptedKeyChainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HASH_KEY_CHAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hashKeyChain = iprot.readBinary();
                struct.setHashKeyChainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ERROR_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorCode = ErrorCode.findByValue(iprot.readI32());
                struct.setErrorCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, respondE2EELoginRequest_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.verifier != null) {
          oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
          oprot.writeString(struct.verifier);
          oprot.writeFieldEnd();
        }
        if (struct.publicKey != null) {
          oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
          struct.publicKey.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedKeyChain != null) {
          oprot.writeFieldBegin(ENCRYPTED_KEY_CHAIN_FIELD_DESC);
          oprot.writeBinary(struct.encryptedKeyChain);
          oprot.writeFieldEnd();
        }
        if (struct.hashKeyChain != null) {
          oprot.writeFieldBegin(HASH_KEY_CHAIN_FIELD_DESC);
          oprot.writeBinary(struct.hashKeyChain);
          oprot.writeFieldEnd();
        }
        if (struct.errorCode != null) {
          oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
          oprot.writeI32(struct.errorCode.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class respondE2EELoginRequest_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public respondE2EELoginRequest_argsTupleScheme getScheme() {
        return new respondE2EELoginRequest_argsTupleScheme();
      }
    }

    private static class respondE2EELoginRequest_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<respondE2EELoginRequest_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, respondE2EELoginRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVerifier()) {
          optionals.set(0);
        }
        if (struct.isSetPublicKey()) {
          optionals.set(1);
        }
        if (struct.isSetEncryptedKeyChain()) {
          optionals.set(2);
        }
        if (struct.isSetHashKeyChain()) {
          optionals.set(3);
        }
        if (struct.isSetErrorCode()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetVerifier()) {
          oprot.writeString(struct.verifier);
        }
        if (struct.isSetPublicKey()) {
          struct.publicKey.write(oprot);
        }
        if (struct.isSetEncryptedKeyChain()) {
          oprot.writeBinary(struct.encryptedKeyChain);
        }
        if (struct.isSetHashKeyChain()) {
          oprot.writeBinary(struct.hashKeyChain);
        }
        if (struct.isSetErrorCode()) {
          oprot.writeI32(struct.errorCode.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, respondE2EELoginRequest_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.verifier = iprot.readString();
          struct.setVerifierIsSet(true);
        }
        if (incoming.get(1)) {
          struct.publicKey = new E2EEPublicKey();
          struct.publicKey.read(iprot);
          struct.setPublicKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.encryptedKeyChain = iprot.readBinary();
          struct.setEncryptedKeyChainIsSet(true);
        }
        if (incoming.get(3)) {
          struct.hashKeyChain = iprot.readBinary();
          struct.setHashKeyChainIsSet(true);
        }
        if (incoming.get(4)) {
          struct.errorCode = ErrorCode.findByValue(iprot.readI32());
          struct.setErrorCodeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class respondE2EELoginRequest_result implements org.apache.thrift.TBase<respondE2EELoginRequest_result, respondE2EELoginRequest_result._Fields>, java.io.Serializable, Cloneable, Comparable<respondE2EELoginRequest_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("respondE2EELoginRequest_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new respondE2EELoginRequest_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new respondE2EELoginRequest_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(respondE2EELoginRequest_result.class, metaDataMap);
    }

    public respondE2EELoginRequest_result() {
    }

    public respondE2EELoginRequest_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public respondE2EELoginRequest_result(respondE2EELoginRequest_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public respondE2EELoginRequest_result deepCopy() {
      return new respondE2EELoginRequest_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public respondE2EELoginRequest_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof respondE2EELoginRequest_result)
        return this.equals((respondE2EELoginRequest_result)that);
      return false;
    }

    public boolean equals(respondE2EELoginRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(respondE2EELoginRequest_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("respondE2EELoginRequest_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class respondE2EELoginRequest_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public respondE2EELoginRequest_resultStandardScheme getScheme() {
        return new respondE2EELoginRequest_resultStandardScheme();
      }
    }

    private static class respondE2EELoginRequest_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<respondE2EELoginRequest_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, respondE2EELoginRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, respondE2EELoginRequest_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class respondE2EELoginRequest_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public respondE2EELoginRequest_resultTupleScheme getScheme() {
        return new respondE2EELoginRequest_resultTupleScheme();
      }
    }

    private static class respondE2EELoginRequest_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<respondE2EELoginRequest_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, respondE2EELoginRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, respondE2EELoginRequest_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class confirmE2EELogin_args implements org.apache.thrift.TBase<confirmE2EELogin_args, confirmE2EELogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<confirmE2EELogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmE2EELogin_args");

    private static final org.apache.thrift.protocol.TField VERIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("verifier", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEVICE_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("deviceSecret", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new confirmE2EELogin_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new confirmE2EELogin_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String verifier; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer deviceSecret; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERIFIER((short)1, "verifier"),
      DEVICE_SECRET((short)2, "deviceSecret");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VERIFIER
            return VERIFIER;
          case 2: // DEVICE_SECRET
            return DEVICE_SECRET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERIFIER, new org.apache.thrift.meta_data.FieldMetaData("verifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DEVICE_SECRET, new org.apache.thrift.meta_data.FieldMetaData("deviceSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmE2EELogin_args.class, metaDataMap);
    }

    public confirmE2EELogin_args() {
    }

    public confirmE2EELogin_args(
      java.lang.String verifier,
      java.nio.ByteBuffer deviceSecret)
    {
      this();
      this.verifier = verifier;
      this.deviceSecret = org.apache.thrift.TBaseHelper.copyBinary(deviceSecret);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmE2EELogin_args(confirmE2EELogin_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetDeviceSecret()) {
        this.deviceSecret = org.apache.thrift.TBaseHelper.copyBinary(other.deviceSecret);
      }
    }

    public confirmE2EELogin_args deepCopy() {
      return new confirmE2EELogin_args(this);
    }

    @Override
    public void clear() {
      this.verifier = null;
      this.deviceSecret = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVerifier() {
      return this.verifier;
    }

    public confirmE2EELogin_args setVerifier(@org.apache.thrift.annotation.Nullable java.lang.String verifier) {
      this.verifier = verifier;
      return this;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public byte[] getDeviceSecret() {
      setDeviceSecret(org.apache.thrift.TBaseHelper.rightSize(deviceSecret));
      return deviceSecret == null ? null : deviceSecret.array();
    }

    public java.nio.ByteBuffer bufferForDeviceSecret() {
      return org.apache.thrift.TBaseHelper.copyBinary(deviceSecret);
    }

    public confirmE2EELogin_args setDeviceSecret(byte[] deviceSecret) {
      this.deviceSecret = deviceSecret == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(deviceSecret.clone());
      return this;
    }

    public confirmE2EELogin_args setDeviceSecret(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer deviceSecret) {
      this.deviceSecret = org.apache.thrift.TBaseHelper.copyBinary(deviceSecret);
      return this;
    }

    public void unsetDeviceSecret() {
      this.deviceSecret = null;
    }

    /** Returns true if field deviceSecret is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceSecret() {
      return this.deviceSecret != null;
    }

    public void setDeviceSecretIsSet(boolean value) {
      if (!value) {
        this.deviceSecret = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          setVerifier((java.lang.String)value);
        }
        break;

      case DEVICE_SECRET:
        if (value == null) {
          unsetDeviceSecret();
        } else {
          if (value instanceof byte[]) {
            setDeviceSecret((byte[])value);
          } else {
            setDeviceSecret((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VERIFIER:
        return getVerifier();

      case DEVICE_SECRET:
        return getDeviceSecret();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VERIFIER:
        return isSetVerifier();
      case DEVICE_SECRET:
        return isSetDeviceSecret();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof confirmE2EELogin_args)
        return this.equals((confirmE2EELogin_args)that);
      return false;
    }

    public boolean equals(confirmE2EELogin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_deviceSecret = true && this.isSetDeviceSecret();
      boolean that_present_deviceSecret = true && that.isSetDeviceSecret();
      if (this_present_deviceSecret || that_present_deviceSecret) {
        if (!(this_present_deviceSecret && that_present_deviceSecret))
          return false;
        if (!this.deviceSecret.equals(that.deviceSecret))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVerifier()) ? 131071 : 524287);
      if (isSetVerifier())
        hashCode = hashCode * 8191 + verifier.hashCode();

      hashCode = hashCode * 8191 + ((isSetDeviceSecret()) ? 131071 : 524287);
      if (isSetDeviceSecret())
        hashCode = hashCode * 8191 + deviceSecret.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(confirmE2EELogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetDeviceSecret(), other.isSetDeviceSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceSecret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deviceSecret, other.deviceSecret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("confirmE2EELogin_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceSecret:");
      if (this.deviceSecret == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.deviceSecret, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmE2EELogin_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public confirmE2EELogin_argsStandardScheme getScheme() {
        return new confirmE2EELogin_argsStandardScheme();
      }
    }

    private static class confirmE2EELogin_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<confirmE2EELogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmE2EELogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VERIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verifier = iprot.readString();
                struct.setVerifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEVICE_SECRET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.deviceSecret = iprot.readBinary();
                struct.setDeviceSecretIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmE2EELogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.verifier != null) {
          oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
          oprot.writeString(struct.verifier);
          oprot.writeFieldEnd();
        }
        if (struct.deviceSecret != null) {
          oprot.writeFieldBegin(DEVICE_SECRET_FIELD_DESC);
          oprot.writeBinary(struct.deviceSecret);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmE2EELogin_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public confirmE2EELogin_argsTupleScheme getScheme() {
        return new confirmE2EELogin_argsTupleScheme();
      }
    }

    private static class confirmE2EELogin_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<confirmE2EELogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmE2EELogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVerifier()) {
          optionals.set(0);
        }
        if (struct.isSetDeviceSecret()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetVerifier()) {
          oprot.writeString(struct.verifier);
        }
        if (struct.isSetDeviceSecret()) {
          oprot.writeBinary(struct.deviceSecret);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmE2EELogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.verifier = iprot.readString();
          struct.setVerifierIsSet(true);
        }
        if (incoming.get(1)) {
          struct.deviceSecret = iprot.readBinary();
          struct.setDeviceSecretIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class confirmE2EELogin_result implements org.apache.thrift.TBase<confirmE2EELogin_result, confirmE2EELogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<confirmE2EELogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("confirmE2EELogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new confirmE2EELogin_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new confirmE2EELogin_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(confirmE2EELogin_result.class, metaDataMap);
    }

    public confirmE2EELogin_result() {
    }

    public confirmE2EELogin_result(
      java.lang.String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmE2EELogin_result(confirmE2EELogin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public confirmE2EELogin_result deepCopy() {
      return new confirmE2EELogin_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public confirmE2EELogin_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public confirmE2EELogin_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof confirmE2EELogin_result)
        return this.equals((confirmE2EELogin_result)that);
      return false;
    }

    public boolean equals(confirmE2EELogin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(confirmE2EELogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("confirmE2EELogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class confirmE2EELogin_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public confirmE2EELogin_resultStandardScheme getScheme() {
        return new confirmE2EELogin_resultStandardScheme();
      }
    }

    private static class confirmE2EELogin_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<confirmE2EELogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, confirmE2EELogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, confirmE2EELogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class confirmE2EELogin_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public confirmE2EELogin_resultTupleScheme getScheme() {
        return new confirmE2EELogin_resultTupleScheme();
      }
    }

    private static class confirmE2EELogin_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<confirmE2EELogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, confirmE2EELogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, confirmE2EELogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logoutZ_args implements org.apache.thrift.TBase<logoutZ_args, logoutZ_args._Fields>, java.io.Serializable, Cloneable, Comparable<logoutZ_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logoutZ_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logoutZ_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logoutZ_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logoutZ_args.class, metaDataMap);
    }

    public logoutZ_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logoutZ_args(logoutZ_args other) {
    }

    public logoutZ_args deepCopy() {
      return new logoutZ_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof logoutZ_args)
        return this.equals((logoutZ_args)that);
      return false;
    }

    public boolean equals(logoutZ_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(logoutZ_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logoutZ_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logoutZ_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logoutZ_argsStandardScheme getScheme() {
        return new logoutZ_argsStandardScheme();
      }
    }

    private static class logoutZ_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<logoutZ_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logoutZ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logoutZ_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logoutZ_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logoutZ_argsTupleScheme getScheme() {
        return new logoutZ_argsTupleScheme();
      }
    }

    private static class logoutZ_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<logoutZ_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logoutZ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logoutZ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class logoutZ_result implements org.apache.thrift.TBase<logoutZ_result, logoutZ_result._Fields>, java.io.Serializable, Cloneable, Comparable<logoutZ_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("logoutZ_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new logoutZ_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new logoutZ_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(logoutZ_result.class, metaDataMap);
    }

    public logoutZ_result() {
    }

    public logoutZ_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logoutZ_result(logoutZ_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public logoutZ_result deepCopy() {
      return new logoutZ_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public logoutZ_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof logoutZ_result)
        return this.equals((logoutZ_result)that);
      return false;
    }

    public boolean equals(logoutZ_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(logoutZ_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("logoutZ_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class logoutZ_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logoutZ_resultStandardScheme getScheme() {
        return new logoutZ_resultStandardScheme();
      }
    }

    private static class logoutZ_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<logoutZ_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, logoutZ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, logoutZ_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class logoutZ_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public logoutZ_resultTupleScheme getScheme() {
        return new logoutZ_resultTupleScheme();
      }
    }

    private static class logoutZ_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<logoutZ_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, logoutZ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, logoutZ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginZ_args implements org.apache.thrift.TBase<loginZ_args, loginZ_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginZ_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginZ_args");

    private static final org.apache.thrift.protocol.TField LOGIN_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("loginRequest", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginZ_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginZ_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable LoginRequest loginRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOGIN_REQUEST((short)2, "loginRequest");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LOGIN_REQUEST
            return LOGIN_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOGIN_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("loginRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginRequest.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginZ_args.class, metaDataMap);
    }

    public loginZ_args() {
    }

    public loginZ_args(
      LoginRequest loginRequest)
    {
      this();
      this.loginRequest = loginRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginZ_args(loginZ_args other) {
      if (other.isSetLoginRequest()) {
        this.loginRequest = new LoginRequest(other.loginRequest);
      }
    }

    public loginZ_args deepCopy() {
      return new loginZ_args(this);
    }

    @Override
    public void clear() {
      this.loginRequest = null;
    }

    @org.apache.thrift.annotation.Nullable
    public LoginRequest getLoginRequest() {
      return this.loginRequest;
    }

    public loginZ_args setLoginRequest(@org.apache.thrift.annotation.Nullable LoginRequest loginRequest) {
      this.loginRequest = loginRequest;
      return this;
    }

    public void unsetLoginRequest() {
      this.loginRequest = null;
    }

    /** Returns true if field loginRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginRequest() {
      return this.loginRequest != null;
    }

    public void setLoginRequestIsSet(boolean value) {
      if (!value) {
        this.loginRequest = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case LOGIN_REQUEST:
        if (value == null) {
          unsetLoginRequest();
        } else {
          setLoginRequest((LoginRequest)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOGIN_REQUEST:
        return getLoginRequest();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOGIN_REQUEST:
        return isSetLoginRequest();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof loginZ_args)
        return this.equals((loginZ_args)that);
      return false;
    }

    public boolean equals(loginZ_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_loginRequest = true && this.isSetLoginRequest();
      boolean that_present_loginRequest = true && that.isSetLoginRequest();
      if (this_present_loginRequest || that_present_loginRequest) {
        if (!(this_present_loginRequest && that_present_loginRequest))
          return false;
        if (!this.loginRequest.equals(that.loginRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLoginRequest()) ? 131071 : 524287);
      if (isSetLoginRequest())
        hashCode = hashCode * 8191 + loginRequest.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginZ_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetLoginRequest(), other.isSetLoginRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginRequest, other.loginRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginZ_args(");
      boolean first = true;

      sb.append("loginRequest:");
      if (this.loginRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.loginRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loginRequest != null) {
        loginRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginZ_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginZ_argsStandardScheme getScheme() {
        return new loginZ_argsStandardScheme();
      }
    }

    private static class loginZ_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginZ_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginZ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LOGIN_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loginRequest = new LoginRequest();
                struct.loginRequest.read(iprot);
                struct.setLoginRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginZ_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loginRequest != null) {
          oprot.writeFieldBegin(LOGIN_REQUEST_FIELD_DESC);
          struct.loginRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginZ_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginZ_argsTupleScheme getScheme() {
        return new loginZ_argsTupleScheme();
      }
    }

    private static class loginZ_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginZ_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginZ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLoginRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoginRequest()) {
          struct.loginRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginZ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loginRequest = new LoginRequest();
          struct.loginRequest.read(iprot);
          struct.setLoginRequestIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginZ_result implements org.apache.thrift.TBase<loginZ_result, loginZ_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginZ_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginZ_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginZ_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginZ_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable LoginResult success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginZ_result.class, metaDataMap);
    }

    public loginZ_result() {
    }

    public loginZ_result(
      LoginResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginZ_result(loginZ_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoginResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public loginZ_result deepCopy() {
      return new loginZ_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public LoginResult getSuccess() {
      return this.success;
    }

    public loginZ_result setSuccess(@org.apache.thrift.annotation.Nullable LoginResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public loginZ_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoginResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof loginZ_result)
        return this.equals((loginZ_result)that);
      return false;
    }

    public boolean equals(loginZ_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginZ_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginZ_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginZ_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginZ_resultStandardScheme getScheme() {
        return new loginZ_resultStandardScheme();
      }
    }

    private static class loginZ_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginZ_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginZ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoginResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginZ_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginZ_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginZ_resultTupleScheme getScheme() {
        return new loginZ_resultTupleScheme();
      }
    }

    private static class loginZ_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginZ_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginZ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginZ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new LoginResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueTokenForAccountMigrationSettings_args implements org.apache.thrift.TBase<issueTokenForAccountMigrationSettings_args, issueTokenForAccountMigrationSettings_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueTokenForAccountMigrationSettings_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueTokenForAccountMigrationSettings_args");

    private static final org.apache.thrift.protocol.TField ENFORCE_FIELD_DESC = new org.apache.thrift.protocol.TField("enforce", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueTokenForAccountMigrationSettings_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueTokenForAccountMigrationSettings_argsTupleSchemeFactory();

    public boolean enforce; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENFORCE((short)2, "enforce");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // ENFORCE
            return ENFORCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENFORCE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENFORCE, new org.apache.thrift.meta_data.FieldMetaData("enforce", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueTokenForAccountMigrationSettings_args.class, metaDataMap);
    }

    public issueTokenForAccountMigrationSettings_args() {
    }

    public issueTokenForAccountMigrationSettings_args(
      boolean enforce)
    {
      this();
      this.enforce = enforce;
      setEnforceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueTokenForAccountMigrationSettings_args(issueTokenForAccountMigrationSettings_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.enforce = other.enforce;
    }

    public issueTokenForAccountMigrationSettings_args deepCopy() {
      return new issueTokenForAccountMigrationSettings_args(this);
    }

    @Override
    public void clear() {
      setEnforceIsSet(false);
      this.enforce = false;
    }

    public boolean isEnforce() {
      return this.enforce;
    }

    public issueTokenForAccountMigrationSettings_args setEnforce(boolean enforce) {
      this.enforce = enforce;
      setEnforceIsSet(true);
      return this;
    }

    public void unsetEnforce() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENFORCE_ISSET_ID);
    }

    /** Returns true if field enforce is set (has been assigned a value) and false otherwise */
    public boolean isSetEnforce() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENFORCE_ISSET_ID);
    }

    public void setEnforceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENFORCE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case ENFORCE:
        if (value == null) {
          unsetEnforce();
        } else {
          setEnforce((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ENFORCE:
        return isEnforce();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ENFORCE:
        return isSetEnforce();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof issueTokenForAccountMigrationSettings_args)
        return this.equals((issueTokenForAccountMigrationSettings_args)that);
      return false;
    }

    public boolean equals(issueTokenForAccountMigrationSettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_enforce = true;
      boolean that_present_enforce = true;
      if (this_present_enforce || that_present_enforce) {
        if (!(this_present_enforce && that_present_enforce))
          return false;
        if (this.enforce != that.enforce)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((enforce) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(issueTokenForAccountMigrationSettings_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetEnforce(), other.isSetEnforce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnforce()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.enforce, other.enforce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueTokenForAccountMigrationSettings_args(");
      boolean first = true;

      sb.append("enforce:");
      sb.append(this.enforce);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueTokenForAccountMigrationSettings_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueTokenForAccountMigrationSettings_argsStandardScheme getScheme() {
        return new issueTokenForAccountMigrationSettings_argsStandardScheme();
      }
    }

    private static class issueTokenForAccountMigrationSettings_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueTokenForAccountMigrationSettings_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueTokenForAccountMigrationSettings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // ENFORCE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.enforce = iprot.readBool();
                struct.setEnforceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueTokenForAccountMigrationSettings_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ENFORCE_FIELD_DESC);
        oprot.writeBool(struct.enforce);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueTokenForAccountMigrationSettings_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueTokenForAccountMigrationSettings_argsTupleScheme getScheme() {
        return new issueTokenForAccountMigrationSettings_argsTupleScheme();
      }
    }

    private static class issueTokenForAccountMigrationSettings_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueTokenForAccountMigrationSettings_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueTokenForAccountMigrationSettings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEnforce()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEnforce()) {
          oprot.writeBool(struct.enforce);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueTokenForAccountMigrationSettings_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.enforce = iprot.readBool();
          struct.setEnforceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueTokenForAccountMigrationSettings_result implements org.apache.thrift.TBase<issueTokenForAccountMigrationSettings_result, issueTokenForAccountMigrationSettings_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueTokenForAccountMigrationSettings_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueTokenForAccountMigrationSettings_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueTokenForAccountMigrationSettings_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueTokenForAccountMigrationSettings_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable SecurityCenterResult success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecurityCenterResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueTokenForAccountMigrationSettings_result.class, metaDataMap);
    }

    public issueTokenForAccountMigrationSettings_result() {
    }

    public issueTokenForAccountMigrationSettings_result(
      SecurityCenterResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueTokenForAccountMigrationSettings_result(issueTokenForAccountMigrationSettings_result other) {
      if (other.isSetSuccess()) {
        this.success = new SecurityCenterResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public issueTokenForAccountMigrationSettings_result deepCopy() {
      return new issueTokenForAccountMigrationSettings_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public SecurityCenterResult getSuccess() {
      return this.success;
    }

    public issueTokenForAccountMigrationSettings_result setSuccess(@org.apache.thrift.annotation.Nullable SecurityCenterResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public issueTokenForAccountMigrationSettings_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SecurityCenterResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof issueTokenForAccountMigrationSettings_result)
        return this.equals((issueTokenForAccountMigrationSettings_result)that);
      return false;
    }

    public boolean equals(issueTokenForAccountMigrationSettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueTokenForAccountMigrationSettings_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueTokenForAccountMigrationSettings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueTokenForAccountMigrationSettings_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueTokenForAccountMigrationSettings_resultStandardScheme getScheme() {
        return new issueTokenForAccountMigrationSettings_resultStandardScheme();
      }
    }

    private static class issueTokenForAccountMigrationSettings_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueTokenForAccountMigrationSettings_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueTokenForAccountMigrationSettings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SecurityCenterResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueTokenForAccountMigrationSettings_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueTokenForAccountMigrationSettings_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueTokenForAccountMigrationSettings_resultTupleScheme getScheme() {
        return new issueTokenForAccountMigrationSettings_resultTupleScheme();
      }
    }

    private static class issueTokenForAccountMigrationSettings_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueTokenForAccountMigrationSettings_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueTokenForAccountMigrationSettings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueTokenForAccountMigrationSettings_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SecurityCenterResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueTokenForAccountMigration_args implements org.apache.thrift.TBase<issueTokenForAccountMigration_args, issueTokenForAccountMigration_args._Fields>, java.io.Serializable, Cloneable, Comparable<issueTokenForAccountMigration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueTokenForAccountMigration_args");

    private static final org.apache.thrift.protocol.TField MIGRATION_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("migrationSessionId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueTokenForAccountMigration_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueTokenForAccountMigration_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String migrationSessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MIGRATION_SESSION_ID((short)2, "migrationSessionId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // MIGRATION_SESSION_ID
            return MIGRATION_SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MIGRATION_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("migrationSessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueTokenForAccountMigration_args.class, metaDataMap);
    }

    public issueTokenForAccountMigration_args() {
    }

    public issueTokenForAccountMigration_args(
      java.lang.String migrationSessionId)
    {
      this();
      this.migrationSessionId = migrationSessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueTokenForAccountMigration_args(issueTokenForAccountMigration_args other) {
      if (other.isSetMigrationSessionId()) {
        this.migrationSessionId = other.migrationSessionId;
      }
    }

    public issueTokenForAccountMigration_args deepCopy() {
      return new issueTokenForAccountMigration_args(this);
    }

    @Override
    public void clear() {
      this.migrationSessionId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMigrationSessionId() {
      return this.migrationSessionId;
    }

    public issueTokenForAccountMigration_args setMigrationSessionId(@org.apache.thrift.annotation.Nullable java.lang.String migrationSessionId) {
      this.migrationSessionId = migrationSessionId;
      return this;
    }

    public void unsetMigrationSessionId() {
      this.migrationSessionId = null;
    }

    /** Returns true if field migrationSessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMigrationSessionId() {
      return this.migrationSessionId != null;
    }

    public void setMigrationSessionIdIsSet(boolean value) {
      if (!value) {
        this.migrationSessionId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case MIGRATION_SESSION_ID:
        if (value == null) {
          unsetMigrationSessionId();
        } else {
          setMigrationSessionId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MIGRATION_SESSION_ID:
        return getMigrationSessionId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MIGRATION_SESSION_ID:
        return isSetMigrationSessionId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof issueTokenForAccountMigration_args)
        return this.equals((issueTokenForAccountMigration_args)that);
      return false;
    }

    public boolean equals(issueTokenForAccountMigration_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_migrationSessionId = true && this.isSetMigrationSessionId();
      boolean that_present_migrationSessionId = true && that.isSetMigrationSessionId();
      if (this_present_migrationSessionId || that_present_migrationSessionId) {
        if (!(this_present_migrationSessionId && that_present_migrationSessionId))
          return false;
        if (!this.migrationSessionId.equals(that.migrationSessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMigrationSessionId()) ? 131071 : 524287);
      if (isSetMigrationSessionId())
        hashCode = hashCode * 8191 + migrationSessionId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueTokenForAccountMigration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetMigrationSessionId(), other.isSetMigrationSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMigrationSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.migrationSessionId, other.migrationSessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueTokenForAccountMigration_args(");
      boolean first = true;

      sb.append("migrationSessionId:");
      if (this.migrationSessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.migrationSessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueTokenForAccountMigration_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueTokenForAccountMigration_argsStandardScheme getScheme() {
        return new issueTokenForAccountMigration_argsStandardScheme();
      }
    }

    private static class issueTokenForAccountMigration_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueTokenForAccountMigration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueTokenForAccountMigration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // MIGRATION_SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.migrationSessionId = iprot.readString();
                struct.setMigrationSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueTokenForAccountMigration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.migrationSessionId != null) {
          oprot.writeFieldBegin(MIGRATION_SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.migrationSessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueTokenForAccountMigration_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueTokenForAccountMigration_argsTupleScheme getScheme() {
        return new issueTokenForAccountMigration_argsTupleScheme();
      }
    }

    private static class issueTokenForAccountMigration_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueTokenForAccountMigration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueTokenForAccountMigration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMigrationSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMigrationSessionId()) {
          oprot.writeString(struct.migrationSessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueTokenForAccountMigration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.migrationSessionId = iprot.readString();
          struct.setMigrationSessionIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class issueTokenForAccountMigration_result implements org.apache.thrift.TBase<issueTokenForAccountMigration_result, issueTokenForAccountMigration_result._Fields>, java.io.Serializable, Cloneable, Comparable<issueTokenForAccountMigration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("issueTokenForAccountMigration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new issueTokenForAccountMigration_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new issueTokenForAccountMigration_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable SecurityCenterResult success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SecurityCenterResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(issueTokenForAccountMigration_result.class, metaDataMap);
    }

    public issueTokenForAccountMigration_result() {
    }

    public issueTokenForAccountMigration_result(
      SecurityCenterResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueTokenForAccountMigration_result(issueTokenForAccountMigration_result other) {
      if (other.isSetSuccess()) {
        this.success = new SecurityCenterResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public issueTokenForAccountMigration_result deepCopy() {
      return new issueTokenForAccountMigration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public SecurityCenterResult getSuccess() {
      return this.success;
    }

    public issueTokenForAccountMigration_result setSuccess(@org.apache.thrift.annotation.Nullable SecurityCenterResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public issueTokenForAccountMigration_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((SecurityCenterResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof issueTokenForAccountMigration_result)
        return this.equals((issueTokenForAccountMigration_result)that);
      return false;
    }

    public boolean equals(issueTokenForAccountMigration_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(issueTokenForAccountMigration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("issueTokenForAccountMigration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class issueTokenForAccountMigration_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueTokenForAccountMigration_resultStandardScheme getScheme() {
        return new issueTokenForAccountMigration_resultStandardScheme();
      }
    }

    private static class issueTokenForAccountMigration_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<issueTokenForAccountMigration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, issueTokenForAccountMigration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new SecurityCenterResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, issueTokenForAccountMigration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class issueTokenForAccountMigration_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public issueTokenForAccountMigration_resultTupleScheme getScheme() {
        return new issueTokenForAccountMigration_resultTupleScheme();
      }
    }

    private static class issueTokenForAccountMigration_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<issueTokenForAccountMigration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, issueTokenForAccountMigration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, issueTokenForAccountMigration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new SecurityCenterResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class verifyQrcodeWithE2EE_args implements org.apache.thrift.TBase<verifyQrcodeWithE2EE_args, verifyQrcodeWithE2EE_args._Fields>, java.io.Serializable, Cloneable, Comparable<verifyQrcodeWithE2EE_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyQrcodeWithE2EE_args");

    private static final org.apache.thrift.protocol.TField VERIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("verifier", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PIN_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("pinCode", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_KEY_CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedKeyChain", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField HASH_KEY_CHAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("hashKeyChain", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyQrcodeWithE2EE_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyQrcodeWithE2EE_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String verifier; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String pinCode; // required
    /**
     * 
     * @see ErrorCode
     */
    public @org.apache.thrift.annotation.Nullable ErrorCode errorCode; // required
    public @org.apache.thrift.annotation.Nullable E2EEPublicKey publicKey; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encryptedKeyChain; // required
    public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hashKeyChain; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VERIFIER((short)2, "verifier"),
      PIN_CODE((short)3, "pinCode"),
      /**
       * 
       * @see ErrorCode
       */
      ERROR_CODE((short)4, "errorCode"),
      PUBLIC_KEY((short)5, "publicKey"),
      ENCRYPTED_KEY_CHAIN((short)6, "encryptedKeyChain"),
      HASH_KEY_CHAIN((short)7, "hashKeyChain");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // VERIFIER
            return VERIFIER;
          case 3: // PIN_CODE
            return PIN_CODE;
          case 4: // ERROR_CODE
            return ERROR_CODE;
          case 5: // PUBLIC_KEY
            return PUBLIC_KEY;
          case 6: // ENCRYPTED_KEY_CHAIN
            return ENCRYPTED_KEY_CHAIN;
          case 7: // HASH_KEY_CHAIN
            return HASH_KEY_CHAIN;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VERIFIER, new org.apache.thrift.meta_data.FieldMetaData("verifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PIN_CODE, new org.apache.thrift.meta_data.FieldMetaData("pinCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ErrorCode.class)));
      tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, E2EEPublicKey.class)));
      tmpMap.put(_Fields.ENCRYPTED_KEY_CHAIN, new org.apache.thrift.meta_data.FieldMetaData("encryptedKeyChain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.HASH_KEY_CHAIN, new org.apache.thrift.meta_data.FieldMetaData("hashKeyChain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyQrcodeWithE2EE_args.class, metaDataMap);
    }

    public verifyQrcodeWithE2EE_args() {
    }

    public verifyQrcodeWithE2EE_args(
      java.lang.String verifier,
      java.lang.String pinCode,
      ErrorCode errorCode,
      E2EEPublicKey publicKey,
      java.nio.ByteBuffer encryptedKeyChain,
      java.nio.ByteBuffer hashKeyChain)
    {
      this();
      this.verifier = verifier;
      this.pinCode = pinCode;
      this.errorCode = errorCode;
      this.publicKey = publicKey;
      this.encryptedKeyChain = org.apache.thrift.TBaseHelper.copyBinary(encryptedKeyChain);
      this.hashKeyChain = org.apache.thrift.TBaseHelper.copyBinary(hashKeyChain);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyQrcodeWithE2EE_args(verifyQrcodeWithE2EE_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetPinCode()) {
        this.pinCode = other.pinCode;
      }
      if (other.isSetErrorCode()) {
        this.errorCode = other.errorCode;
      }
      if (other.isSetPublicKey()) {
        this.publicKey = new E2EEPublicKey(other.publicKey);
      }
      if (other.isSetEncryptedKeyChain()) {
        this.encryptedKeyChain = org.apache.thrift.TBaseHelper.copyBinary(other.encryptedKeyChain);
      }
      if (other.isSetHashKeyChain()) {
        this.hashKeyChain = org.apache.thrift.TBaseHelper.copyBinary(other.hashKeyChain);
      }
    }

    public verifyQrcodeWithE2EE_args deepCopy() {
      return new verifyQrcodeWithE2EE_args(this);
    }

    @Override
    public void clear() {
      this.verifier = null;
      this.pinCode = null;
      this.errorCode = null;
      this.publicKey = null;
      this.encryptedKeyChain = null;
      this.hashKeyChain = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVerifier() {
      return this.verifier;
    }

    public verifyQrcodeWithE2EE_args setVerifier(@org.apache.thrift.annotation.Nullable java.lang.String verifier) {
      this.verifier = verifier;
      return this;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getPinCode() {
      return this.pinCode;
    }

    public verifyQrcodeWithE2EE_args setPinCode(@org.apache.thrift.annotation.Nullable java.lang.String pinCode) {
      this.pinCode = pinCode;
      return this;
    }

    public void unsetPinCode() {
      this.pinCode = null;
    }

    /** Returns true if field pinCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPinCode() {
      return this.pinCode != null;
    }

    public void setPinCodeIsSet(boolean value) {
      if (!value) {
        this.pinCode = null;
      }
    }

    /**
     * 
     * @see ErrorCode
     */
    @org.apache.thrift.annotation.Nullable
    public ErrorCode getErrorCode() {
      return this.errorCode;
    }

    /**
     * 
     * @see ErrorCode
     */
    public verifyQrcodeWithE2EE_args setErrorCode(@org.apache.thrift.annotation.Nullable ErrorCode errorCode) {
      this.errorCode = errorCode;
      return this;
    }

    public void unsetErrorCode() {
      this.errorCode = null;
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return this.errorCode != null;
    }

    public void setErrorCodeIsSet(boolean value) {
      if (!value) {
        this.errorCode = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public E2EEPublicKey getPublicKey() {
      return this.publicKey;
    }

    public verifyQrcodeWithE2EE_args setPublicKey(@org.apache.thrift.annotation.Nullable E2EEPublicKey publicKey) {
      this.publicKey = publicKey;
      return this;
    }

    public void unsetPublicKey() {
      this.publicKey = null;
    }

    /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicKey() {
      return this.publicKey != null;
    }

    public void setPublicKeyIsSet(boolean value) {
      if (!value) {
        this.publicKey = null;
      }
    }

    public byte[] getEncryptedKeyChain() {
      setEncryptedKeyChain(org.apache.thrift.TBaseHelper.rightSize(encryptedKeyChain));
      return encryptedKeyChain == null ? null : encryptedKeyChain.array();
    }

    public java.nio.ByteBuffer bufferForEncryptedKeyChain() {
      return org.apache.thrift.TBaseHelper.copyBinary(encryptedKeyChain);
    }

    public verifyQrcodeWithE2EE_args setEncryptedKeyChain(byte[] encryptedKeyChain) {
      this.encryptedKeyChain = encryptedKeyChain == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(encryptedKeyChain.clone());
      return this;
    }

    public verifyQrcodeWithE2EE_args setEncryptedKeyChain(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer encryptedKeyChain) {
      this.encryptedKeyChain = org.apache.thrift.TBaseHelper.copyBinary(encryptedKeyChain);
      return this;
    }

    public void unsetEncryptedKeyChain() {
      this.encryptedKeyChain = null;
    }

    /** Returns true if field encryptedKeyChain is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedKeyChain() {
      return this.encryptedKeyChain != null;
    }

    public void setEncryptedKeyChainIsSet(boolean value) {
      if (!value) {
        this.encryptedKeyChain = null;
      }
    }

    public byte[] getHashKeyChain() {
      setHashKeyChain(org.apache.thrift.TBaseHelper.rightSize(hashKeyChain));
      return hashKeyChain == null ? null : hashKeyChain.array();
    }

    public java.nio.ByteBuffer bufferForHashKeyChain() {
      return org.apache.thrift.TBaseHelper.copyBinary(hashKeyChain);
    }

    public verifyQrcodeWithE2EE_args setHashKeyChain(byte[] hashKeyChain) {
      this.hashKeyChain = hashKeyChain == null ? (java.nio.ByteBuffer)null     : java.nio.ByteBuffer.wrap(hashKeyChain.clone());
      return this;
    }

    public verifyQrcodeWithE2EE_args setHashKeyChain(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer hashKeyChain) {
      this.hashKeyChain = org.apache.thrift.TBaseHelper.copyBinary(hashKeyChain);
      return this;
    }

    public void unsetHashKeyChain() {
      this.hashKeyChain = null;
    }

    /** Returns true if field hashKeyChain is set (has been assigned a value) and false otherwise */
    public boolean isSetHashKeyChain() {
      return this.hashKeyChain != null;
    }

    public void setHashKeyChainIsSet(boolean value) {
      if (!value) {
        this.hashKeyChain = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          setVerifier((java.lang.String)value);
        }
        break;

      case PIN_CODE:
        if (value == null) {
          unsetPinCode();
        } else {
          setPinCode((java.lang.String)value);
        }
        break;

      case ERROR_CODE:
        if (value == null) {
          unsetErrorCode();
        } else {
          setErrorCode((ErrorCode)value);
        }
        break;

      case PUBLIC_KEY:
        if (value == null) {
          unsetPublicKey();
        } else {
          setPublicKey((E2EEPublicKey)value);
        }
        break;

      case ENCRYPTED_KEY_CHAIN:
        if (value == null) {
          unsetEncryptedKeyChain();
        } else {
          if (value instanceof byte[]) {
            setEncryptedKeyChain((byte[])value);
          } else {
            setEncryptedKeyChain((java.nio.ByteBuffer)value);
          }
        }
        break;

      case HASH_KEY_CHAIN:
        if (value == null) {
          unsetHashKeyChain();
        } else {
          if (value instanceof byte[]) {
            setHashKeyChain((byte[])value);
          } else {
            setHashKeyChain((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VERIFIER:
        return getVerifier();

      case PIN_CODE:
        return getPinCode();

      case ERROR_CODE:
        return getErrorCode();

      case PUBLIC_KEY:
        return getPublicKey();

      case ENCRYPTED_KEY_CHAIN:
        return getEncryptedKeyChain();

      case HASH_KEY_CHAIN:
        return getHashKeyChain();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VERIFIER:
        return isSetVerifier();
      case PIN_CODE:
        return isSetPinCode();
      case ERROR_CODE:
        return isSetErrorCode();
      case PUBLIC_KEY:
        return isSetPublicKey();
      case ENCRYPTED_KEY_CHAIN:
        return isSetEncryptedKeyChain();
      case HASH_KEY_CHAIN:
        return isSetHashKeyChain();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof verifyQrcodeWithE2EE_args)
        return this.equals((verifyQrcodeWithE2EE_args)that);
      return false;
    }

    public boolean equals(verifyQrcodeWithE2EE_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_pinCode = true && this.isSetPinCode();
      boolean that_present_pinCode = true && that.isSetPinCode();
      if (this_present_pinCode || that_present_pinCode) {
        if (!(this_present_pinCode && that_present_pinCode))
          return false;
        if (!this.pinCode.equals(that.pinCode))
          return false;
      }

      boolean this_present_errorCode = true && this.isSetErrorCode();
      boolean that_present_errorCode = true && that.isSetErrorCode();
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (!this.errorCode.equals(that.errorCode))
          return false;
      }

      boolean this_present_publicKey = true && this.isSetPublicKey();
      boolean that_present_publicKey = true && that.isSetPublicKey();
      if (this_present_publicKey || that_present_publicKey) {
        if (!(this_present_publicKey && that_present_publicKey))
          return false;
        if (!this.publicKey.equals(that.publicKey))
          return false;
      }

      boolean this_present_encryptedKeyChain = true && this.isSetEncryptedKeyChain();
      boolean that_present_encryptedKeyChain = true && that.isSetEncryptedKeyChain();
      if (this_present_encryptedKeyChain || that_present_encryptedKeyChain) {
        if (!(this_present_encryptedKeyChain && that_present_encryptedKeyChain))
          return false;
        if (!this.encryptedKeyChain.equals(that.encryptedKeyChain))
          return false;
      }

      boolean this_present_hashKeyChain = true && this.isSetHashKeyChain();
      boolean that_present_hashKeyChain = true && that.isSetHashKeyChain();
      if (this_present_hashKeyChain || that_present_hashKeyChain) {
        if (!(this_present_hashKeyChain && that_present_hashKeyChain))
          return false;
        if (!this.hashKeyChain.equals(that.hashKeyChain))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVerifier()) ? 131071 : 524287);
      if (isSetVerifier())
        hashCode = hashCode * 8191 + verifier.hashCode();

      hashCode = hashCode * 8191 + ((isSetPinCode()) ? 131071 : 524287);
      if (isSetPinCode())
        hashCode = hashCode * 8191 + pinCode.hashCode();

      hashCode = hashCode * 8191 + ((isSetErrorCode()) ? 131071 : 524287);
      if (isSetErrorCode())
        hashCode = hashCode * 8191 + errorCode.getValue();

      hashCode = hashCode * 8191 + ((isSetPublicKey()) ? 131071 : 524287);
      if (isSetPublicKey())
        hashCode = hashCode * 8191 + publicKey.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedKeyChain()) ? 131071 : 524287);
      if (isSetEncryptedKeyChain())
        hashCode = hashCode * 8191 + encryptedKeyChain.hashCode();

      hashCode = hashCode * 8191 + ((isSetHashKeyChain()) ? 131071 : 524287);
      if (isSetHashKeyChain())
        hashCode = hashCode * 8191 + hashKeyChain.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(verifyQrcodeWithE2EE_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPinCode(), other.isSetPinCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPinCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pinCode, other.pinCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetErrorCode(), other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetPublicKey(), other.isSetPublicKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetEncryptedKeyChain(), other.isSetEncryptedKeyChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedKeyChain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedKeyChain, other.encryptedKeyChain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHashKeyChain(), other.isSetHashKeyChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHashKeyChain()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hashKeyChain, other.hashKeyChain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyQrcodeWithE2EE_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pinCode:");
      if (this.pinCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pinCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      if (this.errorCode == null) {
        sb.append("null");
      } else {
        sb.append(this.errorCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicKey:");
      if (this.publicKey == null) {
        sb.append("null");
      } else {
        sb.append(this.publicKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedKeyChain:");
      if (this.encryptedKeyChain == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.encryptedKeyChain, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hashKeyChain:");
      if (this.hashKeyChain == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.hashKeyChain, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (publicKey != null) {
        publicKey.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyQrcodeWithE2EE_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyQrcodeWithE2EE_argsStandardScheme getScheme() {
        return new verifyQrcodeWithE2EE_argsStandardScheme();
      }
    }

    private static class verifyQrcodeWithE2EE_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyQrcodeWithE2EE_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyQrcodeWithE2EE_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // VERIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verifier = iprot.readString();
                struct.setVerifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PIN_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pinCode = iprot.readString();
                struct.setPinCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ERROR_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.errorCode = ErrorCode.findByValue(iprot.readI32());
                struct.setErrorCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PUBLIC_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.publicKey = new E2EEPublicKey();
                struct.publicKey.read(iprot);
                struct.setPublicKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ENCRYPTED_KEY_CHAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedKeyChain = iprot.readBinary();
                struct.setEncryptedKeyChainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HASH_KEY_CHAIN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hashKeyChain = iprot.readBinary();
                struct.setHashKeyChainIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyQrcodeWithE2EE_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.verifier != null) {
          oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
          oprot.writeString(struct.verifier);
          oprot.writeFieldEnd();
        }
        if (struct.pinCode != null) {
          oprot.writeFieldBegin(PIN_CODE_FIELD_DESC);
          oprot.writeString(struct.pinCode);
          oprot.writeFieldEnd();
        }
        if (struct.errorCode != null) {
          oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
          oprot.writeI32(struct.errorCode.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.publicKey != null) {
          oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
          struct.publicKey.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedKeyChain != null) {
          oprot.writeFieldBegin(ENCRYPTED_KEY_CHAIN_FIELD_DESC);
          oprot.writeBinary(struct.encryptedKeyChain);
          oprot.writeFieldEnd();
        }
        if (struct.hashKeyChain != null) {
          oprot.writeFieldBegin(HASH_KEY_CHAIN_FIELD_DESC);
          oprot.writeBinary(struct.hashKeyChain);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyQrcodeWithE2EE_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyQrcodeWithE2EE_argsTupleScheme getScheme() {
        return new verifyQrcodeWithE2EE_argsTupleScheme();
      }
    }

    private static class verifyQrcodeWithE2EE_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyQrcodeWithE2EE_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyQrcodeWithE2EE_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVerifier()) {
          optionals.set(0);
        }
        if (struct.isSetPinCode()) {
          optionals.set(1);
        }
        if (struct.isSetErrorCode()) {
          optionals.set(2);
        }
        if (struct.isSetPublicKey()) {
          optionals.set(3);
        }
        if (struct.isSetEncryptedKeyChain()) {
          optionals.set(4);
        }
        if (struct.isSetHashKeyChain()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetVerifier()) {
          oprot.writeString(struct.verifier);
        }
        if (struct.isSetPinCode()) {
          oprot.writeString(struct.pinCode);
        }
        if (struct.isSetErrorCode()) {
          oprot.writeI32(struct.errorCode.getValue());
        }
        if (struct.isSetPublicKey()) {
          struct.publicKey.write(oprot);
        }
        if (struct.isSetEncryptedKeyChain()) {
          oprot.writeBinary(struct.encryptedKeyChain);
        }
        if (struct.isSetHashKeyChain()) {
          oprot.writeBinary(struct.hashKeyChain);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyQrcodeWithE2EE_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.verifier = iprot.readString();
          struct.setVerifierIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pinCode = iprot.readString();
          struct.setPinCodeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.errorCode = ErrorCode.findByValue(iprot.readI32());
          struct.setErrorCodeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.publicKey = new E2EEPublicKey();
          struct.publicKey.read(iprot);
          struct.setPublicKeyIsSet(true);
        }
        if (incoming.get(4)) {
          struct.encryptedKeyChain = iprot.readBinary();
          struct.setEncryptedKeyChainIsSet(true);
        }
        if (incoming.get(5)) {
          struct.hashKeyChain = iprot.readBinary();
          struct.setHashKeyChainIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class verifyQrcodeWithE2EE_result implements org.apache.thrift.TBase<verifyQrcodeWithE2EE_result, verifyQrcodeWithE2EE_result._Fields>, java.io.Serializable, Cloneable, Comparable<verifyQrcodeWithE2EE_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("verifyQrcodeWithE2EE_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new verifyQrcodeWithE2EE_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new verifyQrcodeWithE2EE_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(verifyQrcodeWithE2EE_result.class, metaDataMap);
    }

    public verifyQrcodeWithE2EE_result() {
    }

    public verifyQrcodeWithE2EE_result(
      java.lang.String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyQrcodeWithE2EE_result(verifyQrcodeWithE2EE_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public verifyQrcodeWithE2EE_result deepCopy() {
      return new verifyQrcodeWithE2EE_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public verifyQrcodeWithE2EE_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public verifyQrcodeWithE2EE_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof verifyQrcodeWithE2EE_result)
        return this.equals((verifyQrcodeWithE2EE_result)that);
      return false;
    }

    public boolean equals(verifyQrcodeWithE2EE_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(verifyQrcodeWithE2EE_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("verifyQrcodeWithE2EE_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class verifyQrcodeWithE2EE_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyQrcodeWithE2EE_resultStandardScheme getScheme() {
        return new verifyQrcodeWithE2EE_resultStandardScheme();
      }
    }

    private static class verifyQrcodeWithE2EE_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<verifyQrcodeWithE2EE_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, verifyQrcodeWithE2EE_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, verifyQrcodeWithE2EE_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class verifyQrcodeWithE2EE_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public verifyQrcodeWithE2EE_resultTupleScheme getScheme() {
        return new verifyQrcodeWithE2EE_resultTupleScheme();
      }
    }

    private static class verifyQrcodeWithE2EE_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<verifyQrcodeWithE2EE_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, verifyQrcodeWithE2EE_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, verifyQrcodeWithE2EE_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
