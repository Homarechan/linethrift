/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class CoinPurchaseConfirm implements org.apache.thrift.TBase<CoinPurchaseConfirm, CoinPurchaseConfirm._Fields>, java.io.Serializable, Cloneable, Comparable<CoinPurchaseConfirm> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CoinPurchaseConfirm");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_STORE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("appStoreCode", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField RECEIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("receipt", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SELLER_FIELD_DESC = new org.apache.thrift.protocol.TField("seller", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField REQUEST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField IGNORE_RECEIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("ignoreReceipt", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CoinPurchaseConfirmStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CoinPurchaseConfirmTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String orderId; // required
  /**
   * 
   * @see PaymentType
   */
  public @org.apache.thrift.annotation.Nullable PaymentType appStoreCode; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String receipt; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String signature; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String seller; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String requestType; // required
  public boolean ignoreReceipt; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORDER_ID((short)1, "orderId"),
    /**
     * 
     * @see PaymentType
     */
    APP_STORE_CODE((short)2, "appStoreCode"),
    RECEIPT((short)3, "receipt"),
    SIGNATURE((short)4, "signature"),
    SELLER((short)5, "seller"),
    REQUEST_TYPE((short)6, "requestType"),
    IGNORE_RECEIPT((short)7, "ignoreReceipt");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // APP_STORE_CODE
          return APP_STORE_CODE;
        case 3: // RECEIPT
          return RECEIPT;
        case 4: // SIGNATURE
          return SIGNATURE;
        case 5: // SELLER
          return SELLER;
        case 6: // REQUEST_TYPE
          return REQUEST_TYPE;
        case 7: // IGNORE_RECEIPT
          return IGNORE_RECEIPT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IGNORERECEIPT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_STORE_CODE, new org.apache.thrift.meta_data.FieldMetaData("appStoreCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaymentType.class)));
    tmpMap.put(_Fields.RECEIPT, new org.apache.thrift.meta_data.FieldMetaData("receipt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SELLER, new org.apache.thrift.meta_data.FieldMetaData("seller", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REQUEST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("requestType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IGNORE_RECEIPT, new org.apache.thrift.meta_data.FieldMetaData("ignoreReceipt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CoinPurchaseConfirm.class, metaDataMap);
  }

  public CoinPurchaseConfirm() {
  }

  public CoinPurchaseConfirm(
    java.lang.String orderId,
    PaymentType appStoreCode,
    java.lang.String receipt,
    java.lang.String signature,
    java.lang.String seller,
    java.lang.String requestType,
    boolean ignoreReceipt)
  {
    this();
    this.orderId = orderId;
    this.appStoreCode = appStoreCode;
    this.receipt = receipt;
    this.signature = signature;
    this.seller = seller;
    this.requestType = requestType;
    this.ignoreReceipt = ignoreReceipt;
    setIgnoreReceiptIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinPurchaseConfirm(CoinPurchaseConfirm other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetAppStoreCode()) {
      this.appStoreCode = other.appStoreCode;
    }
    if (other.isSetReceipt()) {
      this.receipt = other.receipt;
    }
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
    if (other.isSetSeller()) {
      this.seller = other.seller;
    }
    if (other.isSetRequestType()) {
      this.requestType = other.requestType;
    }
    this.ignoreReceipt = other.ignoreReceipt;
  }

  public CoinPurchaseConfirm deepCopy() {
    return new CoinPurchaseConfirm(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.appStoreCode = null;
    this.receipt = null;
    this.signature = null;
    this.seller = null;
    this.requestType = null;
    setIgnoreReceiptIsSet(false);
    this.ignoreReceipt = false;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOrderId() {
    return this.orderId;
  }

  public CoinPurchaseConfirm setOrderId(@org.apache.thrift.annotation.Nullable java.lang.String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 
   * @see PaymentType
   */
  @org.apache.thrift.annotation.Nullable
  public PaymentType getAppStoreCode() {
    return this.appStoreCode;
  }

  /**
   * 
   * @see PaymentType
   */
  public CoinPurchaseConfirm setAppStoreCode(@org.apache.thrift.annotation.Nullable PaymentType appStoreCode) {
    this.appStoreCode = appStoreCode;
    return this;
  }

  public void unsetAppStoreCode() {
    this.appStoreCode = null;
  }

  /** Returns true if field appStoreCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAppStoreCode() {
    return this.appStoreCode != null;
  }

  public void setAppStoreCodeIsSet(boolean value) {
    if (!value) {
      this.appStoreCode = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReceipt() {
    return this.receipt;
  }

  public CoinPurchaseConfirm setReceipt(@org.apache.thrift.annotation.Nullable java.lang.String receipt) {
    this.receipt = receipt;
    return this;
  }

  public void unsetReceipt() {
    this.receipt = null;
  }

  /** Returns true if field receipt is set (has been assigned a value) and false otherwise */
  public boolean isSetReceipt() {
    return this.receipt != null;
  }

  public void setReceiptIsSet(boolean value) {
    if (!value) {
      this.receipt = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSignature() {
    return this.signature;
  }

  public CoinPurchaseConfirm setSignature(@org.apache.thrift.annotation.Nullable java.lang.String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getSeller() {
    return this.seller;
  }

  public CoinPurchaseConfirm setSeller(@org.apache.thrift.annotation.Nullable java.lang.String seller) {
    this.seller = seller;
    return this;
  }

  public void unsetSeller() {
    this.seller = null;
  }

  /** Returns true if field seller is set (has been assigned a value) and false otherwise */
  public boolean isSetSeller() {
    return this.seller != null;
  }

  public void setSellerIsSet(boolean value) {
    if (!value) {
      this.seller = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRequestType() {
    return this.requestType;
  }

  public CoinPurchaseConfirm setRequestType(@org.apache.thrift.annotation.Nullable java.lang.String requestType) {
    this.requestType = requestType;
    return this;
  }

  public void unsetRequestType() {
    this.requestType = null;
  }

  /** Returns true if field requestType is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestType() {
    return this.requestType != null;
  }

  public void setRequestTypeIsSet(boolean value) {
    if (!value) {
      this.requestType = null;
    }
  }

  public boolean isIgnoreReceipt() {
    return this.ignoreReceipt;
  }

  public CoinPurchaseConfirm setIgnoreReceipt(boolean ignoreReceipt) {
    this.ignoreReceipt = ignoreReceipt;
    setIgnoreReceiptIsSet(true);
    return this;
  }

  public void unsetIgnoreReceipt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __IGNORERECEIPT_ISSET_ID);
  }

  /** Returns true if field ignoreReceipt is set (has been assigned a value) and false otherwise */
  public boolean isSetIgnoreReceipt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __IGNORERECEIPT_ISSET_ID);
  }

  public void setIgnoreReceiptIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __IGNORERECEIPT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((java.lang.String)value);
      }
      break;

    case APP_STORE_CODE:
      if (value == null) {
        unsetAppStoreCode();
      } else {
        setAppStoreCode((PaymentType)value);
      }
      break;

    case RECEIPT:
      if (value == null) {
        unsetReceipt();
      } else {
        setReceipt((java.lang.String)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((java.lang.String)value);
      }
      break;

    case SELLER:
      if (value == null) {
        unsetSeller();
      } else {
        setSeller((java.lang.String)value);
      }
      break;

    case REQUEST_TYPE:
      if (value == null) {
        unsetRequestType();
      } else {
        setRequestType((java.lang.String)value);
      }
      break;

    case IGNORE_RECEIPT:
      if (value == null) {
        unsetIgnoreReceipt();
      } else {
        setIgnoreReceipt((java.lang.Boolean)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case APP_STORE_CODE:
      return getAppStoreCode();

    case RECEIPT:
      return getReceipt();

    case SIGNATURE:
      return getSignature();

    case SELLER:
      return getSeller();

    case REQUEST_TYPE:
      return getRequestType();

    case IGNORE_RECEIPT:
      return isIgnoreReceipt();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case APP_STORE_CODE:
      return isSetAppStoreCode();
    case RECEIPT:
      return isSetReceipt();
    case SIGNATURE:
      return isSetSignature();
    case SELLER:
      return isSetSeller();
    case REQUEST_TYPE:
      return isSetRequestType();
    case IGNORE_RECEIPT:
      return isSetIgnoreReceipt();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof CoinPurchaseConfirm)
      return this.equals((CoinPurchaseConfirm)that);
    return false;
  }

  public boolean equals(CoinPurchaseConfirm that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_appStoreCode = true && this.isSetAppStoreCode();
    boolean that_present_appStoreCode = true && that.isSetAppStoreCode();
    if (this_present_appStoreCode || that_present_appStoreCode) {
      if (!(this_present_appStoreCode && that_present_appStoreCode))
        return false;
      if (!this.appStoreCode.equals(that.appStoreCode))
        return false;
    }

    boolean this_present_receipt = true && this.isSetReceipt();
    boolean that_present_receipt = true && that.isSetReceipt();
    if (this_present_receipt || that_present_receipt) {
      if (!(this_present_receipt && that_present_receipt))
        return false;
      if (!this.receipt.equals(that.receipt))
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_seller = true && this.isSetSeller();
    boolean that_present_seller = true && that.isSetSeller();
    if (this_present_seller || that_present_seller) {
      if (!(this_present_seller && that_present_seller))
        return false;
      if (!this.seller.equals(that.seller))
        return false;
    }

    boolean this_present_requestType = true && this.isSetRequestType();
    boolean that_present_requestType = true && that.isSetRequestType();
    if (this_present_requestType || that_present_requestType) {
      if (!(this_present_requestType && that_present_requestType))
        return false;
      if (!this.requestType.equals(that.requestType))
        return false;
    }

    boolean this_present_ignoreReceipt = true;
    boolean that_present_ignoreReceipt = true;
    if (this_present_ignoreReceipt || that_present_ignoreReceipt) {
      if (!(this_present_ignoreReceipt && that_present_ignoreReceipt))
        return false;
      if (this.ignoreReceipt != that.ignoreReceipt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrderId()) ? 131071 : 524287);
    if (isSetOrderId())
      hashCode = hashCode * 8191 + orderId.hashCode();

    hashCode = hashCode * 8191 + ((isSetAppStoreCode()) ? 131071 : 524287);
    if (isSetAppStoreCode())
      hashCode = hashCode * 8191 + appStoreCode.getValue();

    hashCode = hashCode * 8191 + ((isSetReceipt()) ? 131071 : 524287);
    if (isSetReceipt())
      hashCode = hashCode * 8191 + receipt.hashCode();

    hashCode = hashCode * 8191 + ((isSetSignature()) ? 131071 : 524287);
    if (isSetSignature())
      hashCode = hashCode * 8191 + signature.hashCode();

    hashCode = hashCode * 8191 + ((isSetSeller()) ? 131071 : 524287);
    if (isSetSeller())
      hashCode = hashCode * 8191 + seller.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequestType()) ? 131071 : 524287);
    if (isSetRequestType())
      hashCode = hashCode * 8191 + requestType.hashCode();

    hashCode = hashCode * 8191 + ((ignoreReceipt) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(CoinPurchaseConfirm other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOrderId(), other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAppStoreCode(), other.isSetAppStoreCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppStoreCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appStoreCode, other.appStoreCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReceipt(), other.isSetReceipt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceipt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receipt, other.receipt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSignature(), other.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, other.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSeller(), other.isSetSeller());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSeller()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.seller, other.seller);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRequestType(), other.isSetRequestType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestType, other.requestType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIgnoreReceipt(), other.isSetIgnoreReceipt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIgnoreReceipt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ignoreReceipt, other.ignoreReceipt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CoinPurchaseConfirm(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appStoreCode:");
    if (this.appStoreCode == null) {
      sb.append("null");
    } else {
      sb.append(this.appStoreCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receipt:");
    if (this.receipt == null) {
      sb.append("null");
    } else {
      sb.append(this.receipt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      sb.append(this.signature);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("seller:");
    if (this.seller == null) {
      sb.append("null");
    } else {
      sb.append(this.seller);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestType:");
    if (this.requestType == null) {
      sb.append("null");
    } else {
      sb.append(this.requestType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ignoreReceipt:");
    sb.append(this.ignoreReceipt);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CoinPurchaseConfirmStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CoinPurchaseConfirmStandardScheme getScheme() {
      return new CoinPurchaseConfirmStandardScheme();
    }
  }

  private static class CoinPurchaseConfirmStandardScheme extends org.apache.thrift.scheme.StandardScheme<CoinPurchaseConfirm> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CoinPurchaseConfirm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_STORE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.appStoreCode = PaymentType.findByValue(iprot.readI32());
              struct.setAppStoreCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECEIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receipt = iprot.readString();
              struct.setReceiptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SELLER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.seller = iprot.readString();
              struct.setSellerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REQUEST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestType = iprot.readString();
              struct.setRequestTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IGNORE_RECEIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.ignoreReceipt = iprot.readBool();
              struct.setIgnoreReceiptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CoinPurchaseConfirm struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.appStoreCode != null) {
        oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
        oprot.writeI32(struct.appStoreCode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.receipt != null) {
        oprot.writeFieldBegin(RECEIPT_FIELD_DESC);
        oprot.writeString(struct.receipt);
        oprot.writeFieldEnd();
      }
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeString(struct.signature);
        oprot.writeFieldEnd();
      }
      if (struct.seller != null) {
        oprot.writeFieldBegin(SELLER_FIELD_DESC);
        oprot.writeString(struct.seller);
        oprot.writeFieldEnd();
      }
      if (struct.requestType != null) {
        oprot.writeFieldBegin(REQUEST_TYPE_FIELD_DESC);
        oprot.writeString(struct.requestType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IGNORE_RECEIPT_FIELD_DESC);
      oprot.writeBool(struct.ignoreReceipt);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CoinPurchaseConfirmTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CoinPurchaseConfirmTupleScheme getScheme() {
      return new CoinPurchaseConfirmTupleScheme();
    }
  }

  private static class CoinPurchaseConfirmTupleScheme extends org.apache.thrift.scheme.TupleScheme<CoinPurchaseConfirm> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CoinPurchaseConfirm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrderId()) {
        optionals.set(0);
      }
      if (struct.isSetAppStoreCode()) {
        optionals.set(1);
      }
      if (struct.isSetReceipt()) {
        optionals.set(2);
      }
      if (struct.isSetSignature()) {
        optionals.set(3);
      }
      if (struct.isSetSeller()) {
        optionals.set(4);
      }
      if (struct.isSetRequestType()) {
        optionals.set(5);
      }
      if (struct.isSetIgnoreReceipt()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetOrderId()) {
        oprot.writeString(struct.orderId);
      }
      if (struct.isSetAppStoreCode()) {
        oprot.writeI32(struct.appStoreCode.getValue());
      }
      if (struct.isSetReceipt()) {
        oprot.writeString(struct.receipt);
      }
      if (struct.isSetSignature()) {
        oprot.writeString(struct.signature);
      }
      if (struct.isSetSeller()) {
        oprot.writeString(struct.seller);
      }
      if (struct.isSetRequestType()) {
        oprot.writeString(struct.requestType);
      }
      if (struct.isSetIgnoreReceipt()) {
        oprot.writeBool(struct.ignoreReceipt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CoinPurchaseConfirm struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.orderId = iprot.readString();
        struct.setOrderIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appStoreCode = PaymentType.findByValue(iprot.readI32());
        struct.setAppStoreCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.receipt = iprot.readString();
        struct.setReceiptIsSet(true);
      }
      if (incoming.get(3)) {
        struct.signature = iprot.readString();
        struct.setSignatureIsSet(true);
      }
      if (incoming.get(4)) {
        struct.seller = iprot.readString();
        struct.setSellerIsSet(true);
      }
      if (incoming.get(5)) {
        struct.requestType = iprot.readString();
        struct.setRequestTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ignoreReceipt = iprot.readBool();
        struct.setIgnoreReceiptIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

