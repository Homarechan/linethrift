/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class GetSquareMemberResponse implements org.apache.thrift.TBase<GetSquareMemberResponse, GetSquareMemberResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetSquareMemberResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSquareMemberResponse");

  private static final org.apache.thrift.protocol.TField SQUARE_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("squareMember", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RELATION_FIELD_DESC = new org.apache.thrift.protocol.TField("relation", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField ONE_ON_ONE_CHAT_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("oneOnOneChatMid", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetSquareMemberResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetSquareMemberResponseTupleSchemeFactory();

  public SquareMember squareMember; // required
  public SquareMemberRelation relation; // required
  public java.lang.String oneOnOneChatMid; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SQUARE_MEMBER((short)1, "squareMember"),
    RELATION((short)2, "relation"),
    ONE_ON_ONE_CHAT_MID((short)3, "oneOnOneChatMid");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SQUARE_MEMBER
          return SQUARE_MEMBER;
        case 2: // RELATION
          return RELATION;
        case 3: // ONE_ON_ONE_CHAT_MID
          return ONE_ON_ONE_CHAT_MID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SQUARE_MEMBER, new org.apache.thrift.meta_data.FieldMetaData("squareMember", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareMember.class)));
    tmpMap.put(_Fields.RELATION, new org.apache.thrift.meta_data.FieldMetaData("relation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareMemberRelation.class)));
    tmpMap.put(_Fields.ONE_ON_ONE_CHAT_MID, new org.apache.thrift.meta_data.FieldMetaData("oneOnOneChatMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSquareMemberResponse.class, metaDataMap);
  }

  public GetSquareMemberResponse() {
  }

  public GetSquareMemberResponse(
    SquareMember squareMember,
    SquareMemberRelation relation,
    java.lang.String oneOnOneChatMid)
  {
    this();
    this.squareMember = squareMember;
    this.relation = relation;
    this.oneOnOneChatMid = oneOnOneChatMid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetSquareMemberResponse(GetSquareMemberResponse other) {
    if (other.isSetSquareMember()) {
      this.squareMember = new SquareMember(other.squareMember);
    }
    if (other.isSetRelation()) {
      this.relation = new SquareMemberRelation(other.relation);
    }
    if (other.isSetOneOnOneChatMid()) {
      this.oneOnOneChatMid = other.oneOnOneChatMid;
    }
  }

  public GetSquareMemberResponse deepCopy() {
    return new GetSquareMemberResponse(this);
  }

  @Override
  public void clear() {
    this.squareMember = null;
    this.relation = null;
    this.oneOnOneChatMid = null;
  }

  public SquareMember getSquareMember() {
    return this.squareMember;
  }

  public GetSquareMemberResponse setSquareMember(SquareMember squareMember) {
    this.squareMember = squareMember;
    return this;
  }

  public void unsetSquareMember() {
    this.squareMember = null;
  }

  /** Returns true if field squareMember is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMember() {
    return this.squareMember != null;
  }

  public void setSquareMemberIsSet(boolean value) {
    if (!value) {
      this.squareMember = null;
    }
  }

  public SquareMemberRelation getRelation() {
    return this.relation;
  }

  public GetSquareMemberResponse setRelation(SquareMemberRelation relation) {
    this.relation = relation;
    return this;
  }

  public void unsetRelation() {
    this.relation = null;
  }

  /** Returns true if field relation is set (has been assigned a value) and false otherwise */
  public boolean isSetRelation() {
    return this.relation != null;
  }

  public void setRelationIsSet(boolean value) {
    if (!value) {
      this.relation = null;
    }
  }

  public java.lang.String getOneOnOneChatMid() {
    return this.oneOnOneChatMid;
  }

  public GetSquareMemberResponse setOneOnOneChatMid(java.lang.String oneOnOneChatMid) {
    this.oneOnOneChatMid = oneOnOneChatMid;
    return this;
  }

  public void unsetOneOnOneChatMid() {
    this.oneOnOneChatMid = null;
  }

  /** Returns true if field oneOnOneChatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetOneOnOneChatMid() {
    return this.oneOnOneChatMid != null;
  }

  public void setOneOnOneChatMidIsSet(boolean value) {
    if (!value) {
      this.oneOnOneChatMid = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SQUARE_MEMBER:
      if (value == null) {
        unsetSquareMember();
      } else {
        setSquareMember((SquareMember)value);
      }
      break;

    case RELATION:
      if (value == null) {
        unsetRelation();
      } else {
        setRelation((SquareMemberRelation)value);
      }
      break;

    case ONE_ON_ONE_CHAT_MID:
      if (value == null) {
        unsetOneOnOneChatMid();
      } else {
        setOneOnOneChatMid((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SQUARE_MEMBER:
      return getSquareMember();

    case RELATION:
      return getRelation();

    case ONE_ON_ONE_CHAT_MID:
      return getOneOnOneChatMid();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SQUARE_MEMBER:
      return isSetSquareMember();
    case RELATION:
      return isSetRelation();
    case ONE_ON_ONE_CHAT_MID:
      return isSetOneOnOneChatMid();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GetSquareMemberResponse)
      return this.equals((GetSquareMemberResponse)that);
    return false;
  }

  public boolean equals(GetSquareMemberResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squareMember = true && this.isSetSquareMember();
    boolean that_present_squareMember = true && that.isSetSquareMember();
    if (this_present_squareMember || that_present_squareMember) {
      if (!(this_present_squareMember && that_present_squareMember))
        return false;
      if (!this.squareMember.equals(that.squareMember))
        return false;
    }

    boolean this_present_relation = true && this.isSetRelation();
    boolean that_present_relation = true && that.isSetRelation();
    if (this_present_relation || that_present_relation) {
      if (!(this_present_relation && that_present_relation))
        return false;
      if (!this.relation.equals(that.relation))
        return false;
    }

    boolean this_present_oneOnOneChatMid = true && this.isSetOneOnOneChatMid();
    boolean that_present_oneOnOneChatMid = true && that.isSetOneOnOneChatMid();
    if (this_present_oneOnOneChatMid || that_present_oneOnOneChatMid) {
      if (!(this_present_oneOnOneChatMid && that_present_oneOnOneChatMid))
        return false;
      if (!this.oneOnOneChatMid.equals(that.oneOnOneChatMid))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSquareMember()) ? 131071 : 524287);
    if (isSetSquareMember())
      hashCode = hashCode * 8191 + squareMember.hashCode();

    hashCode = hashCode * 8191 + ((isSetRelation()) ? 131071 : 524287);
    if (isSetRelation())
      hashCode = hashCode * 8191 + relation.hashCode();

    hashCode = hashCode * 8191 + ((isSetOneOnOneChatMid()) ? 131071 : 524287);
    if (isSetOneOnOneChatMid())
      hashCode = hashCode * 8191 + oneOnOneChatMid.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetSquareMemberResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSquareMember()).compareTo(other.isSetSquareMember());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMember()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareMember, other.squareMember);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRelation()).compareTo(other.isSetRelation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relation, other.relation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOneOnOneChatMid()).compareTo(other.isSetOneOnOneChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOneOnOneChatMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oneOnOneChatMid, other.oneOnOneChatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetSquareMemberResponse(");
    boolean first = true;

    sb.append("squareMember:");
    if (this.squareMember == null) {
      sb.append("null");
    } else {
      sb.append(this.squareMember);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relation:");
    if (this.relation == null) {
      sb.append("null");
    } else {
      sb.append(this.relation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("oneOnOneChatMid:");
    if (this.oneOnOneChatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.oneOnOneChatMid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (squareMember != null) {
      squareMember.validate();
    }
    if (relation != null) {
      relation.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetSquareMemberResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetSquareMemberResponseStandardScheme getScheme() {
      return new GetSquareMemberResponseStandardScheme();
    }
  }

  private static class GetSquareMemberResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetSquareMemberResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetSquareMemberResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SQUARE_MEMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.squareMember = new SquareMember();
              struct.squareMember.read(iprot);
              struct.setSquareMemberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RELATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.relation = new SquareMemberRelation();
              struct.relation.read(iprot);
              struct.setRelationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ONE_ON_ONE_CHAT_MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.oneOnOneChatMid = iprot.readString();
              struct.setOneOnOneChatMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetSquareMemberResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.squareMember != null) {
        oprot.writeFieldBegin(SQUARE_MEMBER_FIELD_DESC);
        struct.squareMember.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.relation != null) {
        oprot.writeFieldBegin(RELATION_FIELD_DESC);
        struct.relation.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.oneOnOneChatMid != null) {
        oprot.writeFieldBegin(ONE_ON_ONE_CHAT_MID_FIELD_DESC);
        oprot.writeString(struct.oneOnOneChatMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetSquareMemberResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetSquareMemberResponseTupleScheme getScheme() {
      return new GetSquareMemberResponseTupleScheme();
    }
  }

  private static class GetSquareMemberResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetSquareMemberResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetSquareMemberResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSquareMember()) {
        optionals.set(0);
      }
      if (struct.isSetRelation()) {
        optionals.set(1);
      }
      if (struct.isSetOneOnOneChatMid()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSquareMember()) {
        struct.squareMember.write(oprot);
      }
      if (struct.isSetRelation()) {
        struct.relation.write(oprot);
      }
      if (struct.isSetOneOnOneChatMid()) {
        oprot.writeString(struct.oneOnOneChatMid);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetSquareMemberResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.squareMember = new SquareMember();
        struct.squareMember.read(iprot);
        struct.setSquareMemberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.relation = new SquareMemberRelation();
        struct.relation.read(iprot);
        struct.setRelationIsSet(true);
      }
      if (incoming.get(2)) {
        struct.oneOnOneChatMid = iprot.readString();
        struct.setOneOnOneChatMidIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

