/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-04-18")
public class ProductList implements org.apache.thrift.TBase<ProductList, ProductList._Fields>, java.io.Serializable, Cloneable, Comparable<ProductList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ProductList");

  private static final org.apache.thrift.protocol.TField HAS_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasNext", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField BANNER_SEQUENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("bannerSequence", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField BANNER_TARGET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("bannerTargetType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField BANNER_TARGET_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("bannerTargetPath", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PRODUCT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("productList", org.apache.thrift.protocol.TType.LIST, (short)7);
  private static final org.apache.thrift.protocol.TField BANNER_LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("bannerLang", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ProductListStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ProductListTupleSchemeFactory();

  public boolean hasNext; // required
  public long bannerSequence; // required
  /**
   * 
   * @see ProductBannerLinkType
   */
  public ProductBannerLinkType bannerTargetType; // required
  public java.lang.String bannerTargetPath; // required
  public java.util.List<Product> productList; // required
  public java.lang.String bannerLang; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HAS_NEXT((short)1, "hasNext"),
    BANNER_SEQUENCE((short)4, "bannerSequence"),
    /**
     * 
     * @see ProductBannerLinkType
     */
    BANNER_TARGET_TYPE((short)5, "bannerTargetType"),
    BANNER_TARGET_PATH((short)6, "bannerTargetPath"),
    PRODUCT_LIST((short)7, "productList"),
    BANNER_LANG((short)8, "bannerLang");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HAS_NEXT
          return HAS_NEXT;
        case 4: // BANNER_SEQUENCE
          return BANNER_SEQUENCE;
        case 5: // BANNER_TARGET_TYPE
          return BANNER_TARGET_TYPE;
        case 6: // BANNER_TARGET_PATH
          return BANNER_TARGET_PATH;
        case 7: // PRODUCT_LIST
          return PRODUCT_LIST;
        case 8: // BANNER_LANG
          return BANNER_LANG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASNEXT_ISSET_ID = 0;
  private static final int __BANNERSEQUENCE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HAS_NEXT, new org.apache.thrift.meta_data.FieldMetaData("hasNext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.BANNER_SEQUENCE, new org.apache.thrift.meta_data.FieldMetaData("bannerSequence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BANNER_TARGET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("bannerTargetType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProductBannerLinkType.class)));
    tmpMap.put(_Fields.BANNER_TARGET_PATH, new org.apache.thrift.meta_data.FieldMetaData("bannerTargetPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_LIST, new org.apache.thrift.meta_data.FieldMetaData("productList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Product.class))));
    tmpMap.put(_Fields.BANNER_LANG, new org.apache.thrift.meta_data.FieldMetaData("bannerLang", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ProductList.class, metaDataMap);
  }

  public ProductList() {
  }

  public ProductList(
    boolean hasNext,
    long bannerSequence,
    ProductBannerLinkType bannerTargetType,
    java.lang.String bannerTargetPath,
    java.util.List<Product> productList,
    java.lang.String bannerLang)
  {
    this();
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    this.bannerSequence = bannerSequence;
    setBannerSequenceIsSet(true);
    this.bannerTargetType = bannerTargetType;
    this.bannerTargetPath = bannerTargetPath;
    this.productList = productList;
    this.bannerLang = bannerLang;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductList(ProductList other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hasNext = other.hasNext;
    this.bannerSequence = other.bannerSequence;
    if (other.isSetBannerTargetType()) {
      this.bannerTargetType = other.bannerTargetType;
    }
    if (other.isSetBannerTargetPath()) {
      this.bannerTargetPath = other.bannerTargetPath;
    }
    if (other.isSetProductList()) {
      java.util.List<Product> __this__productList = new java.util.ArrayList<Product>(other.productList.size());
      for (Product other_element : other.productList) {
        __this__productList.add(new Product(other_element));
      }
      this.productList = __this__productList;
    }
    if (other.isSetBannerLang()) {
      this.bannerLang = other.bannerLang;
    }
  }

  public ProductList deepCopy() {
    return new ProductList(this);
  }

  @Override
  public void clear() {
    setHasNextIsSet(false);
    this.hasNext = false;
    setBannerSequenceIsSet(false);
    this.bannerSequence = 0;
    this.bannerTargetType = null;
    this.bannerTargetPath = null;
    this.productList = null;
    this.bannerLang = null;
  }

  public boolean isHasNext() {
    return this.hasNext;
  }

  public ProductList setHasNext(boolean hasNext) {
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    return this;
  }

  public void unsetHasNext() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  /** Returns true if field hasNext is set (has been assigned a value) and false otherwise */
  public boolean isSetHasNext() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  public void setHasNextIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASNEXT_ISSET_ID, value);
  }

  public long getBannerSequence() {
    return this.bannerSequence;
  }

  public ProductList setBannerSequence(long bannerSequence) {
    this.bannerSequence = bannerSequence;
    setBannerSequenceIsSet(true);
    return this;
  }

  public void unsetBannerSequence() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BANNERSEQUENCE_ISSET_ID);
  }

  /** Returns true if field bannerSequence is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerSequence() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BANNERSEQUENCE_ISSET_ID);
  }

  public void setBannerSequenceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BANNERSEQUENCE_ISSET_ID, value);
  }

  /**
   * 
   * @see ProductBannerLinkType
   */
  public ProductBannerLinkType getBannerTargetType() {
    return this.bannerTargetType;
  }

  /**
   * 
   * @see ProductBannerLinkType
   */
  public ProductList setBannerTargetType(ProductBannerLinkType bannerTargetType) {
    this.bannerTargetType = bannerTargetType;
    return this;
  }

  public void unsetBannerTargetType() {
    this.bannerTargetType = null;
  }

  /** Returns true if field bannerTargetType is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerTargetType() {
    return this.bannerTargetType != null;
  }

  public void setBannerTargetTypeIsSet(boolean value) {
    if (!value) {
      this.bannerTargetType = null;
    }
  }

  public java.lang.String getBannerTargetPath() {
    return this.bannerTargetPath;
  }

  public ProductList setBannerTargetPath(java.lang.String bannerTargetPath) {
    this.bannerTargetPath = bannerTargetPath;
    return this;
  }

  public void unsetBannerTargetPath() {
    this.bannerTargetPath = null;
  }

  /** Returns true if field bannerTargetPath is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerTargetPath() {
    return this.bannerTargetPath != null;
  }

  public void setBannerTargetPathIsSet(boolean value) {
    if (!value) {
      this.bannerTargetPath = null;
    }
  }

  public int getProductListSize() {
    return (this.productList == null) ? 0 : this.productList.size();
  }

  public java.util.Iterator<Product> getProductListIterator() {
    return (this.productList == null) ? null : this.productList.iterator();
  }

  public void addToProductList(Product elem) {
    if (this.productList == null) {
      this.productList = new java.util.ArrayList<Product>();
    }
    this.productList.add(elem);
  }

  public java.util.List<Product> getProductList() {
    return this.productList;
  }

  public ProductList setProductList(java.util.List<Product> productList) {
    this.productList = productList;
    return this;
  }

  public void unsetProductList() {
    this.productList = null;
  }

  /** Returns true if field productList is set (has been assigned a value) and false otherwise */
  public boolean isSetProductList() {
    return this.productList != null;
  }

  public void setProductListIsSet(boolean value) {
    if (!value) {
      this.productList = null;
    }
  }

  public java.lang.String getBannerLang() {
    return this.bannerLang;
  }

  public ProductList setBannerLang(java.lang.String bannerLang) {
    this.bannerLang = bannerLang;
    return this;
  }

  public void unsetBannerLang() {
    this.bannerLang = null;
  }

  /** Returns true if field bannerLang is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerLang() {
    return this.bannerLang != null;
  }

  public void setBannerLangIsSet(boolean value) {
    if (!value) {
      this.bannerLang = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HAS_NEXT:
      if (value == null) {
        unsetHasNext();
      } else {
        setHasNext((java.lang.Boolean)value);
      }
      break;

    case BANNER_SEQUENCE:
      if (value == null) {
        unsetBannerSequence();
      } else {
        setBannerSequence((java.lang.Long)value);
      }
      break;

    case BANNER_TARGET_TYPE:
      if (value == null) {
        unsetBannerTargetType();
      } else {
        setBannerTargetType((ProductBannerLinkType)value);
      }
      break;

    case BANNER_TARGET_PATH:
      if (value == null) {
        unsetBannerTargetPath();
      } else {
        setBannerTargetPath((java.lang.String)value);
      }
      break;

    case PRODUCT_LIST:
      if (value == null) {
        unsetProductList();
      } else {
        setProductList((java.util.List<Product>)value);
      }
      break;

    case BANNER_LANG:
      if (value == null) {
        unsetBannerLang();
      } else {
        setBannerLang((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HAS_NEXT:
      return isHasNext();

    case BANNER_SEQUENCE:
      return getBannerSequence();

    case BANNER_TARGET_TYPE:
      return getBannerTargetType();

    case BANNER_TARGET_PATH:
      return getBannerTargetPath();

    case PRODUCT_LIST:
      return getProductList();

    case BANNER_LANG:
      return getBannerLang();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HAS_NEXT:
      return isSetHasNext();
    case BANNER_SEQUENCE:
      return isSetBannerSequence();
    case BANNER_TARGET_TYPE:
      return isSetBannerTargetType();
    case BANNER_TARGET_PATH:
      return isSetBannerTargetPath();
    case PRODUCT_LIST:
      return isSetProductList();
    case BANNER_LANG:
      return isSetBannerLang();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductList)
      return this.equals((ProductList)that);
    return false;
  }

  public boolean equals(ProductList that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hasNext = true;
    boolean that_present_hasNext = true;
    if (this_present_hasNext || that_present_hasNext) {
      if (!(this_present_hasNext && that_present_hasNext))
        return false;
      if (this.hasNext != that.hasNext)
        return false;
    }

    boolean this_present_bannerSequence = true;
    boolean that_present_bannerSequence = true;
    if (this_present_bannerSequence || that_present_bannerSequence) {
      if (!(this_present_bannerSequence && that_present_bannerSequence))
        return false;
      if (this.bannerSequence != that.bannerSequence)
        return false;
    }

    boolean this_present_bannerTargetType = true && this.isSetBannerTargetType();
    boolean that_present_bannerTargetType = true && that.isSetBannerTargetType();
    if (this_present_bannerTargetType || that_present_bannerTargetType) {
      if (!(this_present_bannerTargetType && that_present_bannerTargetType))
        return false;
      if (!this.bannerTargetType.equals(that.bannerTargetType))
        return false;
    }

    boolean this_present_bannerTargetPath = true && this.isSetBannerTargetPath();
    boolean that_present_bannerTargetPath = true && that.isSetBannerTargetPath();
    if (this_present_bannerTargetPath || that_present_bannerTargetPath) {
      if (!(this_present_bannerTargetPath && that_present_bannerTargetPath))
        return false;
      if (!this.bannerTargetPath.equals(that.bannerTargetPath))
        return false;
    }

    boolean this_present_productList = true && this.isSetProductList();
    boolean that_present_productList = true && that.isSetProductList();
    if (this_present_productList || that_present_productList) {
      if (!(this_present_productList && that_present_productList))
        return false;
      if (!this.productList.equals(that.productList))
        return false;
    }

    boolean this_present_bannerLang = true && this.isSetBannerLang();
    boolean that_present_bannerLang = true && that.isSetBannerLang();
    if (this_present_bannerLang || that_present_bannerLang) {
      if (!(this_present_bannerLang && that_present_bannerLang))
        return false;
      if (!this.bannerLang.equals(that.bannerLang))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((hasNext) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(bannerSequence);

    hashCode = hashCode * 8191 + ((isSetBannerTargetType()) ? 131071 : 524287);
    if (isSetBannerTargetType())
      hashCode = hashCode * 8191 + bannerTargetType.getValue();

    hashCode = hashCode * 8191 + ((isSetBannerTargetPath()) ? 131071 : 524287);
    if (isSetBannerTargetPath())
      hashCode = hashCode * 8191 + bannerTargetPath.hashCode();

    hashCode = hashCode * 8191 + ((isSetProductList()) ? 131071 : 524287);
    if (isSetProductList())
      hashCode = hashCode * 8191 + productList.hashCode();

    hashCode = hashCode * 8191 + ((isSetBannerLang()) ? 131071 : 524287);
    if (isSetBannerLang())
      hashCode = hashCode * 8191 + bannerLang.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ProductList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHasNext()).compareTo(other.isSetHasNext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasNext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasNext, other.hasNext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBannerSequence()).compareTo(other.isSetBannerSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerSequence()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bannerSequence, other.bannerSequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBannerTargetType()).compareTo(other.isSetBannerTargetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerTargetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bannerTargetType, other.bannerTargetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBannerTargetPath()).compareTo(other.isSetBannerTargetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerTargetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bannerTargetPath, other.bannerTargetPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProductList()).compareTo(other.isSetProductList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productList, other.productList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBannerLang()).compareTo(other.isSetBannerLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerLang()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bannerLang, other.bannerLang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ProductList(");
    boolean first = true;

    sb.append("hasNext:");
    sb.append(this.hasNext);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannerSequence:");
    sb.append(this.bannerSequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannerTargetType:");
    if (this.bannerTargetType == null) {
      sb.append("null");
    } else {
      sb.append(this.bannerTargetType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannerTargetPath:");
    if (this.bannerTargetPath == null) {
      sb.append("null");
    } else {
      sb.append(this.bannerTargetPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productList:");
    if (this.productList == null) {
      sb.append("null");
    } else {
      sb.append(this.productList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannerLang:");
    if (this.bannerLang == null) {
      sb.append("null");
    } else {
      sb.append(this.bannerLang);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ProductListStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProductListStandardScheme getScheme() {
      return new ProductListStandardScheme();
    }
  }

  private static class ProductListStandardScheme extends org.apache.thrift.scheme.StandardScheme<ProductList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ProductList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HAS_NEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasNext = iprot.readBool();
              struct.setHasNextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BANNER_SEQUENCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.bannerSequence = iprot.readI64();
              struct.setBannerSequenceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BANNER_TARGET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.bannerTargetType = ProductBannerLinkType.findByValue(iprot.readI32());
              struct.setBannerTargetTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BANNER_TARGET_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bannerTargetPath = iprot.readString();
              struct.setBannerTargetPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PRODUCT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list394 = iprot.readListBegin();
                struct.productList = new java.util.ArrayList<Product>(_list394.size);
                Product _elem395;
                for (int _i396 = 0; _i396 < _list394.size; ++_i396)
                {
                  _elem395 = new Product();
                  _elem395.read(iprot);
                  struct.productList.add(_elem395);
                }
                iprot.readListEnd();
              }
              struct.setProductListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BANNER_LANG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.bannerLang = iprot.readString();
              struct.setBannerLangIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ProductList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
      oprot.writeBool(struct.hasNext);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BANNER_SEQUENCE_FIELD_DESC);
      oprot.writeI64(struct.bannerSequence);
      oprot.writeFieldEnd();
      if (struct.bannerTargetType != null) {
        oprot.writeFieldBegin(BANNER_TARGET_TYPE_FIELD_DESC);
        oprot.writeI32(struct.bannerTargetType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.bannerTargetPath != null) {
        oprot.writeFieldBegin(BANNER_TARGET_PATH_FIELD_DESC);
        oprot.writeString(struct.bannerTargetPath);
        oprot.writeFieldEnd();
      }
      if (struct.productList != null) {
        oprot.writeFieldBegin(PRODUCT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.productList.size()));
          for (Product _iter397 : struct.productList)
          {
            _iter397.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.bannerLang != null) {
        oprot.writeFieldBegin(BANNER_LANG_FIELD_DESC);
        oprot.writeString(struct.bannerLang);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ProductListTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ProductListTupleScheme getScheme() {
      return new ProductListTupleScheme();
    }
  }

  private static class ProductListTupleScheme extends org.apache.thrift.scheme.TupleScheme<ProductList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ProductList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHasNext()) {
        optionals.set(0);
      }
      if (struct.isSetBannerSequence()) {
        optionals.set(1);
      }
      if (struct.isSetBannerTargetType()) {
        optionals.set(2);
      }
      if (struct.isSetBannerTargetPath()) {
        optionals.set(3);
      }
      if (struct.isSetProductList()) {
        optionals.set(4);
      }
      if (struct.isSetBannerLang()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetHasNext()) {
        oprot.writeBool(struct.hasNext);
      }
      if (struct.isSetBannerSequence()) {
        oprot.writeI64(struct.bannerSequence);
      }
      if (struct.isSetBannerTargetType()) {
        oprot.writeI32(struct.bannerTargetType.getValue());
      }
      if (struct.isSetBannerTargetPath()) {
        oprot.writeString(struct.bannerTargetPath);
      }
      if (struct.isSetProductList()) {
        {
          oprot.writeI32(struct.productList.size());
          for (Product _iter398 : struct.productList)
          {
            _iter398.write(oprot);
          }
        }
      }
      if (struct.isSetBannerLang()) {
        oprot.writeString(struct.bannerLang);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ProductList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.hasNext = iprot.readBool();
        struct.setHasNextIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bannerSequence = iprot.readI64();
        struct.setBannerSequenceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.bannerTargetType = ProductBannerLinkType.findByValue(iprot.readI32());
        struct.setBannerTargetTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.bannerTargetPath = iprot.readString();
        struct.setBannerTargetPathIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list399 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.productList = new java.util.ArrayList<Product>(_list399.size);
          Product _elem400;
          for (int _i401 = 0; _i401 < _list399.size; ++_i401)
          {
            _elem400 = new Product();
            _elem400.read(iprot);
            struct.productList.add(_elem400);
          }
        }
        struct.setProductListIsSet(true);
      }
      if (incoming.get(5)) {
        struct.bannerLang = iprot.readString();
        struct.setBannerLangIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

