/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class UpdateProfileAttributesRequest implements org.apache.thrift.TBase<UpdateProfileAttributesRequest, UpdateProfileAttributesRequest._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateProfileAttributesRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateProfileAttributesRequest");

  private static final org.apache.thrift.protocol.TField PROFILE_ATTRIBUTES_FIELD_DESC = new org.apache.thrift.protocol.TField("profileAttributes", org.apache.thrift.protocol.TType.MAP, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new UpdateProfileAttributesRequestStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new UpdateProfileAttributesRequestTupleSchemeFactory();

  public java.util.Map<ProfileAttribute,ProfileContent> profileAttributes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROFILE_ATTRIBUTES((short)1, "profileAttributes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROFILE_ATTRIBUTES
          return PROFILE_ATTRIBUTES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROFILE_ATTRIBUTES, new org.apache.thrift.meta_data.FieldMetaData("profileAttributes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ProfileAttribute.class), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ProfileContent.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateProfileAttributesRequest.class, metaDataMap);
  }

  public UpdateProfileAttributesRequest() {
  }

  public UpdateProfileAttributesRequest(
    java.util.Map<ProfileAttribute,ProfileContent> profileAttributes)
  {
    this();
    this.profileAttributes = profileAttributes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpdateProfileAttributesRequest(UpdateProfileAttributesRequest other) {
    if (other.isSetProfileAttributes()) {
      java.util.Map<ProfileAttribute,ProfileContent> __this__profileAttributes = new java.util.EnumMap<ProfileAttribute,ProfileContent>(ProfileAttribute.class);
      for (java.util.Map.Entry<ProfileAttribute, ProfileContent> other_element : other.profileAttributes.entrySet()) {

        ProfileAttribute other_element_key = other_element.getKey();
        ProfileContent other_element_value = other_element.getValue();

        ProfileAttribute __this__profileAttributes_copy_key = other_element_key;

        ProfileContent __this__profileAttributes_copy_value = new ProfileContent(other_element_value);

        __this__profileAttributes.put(__this__profileAttributes_copy_key, __this__profileAttributes_copy_value);
      }
      this.profileAttributes = __this__profileAttributes;
    }
  }

  public UpdateProfileAttributesRequest deepCopy() {
    return new UpdateProfileAttributesRequest(this);
  }

  @Override
  public void clear() {
    this.profileAttributes = null;
  }

  public int getProfileAttributesSize() {
    return (this.profileAttributes == null) ? 0 : this.profileAttributes.size();
  }

  public void putToProfileAttributes(ProfileAttribute key, ProfileContent val) {
    if (this.profileAttributes == null) {
      this.profileAttributes = new java.util.EnumMap<ProfileAttribute,ProfileContent>(ProfileAttribute.class);
    }
    this.profileAttributes.put(key, val);
  }

  public java.util.Map<ProfileAttribute,ProfileContent> getProfileAttributes() {
    return this.profileAttributes;
  }

  public UpdateProfileAttributesRequest setProfileAttributes(java.util.Map<ProfileAttribute,ProfileContent> profileAttributes) {
    this.profileAttributes = profileAttributes;
    return this;
  }

  public void unsetProfileAttributes() {
    this.profileAttributes = null;
  }

  /** Returns true if field profileAttributes is set (has been assigned a value) and false otherwise */
  public boolean isSetProfileAttributes() {
    return this.profileAttributes != null;
  }

  public void setProfileAttributesIsSet(boolean value) {
    if (!value) {
      this.profileAttributes = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PROFILE_ATTRIBUTES:
      if (value == null) {
        unsetProfileAttributes();
      } else {
        setProfileAttributes((java.util.Map<ProfileAttribute,ProfileContent>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PROFILE_ATTRIBUTES:
      return getProfileAttributes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PROFILE_ATTRIBUTES:
      return isSetProfileAttributes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof UpdateProfileAttributesRequest)
      return this.equals((UpdateProfileAttributesRequest)that);
    return false;
  }

  public boolean equals(UpdateProfileAttributesRequest that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_profileAttributes = true && this.isSetProfileAttributes();
    boolean that_present_profileAttributes = true && that.isSetProfileAttributes();
    if (this_present_profileAttributes || that_present_profileAttributes) {
      if (!(this_present_profileAttributes && that_present_profileAttributes))
        return false;
      if (!this.profileAttributes.equals(that.profileAttributes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProfileAttributes()) ? 131071 : 524287);
    if (isSetProfileAttributes())
      hashCode = hashCode * 8191 + profileAttributes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(UpdateProfileAttributesRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetProfileAttributes()).compareTo(other.isSetProfileAttributes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProfileAttributes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.profileAttributes, other.profileAttributes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("UpdateProfileAttributesRequest(");
    boolean first = true;

    sb.append("profileAttributes:");
    if (this.profileAttributes == null) {
      sb.append("null");
    } else {
      sb.append(this.profileAttributes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UpdateProfileAttributesRequestStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateProfileAttributesRequestStandardScheme getScheme() {
      return new UpdateProfileAttributesRequestStandardScheme();
    }
  }

  private static class UpdateProfileAttributesRequestStandardScheme extends org.apache.thrift.scheme.StandardScheme<UpdateProfileAttributesRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateProfileAttributesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROFILE_ATTRIBUTES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.profileAttributes = new java.util.EnumMap<ProfileAttribute,ProfileContent>(ProfileAttribute.class);
                ProfileAttribute _key27;
                ProfileContent _val28;
                for (int _i29 = 0; _i29 < _map26.size; ++_i29)
                {
                  _key27 = ProfileAttribute.findByValue(iprot.readI32());
                  _val28 = new ProfileContent();
                  _val28.read(iprot);
                  if (_key27 != null)
                  {
                    struct.profileAttributes.put(_key27, _val28);
                  }
                }
                iprot.readMapEnd();
              }
              struct.setProfileAttributesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateProfileAttributesRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.profileAttributes != null) {
        oprot.writeFieldBegin(PROFILE_ATTRIBUTES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, struct.profileAttributes.size()));
          for (java.util.Map.Entry<ProfileAttribute, ProfileContent> _iter30 : struct.profileAttributes.entrySet())
          {
            oprot.writeI32(_iter30.getKey().getValue());
            _iter30.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UpdateProfileAttributesRequestTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public UpdateProfileAttributesRequestTupleScheme getScheme() {
      return new UpdateProfileAttributesRequestTupleScheme();
    }
  }

  private static class UpdateProfileAttributesRequestTupleScheme extends org.apache.thrift.scheme.TupleScheme<UpdateProfileAttributesRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, UpdateProfileAttributesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProfileAttributes()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetProfileAttributes()) {
        {
          oprot.writeI32(struct.profileAttributes.size());
          for (java.util.Map.Entry<ProfileAttribute, ProfileContent> _iter31 : struct.profileAttributes.entrySet())
          {
            oprot.writeI32(_iter31.getKey().getValue());
            _iter31.getValue().write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, UpdateProfileAttributesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.profileAttributes = new java.util.EnumMap<ProfileAttribute,ProfileContent>(ProfileAttribute.class);
          ProfileAttribute _key33;
          ProfileContent _val34;
          for (int _i35 = 0; _i35 < _map32.size; ++_i35)
          {
            _key33 = ProfileAttribute.findByValue(iprot.readI32());
            _val34 = new ProfileContent();
            _val34.read(iprot);
            if (_key33 != null)
            {
              struct.profileAttributes.put(_key33, _val34);
            }
          }
        }
        struct.setProfileAttributesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

