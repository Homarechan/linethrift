/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class StickerProperty implements org.apache.thrift.TBase<StickerProperty, StickerProperty._Fields>, java.io.Serializable, Cloneable, Comparable<StickerProperty> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StickerProperty");

  private static final org.apache.thrift.protocol.TField HAS_ANIMATION_FIELD_DESC = new org.apache.thrift.protocol.TField("hasAnimation", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField HAS_SOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("hasSound", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField HAS_POPUP_FIELD_DESC = new org.apache.thrift.protocol.TField("hasPopup", org.apache.thrift.protocol.TType.BOOL, (short)3);
  private static final org.apache.thrift.protocol.TField STICKER_RESOURCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerResourceType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField STICKER_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerOptions", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COMPACT_STICKER_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("compactStickerOptions", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField STICKER_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerHash", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STICKER_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("stickerIds", org.apache.thrift.protocol.TType.SET, (short)8);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StickerPropertyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StickerPropertyTupleSchemeFactory();

  public boolean hasAnimation; // required
  public boolean hasSound; // required
  public boolean hasPopup; // required
  /**
   * 
   * @see SRType
   */
  public SRType stickerResourceType; // required
  public java.lang.String stickerOptions; // required
  public int compactStickerOptions; // required
  public java.lang.String stickerHash; // required
  public java.util.Set<java.lang.String> stickerIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HAS_ANIMATION((short)1, "hasAnimation"),
    HAS_SOUND((short)2, "hasSound"),
    HAS_POPUP((short)3, "hasPopup"),
    /**
     * 
     * @see SRType
     */
    STICKER_RESOURCE_TYPE((short)4, "stickerResourceType"),
    STICKER_OPTIONS((short)5, "stickerOptions"),
    COMPACT_STICKER_OPTIONS((short)6, "compactStickerOptions"),
    STICKER_HASH((short)7, "stickerHash"),
    STICKER_IDS((short)8, "stickerIds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HAS_ANIMATION
          return HAS_ANIMATION;
        case 2: // HAS_SOUND
          return HAS_SOUND;
        case 3: // HAS_POPUP
          return HAS_POPUP;
        case 4: // STICKER_RESOURCE_TYPE
          return STICKER_RESOURCE_TYPE;
        case 5: // STICKER_OPTIONS
          return STICKER_OPTIONS;
        case 6: // COMPACT_STICKER_OPTIONS
          return COMPACT_STICKER_OPTIONS;
        case 7: // STICKER_HASH
          return STICKER_HASH;
        case 8: // STICKER_IDS
          return STICKER_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASANIMATION_ISSET_ID = 0;
  private static final int __HASSOUND_ISSET_ID = 1;
  private static final int __HASPOPUP_ISSET_ID = 2;
  private static final int __COMPACTSTICKEROPTIONS_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HAS_ANIMATION, new org.apache.thrift.meta_data.FieldMetaData("hasAnimation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_SOUND, new org.apache.thrift.meta_data.FieldMetaData("hasSound", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_POPUP, new org.apache.thrift.meta_data.FieldMetaData("hasPopup", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STICKER_RESOURCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("stickerResourceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SRType.class)));
    tmpMap.put(_Fields.STICKER_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("stickerOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COMPACT_STICKER_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("compactStickerOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STICKER_HASH, new org.apache.thrift.meta_data.FieldMetaData("stickerHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STICKER_IDS, new org.apache.thrift.meta_data.FieldMetaData("stickerIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StickerProperty.class, metaDataMap);
  }

  public StickerProperty() {
  }

  public StickerProperty(
    boolean hasAnimation,
    boolean hasSound,
    boolean hasPopup,
    SRType stickerResourceType,
    java.lang.String stickerOptions,
    int compactStickerOptions,
    java.lang.String stickerHash,
    java.util.Set<java.lang.String> stickerIds)
  {
    this();
    this.hasAnimation = hasAnimation;
    setHasAnimationIsSet(true);
    this.hasSound = hasSound;
    setHasSoundIsSet(true);
    this.hasPopup = hasPopup;
    setHasPopupIsSet(true);
    this.stickerResourceType = stickerResourceType;
    this.stickerOptions = stickerOptions;
    this.compactStickerOptions = compactStickerOptions;
    setCompactStickerOptionsIsSet(true);
    this.stickerHash = stickerHash;
    this.stickerIds = stickerIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StickerProperty(StickerProperty other) {
    __isset_bitfield = other.__isset_bitfield;
    this.hasAnimation = other.hasAnimation;
    this.hasSound = other.hasSound;
    this.hasPopup = other.hasPopup;
    if (other.isSetStickerResourceType()) {
      this.stickerResourceType = other.stickerResourceType;
    }
    if (other.isSetStickerOptions()) {
      this.stickerOptions = other.stickerOptions;
    }
    this.compactStickerOptions = other.compactStickerOptions;
    if (other.isSetStickerHash()) {
      this.stickerHash = other.stickerHash;
    }
    if (other.isSetStickerIds()) {
      java.util.Set<java.lang.String> __this__stickerIds = new java.util.HashSet<java.lang.String>(other.stickerIds);
      this.stickerIds = __this__stickerIds;
    }
  }

  public StickerProperty deepCopy() {
    return new StickerProperty(this);
  }

  @Override
  public void clear() {
    setHasAnimationIsSet(false);
    this.hasAnimation = false;
    setHasSoundIsSet(false);
    this.hasSound = false;
    setHasPopupIsSet(false);
    this.hasPopup = false;
    this.stickerResourceType = null;
    this.stickerOptions = null;
    setCompactStickerOptionsIsSet(false);
    this.compactStickerOptions = 0;
    this.stickerHash = null;
    this.stickerIds = null;
  }

  public boolean isHasAnimation() {
    return this.hasAnimation;
  }

  public StickerProperty setHasAnimation(boolean hasAnimation) {
    this.hasAnimation = hasAnimation;
    setHasAnimationIsSet(true);
    return this;
  }

  public void unsetHasAnimation() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASANIMATION_ISSET_ID);
  }

  /** Returns true if field hasAnimation is set (has been assigned a value) and false otherwise */
  public boolean isSetHasAnimation() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASANIMATION_ISSET_ID);
  }

  public void setHasAnimationIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASANIMATION_ISSET_ID, value);
  }

  public boolean isHasSound() {
    return this.hasSound;
  }

  public StickerProperty setHasSound(boolean hasSound) {
    this.hasSound = hasSound;
    setHasSoundIsSet(true);
    return this;
  }

  public void unsetHasSound() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASSOUND_ISSET_ID);
  }

  /** Returns true if field hasSound is set (has been assigned a value) and false otherwise */
  public boolean isSetHasSound() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASSOUND_ISSET_ID);
  }

  public void setHasSoundIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASSOUND_ISSET_ID, value);
  }

  public boolean isHasPopup() {
    return this.hasPopup;
  }

  public StickerProperty setHasPopup(boolean hasPopup) {
    this.hasPopup = hasPopup;
    setHasPopupIsSet(true);
    return this;
  }

  public void unsetHasPopup() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASPOPUP_ISSET_ID);
  }

  /** Returns true if field hasPopup is set (has been assigned a value) and false otherwise */
  public boolean isSetHasPopup() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASPOPUP_ISSET_ID);
  }

  public void setHasPopupIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASPOPUP_ISSET_ID, value);
  }

  /**
   * 
   * @see SRType
   */
  public SRType getStickerResourceType() {
    return this.stickerResourceType;
  }

  /**
   * 
   * @see SRType
   */
  public StickerProperty setStickerResourceType(SRType stickerResourceType) {
    this.stickerResourceType = stickerResourceType;
    return this;
  }

  public void unsetStickerResourceType() {
    this.stickerResourceType = null;
  }

  /** Returns true if field stickerResourceType is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerResourceType() {
    return this.stickerResourceType != null;
  }

  public void setStickerResourceTypeIsSet(boolean value) {
    if (!value) {
      this.stickerResourceType = null;
    }
  }

  public java.lang.String getStickerOptions() {
    return this.stickerOptions;
  }

  public StickerProperty setStickerOptions(java.lang.String stickerOptions) {
    this.stickerOptions = stickerOptions;
    return this;
  }

  public void unsetStickerOptions() {
    this.stickerOptions = null;
  }

  /** Returns true if field stickerOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerOptions() {
    return this.stickerOptions != null;
  }

  public void setStickerOptionsIsSet(boolean value) {
    if (!value) {
      this.stickerOptions = null;
    }
  }

  public int getCompactStickerOptions() {
    return this.compactStickerOptions;
  }

  public StickerProperty setCompactStickerOptions(int compactStickerOptions) {
    this.compactStickerOptions = compactStickerOptions;
    setCompactStickerOptionsIsSet(true);
    return this;
  }

  public void unsetCompactStickerOptions() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPACTSTICKEROPTIONS_ISSET_ID);
  }

  /** Returns true if field compactStickerOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetCompactStickerOptions() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPACTSTICKEROPTIONS_ISSET_ID);
  }

  public void setCompactStickerOptionsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPACTSTICKEROPTIONS_ISSET_ID, value);
  }

  public java.lang.String getStickerHash() {
    return this.stickerHash;
  }

  public StickerProperty setStickerHash(java.lang.String stickerHash) {
    this.stickerHash = stickerHash;
    return this;
  }

  public void unsetStickerHash() {
    this.stickerHash = null;
  }

  /** Returns true if field stickerHash is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerHash() {
    return this.stickerHash != null;
  }

  public void setStickerHashIsSet(boolean value) {
    if (!value) {
      this.stickerHash = null;
    }
  }

  public int getStickerIdsSize() {
    return (this.stickerIds == null) ? 0 : this.stickerIds.size();
  }

  public java.util.Iterator<java.lang.String> getStickerIdsIterator() {
    return (this.stickerIds == null) ? null : this.stickerIds.iterator();
  }

  public void addToStickerIds(java.lang.String elem) {
    if (this.stickerIds == null) {
      this.stickerIds = new java.util.HashSet<java.lang.String>();
    }
    this.stickerIds.add(elem);
  }

  public java.util.Set<java.lang.String> getStickerIds() {
    return this.stickerIds;
  }

  public StickerProperty setStickerIds(java.util.Set<java.lang.String> stickerIds) {
    this.stickerIds = stickerIds;
    return this;
  }

  public void unsetStickerIds() {
    this.stickerIds = null;
  }

  /** Returns true if field stickerIds is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerIds() {
    return this.stickerIds != null;
  }

  public void setStickerIdsIsSet(boolean value) {
    if (!value) {
      this.stickerIds = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HAS_ANIMATION:
      if (value == null) {
        unsetHasAnimation();
      } else {
        setHasAnimation((java.lang.Boolean)value);
      }
      break;

    case HAS_SOUND:
      if (value == null) {
        unsetHasSound();
      } else {
        setHasSound((java.lang.Boolean)value);
      }
      break;

    case HAS_POPUP:
      if (value == null) {
        unsetHasPopup();
      } else {
        setHasPopup((java.lang.Boolean)value);
      }
      break;

    case STICKER_RESOURCE_TYPE:
      if (value == null) {
        unsetStickerResourceType();
      } else {
        setStickerResourceType((SRType)value);
      }
      break;

    case STICKER_OPTIONS:
      if (value == null) {
        unsetStickerOptions();
      } else {
        setStickerOptions((java.lang.String)value);
      }
      break;

    case COMPACT_STICKER_OPTIONS:
      if (value == null) {
        unsetCompactStickerOptions();
      } else {
        setCompactStickerOptions((java.lang.Integer)value);
      }
      break;

    case STICKER_HASH:
      if (value == null) {
        unsetStickerHash();
      } else {
        setStickerHash((java.lang.String)value);
      }
      break;

    case STICKER_IDS:
      if (value == null) {
        unsetStickerIds();
      } else {
        setStickerIds((java.util.Set<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HAS_ANIMATION:
      return isHasAnimation();

    case HAS_SOUND:
      return isHasSound();

    case HAS_POPUP:
      return isHasPopup();

    case STICKER_RESOURCE_TYPE:
      return getStickerResourceType();

    case STICKER_OPTIONS:
      return getStickerOptions();

    case COMPACT_STICKER_OPTIONS:
      return getCompactStickerOptions();

    case STICKER_HASH:
      return getStickerHash();

    case STICKER_IDS:
      return getStickerIds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HAS_ANIMATION:
      return isSetHasAnimation();
    case HAS_SOUND:
      return isSetHasSound();
    case HAS_POPUP:
      return isSetHasPopup();
    case STICKER_RESOURCE_TYPE:
      return isSetStickerResourceType();
    case STICKER_OPTIONS:
      return isSetStickerOptions();
    case COMPACT_STICKER_OPTIONS:
      return isSetCompactStickerOptions();
    case STICKER_HASH:
      return isSetStickerHash();
    case STICKER_IDS:
      return isSetStickerIds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof StickerProperty)
      return this.equals((StickerProperty)that);
    return false;
  }

  public boolean equals(StickerProperty that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hasAnimation = true;
    boolean that_present_hasAnimation = true;
    if (this_present_hasAnimation || that_present_hasAnimation) {
      if (!(this_present_hasAnimation && that_present_hasAnimation))
        return false;
      if (this.hasAnimation != that.hasAnimation)
        return false;
    }

    boolean this_present_hasSound = true;
    boolean that_present_hasSound = true;
    if (this_present_hasSound || that_present_hasSound) {
      if (!(this_present_hasSound && that_present_hasSound))
        return false;
      if (this.hasSound != that.hasSound)
        return false;
    }

    boolean this_present_hasPopup = true;
    boolean that_present_hasPopup = true;
    if (this_present_hasPopup || that_present_hasPopup) {
      if (!(this_present_hasPopup && that_present_hasPopup))
        return false;
      if (this.hasPopup != that.hasPopup)
        return false;
    }

    boolean this_present_stickerResourceType = true && this.isSetStickerResourceType();
    boolean that_present_stickerResourceType = true && that.isSetStickerResourceType();
    if (this_present_stickerResourceType || that_present_stickerResourceType) {
      if (!(this_present_stickerResourceType && that_present_stickerResourceType))
        return false;
      if (!this.stickerResourceType.equals(that.stickerResourceType))
        return false;
    }

    boolean this_present_stickerOptions = true && this.isSetStickerOptions();
    boolean that_present_stickerOptions = true && that.isSetStickerOptions();
    if (this_present_stickerOptions || that_present_stickerOptions) {
      if (!(this_present_stickerOptions && that_present_stickerOptions))
        return false;
      if (!this.stickerOptions.equals(that.stickerOptions))
        return false;
    }

    boolean this_present_compactStickerOptions = true;
    boolean that_present_compactStickerOptions = true;
    if (this_present_compactStickerOptions || that_present_compactStickerOptions) {
      if (!(this_present_compactStickerOptions && that_present_compactStickerOptions))
        return false;
      if (this.compactStickerOptions != that.compactStickerOptions)
        return false;
    }

    boolean this_present_stickerHash = true && this.isSetStickerHash();
    boolean that_present_stickerHash = true && that.isSetStickerHash();
    if (this_present_stickerHash || that_present_stickerHash) {
      if (!(this_present_stickerHash && that_present_stickerHash))
        return false;
      if (!this.stickerHash.equals(that.stickerHash))
        return false;
    }

    boolean this_present_stickerIds = true && this.isSetStickerIds();
    boolean that_present_stickerIds = true && that.isSetStickerIds();
    if (this_present_stickerIds || that_present_stickerIds) {
      if (!(this_present_stickerIds && that_present_stickerIds))
        return false;
      if (!this.stickerIds.equals(that.stickerIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((hasAnimation) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((hasSound) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((hasPopup) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetStickerResourceType()) ? 131071 : 524287);
    if (isSetStickerResourceType())
      hashCode = hashCode * 8191 + stickerResourceType.getValue();

    hashCode = hashCode * 8191 + ((isSetStickerOptions()) ? 131071 : 524287);
    if (isSetStickerOptions())
      hashCode = hashCode * 8191 + stickerOptions.hashCode();

    hashCode = hashCode * 8191 + compactStickerOptions;

    hashCode = hashCode * 8191 + ((isSetStickerHash()) ? 131071 : 524287);
    if (isSetStickerHash())
      hashCode = hashCode * 8191 + stickerHash.hashCode();

    hashCode = hashCode * 8191 + ((isSetStickerIds()) ? 131071 : 524287);
    if (isSetStickerIds())
      hashCode = hashCode * 8191 + stickerIds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(StickerProperty other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHasAnimation()).compareTo(other.isSetHasAnimation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasAnimation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasAnimation, other.hasAnimation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHasSound()).compareTo(other.isSetHasSound());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasSound()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasSound, other.hasSound);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHasPopup()).compareTo(other.isSetHasPopup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasPopup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasPopup, other.hasPopup);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStickerResourceType()).compareTo(other.isSetStickerResourceType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerResourceType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerResourceType, other.stickerResourceType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStickerOptions()).compareTo(other.isSetStickerOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerOptions, other.stickerOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompactStickerOptions()).compareTo(other.isSetCompactStickerOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompactStickerOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compactStickerOptions, other.compactStickerOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStickerHash()).compareTo(other.isSetStickerHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerHash, other.stickerHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStickerIds()).compareTo(other.isSetStickerIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stickerIds, other.stickerIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("StickerProperty(");
    boolean first = true;

    sb.append("hasAnimation:");
    sb.append(this.hasAnimation);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasSound:");
    sb.append(this.hasSound);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasPopup:");
    sb.append(this.hasPopup);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stickerResourceType:");
    if (this.stickerResourceType == null) {
      sb.append("null");
    } else {
      sb.append(this.stickerResourceType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stickerOptions:");
    if (this.stickerOptions == null) {
      sb.append("null");
    } else {
      sb.append(this.stickerOptions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compactStickerOptions:");
    sb.append(this.compactStickerOptions);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stickerHash:");
    if (this.stickerHash == null) {
      sb.append("null");
    } else {
      sb.append(this.stickerHash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stickerIds:");
    if (this.stickerIds == null) {
      sb.append("null");
    } else {
      sb.append(this.stickerIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class StickerPropertyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StickerPropertyStandardScheme getScheme() {
      return new StickerPropertyStandardScheme();
    }
  }

  private static class StickerPropertyStandardScheme extends org.apache.thrift.scheme.StandardScheme<StickerProperty> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, StickerProperty struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HAS_ANIMATION
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasAnimation = iprot.readBool();
              struct.setHasAnimationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // HAS_SOUND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasSound = iprot.readBool();
              struct.setHasSoundIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HAS_POPUP
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasPopup = iprot.readBool();
              struct.setHasPopupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STICKER_RESOURCE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.stickerResourceType = SRType.findByValue(iprot.readI32());
              struct.setStickerResourceTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STICKER_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stickerOptions = iprot.readString();
              struct.setStickerOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COMPACT_STICKER_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.compactStickerOptions = iprot.readI32();
              struct.setCompactStickerOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STICKER_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stickerHash = iprot.readString();
              struct.setStickerHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STICKER_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set76 = iprot.readSetBegin();
                struct.stickerIds = new java.util.HashSet<java.lang.String>(2*_set76.size);
                java.lang.String _elem77;
                for (int _i78 = 0; _i78 < _set76.size; ++_i78)
                {
                  _elem77 = iprot.readString();
                  struct.stickerIds.add(_elem77);
                }
                iprot.readSetEnd();
              }
              struct.setStickerIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, StickerProperty struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(HAS_ANIMATION_FIELD_DESC);
      oprot.writeBool(struct.hasAnimation);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_SOUND_FIELD_DESC);
      oprot.writeBool(struct.hasSound);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_POPUP_FIELD_DESC);
      oprot.writeBool(struct.hasPopup);
      oprot.writeFieldEnd();
      if (struct.stickerResourceType != null) {
        oprot.writeFieldBegin(STICKER_RESOURCE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.stickerResourceType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.stickerOptions != null) {
        oprot.writeFieldBegin(STICKER_OPTIONS_FIELD_DESC);
        oprot.writeString(struct.stickerOptions);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPACT_STICKER_OPTIONS_FIELD_DESC);
      oprot.writeI32(struct.compactStickerOptions);
      oprot.writeFieldEnd();
      if (struct.stickerHash != null) {
        oprot.writeFieldBegin(STICKER_HASH_FIELD_DESC);
        oprot.writeString(struct.stickerHash);
        oprot.writeFieldEnd();
      }
      if (struct.stickerIds != null) {
        oprot.writeFieldBegin(STICKER_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.stickerIds.size()));
          for (java.lang.String _iter79 : struct.stickerIds)
          {
            oprot.writeString(_iter79);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class StickerPropertyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public StickerPropertyTupleScheme getScheme() {
      return new StickerPropertyTupleScheme();
    }
  }

  private static class StickerPropertyTupleScheme extends org.apache.thrift.scheme.TupleScheme<StickerProperty> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, StickerProperty struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHasAnimation()) {
        optionals.set(0);
      }
      if (struct.isSetHasSound()) {
        optionals.set(1);
      }
      if (struct.isSetHasPopup()) {
        optionals.set(2);
      }
      if (struct.isSetStickerResourceType()) {
        optionals.set(3);
      }
      if (struct.isSetStickerOptions()) {
        optionals.set(4);
      }
      if (struct.isSetCompactStickerOptions()) {
        optionals.set(5);
      }
      if (struct.isSetStickerHash()) {
        optionals.set(6);
      }
      if (struct.isSetStickerIds()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetHasAnimation()) {
        oprot.writeBool(struct.hasAnimation);
      }
      if (struct.isSetHasSound()) {
        oprot.writeBool(struct.hasSound);
      }
      if (struct.isSetHasPopup()) {
        oprot.writeBool(struct.hasPopup);
      }
      if (struct.isSetStickerResourceType()) {
        oprot.writeI32(struct.stickerResourceType.getValue());
      }
      if (struct.isSetStickerOptions()) {
        oprot.writeString(struct.stickerOptions);
      }
      if (struct.isSetCompactStickerOptions()) {
        oprot.writeI32(struct.compactStickerOptions);
      }
      if (struct.isSetStickerHash()) {
        oprot.writeString(struct.stickerHash);
      }
      if (struct.isSetStickerIds()) {
        {
          oprot.writeI32(struct.stickerIds.size());
          for (java.lang.String _iter80 : struct.stickerIds)
          {
            oprot.writeString(_iter80);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, StickerProperty struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.hasAnimation = iprot.readBool();
        struct.setHasAnimationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.hasSound = iprot.readBool();
        struct.setHasSoundIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hasPopup = iprot.readBool();
        struct.setHasPopupIsSet(true);
      }
      if (incoming.get(3)) {
        struct.stickerResourceType = SRType.findByValue(iprot.readI32());
        struct.setStickerResourceTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.stickerOptions = iprot.readString();
        struct.setStickerOptionsIsSet(true);
      }
      if (incoming.get(5)) {
        struct.compactStickerOptions = iprot.readI32();
        struct.setCompactStickerOptionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.stickerHash = iprot.readString();
        struct.setStickerHashIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TSet _set81 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.stickerIds = new java.util.HashSet<java.lang.String>(2*_set81.size);
          java.lang.String _elem82;
          for (int _i83 = 0; _i83 < _set81.size; ++_i83)
          {
            _elem82 = iprot.readString();
            struct.stickerIds.add(_elem82);
          }
        }
        struct.setStickerIdsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

