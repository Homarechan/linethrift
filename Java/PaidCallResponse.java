/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class PaidCallResponse implements org.apache.thrift.TBase<PaidCallResponse, PaidCallResponse._Fields>, java.io.Serializable, Cloneable, Comparable<PaidCallResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaidCallResponse");

  private static final org.apache.thrift.protocol.TField HOST_FIELD_DESC = new org.apache.thrift.protocol.TField("host", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField DIALING_FIELD_DESC = new org.apache.thrift.protocol.TField("dialing", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SPOT_ITEMS_FIELD_DESC = new org.apache.thrift.protocol.TField("spotItems", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PaidCallResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PaidCallResponseTupleSchemeFactory();

  public CallHost host; // required
  public PaidCallDialing dialing; // required
  public java.lang.String token; // required
  public java.util.List<SpotItem> spotItems; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOST((short)1, "host"),
    DIALING((short)2, "dialing"),
    TOKEN((short)3, "token"),
    SPOT_ITEMS((short)4, "spotItems");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOST
          return HOST;
        case 2: // DIALING
          return DIALING;
        case 3: // TOKEN
          return TOKEN;
        case 4: // SPOT_ITEMS
          return SPOT_ITEMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOST, new org.apache.thrift.meta_data.FieldMetaData("host", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CallHost.class)));
    tmpMap.put(_Fields.DIALING, new org.apache.thrift.meta_data.FieldMetaData("dialing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, PaidCallDialing.class)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPOT_ITEMS, new org.apache.thrift.meta_data.FieldMetaData("spotItems", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SpotItem.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaidCallResponse.class, metaDataMap);
  }

  public PaidCallResponse() {
  }

  public PaidCallResponse(
    CallHost host,
    PaidCallDialing dialing,
    java.lang.String token,
    java.util.List<SpotItem> spotItems)
  {
    this();
    this.host = host;
    this.dialing = dialing;
    this.token = token;
    this.spotItems = spotItems;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaidCallResponse(PaidCallResponse other) {
    if (other.isSetHost()) {
      this.host = new CallHost(other.host);
    }
    if (other.isSetDialing()) {
      this.dialing = new PaidCallDialing(other.dialing);
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetSpotItems()) {
      java.util.List<SpotItem> __this__spotItems = new java.util.ArrayList<SpotItem>(other.spotItems.size());
      for (SpotItem other_element : other.spotItems) {
        __this__spotItems.add(new SpotItem(other_element));
      }
      this.spotItems = __this__spotItems;
    }
  }

  public PaidCallResponse deepCopy() {
    return new PaidCallResponse(this);
  }

  @Override
  public void clear() {
    this.host = null;
    this.dialing = null;
    this.token = null;
    this.spotItems = null;
  }

  public CallHost getHost() {
    return this.host;
  }

  public PaidCallResponse setHost(CallHost host) {
    this.host = host;
    return this;
  }

  public void unsetHost() {
    this.host = null;
  }

  /** Returns true if field host is set (has been assigned a value) and false otherwise */
  public boolean isSetHost() {
    return this.host != null;
  }

  public void setHostIsSet(boolean value) {
    if (!value) {
      this.host = null;
    }
  }

  public PaidCallDialing getDialing() {
    return this.dialing;
  }

  public PaidCallResponse setDialing(PaidCallDialing dialing) {
    this.dialing = dialing;
    return this;
  }

  public void unsetDialing() {
    this.dialing = null;
  }

  /** Returns true if field dialing is set (has been assigned a value) and false otherwise */
  public boolean isSetDialing() {
    return this.dialing != null;
  }

  public void setDialingIsSet(boolean value) {
    if (!value) {
      this.dialing = null;
    }
  }

  public java.lang.String getToken() {
    return this.token;
  }

  public PaidCallResponse setToken(java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public int getSpotItemsSize() {
    return (this.spotItems == null) ? 0 : this.spotItems.size();
  }

  public java.util.Iterator<SpotItem> getSpotItemsIterator() {
    return (this.spotItems == null) ? null : this.spotItems.iterator();
  }

  public void addToSpotItems(SpotItem elem) {
    if (this.spotItems == null) {
      this.spotItems = new java.util.ArrayList<SpotItem>();
    }
    this.spotItems.add(elem);
  }

  public java.util.List<SpotItem> getSpotItems() {
    return this.spotItems;
  }

  public PaidCallResponse setSpotItems(java.util.List<SpotItem> spotItems) {
    this.spotItems = spotItems;
    return this;
  }

  public void unsetSpotItems() {
    this.spotItems = null;
  }

  /** Returns true if field spotItems is set (has been assigned a value) and false otherwise */
  public boolean isSetSpotItems() {
    return this.spotItems != null;
  }

  public void setSpotItemsIsSet(boolean value) {
    if (!value) {
      this.spotItems = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HOST:
      if (value == null) {
        unsetHost();
      } else {
        setHost((CallHost)value);
      }
      break;

    case DIALING:
      if (value == null) {
        unsetDialing();
      } else {
        setDialing((PaidCallDialing)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case SPOT_ITEMS:
      if (value == null) {
        unsetSpotItems();
      } else {
        setSpotItems((java.util.List<SpotItem>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HOST:
      return getHost();

    case DIALING:
      return getDialing();

    case TOKEN:
      return getToken();

    case SPOT_ITEMS:
      return getSpotItems();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HOST:
      return isSetHost();
    case DIALING:
      return isSetDialing();
    case TOKEN:
      return isSetToken();
    case SPOT_ITEMS:
      return isSetSpotItems();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PaidCallResponse)
      return this.equals((PaidCallResponse)that);
    return false;
  }

  public boolean equals(PaidCallResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_host = true && this.isSetHost();
    boolean that_present_host = true && that.isSetHost();
    if (this_present_host || that_present_host) {
      if (!(this_present_host && that_present_host))
        return false;
      if (!this.host.equals(that.host))
        return false;
    }

    boolean this_present_dialing = true && this.isSetDialing();
    boolean that_present_dialing = true && that.isSetDialing();
    if (this_present_dialing || that_present_dialing) {
      if (!(this_present_dialing && that_present_dialing))
        return false;
      if (!this.dialing.equals(that.dialing))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_spotItems = true && this.isSetSpotItems();
    boolean that_present_spotItems = true && that.isSetSpotItems();
    if (this_present_spotItems || that_present_spotItems) {
      if (!(this_present_spotItems && that_present_spotItems))
        return false;
      if (!this.spotItems.equals(that.spotItems))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHost()) ? 131071 : 524287);
    if (isSetHost())
      hashCode = hashCode * 8191 + host.hashCode();

    hashCode = hashCode * 8191 + ((isSetDialing()) ? 131071 : 524287);
    if (isSetDialing())
      hashCode = hashCode * 8191 + dialing.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetSpotItems()) ? 131071 : 524287);
    if (isSetSpotItems())
      hashCode = hashCode * 8191 + spotItems.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PaidCallResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHost()).compareTo(other.isSetHost());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHost()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.host, other.host);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDialing()).compareTo(other.isSetDialing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDialing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialing, other.dialing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpotItems()).compareTo(other.isSetSpotItems());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpotItems()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spotItems, other.spotItems);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PaidCallResponse(");
    boolean first = true;

    sb.append("host:");
    if (this.host == null) {
      sb.append("null");
    } else {
      sb.append(this.host);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dialing:");
    if (this.dialing == null) {
      sb.append("null");
    } else {
      sb.append(this.dialing);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("spotItems:");
    if (this.spotItems == null) {
      sb.append("null");
    } else {
      sb.append(this.spotItems);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (host != null) {
      host.validate();
    }
    if (dialing != null) {
      dialing.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaidCallResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaidCallResponseStandardScheme getScheme() {
      return new PaidCallResponseStandardScheme();
    }
  }

  private static class PaidCallResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<PaidCallResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaidCallResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.host = new CallHost();
              struct.host.read(iprot);
              struct.setHostIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIALING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.dialing = new PaidCallDialing();
              struct.dialing.read(iprot);
              struct.setDialingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SPOT_ITEMS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list214 = iprot.readListBegin();
                struct.spotItems = new java.util.ArrayList<SpotItem>(_list214.size);
                SpotItem _elem215;
                for (int _i216 = 0; _i216 < _list214.size; ++_i216)
                {
                  _elem215 = new SpotItem();
                  _elem215.read(iprot);
                  struct.spotItems.add(_elem215);
                }
                iprot.readListEnd();
              }
              struct.setSpotItemsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaidCallResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.host != null) {
        oprot.writeFieldBegin(HOST_FIELD_DESC);
        struct.host.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.dialing != null) {
        oprot.writeFieldBegin(DIALING_FIELD_DESC);
        struct.dialing.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.spotItems != null) {
        oprot.writeFieldBegin(SPOT_ITEMS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.spotItems.size()));
          for (SpotItem _iter217 : struct.spotItems)
          {
            _iter217.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaidCallResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaidCallResponseTupleScheme getScheme() {
      return new PaidCallResponseTupleScheme();
    }
  }

  private static class PaidCallResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<PaidCallResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaidCallResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHost()) {
        optionals.set(0);
      }
      if (struct.isSetDialing()) {
        optionals.set(1);
      }
      if (struct.isSetToken()) {
        optionals.set(2);
      }
      if (struct.isSetSpotItems()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetHost()) {
        struct.host.write(oprot);
      }
      if (struct.isSetDialing()) {
        struct.dialing.write(oprot);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetSpotItems()) {
        {
          oprot.writeI32(struct.spotItems.size());
          for (SpotItem _iter218 : struct.spotItems)
          {
            _iter218.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaidCallResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.host = new CallHost();
        struct.host.read(iprot);
        struct.setHostIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dialing = new PaidCallDialing();
        struct.dialing.read(iprot);
        struct.setDialingIsSet(true);
      }
      if (incoming.get(2)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list219 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.spotItems = new java.util.ArrayList<SpotItem>(_list219.size);
          SpotItem _elem220;
          for (int _i221 = 0; _i221 < _list219.size; ++_i221)
          {
            _elem220 = new SpotItem();
            _elem220.read(iprot);
            struct.spotItems.add(_elem220);
          }
        }
        struct.setSpotItemsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

