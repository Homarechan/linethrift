/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-09-28")
public class AgeCheckService {

  public interface Iface {

    public UserAgeType checkUserAge(CarrierCode carrier, java.lang.String sessionId, java.lang.String verifier, int standardAge) throws TalkException, org.apache.thrift.TException;

    public AgeCheckDocomoResult checkUserAgeWithDocomo(java.lang.String openIdRedirectUrl, int standardAge, java.lang.String verifier) throws TalkException, org.apache.thrift.TException;

    public java.lang.String retrieveOpenIdAuthUrlWithDocomo() throws TalkException, org.apache.thrift.TException;

    public AgeCheckRequestResult retrieveRequestToken(CarrierCode carrier) throws TalkException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void checkUserAge(CarrierCode carrier, java.lang.String sessionId, java.lang.String verifier, int standardAge, org.apache.thrift.async.AsyncMethodCallback<UserAgeType> resultHandler) throws org.apache.thrift.TException;

    public void checkUserAgeWithDocomo(java.lang.String openIdRedirectUrl, int standardAge, java.lang.String verifier, org.apache.thrift.async.AsyncMethodCallback<AgeCheckDocomoResult> resultHandler) throws org.apache.thrift.TException;

    public void retrieveOpenIdAuthUrlWithDocomo(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void retrieveRequestToken(CarrierCode carrier, org.apache.thrift.async.AsyncMethodCallback<AgeCheckRequestResult> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public UserAgeType checkUserAge(CarrierCode carrier, java.lang.String sessionId, java.lang.String verifier, int standardAge) throws TalkException, org.apache.thrift.TException
    {
      send_checkUserAge(carrier, sessionId, verifier, standardAge);
      return recv_checkUserAge();
    }

    public void send_checkUserAge(CarrierCode carrier, java.lang.String sessionId, java.lang.String verifier, int standardAge) throws org.apache.thrift.TException
    {
      checkUserAge_args args = new checkUserAge_args();
      args.setCarrier(carrier);
      args.setSessionId(sessionId);
      args.setVerifier(verifier);
      args.setStandardAge(standardAge);
      sendBase("checkUserAge", args);
    }

    public UserAgeType recv_checkUserAge() throws TalkException, org.apache.thrift.TException
    {
      checkUserAge_result result = new checkUserAge_result();
      receiveBase(result, "checkUserAge");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkUserAge failed: unknown result");
    }

    public AgeCheckDocomoResult checkUserAgeWithDocomo(java.lang.String openIdRedirectUrl, int standardAge, java.lang.String verifier) throws TalkException, org.apache.thrift.TException
    {
      send_checkUserAgeWithDocomo(openIdRedirectUrl, standardAge, verifier);
      return recv_checkUserAgeWithDocomo();
    }

    public void send_checkUserAgeWithDocomo(java.lang.String openIdRedirectUrl, int standardAge, java.lang.String verifier) throws org.apache.thrift.TException
    {
      checkUserAgeWithDocomo_args args = new checkUserAgeWithDocomo_args();
      args.setOpenIdRedirectUrl(openIdRedirectUrl);
      args.setStandardAge(standardAge);
      args.setVerifier(verifier);
      sendBase("checkUserAgeWithDocomo", args);
    }

    public AgeCheckDocomoResult recv_checkUserAgeWithDocomo() throws TalkException, org.apache.thrift.TException
    {
      checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
      receiveBase(result, "checkUserAgeWithDocomo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkUserAgeWithDocomo failed: unknown result");
    }

    public java.lang.String retrieveOpenIdAuthUrlWithDocomo() throws TalkException, org.apache.thrift.TException
    {
      send_retrieveOpenIdAuthUrlWithDocomo();
      return recv_retrieveOpenIdAuthUrlWithDocomo();
    }

    public void send_retrieveOpenIdAuthUrlWithDocomo() throws org.apache.thrift.TException
    {
      retrieveOpenIdAuthUrlWithDocomo_args args = new retrieveOpenIdAuthUrlWithDocomo_args();
      sendBase("retrieveOpenIdAuthUrlWithDocomo", args);
    }

    public java.lang.String recv_retrieveOpenIdAuthUrlWithDocomo() throws TalkException, org.apache.thrift.TException
    {
      retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
      receiveBase(result, "retrieveOpenIdAuthUrlWithDocomo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveOpenIdAuthUrlWithDocomo failed: unknown result");
    }

    public AgeCheckRequestResult retrieveRequestToken(CarrierCode carrier) throws TalkException, org.apache.thrift.TException
    {
      send_retrieveRequestToken(carrier);
      return recv_retrieveRequestToken();
    }

    public void send_retrieveRequestToken(CarrierCode carrier) throws org.apache.thrift.TException
    {
      retrieveRequestToken_args args = new retrieveRequestToken_args();
      args.setCarrier(carrier);
      sendBase("retrieveRequestToken", args);
    }

    public AgeCheckRequestResult recv_retrieveRequestToken() throws TalkException, org.apache.thrift.TException
    {
      retrieveRequestToken_result result = new retrieveRequestToken_result();
      receiveBase(result, "retrieveRequestToken");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "retrieveRequestToken failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void checkUserAge(CarrierCode carrier, java.lang.String sessionId, java.lang.String verifier, int standardAge, org.apache.thrift.async.AsyncMethodCallback<UserAgeType> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkUserAge_call method_call = new checkUserAge_call(carrier, sessionId, verifier, standardAge, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkUserAge_call extends org.apache.thrift.async.TAsyncMethodCall<UserAgeType> {
      private CarrierCode carrier;
      private java.lang.String sessionId;
      private java.lang.String verifier;
      private int standardAge;
      public checkUserAge_call(CarrierCode carrier, java.lang.String sessionId, java.lang.String verifier, int standardAge, org.apache.thrift.async.AsyncMethodCallback<UserAgeType> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.carrier = carrier;
        this.sessionId = sessionId;
        this.verifier = verifier;
        this.standardAge = standardAge;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkUserAge", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkUserAge_args args = new checkUserAge_args();
        args.setCarrier(carrier);
        args.setSessionId(sessionId);
        args.setVerifier(verifier);
        args.setStandardAge(standardAge);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserAgeType getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkUserAge();
      }
    }

    public void checkUserAgeWithDocomo(java.lang.String openIdRedirectUrl, int standardAge, java.lang.String verifier, org.apache.thrift.async.AsyncMethodCallback<AgeCheckDocomoResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkUserAgeWithDocomo_call method_call = new checkUserAgeWithDocomo_call(openIdRedirectUrl, standardAge, verifier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkUserAgeWithDocomo_call extends org.apache.thrift.async.TAsyncMethodCall<AgeCheckDocomoResult> {
      private java.lang.String openIdRedirectUrl;
      private int standardAge;
      private java.lang.String verifier;
      public checkUserAgeWithDocomo_call(java.lang.String openIdRedirectUrl, int standardAge, java.lang.String verifier, org.apache.thrift.async.AsyncMethodCallback<AgeCheckDocomoResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.openIdRedirectUrl = openIdRedirectUrl;
        this.standardAge = standardAge;
        this.verifier = verifier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkUserAgeWithDocomo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkUserAgeWithDocomo_args args = new checkUserAgeWithDocomo_args();
        args.setOpenIdRedirectUrl(openIdRedirectUrl);
        args.setStandardAge(standardAge);
        args.setVerifier(verifier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AgeCheckDocomoResult getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkUserAgeWithDocomo();
      }
    }

    public void retrieveOpenIdAuthUrlWithDocomo(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      retrieveOpenIdAuthUrlWithDocomo_call method_call = new retrieveOpenIdAuthUrlWithDocomo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveOpenIdAuthUrlWithDocomo_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public retrieveOpenIdAuthUrlWithDocomo_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveOpenIdAuthUrlWithDocomo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveOpenIdAuthUrlWithDocomo_args args = new retrieveOpenIdAuthUrlWithDocomo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveOpenIdAuthUrlWithDocomo();
      }
    }

    public void retrieveRequestToken(CarrierCode carrier, org.apache.thrift.async.AsyncMethodCallback<AgeCheckRequestResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      retrieveRequestToken_call method_call = new retrieveRequestToken_call(carrier, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class retrieveRequestToken_call extends org.apache.thrift.async.TAsyncMethodCall<AgeCheckRequestResult> {
      private CarrierCode carrier;
      public retrieveRequestToken_call(CarrierCode carrier, org.apache.thrift.async.AsyncMethodCallback<AgeCheckRequestResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.carrier = carrier;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("retrieveRequestToken", org.apache.thrift.protocol.TMessageType.CALL, 0));
        retrieveRequestToken_args args = new retrieveRequestToken_args();
        args.setCarrier(carrier);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AgeCheckRequestResult getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_retrieveRequestToken();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("checkUserAge", new checkUserAge());
      processMap.put("checkUserAgeWithDocomo", new checkUserAgeWithDocomo());
      processMap.put("retrieveOpenIdAuthUrlWithDocomo", new retrieveOpenIdAuthUrlWithDocomo());
      processMap.put("retrieveRequestToken", new retrieveRequestToken());
      return processMap;
    }

    public static class checkUserAge<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkUserAge_args> {
      public checkUserAge() {
        super("checkUserAge");
      }

      public checkUserAge_args getEmptyArgsInstance() {
        return new checkUserAge_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public checkUserAge_result getResult(I iface, checkUserAge_args args) throws org.apache.thrift.TException {
        checkUserAge_result result = new checkUserAge_result();
        try {
          result.success = iface.checkUserAge(args.carrier, args.sessionId, args.verifier, args.standardAge);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class checkUserAgeWithDocomo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkUserAgeWithDocomo_args> {
      public checkUserAgeWithDocomo() {
        super("checkUserAgeWithDocomo");
      }

      public checkUserAgeWithDocomo_args getEmptyArgsInstance() {
        return new checkUserAgeWithDocomo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public checkUserAgeWithDocomo_result getResult(I iface, checkUserAgeWithDocomo_args args) throws org.apache.thrift.TException {
        checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
        try {
          result.success = iface.checkUserAgeWithDocomo(args.openIdRedirectUrl, args.standardAge, args.verifier);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class retrieveOpenIdAuthUrlWithDocomo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveOpenIdAuthUrlWithDocomo_args> {
      public retrieveOpenIdAuthUrlWithDocomo() {
        super("retrieveOpenIdAuthUrlWithDocomo");
      }

      public retrieveOpenIdAuthUrlWithDocomo_args getEmptyArgsInstance() {
        return new retrieveOpenIdAuthUrlWithDocomo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public retrieveOpenIdAuthUrlWithDocomo_result getResult(I iface, retrieveOpenIdAuthUrlWithDocomo_args args) throws org.apache.thrift.TException {
        retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
        try {
          result.success = iface.retrieveOpenIdAuthUrlWithDocomo();
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class retrieveRequestToken<I extends Iface> extends org.apache.thrift.ProcessFunction<I, retrieveRequestToken_args> {
      public retrieveRequestToken() {
        super("retrieveRequestToken");
      }

      public retrieveRequestToken_args getEmptyArgsInstance() {
        return new retrieveRequestToken_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public retrieveRequestToken_result getResult(I iface, retrieveRequestToken_args args) throws org.apache.thrift.TException {
        retrieveRequestToken_result result = new retrieveRequestToken_result();
        try {
          result.success = iface.retrieveRequestToken(args.carrier);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("checkUserAge", new checkUserAge());
      processMap.put("checkUserAgeWithDocomo", new checkUserAgeWithDocomo());
      processMap.put("retrieveOpenIdAuthUrlWithDocomo", new retrieveOpenIdAuthUrlWithDocomo());
      processMap.put("retrieveRequestToken", new retrieveRequestToken());
      return processMap;
    }

    public static class checkUserAge<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkUserAge_args, UserAgeType> {
      public checkUserAge() {
        super("checkUserAge");
      }

      public checkUserAge_args getEmptyArgsInstance() {
        return new checkUserAge_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<UserAgeType> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<UserAgeType>() { 
          public void onComplete(UserAgeType o) {
            checkUserAge_result result = new checkUserAge_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkUserAge_result result = new checkUserAge_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkUserAge_args args, org.apache.thrift.async.AsyncMethodCallback<UserAgeType> resultHandler) throws org.apache.thrift.TException {
        iface.checkUserAge(args.carrier, args.sessionId, args.verifier, args.standardAge,resultHandler);
      }
    }

    public static class checkUserAgeWithDocomo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkUserAgeWithDocomo_args, AgeCheckDocomoResult> {
      public checkUserAgeWithDocomo() {
        super("checkUserAgeWithDocomo");
      }

      public checkUserAgeWithDocomo_args getEmptyArgsInstance() {
        return new checkUserAgeWithDocomo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<AgeCheckDocomoResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<AgeCheckDocomoResult>() { 
          public void onComplete(AgeCheckDocomoResult o) {
            checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkUserAgeWithDocomo_args args, org.apache.thrift.async.AsyncMethodCallback<AgeCheckDocomoResult> resultHandler) throws org.apache.thrift.TException {
        iface.checkUserAgeWithDocomo(args.openIdRedirectUrl, args.standardAge, args.verifier,resultHandler);
      }
    }

    public static class retrieveOpenIdAuthUrlWithDocomo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveOpenIdAuthUrlWithDocomo_args, java.lang.String> {
      public retrieveOpenIdAuthUrlWithDocomo() {
        super("retrieveOpenIdAuthUrlWithDocomo");
      }

      public retrieveOpenIdAuthUrlWithDocomo_args getEmptyArgsInstance() {
        return new retrieveOpenIdAuthUrlWithDocomo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveOpenIdAuthUrlWithDocomo_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.retrieveOpenIdAuthUrlWithDocomo(resultHandler);
      }
    }

    public static class retrieveRequestToken<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, retrieveRequestToken_args, AgeCheckRequestResult> {
      public retrieveRequestToken() {
        super("retrieveRequestToken");
      }

      public retrieveRequestToken_args getEmptyArgsInstance() {
        return new retrieveRequestToken_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<AgeCheckRequestResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<AgeCheckRequestResult>() { 
          public void onComplete(AgeCheckRequestResult o) {
            retrieveRequestToken_result result = new retrieveRequestToken_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            retrieveRequestToken_result result = new retrieveRequestToken_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, retrieveRequestToken_args args, org.apache.thrift.async.AsyncMethodCallback<AgeCheckRequestResult> resultHandler) throws org.apache.thrift.TException {
        iface.retrieveRequestToken(args.carrier,resultHandler);
      }
    }

  }

  public static class checkUserAge_args implements org.apache.thrift.TBase<checkUserAge_args, checkUserAge_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkUserAge_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUserAge_args");

    private static final org.apache.thrift.protocol.TField CARRIER_FIELD_DESC = new org.apache.thrift.protocol.TField("carrier", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField VERIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("verifier", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField STANDARD_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("standardAge", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkUserAge_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkUserAge_argsTupleSchemeFactory();

    /**
     * 
     * @see CarrierCode
     */
    public @org.apache.thrift.annotation.Nullable CarrierCode carrier; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String sessionId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String verifier; // required
    public int standardAge; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see CarrierCode
       */
      CARRIER((short)2, "carrier"),
      SESSION_ID((short)3, "sessionId"),
      VERIFIER((short)4, "verifier"),
      STANDARD_AGE((short)5, "standardAge");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // CARRIER
            return CARRIER;
          case 3: // SESSION_ID
            return SESSION_ID;
          case 4: // VERIFIER
            return VERIFIER;
          case 5: // STANDARD_AGE
            return STANDARD_AGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STANDARDAGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARRIER, new org.apache.thrift.meta_data.FieldMetaData("carrier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CarrierCode.class)));
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERIFIER, new org.apache.thrift.meta_data.FieldMetaData("verifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STANDARD_AGE, new org.apache.thrift.meta_data.FieldMetaData("standardAge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUserAge_args.class, metaDataMap);
    }

    public checkUserAge_args() {
    }

    public checkUserAge_args(
      CarrierCode carrier,
      java.lang.String sessionId,
      java.lang.String verifier,
      int standardAge)
    {
      this();
      this.carrier = carrier;
      this.sessionId = sessionId;
      this.verifier = verifier;
      this.standardAge = standardAge;
      setStandardAgeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserAge_args(checkUserAge_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCarrier()) {
        this.carrier = other.carrier;
      }
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      this.standardAge = other.standardAge;
    }

    public checkUserAge_args deepCopy() {
      return new checkUserAge_args(this);
    }

    @Override
    public void clear() {
      this.carrier = null;
      this.sessionId = null;
      this.verifier = null;
      setStandardAgeIsSet(false);
      this.standardAge = 0;
    }

    /**
     * 
     * @see CarrierCode
     */
    @org.apache.thrift.annotation.Nullable
    public CarrierCode getCarrier() {
      return this.carrier;
    }

    /**
     * 
     * @see CarrierCode
     */
    public checkUserAge_args setCarrier(@org.apache.thrift.annotation.Nullable CarrierCode carrier) {
      this.carrier = carrier;
      return this;
    }

    public void unsetCarrier() {
      this.carrier = null;
    }

    /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrier() {
      return this.carrier != null;
    }

    public void setCarrierIsSet(boolean value) {
      if (!value) {
        this.carrier = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSessionId() {
      return this.sessionId;
    }

    public checkUserAge_args setSessionId(@org.apache.thrift.annotation.Nullable java.lang.String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVerifier() {
      return this.verifier;
    }

    public checkUserAge_args setVerifier(@org.apache.thrift.annotation.Nullable java.lang.String verifier) {
      this.verifier = verifier;
      return this;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public int getStandardAge() {
      return this.standardAge;
    }

    public checkUserAge_args setStandardAge(int standardAge) {
      this.standardAge = standardAge;
      setStandardAgeIsSet(true);
      return this;
    }

    public void unsetStandardAge() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STANDARDAGE_ISSET_ID);
    }

    /** Returns true if field standardAge is set (has been assigned a value) and false otherwise */
    public boolean isSetStandardAge() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STANDARDAGE_ISSET_ID);
    }

    public void setStandardAgeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STANDARDAGE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CARRIER:
        if (value == null) {
          unsetCarrier();
        } else {
          setCarrier((CarrierCode)value);
        }
        break;

      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((java.lang.String)value);
        }
        break;

      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          setVerifier((java.lang.String)value);
        }
        break;

      case STANDARD_AGE:
        if (value == null) {
          unsetStandardAge();
        } else {
          setStandardAge((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CARRIER:
        return getCarrier();

      case SESSION_ID:
        return getSessionId();

      case VERIFIER:
        return getVerifier();

      case STANDARD_AGE:
        return getStandardAge();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CARRIER:
        return isSetCarrier();
      case SESSION_ID:
        return isSetSessionId();
      case VERIFIER:
        return isSetVerifier();
      case STANDARD_AGE:
        return isSetStandardAge();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserAge_args)
        return this.equals((checkUserAge_args)that);
      return false;
    }

    public boolean equals(checkUserAge_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_carrier = true && this.isSetCarrier();
      boolean that_present_carrier = true && that.isSetCarrier();
      if (this_present_carrier || that_present_carrier) {
        if (!(this_present_carrier && that_present_carrier))
          return false;
        if (!this.carrier.equals(that.carrier))
          return false;
      }

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_standardAge = true;
      boolean that_present_standardAge = true;
      if (this_present_standardAge || that_present_standardAge) {
        if (!(this_present_standardAge && that_present_standardAge))
          return false;
        if (this.standardAge != that.standardAge)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCarrier()) ? 131071 : 524287);
      if (isSetCarrier())
        hashCode = hashCode * 8191 + carrier.getValue();

      hashCode = hashCode * 8191 + ((isSetSessionId()) ? 131071 : 524287);
      if (isSetSessionId())
        hashCode = hashCode * 8191 + sessionId.hashCode();

      hashCode = hashCode * 8191 + ((isSetVerifier()) ? 131071 : 524287);
      if (isSetVerifier())
        hashCode = hashCode * 8191 + verifier.hashCode();

      hashCode = hashCode * 8191 + standardAge;

      return hashCode;
    }

    @Override
    public int compareTo(checkUserAge_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCarrier()).compareTo(other.isSetCarrier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrier, other.carrier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVerifier()).compareTo(other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStandardAge()).compareTo(other.isSetStandardAge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStandardAge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standardAge, other.standardAge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkUserAge_args(");
      boolean first = true;

      sb.append("carrier:");
      if (this.carrier == null) {
        sb.append("null");
      } else {
        sb.append(this.carrier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("standardAge:");
      sb.append(this.standardAge);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUserAge_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserAge_argsStandardScheme getScheme() {
        return new checkUserAge_argsStandardScheme();
      }
    }

    private static class checkUserAge_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkUserAge_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUserAge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // CARRIER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.carrier = CarrierCode.findByValue(iprot.readI32());
                struct.setCarrierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VERIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verifier = iprot.readString();
                struct.setVerifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // STANDARD_AGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.standardAge = iprot.readI32();
                struct.setStandardAgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUserAge_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.carrier != null) {
          oprot.writeFieldBegin(CARRIER_FIELD_DESC);
          oprot.writeI32(struct.carrier.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        if (struct.verifier != null) {
          oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
          oprot.writeString(struct.verifier);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STANDARD_AGE_FIELD_DESC);
        oprot.writeI32(struct.standardAge);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUserAge_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserAge_argsTupleScheme getScheme() {
        return new checkUserAge_argsTupleScheme();
      }
    }

    private static class checkUserAge_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkUserAge_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUserAge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCarrier()) {
          optionals.set(0);
        }
        if (struct.isSetSessionId()) {
          optionals.set(1);
        }
        if (struct.isSetVerifier()) {
          optionals.set(2);
        }
        if (struct.isSetStandardAge()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetCarrier()) {
          oprot.writeI32(struct.carrier.getValue());
        }
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
        if (struct.isSetVerifier()) {
          oprot.writeString(struct.verifier);
        }
        if (struct.isSetStandardAge()) {
          oprot.writeI32(struct.standardAge);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUserAge_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.carrier = CarrierCode.findByValue(iprot.readI32());
          struct.setCarrierIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.verifier = iprot.readString();
          struct.setVerifierIsSet(true);
        }
        if (incoming.get(3)) {
          struct.standardAge = iprot.readI32();
          struct.setStandardAgeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkUserAge_result implements org.apache.thrift.TBase<checkUserAge_result, checkUserAge_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkUserAge_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUserAge_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkUserAge_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkUserAge_resultTupleSchemeFactory();

    /**
     * 
     * @see UserAgeType
     */
    public @org.apache.thrift.annotation.Nullable UserAgeType success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see UserAgeType
       */
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, UserAgeType.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUserAge_result.class, metaDataMap);
    }

    public checkUserAge_result() {
    }

    public checkUserAge_result(
      UserAgeType success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserAge_result(checkUserAge_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public checkUserAge_result deepCopy() {
      return new checkUserAge_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    /**
     * 
     * @see UserAgeType
     */
    @org.apache.thrift.annotation.Nullable
    public UserAgeType getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see UserAgeType
     */
    public checkUserAge_result setSuccess(@org.apache.thrift.annotation.Nullable UserAgeType success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public checkUserAge_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserAgeType)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserAge_result)
        return this.equals((checkUserAge_result)that);
      return false;
    }

    public boolean equals(checkUserAge_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.getValue();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkUserAge_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkUserAge_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUserAge_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserAge_resultStandardScheme getScheme() {
        return new checkUserAge_resultStandardScheme();
      }
    }

    private static class checkUserAge_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkUserAge_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUserAge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = UserAgeType.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUserAge_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUserAge_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserAge_resultTupleScheme getScheme() {
        return new checkUserAge_resultTupleScheme();
      }
    }

    private static class checkUserAge_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkUserAge_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUserAge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUserAge_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = UserAgeType.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkUserAgeWithDocomo_args implements org.apache.thrift.TBase<checkUserAgeWithDocomo_args, checkUserAgeWithDocomo_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkUserAgeWithDocomo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUserAgeWithDocomo_args");

    private static final org.apache.thrift.protocol.TField OPEN_ID_REDIRECT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("openIdRedirectUrl", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STANDARD_AGE_FIELD_DESC = new org.apache.thrift.protocol.TField("standardAge", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField VERIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("verifier", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkUserAgeWithDocomo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkUserAgeWithDocomo_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String openIdRedirectUrl; // required
    public int standardAge; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String verifier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OPEN_ID_REDIRECT_URL((short)2, "openIdRedirectUrl"),
      STANDARD_AGE((short)3, "standardAge"),
      VERIFIER((short)4, "verifier");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // OPEN_ID_REDIRECT_URL
            return OPEN_ID_REDIRECT_URL;
          case 3: // STANDARD_AGE
            return STANDARD_AGE;
          case 4: // VERIFIER
            return VERIFIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STANDARDAGE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OPEN_ID_REDIRECT_URL, new org.apache.thrift.meta_data.FieldMetaData("openIdRedirectUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STANDARD_AGE, new org.apache.thrift.meta_data.FieldMetaData("standardAge", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.VERIFIER, new org.apache.thrift.meta_data.FieldMetaData("verifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUserAgeWithDocomo_args.class, metaDataMap);
    }

    public checkUserAgeWithDocomo_args() {
    }

    public checkUserAgeWithDocomo_args(
      java.lang.String openIdRedirectUrl,
      int standardAge,
      java.lang.String verifier)
    {
      this();
      this.openIdRedirectUrl = openIdRedirectUrl;
      this.standardAge = standardAge;
      setStandardAgeIsSet(true);
      this.verifier = verifier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserAgeWithDocomo_args(checkUserAgeWithDocomo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetOpenIdRedirectUrl()) {
        this.openIdRedirectUrl = other.openIdRedirectUrl;
      }
      this.standardAge = other.standardAge;
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
    }

    public checkUserAgeWithDocomo_args deepCopy() {
      return new checkUserAgeWithDocomo_args(this);
    }

    @Override
    public void clear() {
      this.openIdRedirectUrl = null;
      setStandardAgeIsSet(false);
      this.standardAge = 0;
      this.verifier = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getOpenIdRedirectUrl() {
      return this.openIdRedirectUrl;
    }

    public checkUserAgeWithDocomo_args setOpenIdRedirectUrl(@org.apache.thrift.annotation.Nullable java.lang.String openIdRedirectUrl) {
      this.openIdRedirectUrl = openIdRedirectUrl;
      return this;
    }

    public void unsetOpenIdRedirectUrl() {
      this.openIdRedirectUrl = null;
    }

    /** Returns true if field openIdRedirectUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetOpenIdRedirectUrl() {
      return this.openIdRedirectUrl != null;
    }

    public void setOpenIdRedirectUrlIsSet(boolean value) {
      if (!value) {
        this.openIdRedirectUrl = null;
      }
    }

    public int getStandardAge() {
      return this.standardAge;
    }

    public checkUserAgeWithDocomo_args setStandardAge(int standardAge) {
      this.standardAge = standardAge;
      setStandardAgeIsSet(true);
      return this;
    }

    public void unsetStandardAge() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STANDARDAGE_ISSET_ID);
    }

    /** Returns true if field standardAge is set (has been assigned a value) and false otherwise */
    public boolean isSetStandardAge() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STANDARDAGE_ISSET_ID);
    }

    public void setStandardAgeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STANDARDAGE_ISSET_ID, value);
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getVerifier() {
      return this.verifier;
    }

    public checkUserAgeWithDocomo_args setVerifier(@org.apache.thrift.annotation.Nullable java.lang.String verifier) {
      this.verifier = verifier;
      return this;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case OPEN_ID_REDIRECT_URL:
        if (value == null) {
          unsetOpenIdRedirectUrl();
        } else {
          setOpenIdRedirectUrl((java.lang.String)value);
        }
        break;

      case STANDARD_AGE:
        if (value == null) {
          unsetStandardAge();
        } else {
          setStandardAge((java.lang.Integer)value);
        }
        break;

      case VERIFIER:
        if (value == null) {
          unsetVerifier();
        } else {
          setVerifier((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case OPEN_ID_REDIRECT_URL:
        return getOpenIdRedirectUrl();

      case STANDARD_AGE:
        return getStandardAge();

      case VERIFIER:
        return getVerifier();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case OPEN_ID_REDIRECT_URL:
        return isSetOpenIdRedirectUrl();
      case STANDARD_AGE:
        return isSetStandardAge();
      case VERIFIER:
        return isSetVerifier();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserAgeWithDocomo_args)
        return this.equals((checkUserAgeWithDocomo_args)that);
      return false;
    }

    public boolean equals(checkUserAgeWithDocomo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_openIdRedirectUrl = true && this.isSetOpenIdRedirectUrl();
      boolean that_present_openIdRedirectUrl = true && that.isSetOpenIdRedirectUrl();
      if (this_present_openIdRedirectUrl || that_present_openIdRedirectUrl) {
        if (!(this_present_openIdRedirectUrl && that_present_openIdRedirectUrl))
          return false;
        if (!this.openIdRedirectUrl.equals(that.openIdRedirectUrl))
          return false;
      }

      boolean this_present_standardAge = true;
      boolean that_present_standardAge = true;
      if (this_present_standardAge || that_present_standardAge) {
        if (!(this_present_standardAge && that_present_standardAge))
          return false;
        if (this.standardAge != that.standardAge)
          return false;
      }

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetOpenIdRedirectUrl()) ? 131071 : 524287);
      if (isSetOpenIdRedirectUrl())
        hashCode = hashCode * 8191 + openIdRedirectUrl.hashCode();

      hashCode = hashCode * 8191 + standardAge;

      hashCode = hashCode * 8191 + ((isSetVerifier()) ? 131071 : 524287);
      if (isSetVerifier())
        hashCode = hashCode * 8191 + verifier.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkUserAgeWithDocomo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOpenIdRedirectUrl()).compareTo(other.isSetOpenIdRedirectUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOpenIdRedirectUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openIdRedirectUrl, other.openIdRedirectUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStandardAge()).compareTo(other.isSetStandardAge());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStandardAge()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.standardAge, other.standardAge);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVerifier()).compareTo(other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkUserAgeWithDocomo_args(");
      boolean first = true;

      sb.append("openIdRedirectUrl:");
      if (this.openIdRedirectUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.openIdRedirectUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("standardAge:");
      sb.append(this.standardAge);
      first = false;
      if (!first) sb.append(", ");
      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUserAgeWithDocomo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserAgeWithDocomo_argsStandardScheme getScheme() {
        return new checkUserAgeWithDocomo_argsStandardScheme();
      }
    }

    private static class checkUserAgeWithDocomo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkUserAgeWithDocomo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUserAgeWithDocomo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // OPEN_ID_REDIRECT_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.openIdRedirectUrl = iprot.readString();
                struct.setOpenIdRedirectUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STANDARD_AGE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.standardAge = iprot.readI32();
                struct.setStandardAgeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // VERIFIER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.verifier = iprot.readString();
                struct.setVerifierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUserAgeWithDocomo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.openIdRedirectUrl != null) {
          oprot.writeFieldBegin(OPEN_ID_REDIRECT_URL_FIELD_DESC);
          oprot.writeString(struct.openIdRedirectUrl);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STANDARD_AGE_FIELD_DESC);
        oprot.writeI32(struct.standardAge);
        oprot.writeFieldEnd();
        if (struct.verifier != null) {
          oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
          oprot.writeString(struct.verifier);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUserAgeWithDocomo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserAgeWithDocomo_argsTupleScheme getScheme() {
        return new checkUserAgeWithDocomo_argsTupleScheme();
      }
    }

    private static class checkUserAgeWithDocomo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkUserAgeWithDocomo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUserAgeWithDocomo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOpenIdRedirectUrl()) {
          optionals.set(0);
        }
        if (struct.isSetStandardAge()) {
          optionals.set(1);
        }
        if (struct.isSetVerifier()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetOpenIdRedirectUrl()) {
          oprot.writeString(struct.openIdRedirectUrl);
        }
        if (struct.isSetStandardAge()) {
          oprot.writeI32(struct.standardAge);
        }
        if (struct.isSetVerifier()) {
          oprot.writeString(struct.verifier);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUserAgeWithDocomo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.openIdRedirectUrl = iprot.readString();
          struct.setOpenIdRedirectUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.standardAge = iprot.readI32();
          struct.setStandardAgeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.verifier = iprot.readString();
          struct.setVerifierIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkUserAgeWithDocomo_result implements org.apache.thrift.TBase<checkUserAgeWithDocomo_result, checkUserAgeWithDocomo_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkUserAgeWithDocomo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkUserAgeWithDocomo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkUserAgeWithDocomo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkUserAgeWithDocomo_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable AgeCheckDocomoResult success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeCheckDocomoResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkUserAgeWithDocomo_result.class, metaDataMap);
    }

    public checkUserAgeWithDocomo_result() {
    }

    public checkUserAgeWithDocomo_result(
      AgeCheckDocomoResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkUserAgeWithDocomo_result(checkUserAgeWithDocomo_result other) {
      if (other.isSetSuccess()) {
        this.success = new AgeCheckDocomoResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public checkUserAgeWithDocomo_result deepCopy() {
      return new checkUserAgeWithDocomo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public AgeCheckDocomoResult getSuccess() {
      return this.success;
    }

    public checkUserAgeWithDocomo_result setSuccess(@org.apache.thrift.annotation.Nullable AgeCheckDocomoResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public checkUserAgeWithDocomo_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AgeCheckDocomoResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkUserAgeWithDocomo_result)
        return this.equals((checkUserAgeWithDocomo_result)that);
      return false;
    }

    public boolean equals(checkUserAgeWithDocomo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkUserAgeWithDocomo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkUserAgeWithDocomo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkUserAgeWithDocomo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserAgeWithDocomo_resultStandardScheme getScheme() {
        return new checkUserAgeWithDocomo_resultStandardScheme();
      }
    }

    private static class checkUserAgeWithDocomo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkUserAgeWithDocomo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkUserAgeWithDocomo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AgeCheckDocomoResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkUserAgeWithDocomo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkUserAgeWithDocomo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkUserAgeWithDocomo_resultTupleScheme getScheme() {
        return new checkUserAgeWithDocomo_resultTupleScheme();
      }
    }

    private static class checkUserAgeWithDocomo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkUserAgeWithDocomo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkUserAgeWithDocomo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkUserAgeWithDocomo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AgeCheckDocomoResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class retrieveOpenIdAuthUrlWithDocomo_args implements org.apache.thrift.TBase<retrieveOpenIdAuthUrlWithDocomo_args, retrieveOpenIdAuthUrlWithDocomo_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveOpenIdAuthUrlWithDocomo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveOpenIdAuthUrlWithDocomo_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveOpenIdAuthUrlWithDocomo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveOpenIdAuthUrlWithDocomo_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveOpenIdAuthUrlWithDocomo_args.class, metaDataMap);
    }

    public retrieveOpenIdAuthUrlWithDocomo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveOpenIdAuthUrlWithDocomo_args(retrieveOpenIdAuthUrlWithDocomo_args other) {
    }

    public retrieveOpenIdAuthUrlWithDocomo_args deepCopy() {
      return new retrieveOpenIdAuthUrlWithDocomo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveOpenIdAuthUrlWithDocomo_args)
        return this.equals((retrieveOpenIdAuthUrlWithDocomo_args)that);
      return false;
    }

    public boolean equals(retrieveOpenIdAuthUrlWithDocomo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(retrieveOpenIdAuthUrlWithDocomo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("retrieveOpenIdAuthUrlWithDocomo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveOpenIdAuthUrlWithDocomo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveOpenIdAuthUrlWithDocomo_argsStandardScheme getScheme() {
        return new retrieveOpenIdAuthUrlWithDocomo_argsStandardScheme();
      }
    }

    private static class retrieveOpenIdAuthUrlWithDocomo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveOpenIdAuthUrlWithDocomo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveOpenIdAuthUrlWithDocomo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveOpenIdAuthUrlWithDocomo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveOpenIdAuthUrlWithDocomo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveOpenIdAuthUrlWithDocomo_argsTupleScheme getScheme() {
        return new retrieveOpenIdAuthUrlWithDocomo_argsTupleScheme();
      }
    }

    private static class retrieveOpenIdAuthUrlWithDocomo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveOpenIdAuthUrlWithDocomo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveOpenIdAuthUrlWithDocomo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveOpenIdAuthUrlWithDocomo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class retrieveOpenIdAuthUrlWithDocomo_result implements org.apache.thrift.TBase<retrieveOpenIdAuthUrlWithDocomo_result, retrieveOpenIdAuthUrlWithDocomo_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveOpenIdAuthUrlWithDocomo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveOpenIdAuthUrlWithDocomo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveOpenIdAuthUrlWithDocomo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveOpenIdAuthUrlWithDocomo_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveOpenIdAuthUrlWithDocomo_result.class, metaDataMap);
    }

    public retrieveOpenIdAuthUrlWithDocomo_result() {
    }

    public retrieveOpenIdAuthUrlWithDocomo_result(
      java.lang.String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveOpenIdAuthUrlWithDocomo_result(retrieveOpenIdAuthUrlWithDocomo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public retrieveOpenIdAuthUrlWithDocomo_result deepCopy() {
      return new retrieveOpenIdAuthUrlWithDocomo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getSuccess() {
      return this.success;
    }

    public retrieveOpenIdAuthUrlWithDocomo_result setSuccess(@org.apache.thrift.annotation.Nullable java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public retrieveOpenIdAuthUrlWithDocomo_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveOpenIdAuthUrlWithDocomo_result)
        return this.equals((retrieveOpenIdAuthUrlWithDocomo_result)that);
      return false;
    }

    public boolean equals(retrieveOpenIdAuthUrlWithDocomo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(retrieveOpenIdAuthUrlWithDocomo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("retrieveOpenIdAuthUrlWithDocomo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveOpenIdAuthUrlWithDocomo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveOpenIdAuthUrlWithDocomo_resultStandardScheme getScheme() {
        return new retrieveOpenIdAuthUrlWithDocomo_resultStandardScheme();
      }
    }

    private static class retrieveOpenIdAuthUrlWithDocomo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveOpenIdAuthUrlWithDocomo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveOpenIdAuthUrlWithDocomo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveOpenIdAuthUrlWithDocomo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveOpenIdAuthUrlWithDocomo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveOpenIdAuthUrlWithDocomo_resultTupleScheme getScheme() {
        return new retrieveOpenIdAuthUrlWithDocomo_resultTupleScheme();
      }
    }

    private static class retrieveOpenIdAuthUrlWithDocomo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveOpenIdAuthUrlWithDocomo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveOpenIdAuthUrlWithDocomo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveOpenIdAuthUrlWithDocomo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class retrieveRequestToken_args implements org.apache.thrift.TBase<retrieveRequestToken_args, retrieveRequestToken_args._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveRequestToken_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveRequestToken_args");

    private static final org.apache.thrift.protocol.TField CARRIER_FIELD_DESC = new org.apache.thrift.protocol.TField("carrier", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveRequestToken_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveRequestToken_argsTupleSchemeFactory();

    /**
     * 
     * @see CarrierCode
     */
    public @org.apache.thrift.annotation.Nullable CarrierCode carrier; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see CarrierCode
       */
      CARRIER((short)2, "carrier");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // CARRIER
            return CARRIER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CARRIER, new org.apache.thrift.meta_data.FieldMetaData("carrier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CarrierCode.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveRequestToken_args.class, metaDataMap);
    }

    public retrieveRequestToken_args() {
    }

    public retrieveRequestToken_args(
      CarrierCode carrier)
    {
      this();
      this.carrier = carrier;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveRequestToken_args(retrieveRequestToken_args other) {
      if (other.isSetCarrier()) {
        this.carrier = other.carrier;
      }
    }

    public retrieveRequestToken_args deepCopy() {
      return new retrieveRequestToken_args(this);
    }

    @Override
    public void clear() {
      this.carrier = null;
    }

    /**
     * 
     * @see CarrierCode
     */
    @org.apache.thrift.annotation.Nullable
    public CarrierCode getCarrier() {
      return this.carrier;
    }

    /**
     * 
     * @see CarrierCode
     */
    public retrieveRequestToken_args setCarrier(@org.apache.thrift.annotation.Nullable CarrierCode carrier) {
      this.carrier = carrier;
      return this;
    }

    public void unsetCarrier() {
      this.carrier = null;
    }

    /** Returns true if field carrier is set (has been assigned a value) and false otherwise */
    public boolean isSetCarrier() {
      return this.carrier != null;
    }

    public void setCarrierIsSet(boolean value) {
      if (!value) {
        this.carrier = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CARRIER:
        if (value == null) {
          unsetCarrier();
        } else {
          setCarrier((CarrierCode)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CARRIER:
        return getCarrier();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CARRIER:
        return isSetCarrier();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveRequestToken_args)
        return this.equals((retrieveRequestToken_args)that);
      return false;
    }

    public boolean equals(retrieveRequestToken_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_carrier = true && this.isSetCarrier();
      boolean that_present_carrier = true && that.isSetCarrier();
      if (this_present_carrier || that_present_carrier) {
        if (!(this_present_carrier && that_present_carrier))
          return false;
        if (!this.carrier.equals(that.carrier))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCarrier()) ? 131071 : 524287);
      if (isSetCarrier())
        hashCode = hashCode * 8191 + carrier.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(retrieveRequestToken_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCarrier()).compareTo(other.isSetCarrier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCarrier()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.carrier, other.carrier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("retrieveRequestToken_args(");
      boolean first = true;

      sb.append("carrier:");
      if (this.carrier == null) {
        sb.append("null");
      } else {
        sb.append(this.carrier);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveRequestToken_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveRequestToken_argsStandardScheme getScheme() {
        return new retrieveRequestToken_argsStandardScheme();
      }
    }

    private static class retrieveRequestToken_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveRequestToken_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveRequestToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // CARRIER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.carrier = CarrierCode.findByValue(iprot.readI32());
                struct.setCarrierIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveRequestToken_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.carrier != null) {
          oprot.writeFieldBegin(CARRIER_FIELD_DESC);
          oprot.writeI32(struct.carrier.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveRequestToken_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveRequestToken_argsTupleScheme getScheme() {
        return new retrieveRequestToken_argsTupleScheme();
      }
    }

    private static class retrieveRequestToken_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveRequestToken_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveRequestToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCarrier()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCarrier()) {
          oprot.writeI32(struct.carrier.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveRequestToken_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.carrier = CarrierCode.findByValue(iprot.readI32());
          struct.setCarrierIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class retrieveRequestToken_result implements org.apache.thrift.TBase<retrieveRequestToken_result, retrieveRequestToken_result._Fields>, java.io.Serializable, Cloneable, Comparable<retrieveRequestToken_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("retrieveRequestToken_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new retrieveRequestToken_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new retrieveRequestToken_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable AgeCheckRequestResult success; // required
    public @org.apache.thrift.annotation.Nullable TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AgeCheckRequestResult.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(retrieveRequestToken_result.class, metaDataMap);
    }

    public retrieveRequestToken_result() {
    }

    public retrieveRequestToken_result(
      AgeCheckRequestResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public retrieveRequestToken_result(retrieveRequestToken_result other) {
      if (other.isSetSuccess()) {
        this.success = new AgeCheckRequestResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public retrieveRequestToken_result deepCopy() {
      return new retrieveRequestToken_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    @org.apache.thrift.annotation.Nullable
    public AgeCheckRequestResult getSuccess() {
      return this.success;
    }

    public retrieveRequestToken_result setSuccess(@org.apache.thrift.annotation.Nullable AgeCheckRequestResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public TalkException getE() {
      return this.e;
    }

    public retrieveRequestToken_result setE(@org.apache.thrift.annotation.Nullable TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AgeCheckRequestResult)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof retrieveRequestToken_result)
        return this.equals((retrieveRequestToken_result)that);
      return false;
    }

    public boolean equals(retrieveRequestToken_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(retrieveRequestToken_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("retrieveRequestToken_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class retrieveRequestToken_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveRequestToken_resultStandardScheme getScheme() {
        return new retrieveRequestToken_resultStandardScheme();
      }
    }

    private static class retrieveRequestToken_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<retrieveRequestToken_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, retrieveRequestToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new AgeCheckRequestResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, retrieveRequestToken_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class retrieveRequestToken_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public retrieveRequestToken_resultTupleScheme getScheme() {
        return new retrieveRequestToken_resultTupleScheme();
      }
    }

    private static class retrieveRequestToken_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<retrieveRequestToken_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, retrieveRequestToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, retrieveRequestToken_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new AgeCheckRequestResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
