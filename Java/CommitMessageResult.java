/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.0)", date = "2020-03-23")
public class CommitMessageResult implements org.apache.thrift.TBase<CommitMessageResult, CommitMessageResult._Fields>, java.io.Serializable, Cloneable, Comparable<CommitMessageResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommitMessageResult");

  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUCCESS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("successCount", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField FAIL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("failCount", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField UNREGISTER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("unregisterCount", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField BLOCK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("blockCount", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CommitMessageResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CommitMessageResultTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable Message message; // required
  /**
   * 
   * @see CommitMessageResultCode
   */
  public @org.apache.thrift.annotation.Nullable CommitMessageResultCode code; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String reason; // required
  public long successCount; // required
  public long failCount; // required
  public long unregisterCount; // required
  public long blockCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE((short)1, "message"),
    /**
     * 
     * @see CommitMessageResultCode
     */
    CODE((short)2, "code"),
    REASON((short)3, "reason"),
    SUCCESS_COUNT((short)4, "successCount"),
    FAIL_COUNT((short)5, "failCount"),
    UNREGISTER_COUNT((short)6, "unregisterCount"),
    BLOCK_COUNT((short)7, "blockCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE
          return MESSAGE;
        case 2: // CODE
          return CODE;
        case 3: // REASON
          return REASON;
        case 4: // SUCCESS_COUNT
          return SUCCESS_COUNT;
        case 5: // FAIL_COUNT
          return FAIL_COUNT;
        case 6: // UNREGISTER_COUNT
          return UNREGISTER_COUNT;
        case 7: // BLOCK_COUNT
          return BLOCK_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESSCOUNT_ISSET_ID = 0;
  private static final int __FAILCOUNT_ISSET_ID = 1;
  private static final int __UNREGISTERCOUNT_ISSET_ID = 2;
  private static final int __BLOCKCOUNT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Message")));
    tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CommitMessageResultCode.class)));
    tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("successCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAIL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("failCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNREGISTER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("unregisterCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("blockCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommitMessageResult.class, metaDataMap);
  }

  public CommitMessageResult() {
  }

  public CommitMessageResult(
    Message message,
    CommitMessageResultCode code,
    java.lang.String reason,
    long successCount,
    long failCount,
    long unregisterCount,
    long blockCount)
  {
    this();
    this.message = message;
    this.code = code;
    this.reason = reason;
    this.successCount = successCount;
    setSuccessCountIsSet(true);
    this.failCount = failCount;
    setFailCountIsSet(true);
    this.unregisterCount = unregisterCount;
    setUnregisterCountIsSet(true);
    this.blockCount = blockCount;
    setBlockCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommitMessageResult(CommitMessageResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMessage()) {
      this.message = new Message(other.message);
    }
    if (other.isSetCode()) {
      this.code = other.code;
    }
    if (other.isSetReason()) {
      this.reason = other.reason;
    }
    this.successCount = other.successCount;
    this.failCount = other.failCount;
    this.unregisterCount = other.unregisterCount;
    this.blockCount = other.blockCount;
  }

  public CommitMessageResult deepCopy() {
    return new CommitMessageResult(this);
  }

  @Override
  public void clear() {
    this.message = null;
    this.code = null;
    this.reason = null;
    setSuccessCountIsSet(false);
    this.successCount = 0;
    setFailCountIsSet(false);
    this.failCount = 0;
    setUnregisterCountIsSet(false);
    this.unregisterCount = 0;
    setBlockCountIsSet(false);
    this.blockCount = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public Message getMessage() {
    return this.message;
  }

  public CommitMessageResult setMessage(@org.apache.thrift.annotation.Nullable Message message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  /**
   * 
   * @see CommitMessageResultCode
   */
  @org.apache.thrift.annotation.Nullable
  public CommitMessageResultCode getCode() {
    return this.code;
  }

  /**
   * 
   * @see CommitMessageResultCode
   */
  public CommitMessageResult setCode(@org.apache.thrift.annotation.Nullable CommitMessageResultCode code) {
    this.code = code;
    return this;
  }

  public void unsetCode() {
    this.code = null;
  }

  /** Returns true if field code is set (has been assigned a value) and false otherwise */
  public boolean isSetCode() {
    return this.code != null;
  }

  public void setCodeIsSet(boolean value) {
    if (!value) {
      this.code = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReason() {
    return this.reason;
  }

  public CommitMessageResult setReason(@org.apache.thrift.annotation.Nullable java.lang.String reason) {
    this.reason = reason;
    return this;
  }

  public void unsetReason() {
    this.reason = null;
  }

  /** Returns true if field reason is set (has been assigned a value) and false otherwise */
  public boolean isSetReason() {
    return this.reason != null;
  }

  public void setReasonIsSet(boolean value) {
    if (!value) {
      this.reason = null;
    }
  }

  public long getSuccessCount() {
    return this.successCount;
  }

  public CommitMessageResult setSuccessCount(long successCount) {
    this.successCount = successCount;
    setSuccessCountIsSet(true);
    return this;
  }

  public void unsetSuccessCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESSCOUNT_ISSET_ID);
  }

  /** Returns true if field successCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESSCOUNT_ISSET_ID);
  }

  public void setSuccessCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESSCOUNT_ISSET_ID, value);
  }

  public long getFailCount() {
    return this.failCount;
  }

  public CommitMessageResult setFailCount(long failCount) {
    this.failCount = failCount;
    setFailCountIsSet(true);
    return this;
  }

  public void unsetFailCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILCOUNT_ISSET_ID);
  }

  /** Returns true if field failCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFailCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILCOUNT_ISSET_ID);
  }

  public void setFailCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILCOUNT_ISSET_ID, value);
  }

  public long getUnregisterCount() {
    return this.unregisterCount;
  }

  public CommitMessageResult setUnregisterCount(long unregisterCount) {
    this.unregisterCount = unregisterCount;
    setUnregisterCountIsSet(true);
    return this;
  }

  public void unsetUnregisterCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNREGISTERCOUNT_ISSET_ID);
  }

  /** Returns true if field unregisterCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnregisterCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNREGISTERCOUNT_ISSET_ID);
  }

  public void setUnregisterCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNREGISTERCOUNT_ISSET_ID, value);
  }

  public long getBlockCount() {
    return this.blockCount;
  }

  public CommitMessageResult setBlockCount(long blockCount) {
    this.blockCount = blockCount;
    setBlockCountIsSet(true);
    return this;
  }

  public void unsetBlockCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCKCOUNT_ISSET_ID);
  }

  /** Returns true if field blockCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCKCOUNT_ISSET_ID);
  }

  public void setBlockCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCKCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((Message)value);
      }
      break;

    case CODE:
      if (value == null) {
        unsetCode();
      } else {
        setCode((CommitMessageResultCode)value);
      }
      break;

    case REASON:
      if (value == null) {
        unsetReason();
      } else {
        setReason((java.lang.String)value);
      }
      break;

    case SUCCESS_COUNT:
      if (value == null) {
        unsetSuccessCount();
      } else {
        setSuccessCount((java.lang.Long)value);
      }
      break;

    case FAIL_COUNT:
      if (value == null) {
        unsetFailCount();
      } else {
        setFailCount((java.lang.Long)value);
      }
      break;

    case UNREGISTER_COUNT:
      if (value == null) {
        unsetUnregisterCount();
      } else {
        setUnregisterCount((java.lang.Long)value);
      }
      break;

    case BLOCK_COUNT:
      if (value == null) {
        unsetBlockCount();
      } else {
        setBlockCount((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE:
      return getMessage();

    case CODE:
      return getCode();

    case REASON:
      return getReason();

    case SUCCESS_COUNT:
      return getSuccessCount();

    case FAIL_COUNT:
      return getFailCount();

    case UNREGISTER_COUNT:
      return getUnregisterCount();

    case BLOCK_COUNT:
      return getBlockCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE:
      return isSetMessage();
    case CODE:
      return isSetCode();
    case REASON:
      return isSetReason();
    case SUCCESS_COUNT:
      return isSetSuccessCount();
    case FAIL_COUNT:
      return isSetFailCount();
    case UNREGISTER_COUNT:
      return isSetUnregisterCount();
    case BLOCK_COUNT:
      return isSetBlockCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof CommitMessageResult)
      return this.equals((CommitMessageResult)that);
    return false;
  }

  public boolean equals(CommitMessageResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_code = true && this.isSetCode();
    boolean that_present_code = true && that.isSetCode();
    if (this_present_code || that_present_code) {
      if (!(this_present_code && that_present_code))
        return false;
      if (!this.code.equals(that.code))
        return false;
    }

    boolean this_present_reason = true && this.isSetReason();
    boolean that_present_reason = true && that.isSetReason();
    if (this_present_reason || that_present_reason) {
      if (!(this_present_reason && that_present_reason))
        return false;
      if (!this.reason.equals(that.reason))
        return false;
    }

    boolean this_present_successCount = true;
    boolean that_present_successCount = true;
    if (this_present_successCount || that_present_successCount) {
      if (!(this_present_successCount && that_present_successCount))
        return false;
      if (this.successCount != that.successCount)
        return false;
    }

    boolean this_present_failCount = true;
    boolean that_present_failCount = true;
    if (this_present_failCount || that_present_failCount) {
      if (!(this_present_failCount && that_present_failCount))
        return false;
      if (this.failCount != that.failCount)
        return false;
    }

    boolean this_present_unregisterCount = true;
    boolean that_present_unregisterCount = true;
    if (this_present_unregisterCount || that_present_unregisterCount) {
      if (!(this_present_unregisterCount && that_present_unregisterCount))
        return false;
      if (this.unregisterCount != that.unregisterCount)
        return false;
    }

    boolean this_present_blockCount = true;
    boolean that_present_blockCount = true;
    if (this_present_blockCount || that_present_blockCount) {
      if (!(this_present_blockCount && that_present_blockCount))
        return false;
      if (this.blockCount != that.blockCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetCode()) ? 131071 : 524287);
    if (isSetCode())
      hashCode = hashCode * 8191 + code.getValue();

    hashCode = hashCode * 8191 + ((isSetReason()) ? 131071 : 524287);
    if (isSetReason())
      hashCode = hashCode * 8191 + reason.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(successCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(failCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(unregisterCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(blockCount);

    return hashCode;
  }

  @Override
  public int compareTo(CommitMessageResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetMessage(), other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCode(), other.isSetCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, other.code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReason(), other.isSetReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSuccessCount(), other.isSetSuccessCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successCount, other.successCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFailCount(), other.isSetFailCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failCount, other.failCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUnregisterCount(), other.isSetUnregisterCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnregisterCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unregisterCount, other.unregisterCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBlockCount(), other.isSetBlockCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockCount, other.blockCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CommitMessageResult(");
    boolean first = true;

    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("code:");
    if (this.code == null) {
      sb.append("null");
    } else {
      sb.append(this.code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reason:");
    if (this.reason == null) {
      sb.append("null");
    } else {
      sb.append(this.reason);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("successCount:");
    sb.append(this.successCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failCount:");
    sb.append(this.failCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unregisterCount:");
    sb.append(this.unregisterCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockCount:");
    sb.append(this.blockCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommitMessageResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CommitMessageResultStandardScheme getScheme() {
      return new CommitMessageResultStandardScheme();
    }
  }

  private static class CommitMessageResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CommitMessageResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommitMessageResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.message = new Message();
              struct.message.read(iprot);
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.code = CommitMessageResultCode.findByValue(iprot.readI32());
              struct.setCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reason = iprot.readString();
              struct.setReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUCCESS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.successCount = iprot.readI64();
              struct.setSuccessCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // FAIL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.failCount = iprot.readI64();
              struct.setFailCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNREGISTER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unregisterCount = iprot.readI64();
              struct.setUnregisterCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BLOCK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockCount = iprot.readI64();
              struct.setBlockCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommitMessageResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        struct.message.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.code != null) {
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeI32(struct.code.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.reason != null) {
        oprot.writeFieldBegin(REASON_FIELD_DESC);
        oprot.writeString(struct.reason);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUCCESS_COUNT_FIELD_DESC);
      oprot.writeI64(struct.successCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.failCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNREGISTER_COUNT_FIELD_DESC);
      oprot.writeI64(struct.unregisterCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.blockCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommitMessageResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CommitMessageResultTupleScheme getScheme() {
      return new CommitMessageResultTupleScheme();
    }
  }

  private static class CommitMessageResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CommitMessageResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommitMessageResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetCode()) {
        optionals.set(1);
      }
      if (struct.isSetReason()) {
        optionals.set(2);
      }
      if (struct.isSetSuccessCount()) {
        optionals.set(3);
      }
      if (struct.isSetFailCount()) {
        optionals.set(4);
      }
      if (struct.isSetUnregisterCount()) {
        optionals.set(5);
      }
      if (struct.isSetBlockCount()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetMessage()) {
        struct.message.write(oprot);
      }
      if (struct.isSetCode()) {
        oprot.writeI32(struct.code.getValue());
      }
      if (struct.isSetReason()) {
        oprot.writeString(struct.reason);
      }
      if (struct.isSetSuccessCount()) {
        oprot.writeI64(struct.successCount);
      }
      if (struct.isSetFailCount()) {
        oprot.writeI64(struct.failCount);
      }
      if (struct.isSetUnregisterCount()) {
        oprot.writeI64(struct.unregisterCount);
      }
      if (struct.isSetBlockCount()) {
        oprot.writeI64(struct.blockCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommitMessageResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.message = new Message();
        struct.message.read(iprot);
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.code = CommitMessageResultCode.findByValue(iprot.readI32());
        struct.setCodeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.reason = iprot.readString();
        struct.setReasonIsSet(true);
      }
      if (incoming.get(3)) {
        struct.successCount = iprot.readI64();
        struct.setSuccessCountIsSet(true);
      }
      if (incoming.get(4)) {
        struct.failCount = iprot.readI64();
        struct.setFailCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.unregisterCount = iprot.readI64();
        struct.setUnregisterCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.blockCount = iprot.readI64();
        struct.setBlockCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

