/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class GetSquareMemberRelationsResponse implements org.apache.thrift.TBase<GetSquareMemberRelationsResponse, GetSquareMemberRelationsResponse._Fields>, java.io.Serializable, Cloneable, Comparable<GetSquareMemberRelationsResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSquareMemberRelationsResponse");

  private static final org.apache.thrift.protocol.TField SQUARE_MEMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("squareMembers", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField RELATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("relations", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField CONTINUATION_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("continuationToken", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new GetSquareMemberRelationsResponseStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new GetSquareMemberRelationsResponseTupleSchemeFactory();

  public java.util.List<SquareMember> squareMembers; // required
  public java.util.Map<java.lang.String,SquareMemberRelation> relations; // required
  public java.lang.String continuationToken; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SQUARE_MEMBERS((short)1, "squareMembers"),
    RELATIONS((short)2, "relations"),
    CONTINUATION_TOKEN((short)3, "continuationToken");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SQUARE_MEMBERS
          return SQUARE_MEMBERS;
        case 2: // RELATIONS
          return RELATIONS;
        case 3: // CONTINUATION_TOKEN
          return CONTINUATION_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SQUARE_MEMBERS, new org.apache.thrift.meta_data.FieldMetaData("squareMembers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareMember.class))));
    tmpMap.put(_Fields.RELATIONS, new org.apache.thrift.meta_data.FieldMetaData("relations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareMemberRelation.class))));
    tmpMap.put(_Fields.CONTINUATION_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("continuationToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSquareMemberRelationsResponse.class, metaDataMap);
  }

  public GetSquareMemberRelationsResponse() {
  }

  public GetSquareMemberRelationsResponse(
    java.util.List<SquareMember> squareMembers,
    java.util.Map<java.lang.String,SquareMemberRelation> relations,
    java.lang.String continuationToken)
  {
    this();
    this.squareMembers = squareMembers;
    this.relations = relations;
    this.continuationToken = continuationToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GetSquareMemberRelationsResponse(GetSquareMemberRelationsResponse other) {
    if (other.isSetSquareMembers()) {
      java.util.List<SquareMember> __this__squareMembers = new java.util.ArrayList<SquareMember>(other.squareMembers.size());
      for (SquareMember other_element : other.squareMembers) {
        __this__squareMembers.add(new SquareMember(other_element));
      }
      this.squareMembers = __this__squareMembers;
    }
    if (other.isSetRelations()) {
      java.util.Map<java.lang.String,SquareMemberRelation> __this__relations = new java.util.HashMap<java.lang.String,SquareMemberRelation>(other.relations.size());
      for (java.util.Map.Entry<java.lang.String, SquareMemberRelation> other_element : other.relations.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        SquareMemberRelation other_element_value = other_element.getValue();

        java.lang.String __this__relations_copy_key = other_element_key;

        SquareMemberRelation __this__relations_copy_value = new SquareMemberRelation(other_element_value);

        __this__relations.put(__this__relations_copy_key, __this__relations_copy_value);
      }
      this.relations = __this__relations;
    }
    if (other.isSetContinuationToken()) {
      this.continuationToken = other.continuationToken;
    }
  }

  public GetSquareMemberRelationsResponse deepCopy() {
    return new GetSquareMemberRelationsResponse(this);
  }

  @Override
  public void clear() {
    this.squareMembers = null;
    this.relations = null;
    this.continuationToken = null;
  }

  public int getSquareMembersSize() {
    return (this.squareMembers == null) ? 0 : this.squareMembers.size();
  }

  public java.util.Iterator<SquareMember> getSquareMembersIterator() {
    return (this.squareMembers == null) ? null : this.squareMembers.iterator();
  }

  public void addToSquareMembers(SquareMember elem) {
    if (this.squareMembers == null) {
      this.squareMembers = new java.util.ArrayList<SquareMember>();
    }
    this.squareMembers.add(elem);
  }

  public java.util.List<SquareMember> getSquareMembers() {
    return this.squareMembers;
  }

  public GetSquareMemberRelationsResponse setSquareMembers(java.util.List<SquareMember> squareMembers) {
    this.squareMembers = squareMembers;
    return this;
  }

  public void unsetSquareMembers() {
    this.squareMembers = null;
  }

  /** Returns true if field squareMembers is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMembers() {
    return this.squareMembers != null;
  }

  public void setSquareMembersIsSet(boolean value) {
    if (!value) {
      this.squareMembers = null;
    }
  }

  public int getRelationsSize() {
    return (this.relations == null) ? 0 : this.relations.size();
  }

  public void putToRelations(java.lang.String key, SquareMemberRelation val) {
    if (this.relations == null) {
      this.relations = new java.util.HashMap<java.lang.String,SquareMemberRelation>();
    }
    this.relations.put(key, val);
  }

  public java.util.Map<java.lang.String,SquareMemberRelation> getRelations() {
    return this.relations;
  }

  public GetSquareMemberRelationsResponse setRelations(java.util.Map<java.lang.String,SquareMemberRelation> relations) {
    this.relations = relations;
    return this;
  }

  public void unsetRelations() {
    this.relations = null;
  }

  /** Returns true if field relations is set (has been assigned a value) and false otherwise */
  public boolean isSetRelations() {
    return this.relations != null;
  }

  public void setRelationsIsSet(boolean value) {
    if (!value) {
      this.relations = null;
    }
  }

  public java.lang.String getContinuationToken() {
    return this.continuationToken;
  }

  public GetSquareMemberRelationsResponse setContinuationToken(java.lang.String continuationToken) {
    this.continuationToken = continuationToken;
    return this;
  }

  public void unsetContinuationToken() {
    this.continuationToken = null;
  }

  /** Returns true if field continuationToken is set (has been assigned a value) and false otherwise */
  public boolean isSetContinuationToken() {
    return this.continuationToken != null;
  }

  public void setContinuationTokenIsSet(boolean value) {
    if (!value) {
      this.continuationToken = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SQUARE_MEMBERS:
      if (value == null) {
        unsetSquareMembers();
      } else {
        setSquareMembers((java.util.List<SquareMember>)value);
      }
      break;

    case RELATIONS:
      if (value == null) {
        unsetRelations();
      } else {
        setRelations((java.util.Map<java.lang.String,SquareMemberRelation>)value);
      }
      break;

    case CONTINUATION_TOKEN:
      if (value == null) {
        unsetContinuationToken();
      } else {
        setContinuationToken((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SQUARE_MEMBERS:
      return getSquareMembers();

    case RELATIONS:
      return getRelations();

    case CONTINUATION_TOKEN:
      return getContinuationToken();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SQUARE_MEMBERS:
      return isSetSquareMembers();
    case RELATIONS:
      return isSetRelations();
    case CONTINUATION_TOKEN:
      return isSetContinuationToken();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof GetSquareMemberRelationsResponse)
      return this.equals((GetSquareMemberRelationsResponse)that);
    return false;
  }

  public boolean equals(GetSquareMemberRelationsResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_squareMembers = true && this.isSetSquareMembers();
    boolean that_present_squareMembers = true && that.isSetSquareMembers();
    if (this_present_squareMembers || that_present_squareMembers) {
      if (!(this_present_squareMembers && that_present_squareMembers))
        return false;
      if (!this.squareMembers.equals(that.squareMembers))
        return false;
    }

    boolean this_present_relations = true && this.isSetRelations();
    boolean that_present_relations = true && that.isSetRelations();
    if (this_present_relations || that_present_relations) {
      if (!(this_present_relations && that_present_relations))
        return false;
      if (!this.relations.equals(that.relations))
        return false;
    }

    boolean this_present_continuationToken = true && this.isSetContinuationToken();
    boolean that_present_continuationToken = true && that.isSetContinuationToken();
    if (this_present_continuationToken || that_present_continuationToken) {
      if (!(this_present_continuationToken && that_present_continuationToken))
        return false;
      if (!this.continuationToken.equals(that.continuationToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSquareMembers()) ? 131071 : 524287);
    if (isSetSquareMembers())
      hashCode = hashCode * 8191 + squareMembers.hashCode();

    hashCode = hashCode * 8191 + ((isSetRelations()) ? 131071 : 524287);
    if (isSetRelations())
      hashCode = hashCode * 8191 + relations.hashCode();

    hashCode = hashCode * 8191 + ((isSetContinuationToken()) ? 131071 : 524287);
    if (isSetContinuationToken())
      hashCode = hashCode * 8191 + continuationToken.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(GetSquareMemberRelationsResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSquareMembers()).compareTo(other.isSetSquareMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMembers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareMembers, other.squareMembers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRelations()).compareTo(other.isSetRelations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRelations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.relations, other.relations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContinuationToken()).compareTo(other.isSetContinuationToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContinuationToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.continuationToken, other.continuationToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("GetSquareMemberRelationsResponse(");
    boolean first = true;

    sb.append("squareMembers:");
    if (this.squareMembers == null) {
      sb.append("null");
    } else {
      sb.append(this.squareMembers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("relations:");
    if (this.relations == null) {
      sb.append("null");
    } else {
      sb.append(this.relations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("continuationToken:");
    if (this.continuationToken == null) {
      sb.append("null");
    } else {
      sb.append(this.continuationToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GetSquareMemberRelationsResponseStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetSquareMemberRelationsResponseStandardScheme getScheme() {
      return new GetSquareMemberRelationsResponseStandardScheme();
    }
  }

  private static class GetSquareMemberRelationsResponseStandardScheme extends org.apache.thrift.scheme.StandardScheme<GetSquareMemberRelationsResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GetSquareMemberRelationsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SQUARE_MEMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list914 = iprot.readListBegin();
                struct.squareMembers = new java.util.ArrayList<SquareMember>(_list914.size);
                SquareMember _elem915;
                for (int _i916 = 0; _i916 < _list914.size; ++_i916)
                {
                  _elem915 = new SquareMember();
                  _elem915.read(iprot);
                  struct.squareMembers.add(_elem915);
                }
                iprot.readListEnd();
              }
              struct.setSquareMembersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RELATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map917 = iprot.readMapBegin();
                struct.relations = new java.util.HashMap<java.lang.String,SquareMemberRelation>(2*_map917.size);
                java.lang.String _key918;
                SquareMemberRelation _val919;
                for (int _i920 = 0; _i920 < _map917.size; ++_i920)
                {
                  _key918 = iprot.readString();
                  _val919 = new SquareMemberRelation();
                  _val919.read(iprot);
                  struct.relations.put(_key918, _val919);
                }
                iprot.readMapEnd();
              }
              struct.setRelationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CONTINUATION_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.continuationToken = iprot.readString();
              struct.setContinuationTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GetSquareMemberRelationsResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.squareMembers != null) {
        oprot.writeFieldBegin(SQUARE_MEMBERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.squareMembers.size()));
          for (SquareMember _iter921 : struct.squareMembers)
          {
            _iter921.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.relations != null) {
        oprot.writeFieldBegin(RELATIONS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.relations.size()));
          for (java.util.Map.Entry<java.lang.String, SquareMemberRelation> _iter922 : struct.relations.entrySet())
          {
            oprot.writeString(_iter922.getKey());
            _iter922.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.continuationToken != null) {
        oprot.writeFieldBegin(CONTINUATION_TOKEN_FIELD_DESC);
        oprot.writeString(struct.continuationToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GetSquareMemberRelationsResponseTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public GetSquareMemberRelationsResponseTupleScheme getScheme() {
      return new GetSquareMemberRelationsResponseTupleScheme();
    }
  }

  private static class GetSquareMemberRelationsResponseTupleScheme extends org.apache.thrift.scheme.TupleScheme<GetSquareMemberRelationsResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GetSquareMemberRelationsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSquareMembers()) {
        optionals.set(0);
      }
      if (struct.isSetRelations()) {
        optionals.set(1);
      }
      if (struct.isSetContinuationToken()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSquareMembers()) {
        {
          oprot.writeI32(struct.squareMembers.size());
          for (SquareMember _iter923 : struct.squareMembers)
          {
            _iter923.write(oprot);
          }
        }
      }
      if (struct.isSetRelations()) {
        {
          oprot.writeI32(struct.relations.size());
          for (java.util.Map.Entry<java.lang.String, SquareMemberRelation> _iter924 : struct.relations.entrySet())
          {
            oprot.writeString(_iter924.getKey());
            _iter924.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetContinuationToken()) {
        oprot.writeString(struct.continuationToken);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GetSquareMemberRelationsResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list925 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.squareMembers = new java.util.ArrayList<SquareMember>(_list925.size);
          SquareMember _elem926;
          for (int _i927 = 0; _i927 < _list925.size; ++_i927)
          {
            _elem926 = new SquareMember();
            _elem926.read(iprot);
            struct.squareMembers.add(_elem926);
          }
        }
        struct.setSquareMembersIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map928 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.relations = new java.util.HashMap<java.lang.String,SquareMemberRelation>(2*_map928.size);
          java.lang.String _key929;
          SquareMemberRelation _val930;
          for (int _i931 = 0; _i931 < _map928.size; ++_i931)
          {
            _key929 = iprot.readString();
            _val930 = new SquareMemberRelation();
            _val930.read(iprot);
            struct.relations.put(_key929, _val930);
          }
        }
        struct.setRelationsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.continuationToken = iprot.readString();
        struct.setContinuationTokenIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

