/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class PaidCallBalance implements org.apache.thrift.TBase<PaidCallBalance, PaidCallBalance._Fields>, java.io.Serializable, Cloneable, Comparable<PaidCallBalance> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaidCallBalance");

  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LIMITED_PAID_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitedPaidBalance", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LIMITED_FREE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("limitedFreeBalance", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField UNLIMITED_PAID_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("unlimitedPaidBalance", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField UNLIMITED_FREE_BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("unlimitedFreeBalance", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField AUTOPAY_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("autopayEnabled", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PaidCallBalanceStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PaidCallBalanceTupleSchemeFactory();

  /**
   * 
   * @see PaidCallProductType
   */
  public PaidCallProductType productType; // required
  public java.lang.String productName; // required
  public java.lang.String unit; // required
  public int limitedPaidBalance; // required
  public int limitedFreeBalance; // required
  public int unlimitedPaidBalance; // required
  public int unlimitedFreeBalance; // required
  public long startTime; // required
  public long endTime; // required
  public boolean autopayEnabled; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PaidCallProductType
     */
    PRODUCT_TYPE((short)1, "productType"),
    PRODUCT_NAME((short)2, "productName"),
    UNIT((short)3, "unit"),
    LIMITED_PAID_BALANCE((short)4, "limitedPaidBalance"),
    LIMITED_FREE_BALANCE((short)5, "limitedFreeBalance"),
    UNLIMITED_PAID_BALANCE((short)6, "unlimitedPaidBalance"),
    UNLIMITED_FREE_BALANCE((short)7, "unlimitedFreeBalance"),
    START_TIME((short)8, "startTime"),
    END_TIME((short)9, "endTime"),
    AUTOPAY_ENABLED((short)10, "autopayEnabled");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 2: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 3: // UNIT
          return UNIT;
        case 4: // LIMITED_PAID_BALANCE
          return LIMITED_PAID_BALANCE;
        case 5: // LIMITED_FREE_BALANCE
          return LIMITED_FREE_BALANCE;
        case 6: // UNLIMITED_PAID_BALANCE
          return UNLIMITED_PAID_BALANCE;
        case 7: // UNLIMITED_FREE_BALANCE
          return UNLIMITED_FREE_BALANCE;
        case 8: // START_TIME
          return START_TIME;
        case 9: // END_TIME
          return END_TIME;
        case 10: // AUTOPAY_ENABLED
          return AUTOPAY_ENABLED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LIMITEDPAIDBALANCE_ISSET_ID = 0;
  private static final int __LIMITEDFREEBALANCE_ISSET_ID = 1;
  private static final int __UNLIMITEDPAIDBALANCE_ISSET_ID = 2;
  private static final int __UNLIMITEDFREEBALANCE_ISSET_ID = 3;
  private static final int __STARTTIME_ISSET_ID = 4;
  private static final int __ENDTIME_ISSET_ID = 5;
  private static final int __AUTOPAYENABLED_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaidCallProductType.class)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMITED_PAID_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("limitedPaidBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LIMITED_FREE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("limitedFreeBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLIMITED_PAID_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("unlimitedPaidBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNLIMITED_FREE_BALANCE, new org.apache.thrift.meta_data.FieldMetaData("unlimitedFreeBalance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.AUTOPAY_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("autopayEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaidCallBalance.class, metaDataMap);
  }

  public PaidCallBalance() {
  }

  public PaidCallBalance(
    PaidCallProductType productType,
    java.lang.String productName,
    java.lang.String unit,
    int limitedPaidBalance,
    int limitedFreeBalance,
    int unlimitedPaidBalance,
    int unlimitedFreeBalance,
    long startTime,
    long endTime,
    boolean autopayEnabled)
  {
    this();
    this.productType = productType;
    this.productName = productName;
    this.unit = unit;
    this.limitedPaidBalance = limitedPaidBalance;
    setLimitedPaidBalanceIsSet(true);
    this.limitedFreeBalance = limitedFreeBalance;
    setLimitedFreeBalanceIsSet(true);
    this.unlimitedPaidBalance = unlimitedPaidBalance;
    setUnlimitedPaidBalanceIsSet(true);
    this.unlimitedFreeBalance = unlimitedFreeBalance;
    setUnlimitedFreeBalanceIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.autopayEnabled = autopayEnabled;
    setAutopayEnabledIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaidCallBalance(PaidCallBalance other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProductType()) {
      this.productType = other.productType;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    if (other.isSetUnit()) {
      this.unit = other.unit;
    }
    this.limitedPaidBalance = other.limitedPaidBalance;
    this.limitedFreeBalance = other.limitedFreeBalance;
    this.unlimitedPaidBalance = other.unlimitedPaidBalance;
    this.unlimitedFreeBalance = other.unlimitedFreeBalance;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    this.autopayEnabled = other.autopayEnabled;
  }

  public PaidCallBalance deepCopy() {
    return new PaidCallBalance(this);
  }

  @Override
  public void clear() {
    this.productType = null;
    this.productName = null;
    this.unit = null;
    setLimitedPaidBalanceIsSet(false);
    this.limitedPaidBalance = 0;
    setLimitedFreeBalanceIsSet(false);
    this.limitedFreeBalance = 0;
    setUnlimitedPaidBalanceIsSet(false);
    this.unlimitedPaidBalance = 0;
    setUnlimitedFreeBalanceIsSet(false);
    this.unlimitedFreeBalance = 0;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    setAutopayEnabledIsSet(false);
    this.autopayEnabled = false;
  }

  /**
   * 
   * @see PaidCallProductType
   */
  public PaidCallProductType getProductType() {
    return this.productType;
  }

  /**
   * 
   * @see PaidCallProductType
   */
  public PaidCallBalance setProductType(PaidCallProductType productType) {
    this.productType = productType;
    return this;
  }

  public void unsetProductType() {
    this.productType = null;
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return this.productType != null;
  }

  public void setProductTypeIsSet(boolean value) {
    if (!value) {
      this.productType = null;
    }
  }

  public java.lang.String getProductName() {
    return this.productName;
  }

  public PaidCallBalance setProductName(java.lang.String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public java.lang.String getUnit() {
    return this.unit;
  }

  public PaidCallBalance setUnit(java.lang.String unit) {
    this.unit = unit;
    return this;
  }

  public void unsetUnit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return this.unit != null;
  }

  public void setUnitIsSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public int getLimitedPaidBalance() {
    return this.limitedPaidBalance;
  }

  public PaidCallBalance setLimitedPaidBalance(int limitedPaidBalance) {
    this.limitedPaidBalance = limitedPaidBalance;
    setLimitedPaidBalanceIsSet(true);
    return this;
  }

  public void unsetLimitedPaidBalance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMITEDPAIDBALANCE_ISSET_ID);
  }

  /** Returns true if field limitedPaidBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitedPaidBalance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMITEDPAIDBALANCE_ISSET_ID);
  }

  public void setLimitedPaidBalanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMITEDPAIDBALANCE_ISSET_ID, value);
  }

  public int getLimitedFreeBalance() {
    return this.limitedFreeBalance;
  }

  public PaidCallBalance setLimitedFreeBalance(int limitedFreeBalance) {
    this.limitedFreeBalance = limitedFreeBalance;
    setLimitedFreeBalanceIsSet(true);
    return this;
  }

  public void unsetLimitedFreeBalance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMITEDFREEBALANCE_ISSET_ID);
  }

  /** Returns true if field limitedFreeBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitedFreeBalance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMITEDFREEBALANCE_ISSET_ID);
  }

  public void setLimitedFreeBalanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMITEDFREEBALANCE_ISSET_ID, value);
  }

  public int getUnlimitedPaidBalance() {
    return this.unlimitedPaidBalance;
  }

  public PaidCallBalance setUnlimitedPaidBalance(int unlimitedPaidBalance) {
    this.unlimitedPaidBalance = unlimitedPaidBalance;
    setUnlimitedPaidBalanceIsSet(true);
    return this;
  }

  public void unsetUnlimitedPaidBalance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNLIMITEDPAIDBALANCE_ISSET_ID);
  }

  /** Returns true if field unlimitedPaidBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlimitedPaidBalance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNLIMITEDPAIDBALANCE_ISSET_ID);
  }

  public void setUnlimitedPaidBalanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNLIMITEDPAIDBALANCE_ISSET_ID, value);
  }

  public int getUnlimitedFreeBalance() {
    return this.unlimitedFreeBalance;
  }

  public PaidCallBalance setUnlimitedFreeBalance(int unlimitedFreeBalance) {
    this.unlimitedFreeBalance = unlimitedFreeBalance;
    setUnlimitedFreeBalanceIsSet(true);
    return this;
  }

  public void unsetUnlimitedFreeBalance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNLIMITEDFREEBALANCE_ISSET_ID);
  }

  /** Returns true if field unlimitedFreeBalance is set (has been assigned a value) and false otherwise */
  public boolean isSetUnlimitedFreeBalance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNLIMITEDFREEBALANCE_ISSET_ID);
  }

  public void setUnlimitedFreeBalanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNLIMITEDFREEBALANCE_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.startTime;
  }

  public PaidCallBalance setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public PaidCallBalance setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public boolean isAutopayEnabled() {
    return this.autopayEnabled;
  }

  public PaidCallBalance setAutopayEnabled(boolean autopayEnabled) {
    this.autopayEnabled = autopayEnabled;
    setAutopayEnabledIsSet(true);
    return this;
  }

  public void unsetAutopayEnabled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTOPAYENABLED_ISSET_ID);
  }

  /** Returns true if field autopayEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetAutopayEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTOPAYENABLED_ISSET_ID);
  }

  public void setAutopayEnabledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTOPAYENABLED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((PaidCallProductType)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((java.lang.String)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unsetUnit();
      } else {
        setUnit((java.lang.String)value);
      }
      break;

    case LIMITED_PAID_BALANCE:
      if (value == null) {
        unsetLimitedPaidBalance();
      } else {
        setLimitedPaidBalance((java.lang.Integer)value);
      }
      break;

    case LIMITED_FREE_BALANCE:
      if (value == null) {
        unsetLimitedFreeBalance();
      } else {
        setLimitedFreeBalance((java.lang.Integer)value);
      }
      break;

    case UNLIMITED_PAID_BALANCE:
      if (value == null) {
        unsetUnlimitedPaidBalance();
      } else {
        setUnlimitedPaidBalance((java.lang.Integer)value);
      }
      break;

    case UNLIMITED_FREE_BALANCE:
      if (value == null) {
        unsetUnlimitedFreeBalance();
      } else {
        setUnlimitedFreeBalance((java.lang.Integer)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((java.lang.Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((java.lang.Long)value);
      }
      break;

    case AUTOPAY_ENABLED:
      if (value == null) {
        unsetAutopayEnabled();
      } else {
        setAutopayEnabled((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PRODUCT_TYPE:
      return getProductType();

    case PRODUCT_NAME:
      return getProductName();

    case UNIT:
      return getUnit();

    case LIMITED_PAID_BALANCE:
      return getLimitedPaidBalance();

    case LIMITED_FREE_BALANCE:
      return getLimitedFreeBalance();

    case UNLIMITED_PAID_BALANCE:
      return getUnlimitedPaidBalance();

    case UNLIMITED_FREE_BALANCE:
      return getUnlimitedFreeBalance();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case AUTOPAY_ENABLED:
      return isAutopayEnabled();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PRODUCT_TYPE:
      return isSetProductType();
    case PRODUCT_NAME:
      return isSetProductName();
    case UNIT:
      return isSetUnit();
    case LIMITED_PAID_BALANCE:
      return isSetLimitedPaidBalance();
    case LIMITED_FREE_BALANCE:
      return isSetLimitedFreeBalance();
    case UNLIMITED_PAID_BALANCE:
      return isSetUnlimitedPaidBalance();
    case UNLIMITED_FREE_BALANCE:
      return isSetUnlimitedFreeBalance();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case AUTOPAY_ENABLED:
      return isSetAutopayEnabled();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PaidCallBalance)
      return this.equals((PaidCallBalance)that);
    return false;
  }

  public boolean equals(PaidCallBalance that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_productType = true && this.isSetProductType();
    boolean that_present_productType = true && that.isSetProductType();
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (!this.productType.equals(that.productType))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_limitedPaidBalance = true;
    boolean that_present_limitedPaidBalance = true;
    if (this_present_limitedPaidBalance || that_present_limitedPaidBalance) {
      if (!(this_present_limitedPaidBalance && that_present_limitedPaidBalance))
        return false;
      if (this.limitedPaidBalance != that.limitedPaidBalance)
        return false;
    }

    boolean this_present_limitedFreeBalance = true;
    boolean that_present_limitedFreeBalance = true;
    if (this_present_limitedFreeBalance || that_present_limitedFreeBalance) {
      if (!(this_present_limitedFreeBalance && that_present_limitedFreeBalance))
        return false;
      if (this.limitedFreeBalance != that.limitedFreeBalance)
        return false;
    }

    boolean this_present_unlimitedPaidBalance = true;
    boolean that_present_unlimitedPaidBalance = true;
    if (this_present_unlimitedPaidBalance || that_present_unlimitedPaidBalance) {
      if (!(this_present_unlimitedPaidBalance && that_present_unlimitedPaidBalance))
        return false;
      if (this.unlimitedPaidBalance != that.unlimitedPaidBalance)
        return false;
    }

    boolean this_present_unlimitedFreeBalance = true;
    boolean that_present_unlimitedFreeBalance = true;
    if (this_present_unlimitedFreeBalance || that_present_unlimitedFreeBalance) {
      if (!(this_present_unlimitedFreeBalance && that_present_unlimitedFreeBalance))
        return false;
      if (this.unlimitedFreeBalance != that.unlimitedFreeBalance)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_autopayEnabled = true;
    boolean that_present_autopayEnabled = true;
    if (this_present_autopayEnabled || that_present_autopayEnabled) {
      if (!(this_present_autopayEnabled && that_present_autopayEnabled))
        return false;
      if (this.autopayEnabled != that.autopayEnabled)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetProductType()) ? 131071 : 524287);
    if (isSetProductType())
      hashCode = hashCode * 8191 + productType.getValue();

    hashCode = hashCode * 8191 + ((isSetProductName()) ? 131071 : 524287);
    if (isSetProductName())
      hashCode = hashCode * 8191 + productName.hashCode();

    hashCode = hashCode * 8191 + ((isSetUnit()) ? 131071 : 524287);
    if (isSetUnit())
      hashCode = hashCode * 8191 + unit.hashCode();

    hashCode = hashCode * 8191 + limitedPaidBalance;

    hashCode = hashCode * 8191 + limitedFreeBalance;

    hashCode = hashCode * 8191 + unlimitedPaidBalance;

    hashCode = hashCode * 8191 + unlimitedFreeBalance;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endTime);

    hashCode = hashCode * 8191 + ((autopayEnabled) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(PaidCallBalance other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnit()).compareTo(other.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLimitedPaidBalance()).compareTo(other.isSetLimitedPaidBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitedPaidBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitedPaidBalance, other.limitedPaidBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLimitedFreeBalance()).compareTo(other.isSetLimitedFreeBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitedFreeBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitedFreeBalance, other.limitedFreeBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnlimitedPaidBalance()).compareTo(other.isSetUnlimitedPaidBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlimitedPaidBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlimitedPaidBalance, other.unlimitedPaidBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnlimitedFreeBalance()).compareTo(other.isSetUnlimitedFreeBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnlimitedFreeBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unlimitedFreeBalance, other.unlimitedFreeBalance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAutopayEnabled()).compareTo(other.isSetAutopayEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutopayEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autopayEnabled, other.autopayEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PaidCallBalance(");
    boolean first = true;

    sb.append("productType:");
    if (this.productType == null) {
      sb.append("null");
    } else {
      sb.append(this.productType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unit:");
    if (this.unit == null) {
      sb.append("null");
    } else {
      sb.append(this.unit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitedPaidBalance:");
    sb.append(this.limitedPaidBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitedFreeBalance:");
    sb.append(this.limitedFreeBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlimitedPaidBalance:");
    sb.append(this.unlimitedPaidBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unlimitedFreeBalance:");
    sb.append(this.unlimitedFreeBalance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("autopayEnabled:");
    sb.append(this.autopayEnabled);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaidCallBalanceStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaidCallBalanceStandardScheme getScheme() {
      return new PaidCallBalanceStandardScheme();
    }
  }

  private static class PaidCallBalanceStandardScheme extends org.apache.thrift.scheme.StandardScheme<PaidCallBalance> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaidCallBalance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productType = PaidCallProductType.findByValue(iprot.readI32());
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unit = iprot.readString();
              struct.setUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LIMITED_PAID_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitedPaidBalance = iprot.readI32();
              struct.setLimitedPaidBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIMITED_FREE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.limitedFreeBalance = iprot.readI32();
              struct.setLimitedFreeBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // UNLIMITED_PAID_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unlimitedPaidBalance = iprot.readI32();
              struct.setUnlimitedPaidBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // UNLIMITED_FREE_BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.unlimitedFreeBalance = iprot.readI32();
              struct.setUnlimitedFreeBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // AUTOPAY_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.autopayEnabled = iprot.readBool();
              struct.setAutopayEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaidCallBalance struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.productType != null) {
        oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.productType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      if (struct.unit != null) {
        oprot.writeFieldBegin(UNIT_FIELD_DESC);
        oprot.writeString(struct.unit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMITED_PAID_BALANCE_FIELD_DESC);
      oprot.writeI32(struct.limitedPaidBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMITED_FREE_BALANCE_FIELD_DESC);
      oprot.writeI32(struct.limitedFreeBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLIMITED_PAID_BALANCE_FIELD_DESC);
      oprot.writeI32(struct.unlimitedPaidBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNLIMITED_FREE_BALANCE_FIELD_DESC);
      oprot.writeI32(struct.unlimitedFreeBalance);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AUTOPAY_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.autopayEnabled);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaidCallBalanceTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaidCallBalanceTupleScheme getScheme() {
      return new PaidCallBalanceTupleScheme();
    }
  }

  private static class PaidCallBalanceTupleScheme extends org.apache.thrift.scheme.TupleScheme<PaidCallBalance> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaidCallBalance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetProductType()) {
        optionals.set(0);
      }
      if (struct.isSetProductName()) {
        optionals.set(1);
      }
      if (struct.isSetUnit()) {
        optionals.set(2);
      }
      if (struct.isSetLimitedPaidBalance()) {
        optionals.set(3);
      }
      if (struct.isSetLimitedFreeBalance()) {
        optionals.set(4);
      }
      if (struct.isSetUnlimitedPaidBalance()) {
        optionals.set(5);
      }
      if (struct.isSetUnlimitedFreeBalance()) {
        optionals.set(6);
      }
      if (struct.isSetStartTime()) {
        optionals.set(7);
      }
      if (struct.isSetEndTime()) {
        optionals.set(8);
      }
      if (struct.isSetAutopayEnabled()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetProductType()) {
        oprot.writeI32(struct.productType.getValue());
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetUnit()) {
        oprot.writeString(struct.unit);
      }
      if (struct.isSetLimitedPaidBalance()) {
        oprot.writeI32(struct.limitedPaidBalance);
      }
      if (struct.isSetLimitedFreeBalance()) {
        oprot.writeI32(struct.limitedFreeBalance);
      }
      if (struct.isSetUnlimitedPaidBalance()) {
        oprot.writeI32(struct.unlimitedPaidBalance);
      }
      if (struct.isSetUnlimitedFreeBalance()) {
        oprot.writeI32(struct.unlimitedFreeBalance);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetAutopayEnabled()) {
        oprot.writeBool(struct.autopayEnabled);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaidCallBalance struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.productType = PaidCallProductType.findByValue(iprot.readI32());
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.unit = iprot.readString();
        struct.setUnitIsSet(true);
      }
      if (incoming.get(3)) {
        struct.limitedPaidBalance = iprot.readI32();
        struct.setLimitedPaidBalanceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.limitedFreeBalance = iprot.readI32();
        struct.setLimitedFreeBalanceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.unlimitedPaidBalance = iprot.readI32();
        struct.setUnlimitedPaidBalanceIsSet(true);
      }
      if (incoming.get(6)) {
        struct.unlimitedFreeBalance = iprot.readI32();
        struct.setUnlimitedFreeBalanceIsSet(true);
      }
      if (incoming.get(7)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.autopayEnabled = iprot.readBool();
        struct.setAutopayEnabledIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

