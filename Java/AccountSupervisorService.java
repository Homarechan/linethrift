/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class AccountSupervisorService {

  public interface Iface {

    public RSAKey getRSAKey() throws TalkException, org.apache.thrift.TException;

    public void notifyEmailConfirmationResult(java.util.Map<java.lang.String,java.lang.String> parameterMap) throws TalkException, org.apache.thrift.TException;

    public java.lang.String registerVirtualAccount(java.lang.String locale, java.lang.String encryptedVirtualUserId, java.lang.String encryptedPassword) throws TalkException, org.apache.thrift.TException;

    public void requestVirtualAccountPasswordChange(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedOldPassword, java.lang.String encryptedNewPassword) throws TalkException, org.apache.thrift.TException;

    public void requestVirtualAccountPasswordSet(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedNewPassword) throws TalkException, org.apache.thrift.TException;

    public void unregisterVirtualAccount(java.lang.String virtualMid) throws TalkException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getRSAKey(org.apache.thrift.async.AsyncMethodCallback<RSAKey> resultHandler) throws org.apache.thrift.TException;

    public void notifyEmailConfirmationResult(java.util.Map<java.lang.String,java.lang.String> parameterMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void registerVirtualAccount(java.lang.String locale, java.lang.String encryptedVirtualUserId, java.lang.String encryptedPassword, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void requestVirtualAccountPasswordChange(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedOldPassword, java.lang.String encryptedNewPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void requestVirtualAccountPasswordSet(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedNewPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void unregisterVirtualAccount(java.lang.String virtualMid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public RSAKey getRSAKey() throws TalkException, org.apache.thrift.TException
    {
      send_getRSAKey();
      return recv_getRSAKey();
    }

    public void send_getRSAKey() throws org.apache.thrift.TException
    {
      getRSAKey_args args = new getRSAKey_args();
      sendBase("getRSAKey", args);
    }

    public RSAKey recv_getRSAKey() throws TalkException, org.apache.thrift.TException
    {
      getRSAKey_result result = new getRSAKey_result();
      receiveBase(result, "getRSAKey");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRSAKey failed: unknown result");
    }

    public void notifyEmailConfirmationResult(java.util.Map<java.lang.String,java.lang.String> parameterMap) throws TalkException, org.apache.thrift.TException
    {
      send_notifyEmailConfirmationResult(parameterMap);
      recv_notifyEmailConfirmationResult();
    }

    public void send_notifyEmailConfirmationResult(java.util.Map<java.lang.String,java.lang.String> parameterMap) throws org.apache.thrift.TException
    {
      notifyEmailConfirmationResult_args args = new notifyEmailConfirmationResult_args();
      args.setParameterMap(parameterMap);
      sendBase("notifyEmailConfirmationResult", args);
    }

    public void recv_notifyEmailConfirmationResult() throws TalkException, org.apache.thrift.TException
    {
      notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
      receiveBase(result, "notifyEmailConfirmationResult");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public java.lang.String registerVirtualAccount(java.lang.String locale, java.lang.String encryptedVirtualUserId, java.lang.String encryptedPassword) throws TalkException, org.apache.thrift.TException
    {
      send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword);
      return recv_registerVirtualAccount();
    }

    public void send_registerVirtualAccount(java.lang.String locale, java.lang.String encryptedVirtualUserId, java.lang.String encryptedPassword) throws org.apache.thrift.TException
    {
      registerVirtualAccount_args args = new registerVirtualAccount_args();
      args.setLocale(locale);
      args.setEncryptedVirtualUserId(encryptedVirtualUserId);
      args.setEncryptedPassword(encryptedPassword);
      sendBase("registerVirtualAccount", args);
    }

    public java.lang.String recv_registerVirtualAccount() throws TalkException, org.apache.thrift.TException
    {
      registerVirtualAccount_result result = new registerVirtualAccount_result();
      receiveBase(result, "registerVirtualAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerVirtualAccount failed: unknown result");
    }

    public void requestVirtualAccountPasswordChange(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedOldPassword, java.lang.String encryptedNewPassword) throws TalkException, org.apache.thrift.TException
    {
      send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
      recv_requestVirtualAccountPasswordChange();
    }

    public void send_requestVirtualAccountPasswordChange(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedOldPassword, java.lang.String encryptedNewPassword) throws org.apache.thrift.TException
    {
      requestVirtualAccountPasswordChange_args args = new requestVirtualAccountPasswordChange_args();
      args.setVirtualMid(virtualMid);
      args.setEncryptedVirtualUserId(encryptedVirtualUserId);
      args.setEncryptedOldPassword(encryptedOldPassword);
      args.setEncryptedNewPassword(encryptedNewPassword);
      sendBase("requestVirtualAccountPasswordChange", args);
    }

    public void recv_requestVirtualAccountPasswordChange() throws TalkException, org.apache.thrift.TException
    {
      requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
      receiveBase(result, "requestVirtualAccountPasswordChange");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void requestVirtualAccountPasswordSet(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedNewPassword) throws TalkException, org.apache.thrift.TException
    {
      send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
      recv_requestVirtualAccountPasswordSet();
    }

    public void send_requestVirtualAccountPasswordSet(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedNewPassword) throws org.apache.thrift.TException
    {
      requestVirtualAccountPasswordSet_args args = new requestVirtualAccountPasswordSet_args();
      args.setVirtualMid(virtualMid);
      args.setEncryptedVirtualUserId(encryptedVirtualUserId);
      args.setEncryptedNewPassword(encryptedNewPassword);
      sendBase("requestVirtualAccountPasswordSet", args);
    }

    public void recv_requestVirtualAccountPasswordSet() throws TalkException, org.apache.thrift.TException
    {
      requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
      receiveBase(result, "requestVirtualAccountPasswordSet");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void unregisterVirtualAccount(java.lang.String virtualMid) throws TalkException, org.apache.thrift.TException
    {
      send_unregisterVirtualAccount(virtualMid);
      recv_unregisterVirtualAccount();
    }

    public void send_unregisterVirtualAccount(java.lang.String virtualMid) throws org.apache.thrift.TException
    {
      unregisterVirtualAccount_args args = new unregisterVirtualAccount_args();
      args.setVirtualMid(virtualMid);
      sendBase("unregisterVirtualAccount", args);
    }

    public void recv_unregisterVirtualAccount() throws TalkException, org.apache.thrift.TException
    {
      unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
      receiveBase(result, "unregisterVirtualAccount");
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getRSAKey(org.apache.thrift.async.AsyncMethodCallback<RSAKey> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRSAKey_call method_call = new getRSAKey_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRSAKey_call extends org.apache.thrift.async.TAsyncMethodCall<RSAKey> {
      public getRSAKey_call(org.apache.thrift.async.AsyncMethodCallback<RSAKey> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRSAKey", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRSAKey_args args = new getRSAKey_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RSAKey getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRSAKey();
      }
    }

    public void notifyEmailConfirmationResult(java.util.Map<java.lang.String,java.lang.String> parameterMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyEmailConfirmationResult_call method_call = new notifyEmailConfirmationResult_call(parameterMap, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyEmailConfirmationResult_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.util.Map<java.lang.String,java.lang.String> parameterMap;
      public notifyEmailConfirmationResult_call(java.util.Map<java.lang.String,java.lang.String> parameterMap, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.parameterMap = parameterMap;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyEmailConfirmationResult", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyEmailConfirmationResult_args args = new notifyEmailConfirmationResult_args();
        args.setParameterMap(parameterMap);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void registerVirtualAccount(java.lang.String locale, java.lang.String encryptedVirtualUserId, java.lang.String encryptedPassword, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerVirtualAccount_call method_call = new registerVirtualAccount_call(locale, encryptedVirtualUserId, encryptedPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerVirtualAccount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String locale;
      private java.lang.String encryptedVirtualUserId;
      private java.lang.String encryptedPassword;
      public registerVirtualAccount_call(java.lang.String locale, java.lang.String encryptedVirtualUserId, java.lang.String encryptedPassword, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locale = locale;
        this.encryptedVirtualUserId = encryptedVirtualUserId;
        this.encryptedPassword = encryptedPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerVirtualAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerVirtualAccount_args args = new registerVirtualAccount_args();
        args.setLocale(locale);
        args.setEncryptedVirtualUserId(encryptedVirtualUserId);
        args.setEncryptedPassword(encryptedPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerVirtualAccount();
      }
    }

    public void requestVirtualAccountPasswordChange(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedOldPassword, java.lang.String encryptedNewPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestVirtualAccountPasswordChange_call method_call = new requestVirtualAccountPasswordChange_call(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestVirtualAccountPasswordChange_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String virtualMid;
      private java.lang.String encryptedVirtualUserId;
      private java.lang.String encryptedOldPassword;
      private java.lang.String encryptedNewPassword;
      public requestVirtualAccountPasswordChange_call(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedOldPassword, java.lang.String encryptedNewPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.virtualMid = virtualMid;
        this.encryptedVirtualUserId = encryptedVirtualUserId;
        this.encryptedOldPassword = encryptedOldPassword;
        this.encryptedNewPassword = encryptedNewPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestVirtualAccountPasswordChange", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestVirtualAccountPasswordChange_args args = new requestVirtualAccountPasswordChange_args();
        args.setVirtualMid(virtualMid);
        args.setEncryptedVirtualUserId(encryptedVirtualUserId);
        args.setEncryptedOldPassword(encryptedOldPassword);
        args.setEncryptedNewPassword(encryptedNewPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void requestVirtualAccountPasswordSet(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedNewPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      requestVirtualAccountPasswordSet_call method_call = new requestVirtualAccountPasswordSet_call(virtualMid, encryptedVirtualUserId, encryptedNewPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class requestVirtualAccountPasswordSet_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String virtualMid;
      private java.lang.String encryptedVirtualUserId;
      private java.lang.String encryptedNewPassword;
      public requestVirtualAccountPasswordSet_call(java.lang.String virtualMid, java.lang.String encryptedVirtualUserId, java.lang.String encryptedNewPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.virtualMid = virtualMid;
        this.encryptedVirtualUserId = encryptedVirtualUserId;
        this.encryptedNewPassword = encryptedNewPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("requestVirtualAccountPasswordSet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        requestVirtualAccountPasswordSet_args args = new requestVirtualAccountPasswordSet_args();
        args.setVirtualMid(virtualMid);
        args.setEncryptedVirtualUserId(encryptedVirtualUserId);
        args.setEncryptedNewPassword(encryptedNewPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void unregisterVirtualAccount(java.lang.String virtualMid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unregisterVirtualAccount_call method_call = new unregisterVirtualAccount_call(virtualMid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unregisterVirtualAccount_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String virtualMid;
      public unregisterVirtualAccount_call(java.lang.String virtualMid, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.virtualMid = virtualMid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unregisterVirtualAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unregisterVirtualAccount_args args = new unregisterVirtualAccount_args();
        args.setVirtualMid(virtualMid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws TalkException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getRSAKey", new getRSAKey());
      processMap.put("notifyEmailConfirmationResult", new notifyEmailConfirmationResult());
      processMap.put("registerVirtualAccount", new registerVirtualAccount());
      processMap.put("requestVirtualAccountPasswordChange", new requestVirtualAccountPasswordChange());
      processMap.put("requestVirtualAccountPasswordSet", new requestVirtualAccountPasswordSet());
      processMap.put("unregisterVirtualAccount", new unregisterVirtualAccount());
      return processMap;
    }

    public static class getRSAKey<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRSAKey_args> {
      public getRSAKey() {
        super("getRSAKey");
      }

      public getRSAKey_args getEmptyArgsInstance() {
        return new getRSAKey_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getRSAKey_result getResult(I iface, getRSAKey_args args) throws org.apache.thrift.TException {
        getRSAKey_result result = new getRSAKey_result();
        try {
          result.success = iface.getRSAKey();
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class notifyEmailConfirmationResult<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyEmailConfirmationResult_args> {
      public notifyEmailConfirmationResult() {
        super("notifyEmailConfirmationResult");
      }

      public notifyEmailConfirmationResult_args getEmptyArgsInstance() {
        return new notifyEmailConfirmationResult_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public notifyEmailConfirmationResult_result getResult(I iface, notifyEmailConfirmationResult_args args) throws org.apache.thrift.TException {
        notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
        try {
          iface.notifyEmailConfirmationResult(args.parameterMap);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class registerVirtualAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerVirtualAccount_args> {
      public registerVirtualAccount() {
        super("registerVirtualAccount");
      }

      public registerVirtualAccount_args getEmptyArgsInstance() {
        return new registerVirtualAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public registerVirtualAccount_result getResult(I iface, registerVirtualAccount_args args) throws org.apache.thrift.TException {
        registerVirtualAccount_result result = new registerVirtualAccount_result();
        try {
          result.success = iface.registerVirtualAccount(args.locale, args.encryptedVirtualUserId, args.encryptedPassword);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class requestVirtualAccountPasswordChange<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestVirtualAccountPasswordChange_args> {
      public requestVirtualAccountPasswordChange() {
        super("requestVirtualAccountPasswordChange");
      }

      public requestVirtualAccountPasswordChange_args getEmptyArgsInstance() {
        return new requestVirtualAccountPasswordChange_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public requestVirtualAccountPasswordChange_result getResult(I iface, requestVirtualAccountPasswordChange_args args) throws org.apache.thrift.TException {
        requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
        try {
          iface.requestVirtualAccountPasswordChange(args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class requestVirtualAccountPasswordSet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, requestVirtualAccountPasswordSet_args> {
      public requestVirtualAccountPasswordSet() {
        super("requestVirtualAccountPasswordSet");
      }

      public requestVirtualAccountPasswordSet_args getEmptyArgsInstance() {
        return new requestVirtualAccountPasswordSet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public requestVirtualAccountPasswordSet_result getResult(I iface, requestVirtualAccountPasswordSet_args args) throws org.apache.thrift.TException {
        requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
        try {
          iface.requestVirtualAccountPasswordSet(args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class unregisterVirtualAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unregisterVirtualAccount_args> {
      public unregisterVirtualAccount() {
        super("unregisterVirtualAccount");
      }

      public unregisterVirtualAccount_args getEmptyArgsInstance() {
        return new unregisterVirtualAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public unregisterVirtualAccount_result getResult(I iface, unregisterVirtualAccount_args args) throws org.apache.thrift.TException {
        unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
        try {
          iface.unregisterVirtualAccount(args.virtualMid);
        } catch (TalkException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getRSAKey", new getRSAKey());
      processMap.put("notifyEmailConfirmationResult", new notifyEmailConfirmationResult());
      processMap.put("registerVirtualAccount", new registerVirtualAccount());
      processMap.put("requestVirtualAccountPasswordChange", new requestVirtualAccountPasswordChange());
      processMap.put("requestVirtualAccountPasswordSet", new requestVirtualAccountPasswordSet());
      processMap.put("unregisterVirtualAccount", new unregisterVirtualAccount());
      return processMap;
    }

    public static class getRSAKey<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRSAKey_args, RSAKey> {
      public getRSAKey() {
        super("getRSAKey");
      }

      public getRSAKey_args getEmptyArgsInstance() {
        return new getRSAKey_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<RSAKey> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<RSAKey>() { 
          public void onComplete(RSAKey o) {
            getRSAKey_result result = new getRSAKey_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getRSAKey_result result = new getRSAKey_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRSAKey_args args, org.apache.thrift.async.AsyncMethodCallback<RSAKey> resultHandler) throws org.apache.thrift.TException {
        iface.getRSAKey(resultHandler);
      }
    }

    public static class notifyEmailConfirmationResult<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyEmailConfirmationResult_args, Void> {
      public notifyEmailConfirmationResult() {
        super("notifyEmailConfirmationResult");
      }

      public notifyEmailConfirmationResult_args getEmptyArgsInstance() {
        return new notifyEmailConfirmationResult_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyEmailConfirmationResult_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.notifyEmailConfirmationResult(args.parameterMap,resultHandler);
      }
    }

    public static class registerVirtualAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerVirtualAccount_args, java.lang.String> {
      public registerVirtualAccount() {
        super("registerVirtualAccount");
      }

      public registerVirtualAccount_args getEmptyArgsInstance() {
        return new registerVirtualAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            registerVirtualAccount_result result = new registerVirtualAccount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            registerVirtualAccount_result result = new registerVirtualAccount_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerVirtualAccount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.registerVirtualAccount(args.locale, args.encryptedVirtualUserId, args.encryptedPassword,resultHandler);
      }
    }

    public static class requestVirtualAccountPasswordChange<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestVirtualAccountPasswordChange_args, Void> {
      public requestVirtualAccountPasswordChange() {
        super("requestVirtualAccountPasswordChange");
      }

      public requestVirtualAccountPasswordChange_args getEmptyArgsInstance() {
        return new requestVirtualAccountPasswordChange_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestVirtualAccountPasswordChange_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.requestVirtualAccountPasswordChange(args.virtualMid, args.encryptedVirtualUserId, args.encryptedOldPassword, args.encryptedNewPassword,resultHandler);
      }
    }

    public static class requestVirtualAccountPasswordSet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, requestVirtualAccountPasswordSet_args, Void> {
      public requestVirtualAccountPasswordSet() {
        super("requestVirtualAccountPasswordSet");
      }

      public requestVirtualAccountPasswordSet_args getEmptyArgsInstance() {
        return new requestVirtualAccountPasswordSet_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, requestVirtualAccountPasswordSet_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.requestVirtualAccountPasswordSet(args.virtualMid, args.encryptedVirtualUserId, args.encryptedNewPassword,resultHandler);
      }
    }

    public static class unregisterVirtualAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unregisterVirtualAccount_args, Void> {
      public unregisterVirtualAccount() {
        super("unregisterVirtualAccount");
      }

      public unregisterVirtualAccount_args getEmptyArgsInstance() {
        return new unregisterVirtualAccount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
            if (e instanceof TalkException) {
              result.e = (TalkException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unregisterVirtualAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.unregisterVirtualAccount(args.virtualMid,resultHandler);
      }
    }

  }

  public static class getRSAKey_args implements org.apache.thrift.TBase<getRSAKey_args, getRSAKey_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRSAKey_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRSAKey_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRSAKey_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRSAKey_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRSAKey_args.class, metaDataMap);
    }

    public getRSAKey_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRSAKey_args(getRSAKey_args other) {
    }

    public getRSAKey_args deepCopy() {
      return new getRSAKey_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRSAKey_args)
        return this.equals((getRSAKey_args)that);
      return false;
    }

    public boolean equals(getRSAKey_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getRSAKey_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRSAKey_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRSAKey_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRSAKey_argsStandardScheme getScheme() {
        return new getRSAKey_argsStandardScheme();
      }
    }

    private static class getRSAKey_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRSAKey_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRSAKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRSAKey_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRSAKey_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRSAKey_argsTupleScheme getScheme() {
        return new getRSAKey_argsTupleScheme();
      }
    }

    private static class getRSAKey_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRSAKey_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRSAKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRSAKey_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getRSAKey_result implements org.apache.thrift.TBase<getRSAKey_result, getRSAKey_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRSAKey_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRSAKey_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getRSAKey_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getRSAKey_resultTupleSchemeFactory();

    public RSAKey success; // required
    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RSAKey.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRSAKey_result.class, metaDataMap);
    }

    public getRSAKey_result() {
    }

    public getRSAKey_result(
      RSAKey success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRSAKey_result(getRSAKey_result other) {
      if (other.isSetSuccess()) {
        this.success = new RSAKey(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getRSAKey_result deepCopy() {
      return new getRSAKey_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public RSAKey getSuccess() {
      return this.success;
    }

    public getRSAKey_result setSuccess(RSAKey success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public getRSAKey_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RSAKey)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getRSAKey_result)
        return this.equals((getRSAKey_result)that);
      return false;
    }

    public boolean equals(getRSAKey_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getRSAKey_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getRSAKey_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRSAKey_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRSAKey_resultStandardScheme getScheme() {
        return new getRSAKey_resultStandardScheme();
      }
    }

    private static class getRSAKey_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getRSAKey_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRSAKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RSAKey();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRSAKey_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRSAKey_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getRSAKey_resultTupleScheme getScheme() {
        return new getRSAKey_resultTupleScheme();
      }
    }

    private static class getRSAKey_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getRSAKey_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRSAKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRSAKey_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RSAKey();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyEmailConfirmationResult_args implements org.apache.thrift.TBase<notifyEmailConfirmationResult_args, notifyEmailConfirmationResult_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyEmailConfirmationResult_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyEmailConfirmationResult_args");

    private static final org.apache.thrift.protocol.TField PARAMETER_MAP_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterMap", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyEmailConfirmationResult_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyEmailConfirmationResult_argsTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> parameterMap; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PARAMETER_MAP((short)2, "parameterMap");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // PARAMETER_MAP
            return PARAMETER_MAP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PARAMETER_MAP, new org.apache.thrift.meta_data.FieldMetaData("parameterMap", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyEmailConfirmationResult_args.class, metaDataMap);
    }

    public notifyEmailConfirmationResult_args() {
    }

    public notifyEmailConfirmationResult_args(
      java.util.Map<java.lang.String,java.lang.String> parameterMap)
    {
      this();
      this.parameterMap = parameterMap;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyEmailConfirmationResult_args(notifyEmailConfirmationResult_args other) {
      if (other.isSetParameterMap()) {
        java.util.Map<java.lang.String,java.lang.String> __this__parameterMap = new java.util.HashMap<java.lang.String,java.lang.String>(other.parameterMap);
        this.parameterMap = __this__parameterMap;
      }
    }

    public notifyEmailConfirmationResult_args deepCopy() {
      return new notifyEmailConfirmationResult_args(this);
    }

    @Override
    public void clear() {
      this.parameterMap = null;
    }

    public int getParameterMapSize() {
      return (this.parameterMap == null) ? 0 : this.parameterMap.size();
    }

    public void putToParameterMap(java.lang.String key, java.lang.String val) {
      if (this.parameterMap == null) {
        this.parameterMap = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.parameterMap.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getParameterMap() {
      return this.parameterMap;
    }

    public notifyEmailConfirmationResult_args setParameterMap(java.util.Map<java.lang.String,java.lang.String> parameterMap) {
      this.parameterMap = parameterMap;
      return this;
    }

    public void unsetParameterMap() {
      this.parameterMap = null;
    }

    /** Returns true if field parameterMap is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterMap() {
      return this.parameterMap != null;
    }

    public void setParameterMapIsSet(boolean value) {
      if (!value) {
        this.parameterMap = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PARAMETER_MAP:
        if (value == null) {
          unsetParameterMap();
        } else {
          setParameterMap((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PARAMETER_MAP:
        return getParameterMap();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PARAMETER_MAP:
        return isSetParameterMap();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyEmailConfirmationResult_args)
        return this.equals((notifyEmailConfirmationResult_args)that);
      return false;
    }

    public boolean equals(notifyEmailConfirmationResult_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_parameterMap = true && this.isSetParameterMap();
      boolean that_present_parameterMap = true && that.isSetParameterMap();
      if (this_present_parameterMap || that_present_parameterMap) {
        if (!(this_present_parameterMap && that_present_parameterMap))
          return false;
        if (!this.parameterMap.equals(that.parameterMap))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetParameterMap()) ? 131071 : 524287);
      if (isSetParameterMap())
        hashCode = hashCode * 8191 + parameterMap.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyEmailConfirmationResult_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetParameterMap()).compareTo(other.isSetParameterMap());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterMap()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterMap, other.parameterMap);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyEmailConfirmationResult_args(");
      boolean first = true;

      sb.append("parameterMap:");
      if (this.parameterMap == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterMap);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyEmailConfirmationResult_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyEmailConfirmationResult_argsStandardScheme getScheme() {
        return new notifyEmailConfirmationResult_argsStandardScheme();
      }
    }

    private static class notifyEmailConfirmationResult_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyEmailConfirmationResult_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyEmailConfirmationResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // PARAMETER_MAP
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map1266 = iprot.readMapBegin();
                  struct.parameterMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map1266.size);
                  java.lang.String _key1267;
                  java.lang.String _val1268;
                  for (int _i1269 = 0; _i1269 < _map1266.size; ++_i1269)
                  {
                    _key1267 = iprot.readString();
                    _val1268 = iprot.readString();
                    struct.parameterMap.put(_key1267, _val1268);
                  }
                  iprot.readMapEnd();
                }
                struct.setParameterMapIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyEmailConfirmationResult_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.parameterMap != null) {
          oprot.writeFieldBegin(PARAMETER_MAP_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameterMap.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter1270 : struct.parameterMap.entrySet())
            {
              oprot.writeString(_iter1270.getKey());
              oprot.writeString(_iter1270.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyEmailConfirmationResult_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyEmailConfirmationResult_argsTupleScheme getScheme() {
        return new notifyEmailConfirmationResult_argsTupleScheme();
      }
    }

    private static class notifyEmailConfirmationResult_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyEmailConfirmationResult_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyEmailConfirmationResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetParameterMap()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetParameterMap()) {
          {
            oprot.writeI32(struct.parameterMap.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter1271 : struct.parameterMap.entrySet())
            {
              oprot.writeString(_iter1271.getKey());
              oprot.writeString(_iter1271.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyEmailConfirmationResult_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map1272 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.parameterMap = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map1272.size);
            java.lang.String _key1273;
            java.lang.String _val1274;
            for (int _i1275 = 0; _i1275 < _map1272.size; ++_i1275)
            {
              _key1273 = iprot.readString();
              _val1274 = iprot.readString();
              struct.parameterMap.put(_key1273, _val1274);
            }
          }
          struct.setParameterMapIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyEmailConfirmationResult_result implements org.apache.thrift.TBase<notifyEmailConfirmationResult_result, notifyEmailConfirmationResult_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyEmailConfirmationResult_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyEmailConfirmationResult_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyEmailConfirmationResult_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyEmailConfirmationResult_resultTupleSchemeFactory();

    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyEmailConfirmationResult_result.class, metaDataMap);
    }

    public notifyEmailConfirmationResult_result() {
    }

    public notifyEmailConfirmationResult_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyEmailConfirmationResult_result(notifyEmailConfirmationResult_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyEmailConfirmationResult_result deepCopy() {
      return new notifyEmailConfirmationResult_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public notifyEmailConfirmationResult_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyEmailConfirmationResult_result)
        return this.equals((notifyEmailConfirmationResult_result)that);
      return false;
    }

    public boolean equals(notifyEmailConfirmationResult_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyEmailConfirmationResult_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyEmailConfirmationResult_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyEmailConfirmationResult_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyEmailConfirmationResult_resultStandardScheme getScheme() {
        return new notifyEmailConfirmationResult_resultStandardScheme();
      }
    }

    private static class notifyEmailConfirmationResult_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyEmailConfirmationResult_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyEmailConfirmationResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyEmailConfirmationResult_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyEmailConfirmationResult_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyEmailConfirmationResult_resultTupleScheme getScheme() {
        return new notifyEmailConfirmationResult_resultTupleScheme();
      }
    }

    private static class notifyEmailConfirmationResult_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyEmailConfirmationResult_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyEmailConfirmationResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyEmailConfirmationResult_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerVirtualAccount_args implements org.apache.thrift.TBase<registerVirtualAccount_args, registerVirtualAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerVirtualAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerVirtualAccount_args");

    private static final org.apache.thrift.protocol.TField LOCALE_FIELD_DESC = new org.apache.thrift.protocol.TField("locale", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedVirtualUserId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedPassword", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerVirtualAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerVirtualAccount_argsTupleSchemeFactory();

    public java.lang.String locale; // required
    public java.lang.String encryptedVirtualUserId; // required
    public java.lang.String encryptedPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCALE((short)2, "locale"),
      ENCRYPTED_VIRTUAL_USER_ID((short)3, "encryptedVirtualUserId"),
      ENCRYPTED_PASSWORD((short)4, "encryptedPassword");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // LOCALE
            return LOCALE;
          case 3: // ENCRYPTED_VIRTUAL_USER_ID
            return ENCRYPTED_VIRTUAL_USER_ID;
          case 4: // ENCRYPTED_PASSWORD
            return ENCRYPTED_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCALE, new org.apache.thrift.meta_data.FieldMetaData("locale", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENCRYPTED_VIRTUAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("encryptedVirtualUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENCRYPTED_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("encryptedPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerVirtualAccount_args.class, metaDataMap);
    }

    public registerVirtualAccount_args() {
    }

    public registerVirtualAccount_args(
      java.lang.String locale,
      java.lang.String encryptedVirtualUserId,
      java.lang.String encryptedPassword)
    {
      this();
      this.locale = locale;
      this.encryptedVirtualUserId = encryptedVirtualUserId;
      this.encryptedPassword = encryptedPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerVirtualAccount_args(registerVirtualAccount_args other) {
      if (other.isSetLocale()) {
        this.locale = other.locale;
      }
      if (other.isSetEncryptedVirtualUserId()) {
        this.encryptedVirtualUserId = other.encryptedVirtualUserId;
      }
      if (other.isSetEncryptedPassword()) {
        this.encryptedPassword = other.encryptedPassword;
      }
    }

    public registerVirtualAccount_args deepCopy() {
      return new registerVirtualAccount_args(this);
    }

    @Override
    public void clear() {
      this.locale = null;
      this.encryptedVirtualUserId = null;
      this.encryptedPassword = null;
    }

    public java.lang.String getLocale() {
      return this.locale;
    }

    public registerVirtualAccount_args setLocale(java.lang.String locale) {
      this.locale = locale;
      return this;
    }

    public void unsetLocale() {
      this.locale = null;
    }

    /** Returns true if field locale is set (has been assigned a value) and false otherwise */
    public boolean isSetLocale() {
      return this.locale != null;
    }

    public void setLocaleIsSet(boolean value) {
      if (!value) {
        this.locale = null;
      }
    }

    public java.lang.String getEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId;
    }

    public registerVirtualAccount_args setEncryptedVirtualUserId(java.lang.String encryptedVirtualUserId) {
      this.encryptedVirtualUserId = encryptedVirtualUserId;
      return this;
    }

    public void unsetEncryptedVirtualUserId() {
      this.encryptedVirtualUserId = null;
    }

    /** Returns true if field encryptedVirtualUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId != null;
    }

    public void setEncryptedVirtualUserIdIsSet(boolean value) {
      if (!value) {
        this.encryptedVirtualUserId = null;
      }
    }

    public java.lang.String getEncryptedPassword() {
      return this.encryptedPassword;
    }

    public registerVirtualAccount_args setEncryptedPassword(java.lang.String encryptedPassword) {
      this.encryptedPassword = encryptedPassword;
      return this;
    }

    public void unsetEncryptedPassword() {
      this.encryptedPassword = null;
    }

    /** Returns true if field encryptedPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedPassword() {
      return this.encryptedPassword != null;
    }

    public void setEncryptedPasswordIsSet(boolean value) {
      if (!value) {
        this.encryptedPassword = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case LOCALE:
        if (value == null) {
          unsetLocale();
        } else {
          setLocale((java.lang.String)value);
        }
        break;

      case ENCRYPTED_VIRTUAL_USER_ID:
        if (value == null) {
          unsetEncryptedVirtualUserId();
        } else {
          setEncryptedVirtualUserId((java.lang.String)value);
        }
        break;

      case ENCRYPTED_PASSWORD:
        if (value == null) {
          unsetEncryptedPassword();
        } else {
          setEncryptedPassword((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCALE:
        return getLocale();

      case ENCRYPTED_VIRTUAL_USER_ID:
        return getEncryptedVirtualUserId();

      case ENCRYPTED_PASSWORD:
        return getEncryptedPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case LOCALE:
        return isSetLocale();
      case ENCRYPTED_VIRTUAL_USER_ID:
        return isSetEncryptedVirtualUserId();
      case ENCRYPTED_PASSWORD:
        return isSetEncryptedPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerVirtualAccount_args)
        return this.equals((registerVirtualAccount_args)that);
      return false;
    }

    public boolean equals(registerVirtualAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_locale = true && this.isSetLocale();
      boolean that_present_locale = true && that.isSetLocale();
      if (this_present_locale || that_present_locale) {
        if (!(this_present_locale && that_present_locale))
          return false;
        if (!this.locale.equals(that.locale))
          return false;
      }

      boolean this_present_encryptedVirtualUserId = true && this.isSetEncryptedVirtualUserId();
      boolean that_present_encryptedVirtualUserId = true && that.isSetEncryptedVirtualUserId();
      if (this_present_encryptedVirtualUserId || that_present_encryptedVirtualUserId) {
        if (!(this_present_encryptedVirtualUserId && that_present_encryptedVirtualUserId))
          return false;
        if (!this.encryptedVirtualUserId.equals(that.encryptedVirtualUserId))
          return false;
      }

      boolean this_present_encryptedPassword = true && this.isSetEncryptedPassword();
      boolean that_present_encryptedPassword = true && that.isSetEncryptedPassword();
      if (this_present_encryptedPassword || that_present_encryptedPassword) {
        if (!(this_present_encryptedPassword && that_present_encryptedPassword))
          return false;
        if (!this.encryptedPassword.equals(that.encryptedPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetLocale()) ? 131071 : 524287);
      if (isSetLocale())
        hashCode = hashCode * 8191 + locale.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedVirtualUserId()) ? 131071 : 524287);
      if (isSetEncryptedVirtualUserId())
        hashCode = hashCode * 8191 + encryptedVirtualUserId.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedPassword()) ? 131071 : 524287);
      if (isSetEncryptedPassword())
        hashCode = hashCode * 8191 + encryptedPassword.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerVirtualAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetLocale()).compareTo(other.isSetLocale());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocale()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locale, other.locale);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEncryptedVirtualUserId()).compareTo(other.isSetEncryptedVirtualUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedVirtualUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedVirtualUserId, other.encryptedVirtualUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEncryptedPassword()).compareTo(other.isSetEncryptedPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedPassword, other.encryptedPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerVirtualAccount_args(");
      boolean first = true;

      sb.append("locale:");
      if (this.locale == null) {
        sb.append("null");
      } else {
        sb.append(this.locale);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedVirtualUserId:");
      if (this.encryptedVirtualUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedVirtualUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedPassword:");
      if (this.encryptedPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerVirtualAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerVirtualAccount_argsStandardScheme getScheme() {
        return new registerVirtualAccount_argsStandardScheme();
      }
    }

    private static class registerVirtualAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerVirtualAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerVirtualAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // LOCALE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.locale = iprot.readString();
                struct.setLocaleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENCRYPTED_VIRTUAL_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedVirtualUserId = iprot.readString();
                struct.setEncryptedVirtualUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENCRYPTED_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedPassword = iprot.readString();
                struct.setEncryptedPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerVirtualAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locale != null) {
          oprot.writeFieldBegin(LOCALE_FIELD_DESC);
          oprot.writeString(struct.locale);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedVirtualUserId != null) {
          oprot.writeFieldBegin(ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
          oprot.writeString(struct.encryptedVirtualUserId);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedPassword != null) {
          oprot.writeFieldBegin(ENCRYPTED_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.encryptedPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerVirtualAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerVirtualAccount_argsTupleScheme getScheme() {
        return new registerVirtualAccount_argsTupleScheme();
      }
    }

    private static class registerVirtualAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerVirtualAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerVirtualAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetLocale()) {
          optionals.set(0);
        }
        if (struct.isSetEncryptedVirtualUserId()) {
          optionals.set(1);
        }
        if (struct.isSetEncryptedPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetLocale()) {
          oprot.writeString(struct.locale);
        }
        if (struct.isSetEncryptedVirtualUserId()) {
          oprot.writeString(struct.encryptedVirtualUserId);
        }
        if (struct.isSetEncryptedPassword()) {
          oprot.writeString(struct.encryptedPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerVirtualAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.locale = iprot.readString();
          struct.setLocaleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.encryptedVirtualUserId = iprot.readString();
          struct.setEncryptedVirtualUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.encryptedPassword = iprot.readString();
          struct.setEncryptedPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class registerVirtualAccount_result implements org.apache.thrift.TBase<registerVirtualAccount_result, registerVirtualAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerVirtualAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerVirtualAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new registerVirtualAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new registerVirtualAccount_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerVirtualAccount_result.class, metaDataMap);
    }

    public registerVirtualAccount_result() {
    }

    public registerVirtualAccount_result(
      java.lang.String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerVirtualAccount_result(registerVirtualAccount_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public registerVirtualAccount_result deepCopy() {
      return new registerVirtualAccount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public registerVirtualAccount_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public registerVirtualAccount_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof registerVirtualAccount_result)
        return this.equals((registerVirtualAccount_result)that);
      return false;
    }

    public boolean equals(registerVirtualAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(registerVirtualAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("registerVirtualAccount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerVirtualAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerVirtualAccount_resultStandardScheme getScheme() {
        return new registerVirtualAccount_resultStandardScheme();
      }
    }

    private static class registerVirtualAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<registerVirtualAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerVirtualAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerVirtualAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerVirtualAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public registerVirtualAccount_resultTupleScheme getScheme() {
        return new registerVirtualAccount_resultTupleScheme();
      }
    }

    private static class registerVirtualAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<registerVirtualAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerVirtualAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerVirtualAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestVirtualAccountPasswordChange_args implements org.apache.thrift.TBase<requestVirtualAccountPasswordChange_args, requestVirtualAccountPasswordChange_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestVirtualAccountPasswordChange_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestVirtualAccountPasswordChange_args");

    private static final org.apache.thrift.protocol.TField VIRTUAL_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualMid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedVirtualUserId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_OLD_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedOldPassword", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedNewPassword", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestVirtualAccountPasswordChange_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestVirtualAccountPasswordChange_argsTupleSchemeFactory();

    public java.lang.String virtualMid; // required
    public java.lang.String encryptedVirtualUserId; // required
    public java.lang.String encryptedOldPassword; // required
    public java.lang.String encryptedNewPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIRTUAL_MID((short)2, "virtualMid"),
      ENCRYPTED_VIRTUAL_USER_ID((short)3, "encryptedVirtualUserId"),
      ENCRYPTED_OLD_PASSWORD((short)4, "encryptedOldPassword"),
      ENCRYPTED_NEW_PASSWORD((short)5, "encryptedNewPassword");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // VIRTUAL_MID
            return VIRTUAL_MID;
          case 3: // ENCRYPTED_VIRTUAL_USER_ID
            return ENCRYPTED_VIRTUAL_USER_ID;
          case 4: // ENCRYPTED_OLD_PASSWORD
            return ENCRYPTED_OLD_PASSWORD;
          case 5: // ENCRYPTED_NEW_PASSWORD
            return ENCRYPTED_NEW_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIRTUAL_MID, new org.apache.thrift.meta_data.FieldMetaData("virtualMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENCRYPTED_VIRTUAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("encryptedVirtualUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENCRYPTED_OLD_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("encryptedOldPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENCRYPTED_NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("encryptedNewPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestVirtualAccountPasswordChange_args.class, metaDataMap);
    }

    public requestVirtualAccountPasswordChange_args() {
    }

    public requestVirtualAccountPasswordChange_args(
      java.lang.String virtualMid,
      java.lang.String encryptedVirtualUserId,
      java.lang.String encryptedOldPassword,
      java.lang.String encryptedNewPassword)
    {
      this();
      this.virtualMid = virtualMid;
      this.encryptedVirtualUserId = encryptedVirtualUserId;
      this.encryptedOldPassword = encryptedOldPassword;
      this.encryptedNewPassword = encryptedNewPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVirtualAccountPasswordChange_args(requestVirtualAccountPasswordChange_args other) {
      if (other.isSetVirtualMid()) {
        this.virtualMid = other.virtualMid;
      }
      if (other.isSetEncryptedVirtualUserId()) {
        this.encryptedVirtualUserId = other.encryptedVirtualUserId;
      }
      if (other.isSetEncryptedOldPassword()) {
        this.encryptedOldPassword = other.encryptedOldPassword;
      }
      if (other.isSetEncryptedNewPassword()) {
        this.encryptedNewPassword = other.encryptedNewPassword;
      }
    }

    public requestVirtualAccountPasswordChange_args deepCopy() {
      return new requestVirtualAccountPasswordChange_args(this);
    }

    @Override
    public void clear() {
      this.virtualMid = null;
      this.encryptedVirtualUserId = null;
      this.encryptedOldPassword = null;
      this.encryptedNewPassword = null;
    }

    public java.lang.String getVirtualMid() {
      return this.virtualMid;
    }

    public requestVirtualAccountPasswordChange_args setVirtualMid(java.lang.String virtualMid) {
      this.virtualMid = virtualMid;
      return this;
    }

    public void unsetVirtualMid() {
      this.virtualMid = null;
    }

    /** Returns true if field virtualMid is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualMid() {
      return this.virtualMid != null;
    }

    public void setVirtualMidIsSet(boolean value) {
      if (!value) {
        this.virtualMid = null;
      }
    }

    public java.lang.String getEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId;
    }

    public requestVirtualAccountPasswordChange_args setEncryptedVirtualUserId(java.lang.String encryptedVirtualUserId) {
      this.encryptedVirtualUserId = encryptedVirtualUserId;
      return this;
    }

    public void unsetEncryptedVirtualUserId() {
      this.encryptedVirtualUserId = null;
    }

    /** Returns true if field encryptedVirtualUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId != null;
    }

    public void setEncryptedVirtualUserIdIsSet(boolean value) {
      if (!value) {
        this.encryptedVirtualUserId = null;
      }
    }

    public java.lang.String getEncryptedOldPassword() {
      return this.encryptedOldPassword;
    }

    public requestVirtualAccountPasswordChange_args setEncryptedOldPassword(java.lang.String encryptedOldPassword) {
      this.encryptedOldPassword = encryptedOldPassword;
      return this;
    }

    public void unsetEncryptedOldPassword() {
      this.encryptedOldPassword = null;
    }

    /** Returns true if field encryptedOldPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedOldPassword() {
      return this.encryptedOldPassword != null;
    }

    public void setEncryptedOldPasswordIsSet(boolean value) {
      if (!value) {
        this.encryptedOldPassword = null;
      }
    }

    public java.lang.String getEncryptedNewPassword() {
      return this.encryptedNewPassword;
    }

    public requestVirtualAccountPasswordChange_args setEncryptedNewPassword(java.lang.String encryptedNewPassword) {
      this.encryptedNewPassword = encryptedNewPassword;
      return this;
    }

    public void unsetEncryptedNewPassword() {
      this.encryptedNewPassword = null;
    }

    /** Returns true if field encryptedNewPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedNewPassword() {
      return this.encryptedNewPassword != null;
    }

    public void setEncryptedNewPasswordIsSet(boolean value) {
      if (!value) {
        this.encryptedNewPassword = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case VIRTUAL_MID:
        if (value == null) {
          unsetVirtualMid();
        } else {
          setVirtualMid((java.lang.String)value);
        }
        break;

      case ENCRYPTED_VIRTUAL_USER_ID:
        if (value == null) {
          unsetEncryptedVirtualUserId();
        } else {
          setEncryptedVirtualUserId((java.lang.String)value);
        }
        break;

      case ENCRYPTED_OLD_PASSWORD:
        if (value == null) {
          unsetEncryptedOldPassword();
        } else {
          setEncryptedOldPassword((java.lang.String)value);
        }
        break;

      case ENCRYPTED_NEW_PASSWORD:
        if (value == null) {
          unsetEncryptedNewPassword();
        } else {
          setEncryptedNewPassword((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VIRTUAL_MID:
        return getVirtualMid();

      case ENCRYPTED_VIRTUAL_USER_ID:
        return getEncryptedVirtualUserId();

      case ENCRYPTED_OLD_PASSWORD:
        return getEncryptedOldPassword();

      case ENCRYPTED_NEW_PASSWORD:
        return getEncryptedNewPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VIRTUAL_MID:
        return isSetVirtualMid();
      case ENCRYPTED_VIRTUAL_USER_ID:
        return isSetEncryptedVirtualUserId();
      case ENCRYPTED_OLD_PASSWORD:
        return isSetEncryptedOldPassword();
      case ENCRYPTED_NEW_PASSWORD:
        return isSetEncryptedNewPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVirtualAccountPasswordChange_args)
        return this.equals((requestVirtualAccountPasswordChange_args)that);
      return false;
    }

    public boolean equals(requestVirtualAccountPasswordChange_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_virtualMid = true && this.isSetVirtualMid();
      boolean that_present_virtualMid = true && that.isSetVirtualMid();
      if (this_present_virtualMid || that_present_virtualMid) {
        if (!(this_present_virtualMid && that_present_virtualMid))
          return false;
        if (!this.virtualMid.equals(that.virtualMid))
          return false;
      }

      boolean this_present_encryptedVirtualUserId = true && this.isSetEncryptedVirtualUserId();
      boolean that_present_encryptedVirtualUserId = true && that.isSetEncryptedVirtualUserId();
      if (this_present_encryptedVirtualUserId || that_present_encryptedVirtualUserId) {
        if (!(this_present_encryptedVirtualUserId && that_present_encryptedVirtualUserId))
          return false;
        if (!this.encryptedVirtualUserId.equals(that.encryptedVirtualUserId))
          return false;
      }

      boolean this_present_encryptedOldPassword = true && this.isSetEncryptedOldPassword();
      boolean that_present_encryptedOldPassword = true && that.isSetEncryptedOldPassword();
      if (this_present_encryptedOldPassword || that_present_encryptedOldPassword) {
        if (!(this_present_encryptedOldPassword && that_present_encryptedOldPassword))
          return false;
        if (!this.encryptedOldPassword.equals(that.encryptedOldPassword))
          return false;
      }

      boolean this_present_encryptedNewPassword = true && this.isSetEncryptedNewPassword();
      boolean that_present_encryptedNewPassword = true && that.isSetEncryptedNewPassword();
      if (this_present_encryptedNewPassword || that_present_encryptedNewPassword) {
        if (!(this_present_encryptedNewPassword && that_present_encryptedNewPassword))
          return false;
        if (!this.encryptedNewPassword.equals(that.encryptedNewPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVirtualMid()) ? 131071 : 524287);
      if (isSetVirtualMid())
        hashCode = hashCode * 8191 + virtualMid.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedVirtualUserId()) ? 131071 : 524287);
      if (isSetEncryptedVirtualUserId())
        hashCode = hashCode * 8191 + encryptedVirtualUserId.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedOldPassword()) ? 131071 : 524287);
      if (isSetEncryptedOldPassword())
        hashCode = hashCode * 8191 + encryptedOldPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedNewPassword()) ? 131071 : 524287);
      if (isSetEncryptedNewPassword())
        hashCode = hashCode * 8191 + encryptedNewPassword.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestVirtualAccountPasswordChange_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetVirtualMid()).compareTo(other.isSetVirtualMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualMid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualMid, other.virtualMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEncryptedVirtualUserId()).compareTo(other.isSetEncryptedVirtualUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedVirtualUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedVirtualUserId, other.encryptedVirtualUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEncryptedOldPassword()).compareTo(other.isSetEncryptedOldPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedOldPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedOldPassword, other.encryptedOldPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEncryptedNewPassword()).compareTo(other.isSetEncryptedNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedNewPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedNewPassword, other.encryptedNewPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestVirtualAccountPasswordChange_args(");
      boolean first = true;

      sb.append("virtualMid:");
      if (this.virtualMid == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedVirtualUserId:");
      if (this.encryptedVirtualUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedVirtualUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedOldPassword:");
      if (this.encryptedOldPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedOldPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedNewPassword:");
      if (this.encryptedNewPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedNewPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestVirtualAccountPasswordChange_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVirtualAccountPasswordChange_argsStandardScheme getScheme() {
        return new requestVirtualAccountPasswordChange_argsStandardScheme();
      }
    }

    private static class requestVirtualAccountPasswordChange_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestVirtualAccountPasswordChange_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestVirtualAccountPasswordChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // VIRTUAL_MID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.virtualMid = iprot.readString();
                struct.setVirtualMidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENCRYPTED_VIRTUAL_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedVirtualUserId = iprot.readString();
                struct.setEncryptedVirtualUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENCRYPTED_OLD_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedOldPassword = iprot.readString();
                struct.setEncryptedOldPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ENCRYPTED_NEW_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedNewPassword = iprot.readString();
                struct.setEncryptedNewPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestVirtualAccountPasswordChange_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.virtualMid != null) {
          oprot.writeFieldBegin(VIRTUAL_MID_FIELD_DESC);
          oprot.writeString(struct.virtualMid);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedVirtualUserId != null) {
          oprot.writeFieldBegin(ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
          oprot.writeString(struct.encryptedVirtualUserId);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedOldPassword != null) {
          oprot.writeFieldBegin(ENCRYPTED_OLD_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.encryptedOldPassword);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedNewPassword != null) {
          oprot.writeFieldBegin(ENCRYPTED_NEW_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.encryptedNewPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestVirtualAccountPasswordChange_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVirtualAccountPasswordChange_argsTupleScheme getScheme() {
        return new requestVirtualAccountPasswordChange_argsTupleScheme();
      }
    }

    private static class requestVirtualAccountPasswordChange_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestVirtualAccountPasswordChange_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestVirtualAccountPasswordChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVirtualMid()) {
          optionals.set(0);
        }
        if (struct.isSetEncryptedVirtualUserId()) {
          optionals.set(1);
        }
        if (struct.isSetEncryptedOldPassword()) {
          optionals.set(2);
        }
        if (struct.isSetEncryptedNewPassword()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetVirtualMid()) {
          oprot.writeString(struct.virtualMid);
        }
        if (struct.isSetEncryptedVirtualUserId()) {
          oprot.writeString(struct.encryptedVirtualUserId);
        }
        if (struct.isSetEncryptedOldPassword()) {
          oprot.writeString(struct.encryptedOldPassword);
        }
        if (struct.isSetEncryptedNewPassword()) {
          oprot.writeString(struct.encryptedNewPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestVirtualAccountPasswordChange_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.virtualMid = iprot.readString();
          struct.setVirtualMidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.encryptedVirtualUserId = iprot.readString();
          struct.setEncryptedVirtualUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.encryptedOldPassword = iprot.readString();
          struct.setEncryptedOldPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.encryptedNewPassword = iprot.readString();
          struct.setEncryptedNewPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestVirtualAccountPasswordChange_result implements org.apache.thrift.TBase<requestVirtualAccountPasswordChange_result, requestVirtualAccountPasswordChange_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestVirtualAccountPasswordChange_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestVirtualAccountPasswordChange_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestVirtualAccountPasswordChange_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestVirtualAccountPasswordChange_resultTupleSchemeFactory();

    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestVirtualAccountPasswordChange_result.class, metaDataMap);
    }

    public requestVirtualAccountPasswordChange_result() {
    }

    public requestVirtualAccountPasswordChange_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVirtualAccountPasswordChange_result(requestVirtualAccountPasswordChange_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public requestVirtualAccountPasswordChange_result deepCopy() {
      return new requestVirtualAccountPasswordChange_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public requestVirtualAccountPasswordChange_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVirtualAccountPasswordChange_result)
        return this.equals((requestVirtualAccountPasswordChange_result)that);
      return false;
    }

    public boolean equals(requestVirtualAccountPasswordChange_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestVirtualAccountPasswordChange_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestVirtualAccountPasswordChange_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestVirtualAccountPasswordChange_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVirtualAccountPasswordChange_resultStandardScheme getScheme() {
        return new requestVirtualAccountPasswordChange_resultStandardScheme();
      }
    }

    private static class requestVirtualAccountPasswordChange_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestVirtualAccountPasswordChange_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestVirtualAccountPasswordChange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestVirtualAccountPasswordChange_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestVirtualAccountPasswordChange_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVirtualAccountPasswordChange_resultTupleScheme getScheme() {
        return new requestVirtualAccountPasswordChange_resultTupleScheme();
      }
    }

    private static class requestVirtualAccountPasswordChange_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestVirtualAccountPasswordChange_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestVirtualAccountPasswordChange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestVirtualAccountPasswordChange_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestVirtualAccountPasswordSet_args implements org.apache.thrift.TBase<requestVirtualAccountPasswordSet_args, requestVirtualAccountPasswordSet_args._Fields>, java.io.Serializable, Cloneable, Comparable<requestVirtualAccountPasswordSet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestVirtualAccountPasswordSet_args");

    private static final org.apache.thrift.protocol.TField VIRTUAL_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualMid", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedVirtualUserId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ENCRYPTED_NEW_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptedNewPassword", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestVirtualAccountPasswordSet_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestVirtualAccountPasswordSet_argsTupleSchemeFactory();

    public java.lang.String virtualMid; // required
    public java.lang.String encryptedVirtualUserId; // required
    public java.lang.String encryptedNewPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIRTUAL_MID((short)2, "virtualMid"),
      ENCRYPTED_VIRTUAL_USER_ID((short)3, "encryptedVirtualUserId"),
      ENCRYPTED_NEW_PASSWORD((short)4, "encryptedNewPassword");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // VIRTUAL_MID
            return VIRTUAL_MID;
          case 3: // ENCRYPTED_VIRTUAL_USER_ID
            return ENCRYPTED_VIRTUAL_USER_ID;
          case 4: // ENCRYPTED_NEW_PASSWORD
            return ENCRYPTED_NEW_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIRTUAL_MID, new org.apache.thrift.meta_data.FieldMetaData("virtualMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENCRYPTED_VIRTUAL_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("encryptedVirtualUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENCRYPTED_NEW_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("encryptedNewPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestVirtualAccountPasswordSet_args.class, metaDataMap);
    }

    public requestVirtualAccountPasswordSet_args() {
    }

    public requestVirtualAccountPasswordSet_args(
      java.lang.String virtualMid,
      java.lang.String encryptedVirtualUserId,
      java.lang.String encryptedNewPassword)
    {
      this();
      this.virtualMid = virtualMid;
      this.encryptedVirtualUserId = encryptedVirtualUserId;
      this.encryptedNewPassword = encryptedNewPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVirtualAccountPasswordSet_args(requestVirtualAccountPasswordSet_args other) {
      if (other.isSetVirtualMid()) {
        this.virtualMid = other.virtualMid;
      }
      if (other.isSetEncryptedVirtualUserId()) {
        this.encryptedVirtualUserId = other.encryptedVirtualUserId;
      }
      if (other.isSetEncryptedNewPassword()) {
        this.encryptedNewPassword = other.encryptedNewPassword;
      }
    }

    public requestVirtualAccountPasswordSet_args deepCopy() {
      return new requestVirtualAccountPasswordSet_args(this);
    }

    @Override
    public void clear() {
      this.virtualMid = null;
      this.encryptedVirtualUserId = null;
      this.encryptedNewPassword = null;
    }

    public java.lang.String getVirtualMid() {
      return this.virtualMid;
    }

    public requestVirtualAccountPasswordSet_args setVirtualMid(java.lang.String virtualMid) {
      this.virtualMid = virtualMid;
      return this;
    }

    public void unsetVirtualMid() {
      this.virtualMid = null;
    }

    /** Returns true if field virtualMid is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualMid() {
      return this.virtualMid != null;
    }

    public void setVirtualMidIsSet(boolean value) {
      if (!value) {
        this.virtualMid = null;
      }
    }

    public java.lang.String getEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId;
    }

    public requestVirtualAccountPasswordSet_args setEncryptedVirtualUserId(java.lang.String encryptedVirtualUserId) {
      this.encryptedVirtualUserId = encryptedVirtualUserId;
      return this;
    }

    public void unsetEncryptedVirtualUserId() {
      this.encryptedVirtualUserId = null;
    }

    /** Returns true if field encryptedVirtualUserId is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedVirtualUserId() {
      return this.encryptedVirtualUserId != null;
    }

    public void setEncryptedVirtualUserIdIsSet(boolean value) {
      if (!value) {
        this.encryptedVirtualUserId = null;
      }
    }

    public java.lang.String getEncryptedNewPassword() {
      return this.encryptedNewPassword;
    }

    public requestVirtualAccountPasswordSet_args setEncryptedNewPassword(java.lang.String encryptedNewPassword) {
      this.encryptedNewPassword = encryptedNewPassword;
      return this;
    }

    public void unsetEncryptedNewPassword() {
      this.encryptedNewPassword = null;
    }

    /** Returns true if field encryptedNewPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedNewPassword() {
      return this.encryptedNewPassword != null;
    }

    public void setEncryptedNewPasswordIsSet(boolean value) {
      if (!value) {
        this.encryptedNewPassword = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case VIRTUAL_MID:
        if (value == null) {
          unsetVirtualMid();
        } else {
          setVirtualMid((java.lang.String)value);
        }
        break;

      case ENCRYPTED_VIRTUAL_USER_ID:
        if (value == null) {
          unsetEncryptedVirtualUserId();
        } else {
          setEncryptedVirtualUserId((java.lang.String)value);
        }
        break;

      case ENCRYPTED_NEW_PASSWORD:
        if (value == null) {
          unsetEncryptedNewPassword();
        } else {
          setEncryptedNewPassword((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VIRTUAL_MID:
        return getVirtualMid();

      case ENCRYPTED_VIRTUAL_USER_ID:
        return getEncryptedVirtualUserId();

      case ENCRYPTED_NEW_PASSWORD:
        return getEncryptedNewPassword();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VIRTUAL_MID:
        return isSetVirtualMid();
      case ENCRYPTED_VIRTUAL_USER_ID:
        return isSetEncryptedVirtualUserId();
      case ENCRYPTED_NEW_PASSWORD:
        return isSetEncryptedNewPassword();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVirtualAccountPasswordSet_args)
        return this.equals((requestVirtualAccountPasswordSet_args)that);
      return false;
    }

    public boolean equals(requestVirtualAccountPasswordSet_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_virtualMid = true && this.isSetVirtualMid();
      boolean that_present_virtualMid = true && that.isSetVirtualMid();
      if (this_present_virtualMid || that_present_virtualMid) {
        if (!(this_present_virtualMid && that_present_virtualMid))
          return false;
        if (!this.virtualMid.equals(that.virtualMid))
          return false;
      }

      boolean this_present_encryptedVirtualUserId = true && this.isSetEncryptedVirtualUserId();
      boolean that_present_encryptedVirtualUserId = true && that.isSetEncryptedVirtualUserId();
      if (this_present_encryptedVirtualUserId || that_present_encryptedVirtualUserId) {
        if (!(this_present_encryptedVirtualUserId && that_present_encryptedVirtualUserId))
          return false;
        if (!this.encryptedVirtualUserId.equals(that.encryptedVirtualUserId))
          return false;
      }

      boolean this_present_encryptedNewPassword = true && this.isSetEncryptedNewPassword();
      boolean that_present_encryptedNewPassword = true && that.isSetEncryptedNewPassword();
      if (this_present_encryptedNewPassword || that_present_encryptedNewPassword) {
        if (!(this_present_encryptedNewPassword && that_present_encryptedNewPassword))
          return false;
        if (!this.encryptedNewPassword.equals(that.encryptedNewPassword))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVirtualMid()) ? 131071 : 524287);
      if (isSetVirtualMid())
        hashCode = hashCode * 8191 + virtualMid.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedVirtualUserId()) ? 131071 : 524287);
      if (isSetEncryptedVirtualUserId())
        hashCode = hashCode * 8191 + encryptedVirtualUserId.hashCode();

      hashCode = hashCode * 8191 + ((isSetEncryptedNewPassword()) ? 131071 : 524287);
      if (isSetEncryptedNewPassword())
        hashCode = hashCode * 8191 + encryptedNewPassword.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestVirtualAccountPasswordSet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetVirtualMid()).compareTo(other.isSetVirtualMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualMid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualMid, other.virtualMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEncryptedVirtualUserId()).compareTo(other.isSetEncryptedVirtualUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedVirtualUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedVirtualUserId, other.encryptedVirtualUserId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEncryptedNewPassword()).compareTo(other.isSetEncryptedNewPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedNewPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptedNewPassword, other.encryptedNewPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestVirtualAccountPasswordSet_args(");
      boolean first = true;

      sb.append("virtualMid:");
      if (this.virtualMid == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualMid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedVirtualUserId:");
      if (this.encryptedVirtualUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedVirtualUserId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedNewPassword:");
      if (this.encryptedNewPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.encryptedNewPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestVirtualAccountPasswordSet_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVirtualAccountPasswordSet_argsStandardScheme getScheme() {
        return new requestVirtualAccountPasswordSet_argsStandardScheme();
      }
    }

    private static class requestVirtualAccountPasswordSet_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestVirtualAccountPasswordSet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestVirtualAccountPasswordSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // VIRTUAL_MID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.virtualMid = iprot.readString();
                struct.setVirtualMidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ENCRYPTED_VIRTUAL_USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedVirtualUserId = iprot.readString();
                struct.setEncryptedVirtualUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ENCRYPTED_NEW_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.encryptedNewPassword = iprot.readString();
                struct.setEncryptedNewPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestVirtualAccountPasswordSet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.virtualMid != null) {
          oprot.writeFieldBegin(VIRTUAL_MID_FIELD_DESC);
          oprot.writeString(struct.virtualMid);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedVirtualUserId != null) {
          oprot.writeFieldBegin(ENCRYPTED_VIRTUAL_USER_ID_FIELD_DESC);
          oprot.writeString(struct.encryptedVirtualUserId);
          oprot.writeFieldEnd();
        }
        if (struct.encryptedNewPassword != null) {
          oprot.writeFieldBegin(ENCRYPTED_NEW_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.encryptedNewPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestVirtualAccountPasswordSet_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVirtualAccountPasswordSet_argsTupleScheme getScheme() {
        return new requestVirtualAccountPasswordSet_argsTupleScheme();
      }
    }

    private static class requestVirtualAccountPasswordSet_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestVirtualAccountPasswordSet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestVirtualAccountPasswordSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVirtualMid()) {
          optionals.set(0);
        }
        if (struct.isSetEncryptedVirtualUserId()) {
          optionals.set(1);
        }
        if (struct.isSetEncryptedNewPassword()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetVirtualMid()) {
          oprot.writeString(struct.virtualMid);
        }
        if (struct.isSetEncryptedVirtualUserId()) {
          oprot.writeString(struct.encryptedVirtualUserId);
        }
        if (struct.isSetEncryptedNewPassword()) {
          oprot.writeString(struct.encryptedNewPassword);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestVirtualAccountPasswordSet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.virtualMid = iprot.readString();
          struct.setVirtualMidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.encryptedVirtualUserId = iprot.readString();
          struct.setEncryptedVirtualUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.encryptedNewPassword = iprot.readString();
          struct.setEncryptedNewPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class requestVirtualAccountPasswordSet_result implements org.apache.thrift.TBase<requestVirtualAccountPasswordSet_result, requestVirtualAccountPasswordSet_result._Fields>, java.io.Serializable, Cloneable, Comparable<requestVirtualAccountPasswordSet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("requestVirtualAccountPasswordSet_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new requestVirtualAccountPasswordSet_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new requestVirtualAccountPasswordSet_resultTupleSchemeFactory();

    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(requestVirtualAccountPasswordSet_result.class, metaDataMap);
    }

    public requestVirtualAccountPasswordSet_result() {
    }

    public requestVirtualAccountPasswordSet_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public requestVirtualAccountPasswordSet_result(requestVirtualAccountPasswordSet_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public requestVirtualAccountPasswordSet_result deepCopy() {
      return new requestVirtualAccountPasswordSet_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public requestVirtualAccountPasswordSet_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof requestVirtualAccountPasswordSet_result)
        return this.equals((requestVirtualAccountPasswordSet_result)that);
      return false;
    }

    public boolean equals(requestVirtualAccountPasswordSet_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(requestVirtualAccountPasswordSet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("requestVirtualAccountPasswordSet_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class requestVirtualAccountPasswordSet_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVirtualAccountPasswordSet_resultStandardScheme getScheme() {
        return new requestVirtualAccountPasswordSet_resultStandardScheme();
      }
    }

    private static class requestVirtualAccountPasswordSet_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<requestVirtualAccountPasswordSet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, requestVirtualAccountPasswordSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, requestVirtualAccountPasswordSet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class requestVirtualAccountPasswordSet_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public requestVirtualAccountPasswordSet_resultTupleScheme getScheme() {
        return new requestVirtualAccountPasswordSet_resultTupleScheme();
      }
    }

    private static class requestVirtualAccountPasswordSet_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<requestVirtualAccountPasswordSet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, requestVirtualAccountPasswordSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, requestVirtualAccountPasswordSet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class unregisterVirtualAccount_args implements org.apache.thrift.TBase<unregisterVirtualAccount_args, unregisterVirtualAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<unregisterVirtualAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unregisterVirtualAccount_args");

    private static final org.apache.thrift.protocol.TField VIRTUAL_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualMid", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new unregisterVirtualAccount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new unregisterVirtualAccount_argsTupleSchemeFactory();

    public java.lang.String virtualMid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VIRTUAL_MID((short)2, "virtualMid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 2: // VIRTUAL_MID
            return VIRTUAL_MID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VIRTUAL_MID, new org.apache.thrift.meta_data.FieldMetaData("virtualMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unregisterVirtualAccount_args.class, metaDataMap);
    }

    public unregisterVirtualAccount_args() {
    }

    public unregisterVirtualAccount_args(
      java.lang.String virtualMid)
    {
      this();
      this.virtualMid = virtualMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterVirtualAccount_args(unregisterVirtualAccount_args other) {
      if (other.isSetVirtualMid()) {
        this.virtualMid = other.virtualMid;
      }
    }

    public unregisterVirtualAccount_args deepCopy() {
      return new unregisterVirtualAccount_args(this);
    }

    @Override
    public void clear() {
      this.virtualMid = null;
    }

    public java.lang.String getVirtualMid() {
      return this.virtualMid;
    }

    public unregisterVirtualAccount_args setVirtualMid(java.lang.String virtualMid) {
      this.virtualMid = virtualMid;
      return this;
    }

    public void unsetVirtualMid() {
      this.virtualMid = null;
    }

    /** Returns true if field virtualMid is set (has been assigned a value) and false otherwise */
    public boolean isSetVirtualMid() {
      return this.virtualMid != null;
    }

    public void setVirtualMidIsSet(boolean value) {
      if (!value) {
        this.virtualMid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case VIRTUAL_MID:
        if (value == null) {
          unsetVirtualMid();
        } else {
          setVirtualMid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case VIRTUAL_MID:
        return getVirtualMid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case VIRTUAL_MID:
        return isSetVirtualMid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterVirtualAccount_args)
        return this.equals((unregisterVirtualAccount_args)that);
      return false;
    }

    public boolean equals(unregisterVirtualAccount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_virtualMid = true && this.isSetVirtualMid();
      boolean that_present_virtualMid = true && that.isSetVirtualMid();
      if (this_present_virtualMid || that_present_virtualMid) {
        if (!(this_present_virtualMid && that_present_virtualMid))
          return false;
        if (!this.virtualMid.equals(that.virtualMid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetVirtualMid()) ? 131071 : 524287);
      if (isSetVirtualMid())
        hashCode = hashCode * 8191 + virtualMid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(unregisterVirtualAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetVirtualMid()).compareTo(other.isSetVirtualMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVirtualMid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualMid, other.virtualMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("unregisterVirtualAccount_args(");
      boolean first = true;

      sb.append("virtualMid:");
      if (this.virtualMid == null) {
        sb.append("null");
      } else {
        sb.append(this.virtualMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unregisterVirtualAccount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unregisterVirtualAccount_argsStandardScheme getScheme() {
        return new unregisterVirtualAccount_argsStandardScheme();
      }
    }

    private static class unregisterVirtualAccount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<unregisterVirtualAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unregisterVirtualAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 2: // VIRTUAL_MID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.virtualMid = iprot.readString();
                struct.setVirtualMidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unregisterVirtualAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.virtualMid != null) {
          oprot.writeFieldBegin(VIRTUAL_MID_FIELD_DESC);
          oprot.writeString(struct.virtualMid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unregisterVirtualAccount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unregisterVirtualAccount_argsTupleScheme getScheme() {
        return new unregisterVirtualAccount_argsTupleScheme();
      }
    }

    private static class unregisterVirtualAccount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<unregisterVirtualAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unregisterVirtualAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetVirtualMid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVirtualMid()) {
          oprot.writeString(struct.virtualMid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unregisterVirtualAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.virtualMid = iprot.readString();
          struct.setVirtualMidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class unregisterVirtualAccount_result implements org.apache.thrift.TBase<unregisterVirtualAccount_result, unregisterVirtualAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<unregisterVirtualAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unregisterVirtualAccount_result");

    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new unregisterVirtualAccount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new unregisterVirtualAccount_resultTupleSchemeFactory();

    public TalkException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TalkException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unregisterVirtualAccount_result.class, metaDataMap);
    }

    public unregisterVirtualAccount_result() {
    }

    public unregisterVirtualAccount_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unregisterVirtualAccount_result(unregisterVirtualAccount_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public unregisterVirtualAccount_result deepCopy() {
      return new unregisterVirtualAccount_result(this);
    }

    @Override
    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public unregisterVirtualAccount_result setE(TalkException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((TalkException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof unregisterVirtualAccount_result)
        return this.equals((unregisterVirtualAccount_result)that);
      return false;
    }

    public boolean equals(unregisterVirtualAccount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(unregisterVirtualAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("unregisterVirtualAccount_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unregisterVirtualAccount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unregisterVirtualAccount_resultStandardScheme getScheme() {
        return new unregisterVirtualAccount_resultStandardScheme();
      }
    }

    private static class unregisterVirtualAccount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<unregisterVirtualAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unregisterVirtualAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new TalkException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unregisterVirtualAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unregisterVirtualAccount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public unregisterVirtualAccount_resultTupleScheme getScheme() {
        return new unregisterVirtualAccount_resultTupleScheme();
      }
    }

    private static class unregisterVirtualAccount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<unregisterVirtualAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unregisterVirtualAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetE()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unregisterVirtualAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.e = new TalkException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
