/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class PaidCallDialing implements org.apache.thrift.TBase<PaidCallDialing, PaidCallDialing._Fields>, java.io.Serializable, Cloneable, Comparable<PaidCallDialing> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PaidCallDialing");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DIALED_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("dialedNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SERVICE_DOMAIN_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceDomain", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PRODUCT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("productType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PRODUCT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("productName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MULTIPLE_PRODUCT_FIELD_DESC = new org.apache.thrift.protocol.TField("multipleProduct", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField CALLER_ID_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("callerIdStatus", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField UNIT_FIELD_DESC = new org.apache.thrift.protocol.TField("unit", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField DISPLAY_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("displayCode", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField CALLED_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("calledNumber", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField CALLEE_NATIONAL_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("calleeNationalNumber", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField CALLEE_CALLING_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("calleeCallingCode", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField RATE_DIVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("rateDivision", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField AD_MAX_MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("adMaxMin", org.apache.thrift.protocol.TType.I32, (short)20);
  private static final org.apache.thrift.protocol.TField AD_REMAINS_FIELD_DESC = new org.apache.thrift.protocol.TField("adRemains", org.apache.thrift.protocol.TType.I32, (short)21);
  private static final org.apache.thrift.protocol.TField AD_SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adSessionId", org.apache.thrift.protocol.TType.STRING, (short)22);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PaidCallDialingStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PaidCallDialingTupleSchemeFactory();

  /**
   * 
   * @see PaidCallType
   */
  public PaidCallType type; // required
  public java.lang.String dialedNumber; // required
  public java.lang.String serviceDomain; // required
  /**
   * 
   * @see PaidCallProductType
   */
  public PaidCallProductType productType; // required
  public java.lang.String productName; // required
  public boolean multipleProduct; // required
  /**
   * 
   * @see PaidCallerIdStatus
   */
  public PaidCallerIdStatus callerIdStatus; // required
  public int balance; // required
  public java.lang.String unit; // required
  public int rate; // required
  public java.lang.String displayCode; // required
  public java.lang.String calledNumber; // required
  public java.lang.String calleeNationalNumber; // required
  public java.lang.String calleeCallingCode; // required
  public java.lang.String rateDivision; // required
  public int adMaxMin; // required
  public int adRemains; // required
  public java.lang.String adSessionId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see PaidCallType
     */
    TYPE((short)1, "type"),
    DIALED_NUMBER((short)2, "dialedNumber"),
    SERVICE_DOMAIN((short)3, "serviceDomain"),
    /**
     * 
     * @see PaidCallProductType
     */
    PRODUCT_TYPE((short)4, "productType"),
    PRODUCT_NAME((short)5, "productName"),
    MULTIPLE_PRODUCT((short)6, "multipleProduct"),
    /**
     * 
     * @see PaidCallerIdStatus
     */
    CALLER_ID_STATUS((short)7, "callerIdStatus"),
    BALANCE((short)10, "balance"),
    UNIT((short)11, "unit"),
    RATE((short)12, "rate"),
    DISPLAY_CODE((short)13, "displayCode"),
    CALLED_NUMBER((short)14, "calledNumber"),
    CALLEE_NATIONAL_NUMBER((short)15, "calleeNationalNumber"),
    CALLEE_CALLING_CODE((short)16, "calleeCallingCode"),
    RATE_DIVISION((short)17, "rateDivision"),
    AD_MAX_MIN((short)20, "adMaxMin"),
    AD_REMAINS((short)21, "adRemains"),
    AD_SESSION_ID((short)22, "adSessionId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // DIALED_NUMBER
          return DIALED_NUMBER;
        case 3: // SERVICE_DOMAIN
          return SERVICE_DOMAIN;
        case 4: // PRODUCT_TYPE
          return PRODUCT_TYPE;
        case 5: // PRODUCT_NAME
          return PRODUCT_NAME;
        case 6: // MULTIPLE_PRODUCT
          return MULTIPLE_PRODUCT;
        case 7: // CALLER_ID_STATUS
          return CALLER_ID_STATUS;
        case 10: // BALANCE
          return BALANCE;
        case 11: // UNIT
          return UNIT;
        case 12: // RATE
          return RATE;
        case 13: // DISPLAY_CODE
          return DISPLAY_CODE;
        case 14: // CALLED_NUMBER
          return CALLED_NUMBER;
        case 15: // CALLEE_NATIONAL_NUMBER
          return CALLEE_NATIONAL_NUMBER;
        case 16: // CALLEE_CALLING_CODE
          return CALLEE_CALLING_CODE;
        case 17: // RATE_DIVISION
          return RATE_DIVISION;
        case 20: // AD_MAX_MIN
          return AD_MAX_MIN;
        case 21: // AD_REMAINS
          return AD_REMAINS;
        case 22: // AD_SESSION_ID
          return AD_SESSION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MULTIPLEPRODUCT_ISSET_ID = 0;
  private static final int __BALANCE_ISSET_ID = 1;
  private static final int __RATE_ISSET_ID = 2;
  private static final int __ADMAXMIN_ISSET_ID = 3;
  private static final int __ADREMAINS_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaidCallType.class)));
    tmpMap.put(_Fields.DIALED_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("dialedNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVICE_DOMAIN, new org.apache.thrift.meta_data.FieldMetaData("serviceDomain", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRODUCT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("productType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaidCallProductType.class)));
    tmpMap.put(_Fields.PRODUCT_NAME, new org.apache.thrift.meta_data.FieldMetaData("productName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MULTIPLE_PRODUCT, new org.apache.thrift.meta_data.FieldMetaData("multipleProduct", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CALLER_ID_STATUS, new org.apache.thrift.meta_data.FieldMetaData("callerIdStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, PaidCallerIdStatus.class)));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.UNIT, new org.apache.thrift.meta_data.FieldMetaData("unit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DISPLAY_CODE, new org.apache.thrift.meta_data.FieldMetaData("displayCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLED_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("calledNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLEE_NATIONAL_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("calleeNationalNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALLEE_CALLING_CODE, new org.apache.thrift.meta_data.FieldMetaData("calleeCallingCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE_DIVISION, new org.apache.thrift.meta_data.FieldMetaData("rateDivision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AD_MAX_MIN, new org.apache.thrift.meta_data.FieldMetaData("adMaxMin", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_REMAINS, new org.apache.thrift.meta_data.FieldMetaData("adRemains", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AD_SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("adSessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PaidCallDialing.class, metaDataMap);
  }

  public PaidCallDialing() {
  }

  public PaidCallDialing(
    PaidCallType type,
    java.lang.String dialedNumber,
    java.lang.String serviceDomain,
    PaidCallProductType productType,
    java.lang.String productName,
    boolean multipleProduct,
    PaidCallerIdStatus callerIdStatus,
    int balance,
    java.lang.String unit,
    int rate,
    java.lang.String displayCode,
    java.lang.String calledNumber,
    java.lang.String calleeNationalNumber,
    java.lang.String calleeCallingCode,
    java.lang.String rateDivision,
    int adMaxMin,
    int adRemains,
    java.lang.String adSessionId)
  {
    this();
    this.type = type;
    this.dialedNumber = dialedNumber;
    this.serviceDomain = serviceDomain;
    this.productType = productType;
    this.productName = productName;
    this.multipleProduct = multipleProduct;
    setMultipleProductIsSet(true);
    this.callerIdStatus = callerIdStatus;
    this.balance = balance;
    setBalanceIsSet(true);
    this.unit = unit;
    this.rate = rate;
    setRateIsSet(true);
    this.displayCode = displayCode;
    this.calledNumber = calledNumber;
    this.calleeNationalNumber = calleeNationalNumber;
    this.calleeCallingCode = calleeCallingCode;
    this.rateDivision = rateDivision;
    this.adMaxMin = adMaxMin;
    setAdMaxMinIsSet(true);
    this.adRemains = adRemains;
    setAdRemainsIsSet(true);
    this.adSessionId = adSessionId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaidCallDialing(PaidCallDialing other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDialedNumber()) {
      this.dialedNumber = other.dialedNumber;
    }
    if (other.isSetServiceDomain()) {
      this.serviceDomain = other.serviceDomain;
    }
    if (other.isSetProductType()) {
      this.productType = other.productType;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.multipleProduct = other.multipleProduct;
    if (other.isSetCallerIdStatus()) {
      this.callerIdStatus = other.callerIdStatus;
    }
    this.balance = other.balance;
    if (other.isSetUnit()) {
      this.unit = other.unit;
    }
    this.rate = other.rate;
    if (other.isSetDisplayCode()) {
      this.displayCode = other.displayCode;
    }
    if (other.isSetCalledNumber()) {
      this.calledNumber = other.calledNumber;
    }
    if (other.isSetCalleeNationalNumber()) {
      this.calleeNationalNumber = other.calleeNationalNumber;
    }
    if (other.isSetCalleeCallingCode()) {
      this.calleeCallingCode = other.calleeCallingCode;
    }
    if (other.isSetRateDivision()) {
      this.rateDivision = other.rateDivision;
    }
    this.adMaxMin = other.adMaxMin;
    this.adRemains = other.adRemains;
    if (other.isSetAdSessionId()) {
      this.adSessionId = other.adSessionId;
    }
  }

  public PaidCallDialing deepCopy() {
    return new PaidCallDialing(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.dialedNumber = null;
    this.serviceDomain = null;
    this.productType = null;
    this.productName = null;
    setMultipleProductIsSet(false);
    this.multipleProduct = false;
    this.callerIdStatus = null;
    setBalanceIsSet(false);
    this.balance = 0;
    this.unit = null;
    setRateIsSet(false);
    this.rate = 0;
    this.displayCode = null;
    this.calledNumber = null;
    this.calleeNationalNumber = null;
    this.calleeCallingCode = null;
    this.rateDivision = null;
    setAdMaxMinIsSet(false);
    this.adMaxMin = 0;
    setAdRemainsIsSet(false);
    this.adRemains = 0;
    this.adSessionId = null;
  }

  /**
   * 
   * @see PaidCallType
   */
  public PaidCallType getType() {
    return this.type;
  }

  /**
   * 
   * @see PaidCallType
   */
  public PaidCallDialing setType(PaidCallType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getDialedNumber() {
    return this.dialedNumber;
  }

  public PaidCallDialing setDialedNumber(java.lang.String dialedNumber) {
    this.dialedNumber = dialedNumber;
    return this;
  }

  public void unsetDialedNumber() {
    this.dialedNumber = null;
  }

  /** Returns true if field dialedNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetDialedNumber() {
    return this.dialedNumber != null;
  }

  public void setDialedNumberIsSet(boolean value) {
    if (!value) {
      this.dialedNumber = null;
    }
  }

  public java.lang.String getServiceDomain() {
    return this.serviceDomain;
  }

  public PaidCallDialing setServiceDomain(java.lang.String serviceDomain) {
    this.serviceDomain = serviceDomain;
    return this;
  }

  public void unsetServiceDomain() {
    this.serviceDomain = null;
  }

  /** Returns true if field serviceDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceDomain() {
    return this.serviceDomain != null;
  }

  public void setServiceDomainIsSet(boolean value) {
    if (!value) {
      this.serviceDomain = null;
    }
  }

  /**
   * 
   * @see PaidCallProductType
   */
  public PaidCallProductType getProductType() {
    return this.productType;
  }

  /**
   * 
   * @see PaidCallProductType
   */
  public PaidCallDialing setProductType(PaidCallProductType productType) {
    this.productType = productType;
    return this;
  }

  public void unsetProductType() {
    this.productType = null;
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return this.productType != null;
  }

  public void setProductTypeIsSet(boolean value) {
    if (!value) {
      this.productType = null;
    }
  }

  public java.lang.String getProductName() {
    return this.productName;
  }

  public PaidCallDialing setProductName(java.lang.String productName) {
    this.productName = productName;
    return this;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public boolean isMultipleProduct() {
    return this.multipleProduct;
  }

  public PaidCallDialing setMultipleProduct(boolean multipleProduct) {
    this.multipleProduct = multipleProduct;
    setMultipleProductIsSet(true);
    return this;
  }

  public void unsetMultipleProduct() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MULTIPLEPRODUCT_ISSET_ID);
  }

  /** Returns true if field multipleProduct is set (has been assigned a value) and false otherwise */
  public boolean isSetMultipleProduct() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MULTIPLEPRODUCT_ISSET_ID);
  }

  public void setMultipleProductIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MULTIPLEPRODUCT_ISSET_ID, value);
  }

  /**
   * 
   * @see PaidCallerIdStatus
   */
  public PaidCallerIdStatus getCallerIdStatus() {
    return this.callerIdStatus;
  }

  /**
   * 
   * @see PaidCallerIdStatus
   */
  public PaidCallDialing setCallerIdStatus(PaidCallerIdStatus callerIdStatus) {
    this.callerIdStatus = callerIdStatus;
    return this;
  }

  public void unsetCallerIdStatus() {
    this.callerIdStatus = null;
  }

  /** Returns true if field callerIdStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCallerIdStatus() {
    return this.callerIdStatus != null;
  }

  public void setCallerIdStatusIsSet(boolean value) {
    if (!value) {
      this.callerIdStatus = null;
    }
  }

  public int getBalance() {
    return this.balance;
  }

  public PaidCallDialing setBalance(int balance) {
    this.balance = balance;
    setBalanceIsSet(true);
    return this;
  }

  public void unsetBalance() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BALANCE_ISSET_ID);
  }

  public void setBalanceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BALANCE_ISSET_ID, value);
  }

  public java.lang.String getUnit() {
    return this.unit;
  }

  public PaidCallDialing setUnit(java.lang.String unit) {
    this.unit = unit;
    return this;
  }

  public void unsetUnit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return this.unit != null;
  }

  public void setUnitIsSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public int getRate() {
    return this.rate;
  }

  public PaidCallDialing setRate(int rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  public java.lang.String getDisplayCode() {
    return this.displayCode;
  }

  public PaidCallDialing setDisplayCode(java.lang.String displayCode) {
    this.displayCode = displayCode;
    return this;
  }

  public void unsetDisplayCode() {
    this.displayCode = null;
  }

  /** Returns true if field displayCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayCode() {
    return this.displayCode != null;
  }

  public void setDisplayCodeIsSet(boolean value) {
    if (!value) {
      this.displayCode = null;
    }
  }

  public java.lang.String getCalledNumber() {
    return this.calledNumber;
  }

  public PaidCallDialing setCalledNumber(java.lang.String calledNumber) {
    this.calledNumber = calledNumber;
    return this;
  }

  public void unsetCalledNumber() {
    this.calledNumber = null;
  }

  /** Returns true if field calledNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCalledNumber() {
    return this.calledNumber != null;
  }

  public void setCalledNumberIsSet(boolean value) {
    if (!value) {
      this.calledNumber = null;
    }
  }

  public java.lang.String getCalleeNationalNumber() {
    return this.calleeNationalNumber;
  }

  public PaidCallDialing setCalleeNationalNumber(java.lang.String calleeNationalNumber) {
    this.calleeNationalNumber = calleeNationalNumber;
    return this;
  }

  public void unsetCalleeNationalNumber() {
    this.calleeNationalNumber = null;
  }

  /** Returns true if field calleeNationalNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCalleeNationalNumber() {
    return this.calleeNationalNumber != null;
  }

  public void setCalleeNationalNumberIsSet(boolean value) {
    if (!value) {
      this.calleeNationalNumber = null;
    }
  }

  public java.lang.String getCalleeCallingCode() {
    return this.calleeCallingCode;
  }

  public PaidCallDialing setCalleeCallingCode(java.lang.String calleeCallingCode) {
    this.calleeCallingCode = calleeCallingCode;
    return this;
  }

  public void unsetCalleeCallingCode() {
    this.calleeCallingCode = null;
  }

  /** Returns true if field calleeCallingCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCalleeCallingCode() {
    return this.calleeCallingCode != null;
  }

  public void setCalleeCallingCodeIsSet(boolean value) {
    if (!value) {
      this.calleeCallingCode = null;
    }
  }

  public java.lang.String getRateDivision() {
    return this.rateDivision;
  }

  public PaidCallDialing setRateDivision(java.lang.String rateDivision) {
    this.rateDivision = rateDivision;
    return this;
  }

  public void unsetRateDivision() {
    this.rateDivision = null;
  }

  /** Returns true if field rateDivision is set (has been assigned a value) and false otherwise */
  public boolean isSetRateDivision() {
    return this.rateDivision != null;
  }

  public void setRateDivisionIsSet(boolean value) {
    if (!value) {
      this.rateDivision = null;
    }
  }

  public int getAdMaxMin() {
    return this.adMaxMin;
  }

  public PaidCallDialing setAdMaxMin(int adMaxMin) {
    this.adMaxMin = adMaxMin;
    setAdMaxMinIsSet(true);
    return this;
  }

  public void unsetAdMaxMin() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADMAXMIN_ISSET_ID);
  }

  /** Returns true if field adMaxMin is set (has been assigned a value) and false otherwise */
  public boolean isSetAdMaxMin() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADMAXMIN_ISSET_ID);
  }

  public void setAdMaxMinIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADMAXMIN_ISSET_ID, value);
  }

  public int getAdRemains() {
    return this.adRemains;
  }

  public PaidCallDialing setAdRemains(int adRemains) {
    this.adRemains = adRemains;
    setAdRemainsIsSet(true);
    return this;
  }

  public void unsetAdRemains() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ADREMAINS_ISSET_ID);
  }

  /** Returns true if field adRemains is set (has been assigned a value) and false otherwise */
  public boolean isSetAdRemains() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ADREMAINS_ISSET_ID);
  }

  public void setAdRemainsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ADREMAINS_ISSET_ID, value);
  }

  public java.lang.String getAdSessionId() {
    return this.adSessionId;
  }

  public PaidCallDialing setAdSessionId(java.lang.String adSessionId) {
    this.adSessionId = adSessionId;
    return this;
  }

  public void unsetAdSessionId() {
    this.adSessionId = null;
  }

  /** Returns true if field adSessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSessionId() {
    return this.adSessionId != null;
  }

  public void setAdSessionIdIsSet(boolean value) {
    if (!value) {
      this.adSessionId = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((PaidCallType)value);
      }
      break;

    case DIALED_NUMBER:
      if (value == null) {
        unsetDialedNumber();
      } else {
        setDialedNumber((java.lang.String)value);
      }
      break;

    case SERVICE_DOMAIN:
      if (value == null) {
        unsetServiceDomain();
      } else {
        setServiceDomain((java.lang.String)value);
      }
      break;

    case PRODUCT_TYPE:
      if (value == null) {
        unsetProductType();
      } else {
        setProductType((PaidCallProductType)value);
      }
      break;

    case PRODUCT_NAME:
      if (value == null) {
        unsetProductName();
      } else {
        setProductName((java.lang.String)value);
      }
      break;

    case MULTIPLE_PRODUCT:
      if (value == null) {
        unsetMultipleProduct();
      } else {
        setMultipleProduct((java.lang.Boolean)value);
      }
      break;

    case CALLER_ID_STATUS:
      if (value == null) {
        unsetCallerIdStatus();
      } else {
        setCallerIdStatus((PaidCallerIdStatus)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((java.lang.Integer)value);
      }
      break;

    case UNIT:
      if (value == null) {
        unsetUnit();
      } else {
        setUnit((java.lang.String)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((java.lang.Integer)value);
      }
      break;

    case DISPLAY_CODE:
      if (value == null) {
        unsetDisplayCode();
      } else {
        setDisplayCode((java.lang.String)value);
      }
      break;

    case CALLED_NUMBER:
      if (value == null) {
        unsetCalledNumber();
      } else {
        setCalledNumber((java.lang.String)value);
      }
      break;

    case CALLEE_NATIONAL_NUMBER:
      if (value == null) {
        unsetCalleeNationalNumber();
      } else {
        setCalleeNationalNumber((java.lang.String)value);
      }
      break;

    case CALLEE_CALLING_CODE:
      if (value == null) {
        unsetCalleeCallingCode();
      } else {
        setCalleeCallingCode((java.lang.String)value);
      }
      break;

    case RATE_DIVISION:
      if (value == null) {
        unsetRateDivision();
      } else {
        setRateDivision((java.lang.String)value);
      }
      break;

    case AD_MAX_MIN:
      if (value == null) {
        unsetAdMaxMin();
      } else {
        setAdMaxMin((java.lang.Integer)value);
      }
      break;

    case AD_REMAINS:
      if (value == null) {
        unsetAdRemains();
      } else {
        setAdRemains((java.lang.Integer)value);
      }
      break;

    case AD_SESSION_ID:
      if (value == null) {
        unsetAdSessionId();
      } else {
        setAdSessionId((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case DIALED_NUMBER:
      return getDialedNumber();

    case SERVICE_DOMAIN:
      return getServiceDomain();

    case PRODUCT_TYPE:
      return getProductType();

    case PRODUCT_NAME:
      return getProductName();

    case MULTIPLE_PRODUCT:
      return isMultipleProduct();

    case CALLER_ID_STATUS:
      return getCallerIdStatus();

    case BALANCE:
      return getBalance();

    case UNIT:
      return getUnit();

    case RATE:
      return getRate();

    case DISPLAY_CODE:
      return getDisplayCode();

    case CALLED_NUMBER:
      return getCalledNumber();

    case CALLEE_NATIONAL_NUMBER:
      return getCalleeNationalNumber();

    case CALLEE_CALLING_CODE:
      return getCalleeCallingCode();

    case RATE_DIVISION:
      return getRateDivision();

    case AD_MAX_MIN:
      return getAdMaxMin();

    case AD_REMAINS:
      return getAdRemains();

    case AD_SESSION_ID:
      return getAdSessionId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case DIALED_NUMBER:
      return isSetDialedNumber();
    case SERVICE_DOMAIN:
      return isSetServiceDomain();
    case PRODUCT_TYPE:
      return isSetProductType();
    case PRODUCT_NAME:
      return isSetProductName();
    case MULTIPLE_PRODUCT:
      return isSetMultipleProduct();
    case CALLER_ID_STATUS:
      return isSetCallerIdStatus();
    case BALANCE:
      return isSetBalance();
    case UNIT:
      return isSetUnit();
    case RATE:
      return isSetRate();
    case DISPLAY_CODE:
      return isSetDisplayCode();
    case CALLED_NUMBER:
      return isSetCalledNumber();
    case CALLEE_NATIONAL_NUMBER:
      return isSetCalleeNationalNumber();
    case CALLEE_CALLING_CODE:
      return isSetCalleeCallingCode();
    case RATE_DIVISION:
      return isSetRateDivision();
    case AD_MAX_MIN:
      return isSetAdMaxMin();
    case AD_REMAINS:
      return isSetAdRemains();
    case AD_SESSION_ID:
      return isSetAdSessionId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof PaidCallDialing)
      return this.equals((PaidCallDialing)that);
    return false;
  }

  public boolean equals(PaidCallDialing that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_dialedNumber = true && this.isSetDialedNumber();
    boolean that_present_dialedNumber = true && that.isSetDialedNumber();
    if (this_present_dialedNumber || that_present_dialedNumber) {
      if (!(this_present_dialedNumber && that_present_dialedNumber))
        return false;
      if (!this.dialedNumber.equals(that.dialedNumber))
        return false;
    }

    boolean this_present_serviceDomain = true && this.isSetServiceDomain();
    boolean that_present_serviceDomain = true && that.isSetServiceDomain();
    if (this_present_serviceDomain || that_present_serviceDomain) {
      if (!(this_present_serviceDomain && that_present_serviceDomain))
        return false;
      if (!this.serviceDomain.equals(that.serviceDomain))
        return false;
    }

    boolean this_present_productType = true && this.isSetProductType();
    boolean that_present_productType = true && that.isSetProductType();
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (!this.productType.equals(that.productType))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_multipleProduct = true;
    boolean that_present_multipleProduct = true;
    if (this_present_multipleProduct || that_present_multipleProduct) {
      if (!(this_present_multipleProduct && that_present_multipleProduct))
        return false;
      if (this.multipleProduct != that.multipleProduct)
        return false;
    }

    boolean this_present_callerIdStatus = true && this.isSetCallerIdStatus();
    boolean that_present_callerIdStatus = true && that.isSetCallerIdStatus();
    if (this_present_callerIdStatus || that_present_callerIdStatus) {
      if (!(this_present_callerIdStatus && that_present_callerIdStatus))
        return false;
      if (!this.callerIdStatus.equals(that.callerIdStatus))
        return false;
    }

    boolean this_present_balance = true;
    boolean that_present_balance = true;
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_displayCode = true && this.isSetDisplayCode();
    boolean that_present_displayCode = true && that.isSetDisplayCode();
    if (this_present_displayCode || that_present_displayCode) {
      if (!(this_present_displayCode && that_present_displayCode))
        return false;
      if (!this.displayCode.equals(that.displayCode))
        return false;
    }

    boolean this_present_calledNumber = true && this.isSetCalledNumber();
    boolean that_present_calledNumber = true && that.isSetCalledNumber();
    if (this_present_calledNumber || that_present_calledNumber) {
      if (!(this_present_calledNumber && that_present_calledNumber))
        return false;
      if (!this.calledNumber.equals(that.calledNumber))
        return false;
    }

    boolean this_present_calleeNationalNumber = true && this.isSetCalleeNationalNumber();
    boolean that_present_calleeNationalNumber = true && that.isSetCalleeNationalNumber();
    if (this_present_calleeNationalNumber || that_present_calleeNationalNumber) {
      if (!(this_present_calleeNationalNumber && that_present_calleeNationalNumber))
        return false;
      if (!this.calleeNationalNumber.equals(that.calleeNationalNumber))
        return false;
    }

    boolean this_present_calleeCallingCode = true && this.isSetCalleeCallingCode();
    boolean that_present_calleeCallingCode = true && that.isSetCalleeCallingCode();
    if (this_present_calleeCallingCode || that_present_calleeCallingCode) {
      if (!(this_present_calleeCallingCode && that_present_calleeCallingCode))
        return false;
      if (!this.calleeCallingCode.equals(that.calleeCallingCode))
        return false;
    }

    boolean this_present_rateDivision = true && this.isSetRateDivision();
    boolean that_present_rateDivision = true && that.isSetRateDivision();
    if (this_present_rateDivision || that_present_rateDivision) {
      if (!(this_present_rateDivision && that_present_rateDivision))
        return false;
      if (!this.rateDivision.equals(that.rateDivision))
        return false;
    }

    boolean this_present_adMaxMin = true;
    boolean that_present_adMaxMin = true;
    if (this_present_adMaxMin || that_present_adMaxMin) {
      if (!(this_present_adMaxMin && that_present_adMaxMin))
        return false;
      if (this.adMaxMin != that.adMaxMin)
        return false;
    }

    boolean this_present_adRemains = true;
    boolean that_present_adRemains = true;
    if (this_present_adRemains || that_present_adRemains) {
      if (!(this_present_adRemains && that_present_adRemains))
        return false;
      if (this.adRemains != that.adRemains)
        return false;
    }

    boolean this_present_adSessionId = true && this.isSetAdSessionId();
    boolean that_present_adSessionId = true && that.isSetAdSessionId();
    if (this_present_adSessionId || that_present_adSessionId) {
      if (!(this_present_adSessionId && that_present_adSessionId))
        return false;
      if (!this.adSessionId.equals(that.adSessionId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetDialedNumber()) ? 131071 : 524287);
    if (isSetDialedNumber())
      hashCode = hashCode * 8191 + dialedNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetServiceDomain()) ? 131071 : 524287);
    if (isSetServiceDomain())
      hashCode = hashCode * 8191 + serviceDomain.hashCode();

    hashCode = hashCode * 8191 + ((isSetProductType()) ? 131071 : 524287);
    if (isSetProductType())
      hashCode = hashCode * 8191 + productType.getValue();

    hashCode = hashCode * 8191 + ((isSetProductName()) ? 131071 : 524287);
    if (isSetProductName())
      hashCode = hashCode * 8191 + productName.hashCode();

    hashCode = hashCode * 8191 + ((multipleProduct) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetCallerIdStatus()) ? 131071 : 524287);
    if (isSetCallerIdStatus())
      hashCode = hashCode * 8191 + callerIdStatus.getValue();

    hashCode = hashCode * 8191 + balance;

    hashCode = hashCode * 8191 + ((isSetUnit()) ? 131071 : 524287);
    if (isSetUnit())
      hashCode = hashCode * 8191 + unit.hashCode();

    hashCode = hashCode * 8191 + rate;

    hashCode = hashCode * 8191 + ((isSetDisplayCode()) ? 131071 : 524287);
    if (isSetDisplayCode())
      hashCode = hashCode * 8191 + displayCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetCalledNumber()) ? 131071 : 524287);
    if (isSetCalledNumber())
      hashCode = hashCode * 8191 + calledNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetCalleeNationalNumber()) ? 131071 : 524287);
    if (isSetCalleeNationalNumber())
      hashCode = hashCode * 8191 + calleeNationalNumber.hashCode();

    hashCode = hashCode * 8191 + ((isSetCalleeCallingCode()) ? 131071 : 524287);
    if (isSetCalleeCallingCode())
      hashCode = hashCode * 8191 + calleeCallingCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetRateDivision()) ? 131071 : 524287);
    if (isSetRateDivision())
      hashCode = hashCode * 8191 + rateDivision.hashCode();

    hashCode = hashCode * 8191 + adMaxMin;

    hashCode = hashCode * 8191 + adRemains;

    hashCode = hashCode * 8191 + ((isSetAdSessionId()) ? 131071 : 524287);
    if (isSetAdSessionId())
      hashCode = hashCode * 8191 + adSessionId.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(PaidCallDialing other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDialedNumber()).compareTo(other.isSetDialedNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDialedNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dialedNumber, other.dialedNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetServiceDomain()).compareTo(other.isSetServiceDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceDomain()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceDomain, other.serviceDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProductType()).compareTo(other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetProductName()).compareTo(other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMultipleProduct()).compareTo(other.isSetMultipleProduct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultipleProduct()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.multipleProduct, other.multipleProduct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCallerIdStatus()).compareTo(other.isSetCallerIdStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallerIdStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callerIdStatus, other.callerIdStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnit()).compareTo(other.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDisplayCode()).compareTo(other.isSetDisplayCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayCode, other.displayCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCalledNumber()).compareTo(other.isSetCalledNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalledNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calledNumber, other.calledNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCalleeNationalNumber()).compareTo(other.isSetCalleeNationalNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalleeNationalNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calleeNationalNumber, other.calleeNationalNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCalleeCallingCode()).compareTo(other.isSetCalleeCallingCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalleeCallingCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calleeCallingCode, other.calleeCallingCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRateDivision()).compareTo(other.isSetRateDivision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRateDivision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rateDivision, other.rateDivision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdMaxMin()).compareTo(other.isSetAdMaxMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdMaxMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adMaxMin, other.adMaxMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdRemains()).compareTo(other.isSetAdRemains());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdRemains()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adRemains, other.adRemains);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAdSessionId()).compareTo(other.isSetAdSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSessionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adSessionId, other.adSessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("PaidCallDialing(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dialedNumber:");
    if (this.dialedNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.dialedNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceDomain:");
    if (this.serviceDomain == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceDomain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    if (this.productType == null) {
      sb.append("null");
    } else {
      sb.append(this.productType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("multipleProduct:");
    sb.append(this.multipleProduct);
    first = false;
    if (!first) sb.append(", ");
    sb.append("callerIdStatus:");
    if (this.callerIdStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.callerIdStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    sb.append(this.balance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unit:");
    if (this.unit == null) {
      sb.append("null");
    } else {
      sb.append(this.unit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayCode:");
    if (this.displayCode == null) {
      sb.append("null");
    } else {
      sb.append(this.displayCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("calledNumber:");
    if (this.calledNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.calledNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("calleeNationalNumber:");
    if (this.calleeNationalNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.calleeNationalNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("calleeCallingCode:");
    if (this.calleeCallingCode == null) {
      sb.append("null");
    } else {
      sb.append(this.calleeCallingCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rateDivision:");
    if (this.rateDivision == null) {
      sb.append("null");
    } else {
      sb.append(this.rateDivision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adMaxMin:");
    sb.append(this.adMaxMin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adRemains:");
    sb.append(this.adRemains);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adSessionId:");
    if (this.adSessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.adSessionId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PaidCallDialingStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaidCallDialingStandardScheme getScheme() {
      return new PaidCallDialingStandardScheme();
    }
  }

  private static class PaidCallDialingStandardScheme extends org.apache.thrift.scheme.StandardScheme<PaidCallDialing> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PaidCallDialing struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = PaidCallType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DIALED_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dialedNumber = iprot.readString();
              struct.setDialedNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SERVICE_DOMAIN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.serviceDomain = iprot.readString();
              struct.setServiceDomainIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRODUCT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.productType = PaidCallProductType.findByValue(iprot.readI32());
              struct.setProductTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRODUCT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.productName = iprot.readString();
              struct.setProductNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MULTIPLE_PRODUCT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.multipleProduct = iprot.readBool();
              struct.setMultipleProductIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CALLER_ID_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.callerIdStatus = PaidCallerIdStatus.findByValue(iprot.readI32());
              struct.setCallerIdStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.balance = iprot.readI32();
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UNIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unit = iprot.readString();
              struct.setUnitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rate = iprot.readI32();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // DISPLAY_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayCode = iprot.readString();
              struct.setDisplayCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CALLED_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.calledNumber = iprot.readString();
              struct.setCalledNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CALLEE_NATIONAL_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.calleeNationalNumber = iprot.readString();
              struct.setCalleeNationalNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // CALLEE_CALLING_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.calleeCallingCode = iprot.readString();
              struct.setCalleeCallingCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // RATE_DIVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.rateDivision = iprot.readString();
              struct.setRateDivisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // AD_MAX_MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adMaxMin = iprot.readI32();
              struct.setAdMaxMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // AD_REMAINS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.adRemains = iprot.readI32();
              struct.setAdRemainsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // AD_SESSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.adSessionId = iprot.readString();
              struct.setAdSessionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PaidCallDialing struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.dialedNumber != null) {
        oprot.writeFieldBegin(DIALED_NUMBER_FIELD_DESC);
        oprot.writeString(struct.dialedNumber);
        oprot.writeFieldEnd();
      }
      if (struct.serviceDomain != null) {
        oprot.writeFieldBegin(SERVICE_DOMAIN_FIELD_DESC);
        oprot.writeString(struct.serviceDomain);
        oprot.writeFieldEnd();
      }
      if (struct.productType != null) {
        oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.productType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.productName != null) {
        oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
        oprot.writeString(struct.productName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MULTIPLE_PRODUCT_FIELD_DESC);
      oprot.writeBool(struct.multipleProduct);
      oprot.writeFieldEnd();
      if (struct.callerIdStatus != null) {
        oprot.writeFieldBegin(CALLER_ID_STATUS_FIELD_DESC);
        oprot.writeI32(struct.callerIdStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BALANCE_FIELD_DESC);
      oprot.writeI32(struct.balance);
      oprot.writeFieldEnd();
      if (struct.unit != null) {
        oprot.writeFieldBegin(UNIT_FIELD_DESC);
        oprot.writeString(struct.unit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeI32(struct.rate);
      oprot.writeFieldEnd();
      if (struct.displayCode != null) {
        oprot.writeFieldBegin(DISPLAY_CODE_FIELD_DESC);
        oprot.writeString(struct.displayCode);
        oprot.writeFieldEnd();
      }
      if (struct.calledNumber != null) {
        oprot.writeFieldBegin(CALLED_NUMBER_FIELD_DESC);
        oprot.writeString(struct.calledNumber);
        oprot.writeFieldEnd();
      }
      if (struct.calleeNationalNumber != null) {
        oprot.writeFieldBegin(CALLEE_NATIONAL_NUMBER_FIELD_DESC);
        oprot.writeString(struct.calleeNationalNumber);
        oprot.writeFieldEnd();
      }
      if (struct.calleeCallingCode != null) {
        oprot.writeFieldBegin(CALLEE_CALLING_CODE_FIELD_DESC);
        oprot.writeString(struct.calleeCallingCode);
        oprot.writeFieldEnd();
      }
      if (struct.rateDivision != null) {
        oprot.writeFieldBegin(RATE_DIVISION_FIELD_DESC);
        oprot.writeString(struct.rateDivision);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AD_MAX_MIN_FIELD_DESC);
      oprot.writeI32(struct.adMaxMin);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AD_REMAINS_FIELD_DESC);
      oprot.writeI32(struct.adRemains);
      oprot.writeFieldEnd();
      if (struct.adSessionId != null) {
        oprot.writeFieldBegin(AD_SESSION_ID_FIELD_DESC);
        oprot.writeString(struct.adSessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PaidCallDialingTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PaidCallDialingTupleScheme getScheme() {
      return new PaidCallDialingTupleScheme();
    }
  }

  private static class PaidCallDialingTupleScheme extends org.apache.thrift.scheme.TupleScheme<PaidCallDialing> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PaidCallDialing struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetDialedNumber()) {
        optionals.set(1);
      }
      if (struct.isSetServiceDomain()) {
        optionals.set(2);
      }
      if (struct.isSetProductType()) {
        optionals.set(3);
      }
      if (struct.isSetProductName()) {
        optionals.set(4);
      }
      if (struct.isSetMultipleProduct()) {
        optionals.set(5);
      }
      if (struct.isSetCallerIdStatus()) {
        optionals.set(6);
      }
      if (struct.isSetBalance()) {
        optionals.set(7);
      }
      if (struct.isSetUnit()) {
        optionals.set(8);
      }
      if (struct.isSetRate()) {
        optionals.set(9);
      }
      if (struct.isSetDisplayCode()) {
        optionals.set(10);
      }
      if (struct.isSetCalledNumber()) {
        optionals.set(11);
      }
      if (struct.isSetCalleeNationalNumber()) {
        optionals.set(12);
      }
      if (struct.isSetCalleeCallingCode()) {
        optionals.set(13);
      }
      if (struct.isSetRateDivision()) {
        optionals.set(14);
      }
      if (struct.isSetAdMaxMin()) {
        optionals.set(15);
      }
      if (struct.isSetAdRemains()) {
        optionals.set(16);
      }
      if (struct.isSetAdSessionId()) {
        optionals.set(17);
      }
      oprot.writeBitSet(optionals, 18);
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetDialedNumber()) {
        oprot.writeString(struct.dialedNumber);
      }
      if (struct.isSetServiceDomain()) {
        oprot.writeString(struct.serviceDomain);
      }
      if (struct.isSetProductType()) {
        oprot.writeI32(struct.productType.getValue());
      }
      if (struct.isSetProductName()) {
        oprot.writeString(struct.productName);
      }
      if (struct.isSetMultipleProduct()) {
        oprot.writeBool(struct.multipleProduct);
      }
      if (struct.isSetCallerIdStatus()) {
        oprot.writeI32(struct.callerIdStatus.getValue());
      }
      if (struct.isSetBalance()) {
        oprot.writeI32(struct.balance);
      }
      if (struct.isSetUnit()) {
        oprot.writeString(struct.unit);
      }
      if (struct.isSetRate()) {
        oprot.writeI32(struct.rate);
      }
      if (struct.isSetDisplayCode()) {
        oprot.writeString(struct.displayCode);
      }
      if (struct.isSetCalledNumber()) {
        oprot.writeString(struct.calledNumber);
      }
      if (struct.isSetCalleeNationalNumber()) {
        oprot.writeString(struct.calleeNationalNumber);
      }
      if (struct.isSetCalleeCallingCode()) {
        oprot.writeString(struct.calleeCallingCode);
      }
      if (struct.isSetRateDivision()) {
        oprot.writeString(struct.rateDivision);
      }
      if (struct.isSetAdMaxMin()) {
        oprot.writeI32(struct.adMaxMin);
      }
      if (struct.isSetAdRemains()) {
        oprot.writeI32(struct.adRemains);
      }
      if (struct.isSetAdSessionId()) {
        oprot.writeString(struct.adSessionId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PaidCallDialing struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(18);
      if (incoming.get(0)) {
        struct.type = PaidCallType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dialedNumber = iprot.readString();
        struct.setDialedNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.serviceDomain = iprot.readString();
        struct.setServiceDomainIsSet(true);
      }
      if (incoming.get(3)) {
        struct.productType = PaidCallProductType.findByValue(iprot.readI32());
        struct.setProductTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.productName = iprot.readString();
        struct.setProductNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.multipleProduct = iprot.readBool();
        struct.setMultipleProductIsSet(true);
      }
      if (incoming.get(6)) {
        struct.callerIdStatus = PaidCallerIdStatus.findByValue(iprot.readI32());
        struct.setCallerIdStatusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.balance = iprot.readI32();
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(8)) {
        struct.unit = iprot.readString();
        struct.setUnitIsSet(true);
      }
      if (incoming.get(9)) {
        struct.rate = iprot.readI32();
        struct.setRateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.displayCode = iprot.readString();
        struct.setDisplayCodeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.calledNumber = iprot.readString();
        struct.setCalledNumberIsSet(true);
      }
      if (incoming.get(12)) {
        struct.calleeNationalNumber = iprot.readString();
        struct.setCalleeNationalNumberIsSet(true);
      }
      if (incoming.get(13)) {
        struct.calleeCallingCode = iprot.readString();
        struct.setCalleeCallingCodeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.rateDivision = iprot.readString();
        struct.setRateDivisionIsSet(true);
      }
      if (incoming.get(15)) {
        struct.adMaxMin = iprot.readI32();
        struct.setAdMaxMinIsSet(true);
      }
      if (incoming.get(16)) {
        struct.adRemains = iprot.readI32();
        struct.setAdRemainsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.adSessionId = iprot.readString();
        struct.setAdSessionIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

