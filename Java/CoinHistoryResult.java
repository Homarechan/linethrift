/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class CoinHistoryResult implements org.apache.thrift.TBase<CoinHistoryResult, CoinHistoryResult._Fields>, java.io.Serializable, Cloneable, Comparable<CoinHistoryResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CoinHistoryResult");

  private static final org.apache.thrift.protocol.TField HISTORYS_FIELD_DESC = new org.apache.thrift.protocol.TField("historys", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField BALANCE_FIELD_DESC = new org.apache.thrift.protocol.TField("balance", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField HAS_NEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("hasNext", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CoinHistoryResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CoinHistoryResultTupleSchemeFactory();

  public java.util.List<CoinHistory> historys; // required
  public Coin balance; // required
  public boolean hasNext; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HISTORYS((short)1, "historys"),
    BALANCE((short)2, "balance"),
    HAS_NEXT((short)3, "hasNext");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HISTORYS
          return HISTORYS;
        case 2: // BALANCE
          return BALANCE;
        case 3: // HAS_NEXT
          return HAS_NEXT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __HASNEXT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HISTORYS, new org.apache.thrift.meta_data.FieldMetaData("historys", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoinHistory.class))));
    tmpMap.put(_Fields.BALANCE, new org.apache.thrift.meta_data.FieldMetaData("balance", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Coin.class)));
    tmpMap.put(_Fields.HAS_NEXT, new org.apache.thrift.meta_data.FieldMetaData("hasNext", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CoinHistoryResult.class, metaDataMap);
  }

  public CoinHistoryResult() {
  }

  public CoinHistoryResult(
    java.util.List<CoinHistory> historys,
    Coin balance,
    boolean hasNext)
  {
    this();
    this.historys = historys;
    this.balance = balance;
    this.hasNext = hasNext;
    setHasNextIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinHistoryResult(CoinHistoryResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHistorys()) {
      java.util.List<CoinHistory> __this__historys = new java.util.ArrayList<CoinHistory>(other.historys.size());
      for (CoinHistory other_element : other.historys) {
        __this__historys.add(new CoinHistory(other_element));
      }
      this.historys = __this__historys;
    }
    if (other.isSetBalance()) {
      this.balance = new Coin(other.balance);
    }
    this.hasNext = other.hasNext;
  }

  public CoinHistoryResult deepCopy() {
    return new CoinHistoryResult(this);
  }

  @Override
  public void clear() {
    this.historys = null;
    this.balance = null;
    setHasNextIsSet(false);
    this.hasNext = false;
  }

  public int getHistorysSize() {
    return (this.historys == null) ? 0 : this.historys.size();
  }

  public java.util.Iterator<CoinHistory> getHistorysIterator() {
    return (this.historys == null) ? null : this.historys.iterator();
  }

  public void addToHistorys(CoinHistory elem) {
    if (this.historys == null) {
      this.historys = new java.util.ArrayList<CoinHistory>();
    }
    this.historys.add(elem);
  }

  public java.util.List<CoinHistory> getHistorys() {
    return this.historys;
  }

  public CoinHistoryResult setHistorys(java.util.List<CoinHistory> historys) {
    this.historys = historys;
    return this;
  }

  public void unsetHistorys() {
    this.historys = null;
  }

  /** Returns true if field historys is set (has been assigned a value) and false otherwise */
  public boolean isSetHistorys() {
    return this.historys != null;
  }

  public void setHistorysIsSet(boolean value) {
    if (!value) {
      this.historys = null;
    }
  }

  public Coin getBalance() {
    return this.balance;
  }

  public CoinHistoryResult setBalance(Coin balance) {
    this.balance = balance;
    return this;
  }

  public void unsetBalance() {
    this.balance = null;
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return this.balance != null;
  }

  public void setBalanceIsSet(boolean value) {
    if (!value) {
      this.balance = null;
    }
  }

  public boolean isHasNext() {
    return this.hasNext;
  }

  public CoinHistoryResult setHasNext(boolean hasNext) {
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    return this;
  }

  public void unsetHasNext() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  /** Returns true if field hasNext is set (has been assigned a value) and false otherwise */
  public boolean isSetHasNext() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASNEXT_ISSET_ID);
  }

  public void setHasNextIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASNEXT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case HISTORYS:
      if (value == null) {
        unsetHistorys();
      } else {
        setHistorys((java.util.List<CoinHistory>)value);
      }
      break;

    case BALANCE:
      if (value == null) {
        unsetBalance();
      } else {
        setBalance((Coin)value);
      }
      break;

    case HAS_NEXT:
      if (value == null) {
        unsetHasNext();
      } else {
        setHasNext((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case HISTORYS:
      return getHistorys();

    case BALANCE:
      return getBalance();

    case HAS_NEXT:
      return isHasNext();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case HISTORYS:
      return isSetHistorys();
    case BALANCE:
      return isSetBalance();
    case HAS_NEXT:
      return isSetHasNext();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof CoinHistoryResult)
      return this.equals((CoinHistoryResult)that);
    return false;
  }

  public boolean equals(CoinHistoryResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_historys = true && this.isSetHistorys();
    boolean that_present_historys = true && that.isSetHistorys();
    if (this_present_historys || that_present_historys) {
      if (!(this_present_historys && that_present_historys))
        return false;
      if (!this.historys.equals(that.historys))
        return false;
    }

    boolean this_present_balance = true && this.isSetBalance();
    boolean that_present_balance = true && that.isSetBalance();
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (!this.balance.equals(that.balance))
        return false;
    }

    boolean this_present_hasNext = true;
    boolean that_present_hasNext = true;
    if (this_present_hasNext || that_present_hasNext) {
      if (!(this_present_hasNext && that_present_hasNext))
        return false;
      if (this.hasNext != that.hasNext)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetHistorys()) ? 131071 : 524287);
    if (isSetHistorys())
      hashCode = hashCode * 8191 + historys.hashCode();

    hashCode = hashCode * 8191 + ((isSetBalance()) ? 131071 : 524287);
    if (isSetBalance())
      hashCode = hashCode * 8191 + balance.hashCode();

    hashCode = hashCode * 8191 + ((hasNext) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(CoinHistoryResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetHistorys()).compareTo(other.isSetHistorys());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHistorys()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.historys, other.historys);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBalance()).compareTo(other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetHasNext()).compareTo(other.isSetHasNext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasNext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasNext, other.hasNext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CoinHistoryResult(");
    boolean first = true;

    sb.append("historys:");
    if (this.historys == null) {
      sb.append("null");
    } else {
      sb.append(this.historys);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    if (this.balance == null) {
      sb.append("null");
    } else {
      sb.append(this.balance);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasNext:");
    sb.append(this.hasNext);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (balance != null) {
      balance.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CoinHistoryResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CoinHistoryResultStandardScheme getScheme() {
      return new CoinHistoryResultStandardScheme();
    }
  }

  private static class CoinHistoryResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<CoinHistoryResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CoinHistoryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HISTORYS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list370 = iprot.readListBegin();
                struct.historys = new java.util.ArrayList<CoinHistory>(_list370.size);
                CoinHistory _elem371;
                for (int _i372 = 0; _i372 < _list370.size; ++_i372)
                {
                  _elem371 = new CoinHistory();
                  _elem371.read(iprot);
                  struct.historys.add(_elem371);
                }
                iprot.readListEnd();
              }
              struct.setHistorysIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BALANCE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.balance = new Coin();
              struct.balance.read(iprot);
              struct.setBalanceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HAS_NEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasNext = iprot.readBool();
              struct.setHasNextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CoinHistoryResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.historys != null) {
        oprot.writeFieldBegin(HISTORYS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.historys.size()));
          for (CoinHistory _iter373 : struct.historys)
          {
            _iter373.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.balance != null) {
        oprot.writeFieldBegin(BALANCE_FIELD_DESC);
        struct.balance.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
      oprot.writeBool(struct.hasNext);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CoinHistoryResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CoinHistoryResultTupleScheme getScheme() {
      return new CoinHistoryResultTupleScheme();
    }
  }

  private static class CoinHistoryResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<CoinHistoryResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CoinHistoryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetHistorys()) {
        optionals.set(0);
      }
      if (struct.isSetBalance()) {
        optionals.set(1);
      }
      if (struct.isSetHasNext()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetHistorys()) {
        {
          oprot.writeI32(struct.historys.size());
          for (CoinHistory _iter374 : struct.historys)
          {
            _iter374.write(oprot);
          }
        }
      }
      if (struct.isSetBalance()) {
        struct.balance.write(oprot);
      }
      if (struct.isSetHasNext()) {
        oprot.writeBool(struct.hasNext);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CoinHistoryResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list375 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.historys = new java.util.ArrayList<CoinHistory>(_list375.size);
          CoinHistory _elem376;
          for (int _i377 = 0; _i377 < _list375.size; ++_i377)
          {
            _elem376 = new CoinHistory();
            _elem376.read(iprot);
            struct.historys.add(_elem376);
          }
        }
        struct.setHistorysIsSet(true);
      }
      if (incoming.get(1)) {
        struct.balance = new Coin();
        struct.balance.read(iprot);
        struct.setBalanceIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hasNext = iprot.readBool();
        struct.setHasNextIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

