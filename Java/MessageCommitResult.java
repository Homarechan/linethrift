/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class MessageCommitResult implements org.apache.thrift.TBase<MessageCommitResult, MessageCommitResult._Fields>, java.io.Serializable, Cloneable, Comparable<MessageCommitResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MessageCommitResult");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField MESSAGE_STORE_REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("messageStoreRequestId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MESSAGE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("messageIds", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField RECEIVER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("receiverCount", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField SUCCESS_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("successCount", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField FAIL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("failCount", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField BLOCK_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("blockCount", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField UNREGISTERED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("unregisteredCount", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField UNRELATED_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("unrelatedCount", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField ERROR_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("errorDescription", org.apache.thrift.protocol.TType.STRING, (short)21);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MessageCommitResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MessageCommitResultTupleSchemeFactory();

  public java.lang.String requestId; // required
  /**
   * 
   * @see BuddyResultState
   */
  public BuddyResultState state; // required
  public java.lang.String messageStoreRequestId; // required
  public java.util.List<java.lang.String> messageIds; // required
  public long receiverCount; // required
  public long successCount; // required
  public long failCount; // required
  public long blockCount; // required
  public long unregisteredCount; // required
  public long unrelatedCount; // required
  public java.lang.String errorDescription; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "requestId"),
    /**
     * 
     * @see BuddyResultState
     */
    STATE((short)2, "state"),
    MESSAGE_STORE_REQUEST_ID((short)3, "messageStoreRequestId"),
    MESSAGE_IDS((short)4, "messageIds"),
    RECEIVER_COUNT((short)11, "receiverCount"),
    SUCCESS_COUNT((short)12, "successCount"),
    FAIL_COUNT((short)13, "failCount"),
    BLOCK_COUNT((short)14, "blockCount"),
    UNREGISTERED_COUNT((short)15, "unregisteredCount"),
    UNRELATED_COUNT((short)16, "unrelatedCount"),
    ERROR_DESCRIPTION((short)21, "errorDescription");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // STATE
          return STATE;
        case 3: // MESSAGE_STORE_REQUEST_ID
          return MESSAGE_STORE_REQUEST_ID;
        case 4: // MESSAGE_IDS
          return MESSAGE_IDS;
        case 11: // RECEIVER_COUNT
          return RECEIVER_COUNT;
        case 12: // SUCCESS_COUNT
          return SUCCESS_COUNT;
        case 13: // FAIL_COUNT
          return FAIL_COUNT;
        case 14: // BLOCK_COUNT
          return BLOCK_COUNT;
        case 15: // UNREGISTERED_COUNT
          return UNREGISTERED_COUNT;
        case 16: // UNRELATED_COUNT
          return UNRELATED_COUNT;
        case 21: // ERROR_DESCRIPTION
          return ERROR_DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RECEIVERCOUNT_ISSET_ID = 0;
  private static final int __SUCCESSCOUNT_ISSET_ID = 1;
  private static final int __FAILCOUNT_ISSET_ID = 2;
  private static final int __BLOCKCOUNT_ISSET_ID = 3;
  private static final int __UNREGISTEREDCOUNT_ISSET_ID = 4;
  private static final int __UNRELATEDCOUNT_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, BuddyResultState.class)));
    tmpMap.put(_Fields.MESSAGE_STORE_REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("messageStoreRequestId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MESSAGE_IDS, new org.apache.thrift.meta_data.FieldMetaData("messageIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.RECEIVER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("receiverCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUCCESS_COUNT, new org.apache.thrift.meta_data.FieldMetaData("successCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.FAIL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("failCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.BLOCK_COUNT, new org.apache.thrift.meta_data.FieldMetaData("blockCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNREGISTERED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("unregisteredCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.UNRELATED_COUNT, new org.apache.thrift.meta_data.FieldMetaData("unrelatedCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ERROR_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("errorDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MessageCommitResult.class, metaDataMap);
  }

  public MessageCommitResult() {
  }

  public MessageCommitResult(
    java.lang.String requestId,
    BuddyResultState state,
    java.lang.String messageStoreRequestId,
    java.util.List<java.lang.String> messageIds,
    long receiverCount,
    long successCount,
    long failCount,
    long blockCount,
    long unregisteredCount,
    long unrelatedCount,
    java.lang.String errorDescription)
  {
    this();
    this.requestId = requestId;
    this.state = state;
    this.messageStoreRequestId = messageStoreRequestId;
    this.messageIds = messageIds;
    this.receiverCount = receiverCount;
    setReceiverCountIsSet(true);
    this.successCount = successCount;
    setSuccessCountIsSet(true);
    this.failCount = failCount;
    setFailCountIsSet(true);
    this.blockCount = blockCount;
    setBlockCountIsSet(true);
    this.unregisteredCount = unregisteredCount;
    setUnregisteredCountIsSet(true);
    this.unrelatedCount = unrelatedCount;
    setUnrelatedCountIsSet(true);
    this.errorDescription = errorDescription;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageCommitResult(MessageCommitResult other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetMessageStoreRequestId()) {
      this.messageStoreRequestId = other.messageStoreRequestId;
    }
    if (other.isSetMessageIds()) {
      java.util.List<java.lang.String> __this__messageIds = new java.util.ArrayList<java.lang.String>(other.messageIds);
      this.messageIds = __this__messageIds;
    }
    this.receiverCount = other.receiverCount;
    this.successCount = other.successCount;
    this.failCount = other.failCount;
    this.blockCount = other.blockCount;
    this.unregisteredCount = other.unregisteredCount;
    this.unrelatedCount = other.unrelatedCount;
    if (other.isSetErrorDescription()) {
      this.errorDescription = other.errorDescription;
    }
  }

  public MessageCommitResult deepCopy() {
    return new MessageCommitResult(this);
  }

  @Override
  public void clear() {
    this.requestId = null;
    this.state = null;
    this.messageStoreRequestId = null;
    this.messageIds = null;
    setReceiverCountIsSet(false);
    this.receiverCount = 0;
    setSuccessCountIsSet(false);
    this.successCount = 0;
    setFailCountIsSet(false);
    this.failCount = 0;
    setBlockCountIsSet(false);
    this.blockCount = 0;
    setUnregisteredCountIsSet(false);
    this.unregisteredCount = 0;
    setUnrelatedCountIsSet(false);
    this.unrelatedCount = 0;
    this.errorDescription = null;
  }

  public java.lang.String getRequestId() {
    return this.requestId;
  }

  public MessageCommitResult setRequestId(java.lang.String requestId) {
    this.requestId = requestId;
    return this;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  /**
   * 
   * @see BuddyResultState
   */
  public BuddyResultState getState() {
    return this.state;
  }

  /**
   * 
   * @see BuddyResultState
   */
  public MessageCommitResult setState(BuddyResultState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public java.lang.String getMessageStoreRequestId() {
    return this.messageStoreRequestId;
  }

  public MessageCommitResult setMessageStoreRequestId(java.lang.String messageStoreRequestId) {
    this.messageStoreRequestId = messageStoreRequestId;
    return this;
  }

  public void unsetMessageStoreRequestId() {
    this.messageStoreRequestId = null;
  }

  /** Returns true if field messageStoreRequestId is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageStoreRequestId() {
    return this.messageStoreRequestId != null;
  }

  public void setMessageStoreRequestIdIsSet(boolean value) {
    if (!value) {
      this.messageStoreRequestId = null;
    }
  }

  public int getMessageIdsSize() {
    return (this.messageIds == null) ? 0 : this.messageIds.size();
  }

  public java.util.Iterator<java.lang.String> getMessageIdsIterator() {
    return (this.messageIds == null) ? null : this.messageIds.iterator();
  }

  public void addToMessageIds(java.lang.String elem) {
    if (this.messageIds == null) {
      this.messageIds = new java.util.ArrayList<java.lang.String>();
    }
    this.messageIds.add(elem);
  }

  public java.util.List<java.lang.String> getMessageIds() {
    return this.messageIds;
  }

  public MessageCommitResult setMessageIds(java.util.List<java.lang.String> messageIds) {
    this.messageIds = messageIds;
    return this;
  }

  public void unsetMessageIds() {
    this.messageIds = null;
  }

  /** Returns true if field messageIds is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageIds() {
    return this.messageIds != null;
  }

  public void setMessageIdsIsSet(boolean value) {
    if (!value) {
      this.messageIds = null;
    }
  }

  public long getReceiverCount() {
    return this.receiverCount;
  }

  public MessageCommitResult setReceiverCount(long receiverCount) {
    this.receiverCount = receiverCount;
    setReceiverCountIsSet(true);
    return this;
  }

  public void unsetReceiverCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RECEIVERCOUNT_ISSET_ID);
  }

  /** Returns true if field receiverCount is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiverCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RECEIVERCOUNT_ISSET_ID);
  }

  public void setReceiverCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RECEIVERCOUNT_ISSET_ID, value);
  }

  public long getSuccessCount() {
    return this.successCount;
  }

  public MessageCommitResult setSuccessCount(long successCount) {
    this.successCount = successCount;
    setSuccessCountIsSet(true);
    return this;
  }

  public void unsetSuccessCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESSCOUNT_ISSET_ID);
  }

  /** Returns true if field successCount is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccessCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESSCOUNT_ISSET_ID);
  }

  public void setSuccessCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESSCOUNT_ISSET_ID, value);
  }

  public long getFailCount() {
    return this.failCount;
  }

  public MessageCommitResult setFailCount(long failCount) {
    this.failCount = failCount;
    setFailCountIsSet(true);
    return this;
  }

  public void unsetFailCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FAILCOUNT_ISSET_ID);
  }

  /** Returns true if field failCount is set (has been assigned a value) and false otherwise */
  public boolean isSetFailCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FAILCOUNT_ISSET_ID);
  }

  public void setFailCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FAILCOUNT_ISSET_ID, value);
  }

  public long getBlockCount() {
    return this.blockCount;
  }

  public MessageCommitResult setBlockCount(long blockCount) {
    this.blockCount = blockCount;
    setBlockCountIsSet(true);
    return this;
  }

  public void unsetBlockCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BLOCKCOUNT_ISSET_ID);
  }

  /** Returns true if field blockCount is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BLOCKCOUNT_ISSET_ID);
  }

  public void setBlockCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BLOCKCOUNT_ISSET_ID, value);
  }

  public long getUnregisteredCount() {
    return this.unregisteredCount;
  }

  public MessageCommitResult setUnregisteredCount(long unregisteredCount) {
    this.unregisteredCount = unregisteredCount;
    setUnregisteredCountIsSet(true);
    return this;
  }

  public void unsetUnregisteredCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNREGISTEREDCOUNT_ISSET_ID);
  }

  /** Returns true if field unregisteredCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnregisteredCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNREGISTEREDCOUNT_ISSET_ID);
  }

  public void setUnregisteredCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNREGISTEREDCOUNT_ISSET_ID, value);
  }

  public long getUnrelatedCount() {
    return this.unrelatedCount;
  }

  public MessageCommitResult setUnrelatedCount(long unrelatedCount) {
    this.unrelatedCount = unrelatedCount;
    setUnrelatedCountIsSet(true);
    return this;
  }

  public void unsetUnrelatedCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UNRELATEDCOUNT_ISSET_ID);
  }

  /** Returns true if field unrelatedCount is set (has been assigned a value) and false otherwise */
  public boolean isSetUnrelatedCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UNRELATEDCOUNT_ISSET_ID);
  }

  public void setUnrelatedCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UNRELATEDCOUNT_ISSET_ID, value);
  }

  public java.lang.String getErrorDescription() {
    return this.errorDescription;
  }

  public MessageCommitResult setErrorDescription(java.lang.String errorDescription) {
    this.errorDescription = errorDescription;
    return this;
  }

  public void unsetErrorDescription() {
    this.errorDescription = null;
  }

  /** Returns true if field errorDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorDescription() {
    return this.errorDescription != null;
  }

  public void setErrorDescriptionIsSet(boolean value) {
    if (!value) {
      this.errorDescription = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((java.lang.String)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((BuddyResultState)value);
      }
      break;

    case MESSAGE_STORE_REQUEST_ID:
      if (value == null) {
        unsetMessageStoreRequestId();
      } else {
        setMessageStoreRequestId((java.lang.String)value);
      }
      break;

    case MESSAGE_IDS:
      if (value == null) {
        unsetMessageIds();
      } else {
        setMessageIds((java.util.List<java.lang.String>)value);
      }
      break;

    case RECEIVER_COUNT:
      if (value == null) {
        unsetReceiverCount();
      } else {
        setReceiverCount((java.lang.Long)value);
      }
      break;

    case SUCCESS_COUNT:
      if (value == null) {
        unsetSuccessCount();
      } else {
        setSuccessCount((java.lang.Long)value);
      }
      break;

    case FAIL_COUNT:
      if (value == null) {
        unsetFailCount();
      } else {
        setFailCount((java.lang.Long)value);
      }
      break;

    case BLOCK_COUNT:
      if (value == null) {
        unsetBlockCount();
      } else {
        setBlockCount((java.lang.Long)value);
      }
      break;

    case UNREGISTERED_COUNT:
      if (value == null) {
        unsetUnregisteredCount();
      } else {
        setUnregisteredCount((java.lang.Long)value);
      }
      break;

    case UNRELATED_COUNT:
      if (value == null) {
        unsetUnrelatedCount();
      } else {
        setUnrelatedCount((java.lang.Long)value);
      }
      break;

    case ERROR_DESCRIPTION:
      if (value == null) {
        unsetErrorDescription();
      } else {
        setErrorDescription((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ID:
      return getRequestId();

    case STATE:
      return getState();

    case MESSAGE_STORE_REQUEST_ID:
      return getMessageStoreRequestId();

    case MESSAGE_IDS:
      return getMessageIds();

    case RECEIVER_COUNT:
      return getReceiverCount();

    case SUCCESS_COUNT:
      return getSuccessCount();

    case FAIL_COUNT:
      return getFailCount();

    case BLOCK_COUNT:
      return getBlockCount();

    case UNREGISTERED_COUNT:
      return getUnregisteredCount();

    case UNRELATED_COUNT:
      return getUnrelatedCount();

    case ERROR_DESCRIPTION:
      return getErrorDescription();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ID:
      return isSetRequestId();
    case STATE:
      return isSetState();
    case MESSAGE_STORE_REQUEST_ID:
      return isSetMessageStoreRequestId();
    case MESSAGE_IDS:
      return isSetMessageIds();
    case RECEIVER_COUNT:
      return isSetReceiverCount();
    case SUCCESS_COUNT:
      return isSetSuccessCount();
    case FAIL_COUNT:
      return isSetFailCount();
    case BLOCK_COUNT:
      return isSetBlockCount();
    case UNREGISTERED_COUNT:
      return isSetUnregisteredCount();
    case UNRELATED_COUNT:
      return isSetUnrelatedCount();
    case ERROR_DESCRIPTION:
      return isSetErrorDescription();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageCommitResult)
      return this.equals((MessageCommitResult)that);
    return false;
  }

  public boolean equals(MessageCommitResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_messageStoreRequestId = true && this.isSetMessageStoreRequestId();
    boolean that_present_messageStoreRequestId = true && that.isSetMessageStoreRequestId();
    if (this_present_messageStoreRequestId || that_present_messageStoreRequestId) {
      if (!(this_present_messageStoreRequestId && that_present_messageStoreRequestId))
        return false;
      if (!this.messageStoreRequestId.equals(that.messageStoreRequestId))
        return false;
    }

    boolean this_present_messageIds = true && this.isSetMessageIds();
    boolean that_present_messageIds = true && that.isSetMessageIds();
    if (this_present_messageIds || that_present_messageIds) {
      if (!(this_present_messageIds && that_present_messageIds))
        return false;
      if (!this.messageIds.equals(that.messageIds))
        return false;
    }

    boolean this_present_receiverCount = true;
    boolean that_present_receiverCount = true;
    if (this_present_receiverCount || that_present_receiverCount) {
      if (!(this_present_receiverCount && that_present_receiverCount))
        return false;
      if (this.receiverCount != that.receiverCount)
        return false;
    }

    boolean this_present_successCount = true;
    boolean that_present_successCount = true;
    if (this_present_successCount || that_present_successCount) {
      if (!(this_present_successCount && that_present_successCount))
        return false;
      if (this.successCount != that.successCount)
        return false;
    }

    boolean this_present_failCount = true;
    boolean that_present_failCount = true;
    if (this_present_failCount || that_present_failCount) {
      if (!(this_present_failCount && that_present_failCount))
        return false;
      if (this.failCount != that.failCount)
        return false;
    }

    boolean this_present_blockCount = true;
    boolean that_present_blockCount = true;
    if (this_present_blockCount || that_present_blockCount) {
      if (!(this_present_blockCount && that_present_blockCount))
        return false;
      if (this.blockCount != that.blockCount)
        return false;
    }

    boolean this_present_unregisteredCount = true;
    boolean that_present_unregisteredCount = true;
    if (this_present_unregisteredCount || that_present_unregisteredCount) {
      if (!(this_present_unregisteredCount && that_present_unregisteredCount))
        return false;
      if (this.unregisteredCount != that.unregisteredCount)
        return false;
    }

    boolean this_present_unrelatedCount = true;
    boolean that_present_unrelatedCount = true;
    if (this_present_unrelatedCount || that_present_unrelatedCount) {
      if (!(this_present_unrelatedCount && that_present_unrelatedCount))
        return false;
      if (this.unrelatedCount != that.unrelatedCount)
        return false;
    }

    boolean this_present_errorDescription = true && this.isSetErrorDescription();
    boolean that_present_errorDescription = true && that.isSetErrorDescription();
    if (this_present_errorDescription || that_present_errorDescription) {
      if (!(this_present_errorDescription && that_present_errorDescription))
        return false;
      if (!this.errorDescription.equals(that.errorDescription))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRequestId()) ? 131071 : 524287);
    if (isSetRequestId())
      hashCode = hashCode * 8191 + requestId.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.getValue();

    hashCode = hashCode * 8191 + ((isSetMessageStoreRequestId()) ? 131071 : 524287);
    if (isSetMessageStoreRequestId())
      hashCode = hashCode * 8191 + messageStoreRequestId.hashCode();

    hashCode = hashCode * 8191 + ((isSetMessageIds()) ? 131071 : 524287);
    if (isSetMessageIds())
      hashCode = hashCode * 8191 + messageIds.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(receiverCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(successCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(failCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(blockCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(unregisteredCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(unrelatedCount);

    hashCode = hashCode * 8191 + ((isSetErrorDescription()) ? 131071 : 524287);
    if (isSetErrorDescription())
      hashCode = hashCode * 8191 + errorDescription.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(MessageCommitResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessageStoreRequestId()).compareTo(other.isSetMessageStoreRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageStoreRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageStoreRequestId, other.messageStoreRequestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessageIds()).compareTo(other.isSetMessageIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageIds, other.messageIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReceiverCount()).compareTo(other.isSetReceiverCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiverCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiverCount, other.receiverCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSuccessCount()).compareTo(other.isSetSuccessCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccessCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.successCount, other.successCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFailCount()).compareTo(other.isSetFailCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failCount, other.failCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBlockCount()).compareTo(other.isSetBlockCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockCount, other.blockCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnregisteredCount()).compareTo(other.isSetUnregisteredCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnregisteredCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unregisteredCount, other.unregisteredCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUnrelatedCount()).compareTo(other.isSetUnrelatedCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnrelatedCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unrelatedCount, other.unrelatedCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorDescription()).compareTo(other.isSetErrorDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorDescription, other.errorDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("MessageCommitResult(");
    boolean first = true;

    sb.append("requestId:");
    if (this.requestId == null) {
      sb.append("null");
    } else {
      sb.append(this.requestId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageStoreRequestId:");
    if (this.messageStoreRequestId == null) {
      sb.append("null");
    } else {
      sb.append(this.messageStoreRequestId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageIds:");
    if (this.messageIds == null) {
      sb.append("null");
    } else {
      sb.append(this.messageIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiverCount:");
    sb.append(this.receiverCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("successCount:");
    sb.append(this.successCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failCount:");
    sb.append(this.failCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockCount:");
    sb.append(this.blockCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unregisteredCount:");
    sb.append(this.unregisteredCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unrelatedCount:");
    sb.append(this.unrelatedCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("errorDescription:");
    if (this.errorDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.errorDescription);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MessageCommitResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageCommitResultStandardScheme getScheme() {
      return new MessageCommitResultStandardScheme();
    }
  }

  private static class MessageCommitResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MessageCommitResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MessageCommitResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestId = iprot.readString();
              struct.setRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = BuddyResultState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MESSAGE_STORE_REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.messageStoreRequestId = iprot.readString();
              struct.setMessageStoreRequestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MESSAGE_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.messageIds = new java.util.ArrayList<java.lang.String>(_list150.size);
                java.lang.String _elem151;
                for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                {
                  _elem151 = iprot.readString();
                  struct.messageIds.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setMessageIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // RECEIVER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.receiverCount = iprot.readI64();
              struct.setReceiverCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SUCCESS_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.successCount = iprot.readI64();
              struct.setSuccessCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FAIL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.failCount = iprot.readI64();
              struct.setFailCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // BLOCK_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.blockCount = iprot.readI64();
              struct.setBlockCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // UNREGISTERED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unregisteredCount = iprot.readI64();
              struct.setUnregisteredCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // UNRELATED_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.unrelatedCount = iprot.readI64();
              struct.setUnrelatedCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ERROR_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorDescription = iprot.readString();
              struct.setErrorDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MessageCommitResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.requestId);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.messageStoreRequestId != null) {
        oprot.writeFieldBegin(MESSAGE_STORE_REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.messageStoreRequestId);
        oprot.writeFieldEnd();
      }
      if (struct.messageIds != null) {
        oprot.writeFieldBegin(MESSAGE_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.messageIds.size()));
          for (java.lang.String _iter153 : struct.messageIds)
          {
            oprot.writeString(_iter153);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RECEIVER_COUNT_FIELD_DESC);
      oprot.writeI64(struct.receiverCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SUCCESS_COUNT_FIELD_DESC);
      oprot.writeI64(struct.successCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAIL_COUNT_FIELD_DESC);
      oprot.writeI64(struct.failCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(BLOCK_COUNT_FIELD_DESC);
      oprot.writeI64(struct.blockCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNREGISTERED_COUNT_FIELD_DESC);
      oprot.writeI64(struct.unregisteredCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UNRELATED_COUNT_FIELD_DESC);
      oprot.writeI64(struct.unrelatedCount);
      oprot.writeFieldEnd();
      if (struct.errorDescription != null) {
        oprot.writeFieldBegin(ERROR_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.errorDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MessageCommitResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public MessageCommitResultTupleScheme getScheme() {
      return new MessageCommitResultTupleScheme();
    }
  }

  private static class MessageCommitResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MessageCommitResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MessageCommitResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRequestId()) {
        optionals.set(0);
      }
      if (struct.isSetState()) {
        optionals.set(1);
      }
      if (struct.isSetMessageStoreRequestId()) {
        optionals.set(2);
      }
      if (struct.isSetMessageIds()) {
        optionals.set(3);
      }
      if (struct.isSetReceiverCount()) {
        optionals.set(4);
      }
      if (struct.isSetSuccessCount()) {
        optionals.set(5);
      }
      if (struct.isSetFailCount()) {
        optionals.set(6);
      }
      if (struct.isSetBlockCount()) {
        optionals.set(7);
      }
      if (struct.isSetUnregisteredCount()) {
        optionals.set(8);
      }
      if (struct.isSetUnrelatedCount()) {
        optionals.set(9);
      }
      if (struct.isSetErrorDescription()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetRequestId()) {
        oprot.writeString(struct.requestId);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
      if (struct.isSetMessageStoreRequestId()) {
        oprot.writeString(struct.messageStoreRequestId);
      }
      if (struct.isSetMessageIds()) {
        {
          oprot.writeI32(struct.messageIds.size());
          for (java.lang.String _iter154 : struct.messageIds)
          {
            oprot.writeString(_iter154);
          }
        }
      }
      if (struct.isSetReceiverCount()) {
        oprot.writeI64(struct.receiverCount);
      }
      if (struct.isSetSuccessCount()) {
        oprot.writeI64(struct.successCount);
      }
      if (struct.isSetFailCount()) {
        oprot.writeI64(struct.failCount);
      }
      if (struct.isSetBlockCount()) {
        oprot.writeI64(struct.blockCount);
      }
      if (struct.isSetUnregisteredCount()) {
        oprot.writeI64(struct.unregisteredCount);
      }
      if (struct.isSetUnrelatedCount()) {
        oprot.writeI64(struct.unrelatedCount);
      }
      if (struct.isSetErrorDescription()) {
        oprot.writeString(struct.errorDescription);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MessageCommitResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.requestId = iprot.readString();
        struct.setRequestIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.state = BuddyResultState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.messageStoreRequestId = iprot.readString();
        struct.setMessageStoreRequestIdIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list155 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.messageIds = new java.util.ArrayList<java.lang.String>(_list155.size);
          java.lang.String _elem156;
          for (int _i157 = 0; _i157 < _list155.size; ++_i157)
          {
            _elem156 = iprot.readString();
            struct.messageIds.add(_elem156);
          }
        }
        struct.setMessageIdsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.receiverCount = iprot.readI64();
        struct.setReceiverCountIsSet(true);
      }
      if (incoming.get(5)) {
        struct.successCount = iprot.readI64();
        struct.setSuccessCountIsSet(true);
      }
      if (incoming.get(6)) {
        struct.failCount = iprot.readI64();
        struct.setFailCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.blockCount = iprot.readI64();
        struct.setBlockCountIsSet(true);
      }
      if (incoming.get(8)) {
        struct.unregisteredCount = iprot.readI64();
        struct.setUnregisteredCountIsSet(true);
      }
      if (incoming.get(9)) {
        struct.unrelatedCount = iprot.readI64();
        struct.setUnrelatedCountIsSet(true);
      }
      if (incoming.get(10)) {
        struct.errorDescription = iprot.readString();
        struct.setErrorDescriptionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

