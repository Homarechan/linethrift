/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class SticonProperty implements org.apache.thrift.TBase<SticonProperty, SticonProperty._Fields>, java.io.Serializable, Cloneable, Comparable<SticonProperty> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SticonProperty");

  private static final org.apache.thrift.protocol.TField STICON_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("sticonIds", org.apache.thrift.protocol.TType.SET, (short)1);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SticonPropertyStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SticonPropertyTupleSchemeFactory();

  public java.util.Set<java.lang.String> sticonIds; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STICON_IDS((short)1, "sticonIds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STICON_IDS
          return STICON_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STICON_IDS, new org.apache.thrift.meta_data.FieldMetaData("sticonIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SticonProperty.class, metaDataMap);
  }

  public SticonProperty() {
  }

  public SticonProperty(
    java.util.Set<java.lang.String> sticonIds)
  {
    this();
    this.sticonIds = sticonIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SticonProperty(SticonProperty other) {
    if (other.isSetSticonIds()) {
      java.util.Set<java.lang.String> __this__sticonIds = new java.util.HashSet<java.lang.String>(other.sticonIds);
      this.sticonIds = __this__sticonIds;
    }
  }

  public SticonProperty deepCopy() {
    return new SticonProperty(this);
  }

  @Override
  public void clear() {
    this.sticonIds = null;
  }

  public int getSticonIdsSize() {
    return (this.sticonIds == null) ? 0 : this.sticonIds.size();
  }

  public java.util.Iterator<java.lang.String> getSticonIdsIterator() {
    return (this.sticonIds == null) ? null : this.sticonIds.iterator();
  }

  public void addToSticonIds(java.lang.String elem) {
    if (this.sticonIds == null) {
      this.sticonIds = new java.util.HashSet<java.lang.String>();
    }
    this.sticonIds.add(elem);
  }

  public java.util.Set<java.lang.String> getSticonIds() {
    return this.sticonIds;
  }

  public SticonProperty setSticonIds(java.util.Set<java.lang.String> sticonIds) {
    this.sticonIds = sticonIds;
    return this;
  }

  public void unsetSticonIds() {
    this.sticonIds = null;
  }

  /** Returns true if field sticonIds is set (has been assigned a value) and false otherwise */
  public boolean isSetSticonIds() {
    return this.sticonIds != null;
  }

  public void setSticonIdsIsSet(boolean value) {
    if (!value) {
      this.sticonIds = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STICON_IDS:
      if (value == null) {
        unsetSticonIds();
      } else {
        setSticonIds((java.util.Set<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STICON_IDS:
      return getSticonIds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STICON_IDS:
      return isSetSticonIds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SticonProperty)
      return this.equals((SticonProperty)that);
    return false;
  }

  public boolean equals(SticonProperty that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_sticonIds = true && this.isSetSticonIds();
    boolean that_present_sticonIds = true && that.isSetSticonIds();
    if (this_present_sticonIds || that_present_sticonIds) {
      if (!(this_present_sticonIds && that_present_sticonIds))
        return false;
      if (!this.sticonIds.equals(that.sticonIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSticonIds()) ? 131071 : 524287);
    if (isSetSticonIds())
      hashCode = hashCode * 8191 + sticonIds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SticonProperty other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSticonIds()).compareTo(other.isSetSticonIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSticonIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sticonIds, other.sticonIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SticonProperty(");
    boolean first = true;

    sb.append("sticonIds:");
    if (this.sticonIds == null) {
      sb.append("null");
    } else {
      sb.append(this.sticonIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SticonPropertyStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SticonPropertyStandardScheme getScheme() {
      return new SticonPropertyStandardScheme();
    }
  }

  private static class SticonPropertyStandardScheme extends org.apache.thrift.scheme.StandardScheme<SticonProperty> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SticonProperty struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STICON_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set84 = iprot.readSetBegin();
                struct.sticonIds = new java.util.HashSet<java.lang.String>(2*_set84.size);
                java.lang.String _elem85;
                for (int _i86 = 0; _i86 < _set84.size; ++_i86)
                {
                  _elem85 = iprot.readString();
                  struct.sticonIds.add(_elem85);
                }
                iprot.readSetEnd();
              }
              struct.setSticonIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SticonProperty struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.sticonIds != null) {
        oprot.writeFieldBegin(STICON_IDS_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.sticonIds.size()));
          for (java.lang.String _iter87 : struct.sticonIds)
          {
            oprot.writeString(_iter87);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SticonPropertyTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SticonPropertyTupleScheme getScheme() {
      return new SticonPropertyTupleScheme();
    }
  }

  private static class SticonPropertyTupleScheme extends org.apache.thrift.scheme.TupleScheme<SticonProperty> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SticonProperty struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSticonIds()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetSticonIds()) {
        {
          oprot.writeI32(struct.sticonIds.size());
          for (java.lang.String _iter88 : struct.sticonIds)
          {
            oprot.writeString(_iter88);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SticonProperty struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set89 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.sticonIds = new java.util.HashSet<java.lang.String>(2*_set89.size);
          java.lang.String _elem90;
          for (int _i91 = 0; _i91 < _set89.size; ++_i91)
          {
            _elem90 = iprot.readString();
            struct.sticonIds.add(_elem90);
          }
        }
        struct.setSticonIdsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

