/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-04-18")
public class ApprovedChannelInfos implements org.apache.thrift.TBase<ApprovedChannelInfos, ApprovedChannelInfos._Fields>, java.io.Serializable, Cloneable, Comparable<ApprovedChannelInfos> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApprovedChannelInfos");

  private static final org.apache.thrift.protocol.TField APPROVED_CHANNEL_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("approvedChannelInfos", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("revision", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ApprovedChannelInfosStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ApprovedChannelInfosTupleSchemeFactory();

  public java.util.List<ApprovedChannelInfo> approvedChannelInfos; // required
  public long revision; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPROVED_CHANNEL_INFOS((short)1, "approvedChannelInfos"),
    REVISION((short)2, "revision");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPROVED_CHANNEL_INFOS
          return APPROVED_CHANNEL_INFOS;
        case 2: // REVISION
          return REVISION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __REVISION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPROVED_CHANNEL_INFOS, new org.apache.thrift.meta_data.FieldMetaData("approvedChannelInfos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ApprovedChannelInfo.class))));
    tmpMap.put(_Fields.REVISION, new org.apache.thrift.meta_data.FieldMetaData("revision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApprovedChannelInfos.class, metaDataMap);
  }

  public ApprovedChannelInfos() {
  }

  public ApprovedChannelInfos(
    java.util.List<ApprovedChannelInfo> approvedChannelInfos,
    long revision)
  {
    this();
    this.approvedChannelInfos = approvedChannelInfos;
    this.revision = revision;
    setRevisionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApprovedChannelInfos(ApprovedChannelInfos other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetApprovedChannelInfos()) {
      java.util.List<ApprovedChannelInfo> __this__approvedChannelInfos = new java.util.ArrayList<ApprovedChannelInfo>(other.approvedChannelInfos.size());
      for (ApprovedChannelInfo other_element : other.approvedChannelInfos) {
        __this__approvedChannelInfos.add(new ApprovedChannelInfo(other_element));
      }
      this.approvedChannelInfos = __this__approvedChannelInfos;
    }
    this.revision = other.revision;
  }

  public ApprovedChannelInfos deepCopy() {
    return new ApprovedChannelInfos(this);
  }

  @Override
  public void clear() {
    this.approvedChannelInfos = null;
    setRevisionIsSet(false);
    this.revision = 0;
  }

  public int getApprovedChannelInfosSize() {
    return (this.approvedChannelInfos == null) ? 0 : this.approvedChannelInfos.size();
  }

  public java.util.Iterator<ApprovedChannelInfo> getApprovedChannelInfosIterator() {
    return (this.approvedChannelInfos == null) ? null : this.approvedChannelInfos.iterator();
  }

  public void addToApprovedChannelInfos(ApprovedChannelInfo elem) {
    if (this.approvedChannelInfos == null) {
      this.approvedChannelInfos = new java.util.ArrayList<ApprovedChannelInfo>();
    }
    this.approvedChannelInfos.add(elem);
  }

  public java.util.List<ApprovedChannelInfo> getApprovedChannelInfos() {
    return this.approvedChannelInfos;
  }

  public ApprovedChannelInfos setApprovedChannelInfos(java.util.List<ApprovedChannelInfo> approvedChannelInfos) {
    this.approvedChannelInfos = approvedChannelInfos;
    return this;
  }

  public void unsetApprovedChannelInfos() {
    this.approvedChannelInfos = null;
  }

  /** Returns true if field approvedChannelInfos is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovedChannelInfos() {
    return this.approvedChannelInfos != null;
  }

  public void setApprovedChannelInfosIsSet(boolean value) {
    if (!value) {
      this.approvedChannelInfos = null;
    }
  }

  public long getRevision() {
    return this.revision;
  }

  public ApprovedChannelInfos setRevision(long revision) {
    this.revision = revision;
    setRevisionIsSet(true);
    return this;
  }

  public void unsetRevision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  public void setRevisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REVISION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case APPROVED_CHANNEL_INFOS:
      if (value == null) {
        unsetApprovedChannelInfos();
      } else {
        setApprovedChannelInfos((java.util.List<ApprovedChannelInfo>)value);
      }
      break;

    case REVISION:
      if (value == null) {
        unsetRevision();
      } else {
        setRevision((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APPROVED_CHANNEL_INFOS:
      return getApprovedChannelInfos();

    case REVISION:
      return getRevision();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APPROVED_CHANNEL_INFOS:
      return isSetApprovedChannelInfos();
    case REVISION:
      return isSetRevision();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ApprovedChannelInfos)
      return this.equals((ApprovedChannelInfos)that);
    return false;
  }

  public boolean equals(ApprovedChannelInfos that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_approvedChannelInfos = true && this.isSetApprovedChannelInfos();
    boolean that_present_approvedChannelInfos = true && that.isSetApprovedChannelInfos();
    if (this_present_approvedChannelInfos || that_present_approvedChannelInfos) {
      if (!(this_present_approvedChannelInfos && that_present_approvedChannelInfos))
        return false;
      if (!this.approvedChannelInfos.equals(that.approvedChannelInfos))
        return false;
    }

    boolean this_present_revision = true;
    boolean that_present_revision = true;
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetApprovedChannelInfos()) ? 131071 : 524287);
    if (isSetApprovedChannelInfos())
      hashCode = hashCode * 8191 + approvedChannelInfos.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(revision);

    return hashCode;
  }

  @Override
  public int compareTo(ApprovedChannelInfos other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetApprovedChannelInfos()).compareTo(other.isSetApprovedChannelInfos());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovedChannelInfos()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvedChannelInfos, other.approvedChannelInfos);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRevision()).compareTo(other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ApprovedChannelInfos(");
    boolean first = true;

    sb.append("approvedChannelInfos:");
    if (this.approvedChannelInfos == null) {
      sb.append("null");
    } else {
      sb.append(this.approvedChannelInfos);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revision:");
    sb.append(this.revision);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApprovedChannelInfosStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApprovedChannelInfosStandardScheme getScheme() {
      return new ApprovedChannelInfosStandardScheme();
    }
  }

  private static class ApprovedChannelInfosStandardScheme extends org.apache.thrift.scheme.StandardScheme<ApprovedChannelInfos> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApprovedChannelInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPROVED_CHANNEL_INFOS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                struct.approvedChannelInfos = new java.util.ArrayList<ApprovedChannelInfo>(_list104.size);
                ApprovedChannelInfo _elem105;
                for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                {
                  _elem105 = new ApprovedChannelInfo();
                  _elem105.read(iprot);
                  struct.approvedChannelInfos.add(_elem105);
                }
                iprot.readListEnd();
              }
              struct.setApprovedChannelInfosIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.revision = iprot.readI64();
              struct.setRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApprovedChannelInfos struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.approvedChannelInfos != null) {
        oprot.writeFieldBegin(APPROVED_CHANNEL_INFOS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.approvedChannelInfos.size()));
          for (ApprovedChannelInfo _iter107 : struct.approvedChannelInfos)
          {
            _iter107.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVISION_FIELD_DESC);
      oprot.writeI64(struct.revision);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApprovedChannelInfosTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ApprovedChannelInfosTupleScheme getScheme() {
      return new ApprovedChannelInfosTupleScheme();
    }
  }

  private static class ApprovedChannelInfosTupleScheme extends org.apache.thrift.scheme.TupleScheme<ApprovedChannelInfos> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApprovedChannelInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetApprovedChannelInfos()) {
        optionals.set(0);
      }
      if (struct.isSetRevision()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetApprovedChannelInfos()) {
        {
          oprot.writeI32(struct.approvedChannelInfos.size());
          for (ApprovedChannelInfo _iter108 : struct.approvedChannelInfos)
          {
            _iter108.write(oprot);
          }
        }
      }
      if (struct.isSetRevision()) {
        oprot.writeI64(struct.revision);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApprovedChannelInfos struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.approvedChannelInfos = new java.util.ArrayList<ApprovedChannelInfo>(_list109.size);
          ApprovedChannelInfo _elem110;
          for (int _i111 = 0; _i111 < _list109.size; ++_i111)
          {
            _elem110 = new ApprovedChannelInfo();
            _elem110.read(iprot);
            struct.approvedChannelInfos.add(_elem110);
          }
        }
        struct.setApprovedChannelInfosIsSet(true);
      }
      if (incoming.get(1)) {
        struct.revision = iprot.readI64();
        struct.setRevisionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

