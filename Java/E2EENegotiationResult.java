/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class E2EENegotiationResult implements org.apache.thrift.TBase<E2EENegotiationResult, E2EENegotiationResult._Fields>, java.io.Serializable, Cloneable, Comparable<E2EENegotiationResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("E2EENegotiationResult");

  private static final org.apache.thrift.protocol.TField ALLOWED_TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("allowedTypes", org.apache.thrift.protocol.TType.SET, (short)1);
  private static final org.apache.thrift.protocol.TField PUBLIC_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("publicKey", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new E2EENegotiationResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new E2EENegotiationResultTupleSchemeFactory();

  public java.util.Set<ContentType> allowedTypes; // required
  public E2EEPublicKey publicKey; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ALLOWED_TYPES((short)1, "allowedTypes"),
    PUBLIC_KEY((short)2, "publicKey");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ALLOWED_TYPES
          return ALLOWED_TYPES;
        case 2: // PUBLIC_KEY
          return PUBLIC_KEY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ALLOWED_TYPES, new org.apache.thrift.meta_data.FieldMetaData("allowedTypes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ContentType.class))));
    tmpMap.put(_Fields.PUBLIC_KEY, new org.apache.thrift.meta_data.FieldMetaData("publicKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, E2EEPublicKey.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(E2EENegotiationResult.class, metaDataMap);
  }

  public E2EENegotiationResult() {
  }

  public E2EENegotiationResult(
    java.util.Set<ContentType> allowedTypes,
    E2EEPublicKey publicKey)
  {
    this();
    this.allowedTypes = allowedTypes;
    this.publicKey = publicKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public E2EENegotiationResult(E2EENegotiationResult other) {
    if (other.isSetAllowedTypes()) {
      java.util.Set<ContentType> __this__allowedTypes = java.util.EnumSet.noneOf(ContentType.class);
      for (ContentType other_element : other.allowedTypes) {
        __this__allowedTypes.add(other_element);
      }
      this.allowedTypes = __this__allowedTypes;
    }
    if (other.isSetPublicKey()) {
      this.publicKey = new E2EEPublicKey(other.publicKey);
    }
  }

  public E2EENegotiationResult deepCopy() {
    return new E2EENegotiationResult(this);
  }

  @Override
  public void clear() {
    this.allowedTypes = null;
    this.publicKey = null;
  }

  public int getAllowedTypesSize() {
    return (this.allowedTypes == null) ? 0 : this.allowedTypes.size();
  }

  public java.util.Iterator<ContentType> getAllowedTypesIterator() {
    return (this.allowedTypes == null) ? null : this.allowedTypes.iterator();
  }

  public void addToAllowedTypes(ContentType elem) {
    if (this.allowedTypes == null) {
      this.allowedTypes = java.util.EnumSet.noneOf(ContentType.class);
    }
    this.allowedTypes.add(elem);
  }

  public java.util.Set<ContentType> getAllowedTypes() {
    return this.allowedTypes;
  }

  public E2EENegotiationResult setAllowedTypes(java.util.Set<ContentType> allowedTypes) {
    this.allowedTypes = allowedTypes;
    return this;
  }

  public void unsetAllowedTypes() {
    this.allowedTypes = null;
  }

  /** Returns true if field allowedTypes is set (has been assigned a value) and false otherwise */
  public boolean isSetAllowedTypes() {
    return this.allowedTypes != null;
  }

  public void setAllowedTypesIsSet(boolean value) {
    if (!value) {
      this.allowedTypes = null;
    }
  }

  public E2EEPublicKey getPublicKey() {
    return this.publicKey;
  }

  public E2EENegotiationResult setPublicKey(E2EEPublicKey publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  public void unsetPublicKey() {
    this.publicKey = null;
  }

  /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicKey() {
    return this.publicKey != null;
  }

  public void setPublicKeyIsSet(boolean value) {
    if (!value) {
      this.publicKey = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ALLOWED_TYPES:
      if (value == null) {
        unsetAllowedTypes();
      } else {
        setAllowedTypes((java.util.Set<ContentType>)value);
      }
      break;

    case PUBLIC_KEY:
      if (value == null) {
        unsetPublicKey();
      } else {
        setPublicKey((E2EEPublicKey)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ALLOWED_TYPES:
      return getAllowedTypes();

    case PUBLIC_KEY:
      return getPublicKey();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ALLOWED_TYPES:
      return isSetAllowedTypes();
    case PUBLIC_KEY:
      return isSetPublicKey();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof E2EENegotiationResult)
      return this.equals((E2EENegotiationResult)that);
    return false;
  }

  public boolean equals(E2EENegotiationResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_allowedTypes = true && this.isSetAllowedTypes();
    boolean that_present_allowedTypes = true && that.isSetAllowedTypes();
    if (this_present_allowedTypes || that_present_allowedTypes) {
      if (!(this_present_allowedTypes && that_present_allowedTypes))
        return false;
      if (!this.allowedTypes.equals(that.allowedTypes))
        return false;
    }

    boolean this_present_publicKey = true && this.isSetPublicKey();
    boolean that_present_publicKey = true && that.isSetPublicKey();
    if (this_present_publicKey || that_present_publicKey) {
      if (!(this_present_publicKey && that_present_publicKey))
        return false;
      if (!this.publicKey.equals(that.publicKey))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAllowedTypes()) ? 131071 : 524287);
    if (isSetAllowedTypes())
      hashCode = hashCode * 8191 + allowedTypes.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublicKey()) ? 131071 : 524287);
    if (isSetPublicKey())
      hashCode = hashCode * 8191 + publicKey.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(E2EENegotiationResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAllowedTypes()).compareTo(other.isSetAllowedTypes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAllowedTypes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.allowedTypes, other.allowedTypes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublicKey()).compareTo(other.isSetPublicKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicKey, other.publicKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("E2EENegotiationResult(");
    boolean first = true;

    sb.append("allowedTypes:");
    if (this.allowedTypes == null) {
      sb.append("null");
    } else {
      sb.append(this.allowedTypes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicKey:");
    if (this.publicKey == null) {
      sb.append("null");
    } else {
      sb.append(this.publicKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (publicKey != null) {
      publicKey.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class E2EENegotiationResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public E2EENegotiationResultStandardScheme getScheme() {
      return new E2EENegotiationResultStandardScheme();
    }
  }

  private static class E2EENegotiationResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<E2EENegotiationResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, E2EENegotiationResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ALLOWED_TYPES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set158 = iprot.readSetBegin();
                struct.allowedTypes = java.util.EnumSet.noneOf(ContentType.class);
                ContentType _elem159;
                for (int _i160 = 0; _i160 < _set158.size; ++_i160)
                {
                  _elem159 = ContentType.findByValue(iprot.readI32());
                  if (_elem159 != null)
                  {
                    struct.allowedTypes.add(_elem159);
                  }
                }
                iprot.readSetEnd();
              }
              struct.setAllowedTypesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PUBLIC_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.publicKey = new E2EEPublicKey();
              struct.publicKey.read(iprot);
              struct.setPublicKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, E2EENegotiationResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.allowedTypes != null) {
        oprot.writeFieldBegin(ALLOWED_TYPES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.allowedTypes.size()));
          for (ContentType _iter161 : struct.allowedTypes)
          {
            oprot.writeI32(_iter161.getValue());
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        struct.publicKey.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class E2EENegotiationResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public E2EENegotiationResultTupleScheme getScheme() {
      return new E2EENegotiationResultTupleScheme();
    }
  }

  private static class E2EENegotiationResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<E2EENegotiationResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, E2EENegotiationResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAllowedTypes()) {
        optionals.set(0);
      }
      if (struct.isSetPublicKey()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetAllowedTypes()) {
        {
          oprot.writeI32(struct.allowedTypes.size());
          for (ContentType _iter162 : struct.allowedTypes)
          {
            oprot.writeI32(_iter162.getValue());
          }
        }
      }
      if (struct.isSetPublicKey()) {
        struct.publicKey.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, E2EENegotiationResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TSet _set163 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.allowedTypes = java.util.EnumSet.noneOf(ContentType.class);
          ContentType _elem164;
          for (int _i165 = 0; _i165 < _set163.size; ++_i165)
          {
            _elem164 = ContentType.findByValue(iprot.readI32());
            if (_elem164 != null)
            {
              struct.allowedTypes.add(_elem164);
            }
          }
        }
        struct.setAllowedTypesIsSet(true);
      }
      if (incoming.get(1)) {
        struct.publicKey = new E2EEPublicKey();
        struct.publicKey.read(iprot);
        struct.setPublicKeyIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

