/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-17")
public class ContactTransition implements org.apache.thrift.TBase<ContactTransition, ContactTransition._Fields>, java.io.Serializable, Cloneable, Comparable<ContactTransition> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ContactTransition");

  private static final org.apache.thrift.protocol.TField OWNER_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerMid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TARGET_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("targetMid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PREVIOUS_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("previousStatus", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RESULT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("resultStatus", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ContactTransitionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ContactTransitionTupleSchemeFactory();

  public java.lang.String ownerMid; // required
  public java.lang.String targetMid; // required
  /**
   * 
   * @see ContactStatus
   */
  public ContactStatus previousStatus; // required
  /**
   * 
   * @see ContactStatus
   */
  public ContactStatus resultStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OWNER_MID((short)1, "ownerMid"),
    TARGET_MID((short)2, "targetMid"),
    /**
     * 
     * @see ContactStatus
     */
    PREVIOUS_STATUS((short)3, "previousStatus"),
    /**
     * 
     * @see ContactStatus
     */
    RESULT_STATUS((short)4, "resultStatus");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OWNER_MID
          return OWNER_MID;
        case 2: // TARGET_MID
          return TARGET_MID;
        case 3: // PREVIOUS_STATUS
          return PREVIOUS_STATUS;
        case 4: // RESULT_STATUS
          return RESULT_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OWNER_MID, new org.apache.thrift.meta_data.FieldMetaData("ownerMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TARGET_MID, new org.apache.thrift.meta_data.FieldMetaData("targetMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PREVIOUS_STATUS, new org.apache.thrift.meta_data.FieldMetaData("previousStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ContactStatus.class)));
    tmpMap.put(_Fields.RESULT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("resultStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ContactStatus.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ContactTransition.class, metaDataMap);
  }

  public ContactTransition() {
  }

  public ContactTransition(
    java.lang.String ownerMid,
    java.lang.String targetMid,
    ContactStatus previousStatus,
    ContactStatus resultStatus)
  {
    this();
    this.ownerMid = ownerMid;
    this.targetMid = targetMid;
    this.previousStatus = previousStatus;
    this.resultStatus = resultStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContactTransition(ContactTransition other) {
    if (other.isSetOwnerMid()) {
      this.ownerMid = other.ownerMid;
    }
    if (other.isSetTargetMid()) {
      this.targetMid = other.targetMid;
    }
    if (other.isSetPreviousStatus()) {
      this.previousStatus = other.previousStatus;
    }
    if (other.isSetResultStatus()) {
      this.resultStatus = other.resultStatus;
    }
  }

  public ContactTransition deepCopy() {
    return new ContactTransition(this);
  }

  @Override
  public void clear() {
    this.ownerMid = null;
    this.targetMid = null;
    this.previousStatus = null;
    this.resultStatus = null;
  }

  public java.lang.String getOwnerMid() {
    return this.ownerMid;
  }

  public ContactTransition setOwnerMid(java.lang.String ownerMid) {
    this.ownerMid = ownerMid;
    return this;
  }

  public void unsetOwnerMid() {
    this.ownerMid = null;
  }

  /** Returns true if field ownerMid is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerMid() {
    return this.ownerMid != null;
  }

  public void setOwnerMidIsSet(boolean value) {
    if (!value) {
      this.ownerMid = null;
    }
  }

  public java.lang.String getTargetMid() {
    return this.targetMid;
  }

  public ContactTransition setTargetMid(java.lang.String targetMid) {
    this.targetMid = targetMid;
    return this;
  }

  public void unsetTargetMid() {
    this.targetMid = null;
  }

  /** Returns true if field targetMid is set (has been assigned a value) and false otherwise */
  public boolean isSetTargetMid() {
    return this.targetMid != null;
  }

  public void setTargetMidIsSet(boolean value) {
    if (!value) {
      this.targetMid = null;
    }
  }

  /**
   * 
   * @see ContactStatus
   */
  public ContactStatus getPreviousStatus() {
    return this.previousStatus;
  }

  /**
   * 
   * @see ContactStatus
   */
  public ContactTransition setPreviousStatus(ContactStatus previousStatus) {
    this.previousStatus = previousStatus;
    return this;
  }

  public void unsetPreviousStatus() {
    this.previousStatus = null;
  }

  /** Returns true if field previousStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetPreviousStatus() {
    return this.previousStatus != null;
  }

  public void setPreviousStatusIsSet(boolean value) {
    if (!value) {
      this.previousStatus = null;
    }
  }

  /**
   * 
   * @see ContactStatus
   */
  public ContactStatus getResultStatus() {
    return this.resultStatus;
  }

  /**
   * 
   * @see ContactStatus
   */
  public ContactTransition setResultStatus(ContactStatus resultStatus) {
    this.resultStatus = resultStatus;
    return this;
  }

  public void unsetResultStatus() {
    this.resultStatus = null;
  }

  /** Returns true if field resultStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetResultStatus() {
    return this.resultStatus != null;
  }

  public void setResultStatusIsSet(boolean value) {
    if (!value) {
      this.resultStatus = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case OWNER_MID:
      if (value == null) {
        unsetOwnerMid();
      } else {
        setOwnerMid((java.lang.String)value);
      }
      break;

    case TARGET_MID:
      if (value == null) {
        unsetTargetMid();
      } else {
        setTargetMid((java.lang.String)value);
      }
      break;

    case PREVIOUS_STATUS:
      if (value == null) {
        unsetPreviousStatus();
      } else {
        setPreviousStatus((ContactStatus)value);
      }
      break;

    case RESULT_STATUS:
      if (value == null) {
        unsetResultStatus();
      } else {
        setResultStatus((ContactStatus)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OWNER_MID:
      return getOwnerMid();

    case TARGET_MID:
      return getTargetMid();

    case PREVIOUS_STATUS:
      return getPreviousStatus();

    case RESULT_STATUS:
      return getResultStatus();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OWNER_MID:
      return isSetOwnerMid();
    case TARGET_MID:
      return isSetTargetMid();
    case PREVIOUS_STATUS:
      return isSetPreviousStatus();
    case RESULT_STATUS:
      return isSetResultStatus();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ContactTransition)
      return this.equals((ContactTransition)that);
    return false;
  }

  public boolean equals(ContactTransition that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ownerMid = true && this.isSetOwnerMid();
    boolean that_present_ownerMid = true && that.isSetOwnerMid();
    if (this_present_ownerMid || that_present_ownerMid) {
      if (!(this_present_ownerMid && that_present_ownerMid))
        return false;
      if (!this.ownerMid.equals(that.ownerMid))
        return false;
    }

    boolean this_present_targetMid = true && this.isSetTargetMid();
    boolean that_present_targetMid = true && that.isSetTargetMid();
    if (this_present_targetMid || that_present_targetMid) {
      if (!(this_present_targetMid && that_present_targetMid))
        return false;
      if (!this.targetMid.equals(that.targetMid))
        return false;
    }

    boolean this_present_previousStatus = true && this.isSetPreviousStatus();
    boolean that_present_previousStatus = true && that.isSetPreviousStatus();
    if (this_present_previousStatus || that_present_previousStatus) {
      if (!(this_present_previousStatus && that_present_previousStatus))
        return false;
      if (!this.previousStatus.equals(that.previousStatus))
        return false;
    }

    boolean this_present_resultStatus = true && this.isSetResultStatus();
    boolean that_present_resultStatus = true && that.isSetResultStatus();
    if (this_present_resultStatus || that_present_resultStatus) {
      if (!(this_present_resultStatus && that_present_resultStatus))
        return false;
      if (!this.resultStatus.equals(that.resultStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOwnerMid()) ? 131071 : 524287);
    if (isSetOwnerMid())
      hashCode = hashCode * 8191 + ownerMid.hashCode();

    hashCode = hashCode * 8191 + ((isSetTargetMid()) ? 131071 : 524287);
    if (isSetTargetMid())
      hashCode = hashCode * 8191 + targetMid.hashCode();

    hashCode = hashCode * 8191 + ((isSetPreviousStatus()) ? 131071 : 524287);
    if (isSetPreviousStatus())
      hashCode = hashCode * 8191 + previousStatus.getValue();

    hashCode = hashCode * 8191 + ((isSetResultStatus()) ? 131071 : 524287);
    if (isSetResultStatus())
      hashCode = hashCode * 8191 + resultStatus.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(ContactTransition other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOwnerMid()).compareTo(other.isSetOwnerMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerMid, other.ownerMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTargetMid()).compareTo(other.isSetTargetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTargetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetMid, other.targetMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPreviousStatus()).compareTo(other.isSetPreviousStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPreviousStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.previousStatus, other.previousStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResultStatus()).compareTo(other.isSetResultStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultStatus, other.resultStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ContactTransition(");
    boolean first = true;

    sb.append("ownerMid:");
    if (this.ownerMid == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("targetMid:");
    if (this.targetMid == null) {
      sb.append("null");
    } else {
      sb.append(this.targetMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("previousStatus:");
    if (this.previousStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.previousStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("resultStatus:");
    if (this.resultStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.resultStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ContactTransitionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContactTransitionStandardScheme getScheme() {
      return new ContactTransitionStandardScheme();
    }
  }

  private static class ContactTransitionStandardScheme extends org.apache.thrift.scheme.StandardScheme<ContactTransition> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ContactTransition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OWNER_MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerMid = iprot.readString();
              struct.setOwnerMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TARGET_MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.targetMid = iprot.readString();
              struct.setTargetMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PREVIOUS_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.previousStatus = ContactStatus.findByValue(iprot.readI32());
              struct.setPreviousStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESULT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.resultStatus = ContactStatus.findByValue(iprot.readI32());
              struct.setResultStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ContactTransition struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ownerMid != null) {
        oprot.writeFieldBegin(OWNER_MID_FIELD_DESC);
        oprot.writeString(struct.ownerMid);
        oprot.writeFieldEnd();
      }
      if (struct.targetMid != null) {
        oprot.writeFieldBegin(TARGET_MID_FIELD_DESC);
        oprot.writeString(struct.targetMid);
        oprot.writeFieldEnd();
      }
      if (struct.previousStatus != null) {
        oprot.writeFieldBegin(PREVIOUS_STATUS_FIELD_DESC);
        oprot.writeI32(struct.previousStatus.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.resultStatus != null) {
        oprot.writeFieldBegin(RESULT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.resultStatus.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ContactTransitionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ContactTransitionTupleScheme getScheme() {
      return new ContactTransitionTupleScheme();
    }
  }

  private static class ContactTransitionTupleScheme extends org.apache.thrift.scheme.TupleScheme<ContactTransition> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ContactTransition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOwnerMid()) {
        optionals.set(0);
      }
      if (struct.isSetTargetMid()) {
        optionals.set(1);
      }
      if (struct.isSetPreviousStatus()) {
        optionals.set(2);
      }
      if (struct.isSetResultStatus()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOwnerMid()) {
        oprot.writeString(struct.ownerMid);
      }
      if (struct.isSetTargetMid()) {
        oprot.writeString(struct.targetMid);
      }
      if (struct.isSetPreviousStatus()) {
        oprot.writeI32(struct.previousStatus.getValue());
      }
      if (struct.isSetResultStatus()) {
        oprot.writeI32(struct.resultStatus.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ContactTransition struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.ownerMid = iprot.readString();
        struct.setOwnerMidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.targetMid = iprot.readString();
        struct.setTargetMidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.previousStatus = ContactStatus.findByValue(iprot.readI32());
        struct.setPreviousStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.resultStatus = ContactStatus.findByValue(iprot.readI32());
        struct.setResultStatusIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

