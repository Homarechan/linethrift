/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2020-04-18")
public class SpotItem implements org.apache.thrift.TBase<SpotItem, SpotItem._Fields>, java.io.Serializable, Cloneable, Comparable<SpotItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SpotItem");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PHONE_FIELD_DESC = new org.apache.thrift.protocol.TField("phone", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CATEGORY_FIELD_DESC = new org.apache.thrift.protocol.TField("category", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MID_FIELD_DESC = new org.apache.thrift.protocol.TField("mid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField COUNTRY_AREA_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("countryAreaCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField FREE_PHONE_CALLABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("freePhoneCallable", org.apache.thrift.protocol.TType.BOOL, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SpotItemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SpotItemTupleSchemeFactory();

  public java.lang.String name; // required
  public java.lang.String phone; // required
  /**
   * 
   * @see SpotCategory
   */
  public SpotCategory category; // required
  public java.lang.String mid; // required
  public java.lang.String countryAreaCode; // required
  public boolean freePhoneCallable; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)2, "name"),
    PHONE((short)3, "phone"),
    /**
     * 
     * @see SpotCategory
     */
    CATEGORY((short)4, "category"),
    MID((short)5, "mid"),
    COUNTRY_AREA_CODE((short)6, "countryAreaCode"),
    FREE_PHONE_CALLABLE((short)10, "freePhoneCallable");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 2: // NAME
          return NAME;
        case 3: // PHONE
          return PHONE;
        case 4: // CATEGORY
          return CATEGORY;
        case 5: // MID
          return MID;
        case 6: // COUNTRY_AREA_CODE
          return COUNTRY_AREA_CODE;
        case 10: // FREE_PHONE_CALLABLE
          return FREE_PHONE_CALLABLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FREEPHONECALLABLE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHONE, new org.apache.thrift.meta_data.FieldMetaData("phone", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CATEGORY, new org.apache.thrift.meta_data.FieldMetaData("category", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SpotCategory.class)));
    tmpMap.put(_Fields.MID, new org.apache.thrift.meta_data.FieldMetaData("mid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_AREA_CODE, new org.apache.thrift.meta_data.FieldMetaData("countryAreaCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FREE_PHONE_CALLABLE, new org.apache.thrift.meta_data.FieldMetaData("freePhoneCallable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SpotItem.class, metaDataMap);
  }

  public SpotItem() {
  }

  public SpotItem(
    java.lang.String name,
    java.lang.String phone,
    SpotCategory category,
    java.lang.String mid,
    java.lang.String countryAreaCode,
    boolean freePhoneCallable)
  {
    this();
    this.name = name;
    this.phone = phone;
    this.category = category;
    this.mid = mid;
    this.countryAreaCode = countryAreaCode;
    this.freePhoneCallable = freePhoneCallable;
    setFreePhoneCallableIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SpotItem(SpotItem other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetPhone()) {
      this.phone = other.phone;
    }
    if (other.isSetCategory()) {
      this.category = other.category;
    }
    if (other.isSetMid()) {
      this.mid = other.mid;
    }
    if (other.isSetCountryAreaCode()) {
      this.countryAreaCode = other.countryAreaCode;
    }
    this.freePhoneCallable = other.freePhoneCallable;
  }

  public SpotItem deepCopy() {
    return new SpotItem(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.phone = null;
    this.category = null;
    this.mid = null;
    this.countryAreaCode = null;
    setFreePhoneCallableIsSet(false);
    this.freePhoneCallable = false;
  }

  public java.lang.String getName() {
    return this.name;
  }

  public SpotItem setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getPhone() {
    return this.phone;
  }

  public SpotItem setPhone(java.lang.String phone) {
    this.phone = phone;
    return this;
  }

  public void unsetPhone() {
    this.phone = null;
  }

  /** Returns true if field phone is set (has been assigned a value) and false otherwise */
  public boolean isSetPhone() {
    return this.phone != null;
  }

  public void setPhoneIsSet(boolean value) {
    if (!value) {
      this.phone = null;
    }
  }

  /**
   * 
   * @see SpotCategory
   */
  public SpotCategory getCategory() {
    return this.category;
  }

  /**
   * 
   * @see SpotCategory
   */
  public SpotItem setCategory(SpotCategory category) {
    this.category = category;
    return this;
  }

  public void unsetCategory() {
    this.category = null;
  }

  /** Returns true if field category is set (has been assigned a value) and false otherwise */
  public boolean isSetCategory() {
    return this.category != null;
  }

  public void setCategoryIsSet(boolean value) {
    if (!value) {
      this.category = null;
    }
  }

  public java.lang.String getMid() {
    return this.mid;
  }

  public SpotItem setMid(java.lang.String mid) {
    this.mid = mid;
    return this;
  }

  public void unsetMid() {
    this.mid = null;
  }

  /** Returns true if field mid is set (has been assigned a value) and false otherwise */
  public boolean isSetMid() {
    return this.mid != null;
  }

  public void setMidIsSet(boolean value) {
    if (!value) {
      this.mid = null;
    }
  }

  public java.lang.String getCountryAreaCode() {
    return this.countryAreaCode;
  }

  public SpotItem setCountryAreaCode(java.lang.String countryAreaCode) {
    this.countryAreaCode = countryAreaCode;
    return this;
  }

  public void unsetCountryAreaCode() {
    this.countryAreaCode = null;
  }

  /** Returns true if field countryAreaCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryAreaCode() {
    return this.countryAreaCode != null;
  }

  public void setCountryAreaCodeIsSet(boolean value) {
    if (!value) {
      this.countryAreaCode = null;
    }
  }

  public boolean isFreePhoneCallable() {
    return this.freePhoneCallable;
  }

  public SpotItem setFreePhoneCallable(boolean freePhoneCallable) {
    this.freePhoneCallable = freePhoneCallable;
    setFreePhoneCallableIsSet(true);
    return this;
  }

  public void unsetFreePhoneCallable() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FREEPHONECALLABLE_ISSET_ID);
  }

  /** Returns true if field freePhoneCallable is set (has been assigned a value) and false otherwise */
  public boolean isSetFreePhoneCallable() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FREEPHONECALLABLE_ISSET_ID);
  }

  public void setFreePhoneCallableIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FREEPHONECALLABLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case PHONE:
      if (value == null) {
        unsetPhone();
      } else {
        setPhone((java.lang.String)value);
      }
      break;

    case CATEGORY:
      if (value == null) {
        unsetCategory();
      } else {
        setCategory((SpotCategory)value);
      }
      break;

    case MID:
      if (value == null) {
        unsetMid();
      } else {
        setMid((java.lang.String)value);
      }
      break;

    case COUNTRY_AREA_CODE:
      if (value == null) {
        unsetCountryAreaCode();
      } else {
        setCountryAreaCode((java.lang.String)value);
      }
      break;

    case FREE_PHONE_CALLABLE:
      if (value == null) {
        unsetFreePhoneCallable();
      } else {
        setFreePhoneCallable((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case PHONE:
      return getPhone();

    case CATEGORY:
      return getCategory();

    case MID:
      return getMid();

    case COUNTRY_AREA_CODE:
      return getCountryAreaCode();

    case FREE_PHONE_CALLABLE:
      return isFreePhoneCallable();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case PHONE:
      return isSetPhone();
    case CATEGORY:
      return isSetCategory();
    case MID:
      return isSetMid();
    case COUNTRY_AREA_CODE:
      return isSetCountryAreaCode();
    case FREE_PHONE_CALLABLE:
      return isSetFreePhoneCallable();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SpotItem)
      return this.equals((SpotItem)that);
    return false;
  }

  public boolean equals(SpotItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_phone = true && this.isSetPhone();
    boolean that_present_phone = true && that.isSetPhone();
    if (this_present_phone || that_present_phone) {
      if (!(this_present_phone && that_present_phone))
        return false;
      if (!this.phone.equals(that.phone))
        return false;
    }

    boolean this_present_category = true && this.isSetCategory();
    boolean that_present_category = true && that.isSetCategory();
    if (this_present_category || that_present_category) {
      if (!(this_present_category && that_present_category))
        return false;
      if (!this.category.equals(that.category))
        return false;
    }

    boolean this_present_mid = true && this.isSetMid();
    boolean that_present_mid = true && that.isSetMid();
    if (this_present_mid || that_present_mid) {
      if (!(this_present_mid && that_present_mid))
        return false;
      if (!this.mid.equals(that.mid))
        return false;
    }

    boolean this_present_countryAreaCode = true && this.isSetCountryAreaCode();
    boolean that_present_countryAreaCode = true && that.isSetCountryAreaCode();
    if (this_present_countryAreaCode || that_present_countryAreaCode) {
      if (!(this_present_countryAreaCode && that_present_countryAreaCode))
        return false;
      if (!this.countryAreaCode.equals(that.countryAreaCode))
        return false;
    }

    boolean this_present_freePhoneCallable = true;
    boolean that_present_freePhoneCallable = true;
    if (this_present_freePhoneCallable || that_present_freePhoneCallable) {
      if (!(this_present_freePhoneCallable && that_present_freePhoneCallable))
        return false;
      if (this.freePhoneCallable != that.freePhoneCallable)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhone()) ? 131071 : 524287);
    if (isSetPhone())
      hashCode = hashCode * 8191 + phone.hashCode();

    hashCode = hashCode * 8191 + ((isSetCategory()) ? 131071 : 524287);
    if (isSetCategory())
      hashCode = hashCode * 8191 + category.getValue();

    hashCode = hashCode * 8191 + ((isSetMid()) ? 131071 : 524287);
    if (isSetMid())
      hashCode = hashCode * 8191 + mid.hashCode();

    hashCode = hashCode * 8191 + ((isSetCountryAreaCode()) ? 131071 : 524287);
    if (isSetCountryAreaCode())
      hashCode = hashCode * 8191 + countryAreaCode.hashCode();

    hashCode = hashCode * 8191 + ((freePhoneCallable) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(SpotItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhone()).compareTo(other.isSetPhone());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhone()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.phone, other.phone);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCategory()).compareTo(other.isSetCategory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCategory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.category, other.category);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMid()).compareTo(other.isSetMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mid, other.mid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCountryAreaCode()).compareTo(other.isSetCountryAreaCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryAreaCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryAreaCode, other.countryAreaCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFreePhoneCallable()).compareTo(other.isSetFreePhoneCallable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreePhoneCallable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.freePhoneCallable, other.freePhoneCallable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SpotItem(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("phone:");
    if (this.phone == null) {
      sb.append("null");
    } else {
      sb.append(this.phone);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("category:");
    if (this.category == null) {
      sb.append("null");
    } else {
      sb.append(this.category);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mid:");
    if (this.mid == null) {
      sb.append("null");
    } else {
      sb.append(this.mid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countryAreaCode:");
    if (this.countryAreaCode == null) {
      sb.append("null");
    } else {
      sb.append(this.countryAreaCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("freePhoneCallable:");
    sb.append(this.freePhoneCallable);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SpotItemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpotItemStandardScheme getScheme() {
      return new SpotItemStandardScheme();
    }
  }

  private static class SpotItemStandardScheme extends org.apache.thrift.scheme.StandardScheme<SpotItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SpotItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PHONE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.phone = iprot.readString();
              struct.setPhoneIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CATEGORY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.category = SpotCategory.findByValue(iprot.readI32());
              struct.setCategoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mid = iprot.readString();
              struct.setMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // COUNTRY_AREA_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.countryAreaCode = iprot.readString();
              struct.setCountryAreaCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // FREE_PHONE_CALLABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.freePhoneCallable = iprot.readBool();
              struct.setFreePhoneCallableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SpotItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.phone != null) {
        oprot.writeFieldBegin(PHONE_FIELD_DESC);
        oprot.writeString(struct.phone);
        oprot.writeFieldEnd();
      }
      if (struct.category != null) {
        oprot.writeFieldBegin(CATEGORY_FIELD_DESC);
        oprot.writeI32(struct.category.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(struct.mid);
        oprot.writeFieldEnd();
      }
      if (struct.countryAreaCode != null) {
        oprot.writeFieldBegin(COUNTRY_AREA_CODE_FIELD_DESC);
        oprot.writeString(struct.countryAreaCode);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FREE_PHONE_CALLABLE_FIELD_DESC);
      oprot.writeBool(struct.freePhoneCallable);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SpotItemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SpotItemTupleScheme getScheme() {
      return new SpotItemTupleScheme();
    }
  }

  private static class SpotItemTupleScheme extends org.apache.thrift.scheme.TupleScheme<SpotItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SpotItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetPhone()) {
        optionals.set(1);
      }
      if (struct.isSetCategory()) {
        optionals.set(2);
      }
      if (struct.isSetMid()) {
        optionals.set(3);
      }
      if (struct.isSetCountryAreaCode()) {
        optionals.set(4);
      }
      if (struct.isSetFreePhoneCallable()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetPhone()) {
        oprot.writeString(struct.phone);
      }
      if (struct.isSetCategory()) {
        oprot.writeI32(struct.category.getValue());
      }
      if (struct.isSetMid()) {
        oprot.writeString(struct.mid);
      }
      if (struct.isSetCountryAreaCode()) {
        oprot.writeString(struct.countryAreaCode);
      }
      if (struct.isSetFreePhoneCallable()) {
        oprot.writeBool(struct.freePhoneCallable);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SpotItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.phone = iprot.readString();
        struct.setPhoneIsSet(true);
      }
      if (incoming.get(2)) {
        struct.category = SpotCategory.findByValue(iprot.readI32());
        struct.setCategoryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mid = iprot.readString();
        struct.setMidIsSet(true);
      }
      if (incoming.get(4)) {
        struct.countryAreaCode = iprot.readString();
        struct.setCountryAreaCodeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.freePhoneCallable = iprot.readBool();
        struct.setFreePhoneCallableIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

