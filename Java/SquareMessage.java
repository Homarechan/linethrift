/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2019-09-28")
public class SquareMessage implements org.apache.thrift.TBase<SquareMessage, SquareMessage._Fields>, java.io.Serializable, Cloneable, Comparable<SquareMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SquareMessage");

  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FROM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fromType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField SQUARE_MESSAGE_REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("squareMessageRevision", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SquareMessageStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SquareMessageTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable Message message; // required
  /**
   * 
   * @see MIDType
   */
  public @org.apache.thrift.annotation.Nullable MIDType fromType; // required
  public long squareMessageRevision; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MESSAGE((short)1, "message"),
    /**
     * 
     * @see MIDType
     */
    FROM_TYPE((short)3, "fromType"),
    SQUARE_MESSAGE_REVISION((short)4, "squareMessageRevision");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MESSAGE
          return MESSAGE;
        case 3: // FROM_TYPE
          return FROM_TYPE;
        case 4: // SQUARE_MESSAGE_REVISION
          return SQUARE_MESSAGE_REVISION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SQUAREMESSAGEREVISION_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Message.class)));
    tmpMap.put(_Fields.FROM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fromType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MIDType.class)));
    tmpMap.put(_Fields.SQUARE_MESSAGE_REVISION, new org.apache.thrift.meta_data.FieldMetaData("squareMessageRevision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SquareMessage.class, metaDataMap);
  }

  public SquareMessage() {
  }

  public SquareMessage(
    Message message,
    MIDType fromType,
    long squareMessageRevision)
  {
    this();
    this.message = message;
    this.fromType = fromType;
    this.squareMessageRevision = squareMessageRevision;
    setSquareMessageRevisionIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareMessage(SquareMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMessage()) {
      this.message = new Message(other.message);
    }
    if (other.isSetFromType()) {
      this.fromType = other.fromType;
    }
    this.squareMessageRevision = other.squareMessageRevision;
  }

  public SquareMessage deepCopy() {
    return new SquareMessage(this);
  }

  @Override
  public void clear() {
    this.message = null;
    this.fromType = null;
    setSquareMessageRevisionIsSet(false);
    this.squareMessageRevision = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public Message getMessage() {
    return this.message;
  }

  public SquareMessage setMessage(@org.apache.thrift.annotation.Nullable Message message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  /**
   * 
   * @see MIDType
   */
  @org.apache.thrift.annotation.Nullable
  public MIDType getFromType() {
    return this.fromType;
  }

  /**
   * 
   * @see MIDType
   */
  public SquareMessage setFromType(@org.apache.thrift.annotation.Nullable MIDType fromType) {
    this.fromType = fromType;
    return this;
  }

  public void unsetFromType() {
    this.fromType = null;
  }

  /** Returns true if field fromType is set (has been assigned a value) and false otherwise */
  public boolean isSetFromType() {
    return this.fromType != null;
  }

  public void setFromTypeIsSet(boolean value) {
    if (!value) {
      this.fromType = null;
    }
  }

  public long getSquareMessageRevision() {
    return this.squareMessageRevision;
  }

  public SquareMessage setSquareMessageRevision(long squareMessageRevision) {
    this.squareMessageRevision = squareMessageRevision;
    setSquareMessageRevisionIsSet(true);
    return this;
  }

  public void unsetSquareMessageRevision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SQUAREMESSAGEREVISION_ISSET_ID);
  }

  /** Returns true if field squareMessageRevision is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMessageRevision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SQUAREMESSAGEREVISION_ISSET_ID);
  }

  public void setSquareMessageRevisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SQUAREMESSAGEREVISION_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((Message)value);
      }
      break;

    case FROM_TYPE:
      if (value == null) {
        unsetFromType();
      } else {
        setFromType((MIDType)value);
      }
      break;

    case SQUARE_MESSAGE_REVISION:
      if (value == null) {
        unsetSquareMessageRevision();
      } else {
        setSquareMessageRevision((java.lang.Long)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case MESSAGE:
      return getMessage();

    case FROM_TYPE:
      return getFromType();

    case SQUARE_MESSAGE_REVISION:
      return getSquareMessageRevision();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case MESSAGE:
      return isSetMessage();
    case FROM_TYPE:
      return isSetFromType();
    case SQUARE_MESSAGE_REVISION:
      return isSetSquareMessageRevision();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareMessage)
      return this.equals((SquareMessage)that);
    return false;
  }

  public boolean equals(SquareMessage that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_fromType = true && this.isSetFromType();
    boolean that_present_fromType = true && that.isSetFromType();
    if (this_present_fromType || that_present_fromType) {
      if (!(this_present_fromType && that_present_fromType))
        return false;
      if (!this.fromType.equals(that.fromType))
        return false;
    }

    boolean this_present_squareMessageRevision = true;
    boolean that_present_squareMessageRevision = true;
    if (this_present_squareMessageRevision || that_present_squareMessageRevision) {
      if (!(this_present_squareMessageRevision && that_present_squareMessageRevision))
        return false;
      if (this.squareMessageRevision != that.squareMessageRevision)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetFromType()) ? 131071 : 524287);
    if (isSetFromType())
      hashCode = hashCode * 8191 + fromType.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(squareMessageRevision);

    return hashCode;
  }

  @Override
  public int compareTo(SquareMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFromType()).compareTo(other.isSetFromType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFromType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fromType, other.fromType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSquareMessageRevision()).compareTo(other.isSetSquareMessageRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMessageRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareMessageRevision, other.squareMessageRevision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SquareMessage(");
    boolean first = true;

    sb.append("message:");
    if (this.message == null) {
      sb.append("null");
    } else {
      sb.append(this.message);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fromType:");
    if (this.fromType == null) {
      sb.append("null");
    } else {
      sb.append(this.fromType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareMessageRevision:");
    sb.append(this.squareMessageRevision);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (message != null) {
      message.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SquareMessageStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SquareMessageStandardScheme getScheme() {
      return new SquareMessageStandardScheme();
    }
  }

  private static class SquareMessageStandardScheme extends org.apache.thrift.scheme.StandardScheme<SquareMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SquareMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.message = new Message();
              struct.message.read(iprot);
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FROM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.fromType = MIDType.findByValue(iprot.readI32());
              struct.setFromTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SQUARE_MESSAGE_REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.squareMessageRevision = iprot.readI64();
              struct.setSquareMessageRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SquareMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.message != null) {
        oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
        struct.message.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fromType != null) {
        oprot.writeFieldBegin(FROM_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fromType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SQUARE_MESSAGE_REVISION_FIELD_DESC);
      oprot.writeI64(struct.squareMessageRevision);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SquareMessageTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SquareMessageTupleScheme getScheme() {
      return new SquareMessageTupleScheme();
    }
  }

  private static class SquareMessageTupleScheme extends org.apache.thrift.scheme.TupleScheme<SquareMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SquareMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetMessage()) {
        optionals.set(0);
      }
      if (struct.isSetFromType()) {
        optionals.set(1);
      }
      if (struct.isSetSquareMessageRevision()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetMessage()) {
        struct.message.write(oprot);
      }
      if (struct.isSetFromType()) {
        oprot.writeI32(struct.fromType.getValue());
      }
      if (struct.isSetSquareMessageRevision()) {
        oprot.writeI64(struct.squareMessageRevision);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SquareMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.message = new Message();
        struct.message.read(iprot);
        struct.setMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.fromType = MIDType.findByValue(iprot.readI32());
        struct.setFromTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.squareMessageRevision = iprot.readI64();
        struct.setSquareMessageRevisionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

