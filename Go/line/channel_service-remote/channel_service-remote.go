// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  OTPResult issueOTP(string channelId)")
  fmt.Fprintln(os.Stderr, "  ChannelToken approveChannelAndIssueChannelToken(string channelId)")
  fmt.Fprintln(os.Stderr, "  string approveChannelAndIssueRequestToken(string channelId, string otpId)")
  fmt.Fprintln(os.Stderr, "  NotificationFetchResult fetchNotificationItems(i64 localRev)")
  fmt.Fprintln(os.Stderr, "  ApprovedChannelInfos getApprovedChannels(i64 lastSynced, string locale)")
  fmt.Fprintln(os.Stderr, "  ChannelInfo getChannelInfo(string channelId, string locale)")
  fmt.Fprintln(os.Stderr, "  ChannelNotificationSetting getChannelNotificationSetting(string channelId, string locale)")
  fmt.Fprintln(os.Stderr, "   getChannelNotificationSettings(string locale)")
  fmt.Fprintln(os.Stderr, "  ChannelInfos getChannels(i64 lastSynced, string locale)")
  fmt.Fprintln(os.Stderr, "  ChannelDomains getDomains(i64 lastSynced)")
  fmt.Fprintln(os.Stderr, "  FriendChannelMatricesResponse getFriendChannelMatrices( channelIds)")
  fmt.Fprintln(os.Stderr, "  bool updateChannelSettings(ChannelSettings channelSettings)")
  fmt.Fprintln(os.Stderr, "  ChannelDomains getCommonDomains(i64 lastSynced)")
  fmt.Fprintln(os.Stderr, "  i32 getNotificationBadgeCount(i64 localRev)")
  fmt.Fprintln(os.Stderr, "  ChannelToken issueChannelToken(string channelId)")
  fmt.Fprintln(os.Stderr, "  string issueRequestToken(string channelId, string otpId)")
  fmt.Fprintln(os.Stderr, "  RequestTokenResponse issueRequestTokenWithAuthScheme(string channelId, string otpId,  authScheme, string returnUrl)")
  fmt.Fprintln(os.Stderr, "  string issueRequestTokenForAutoLogin(string channelId, string otpId, string redirectUrl)")
  fmt.Fprintln(os.Stderr, "   getUpdatedChannelIds( channelIds)")
  fmt.Fprintln(os.Stderr, "  string reserveCoinUse(CoinUseReservation request, string locale)")
  fmt.Fprintln(os.Stderr, "  void revokeChannel(string channelId)")
  fmt.Fprintln(os.Stderr, "  ChannelSyncDatas syncChannelData(i64 lastSynced, string locale)")
  fmt.Fprintln(os.Stderr, "  void updateChannelNotificationSetting( setting)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewChannelServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "issueOTP":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IssueOTP requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IssueOTP(context.Background(), value0))
    fmt.Print("\n")
    break
  case "approveChannelAndIssueChannelToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ApproveChannelAndIssueChannelToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ApproveChannelAndIssueChannelToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "approveChannelAndIssueRequestToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ApproveChannelAndIssueRequestToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ApproveChannelAndIssueRequestToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "fetchNotificationItems":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchNotificationItems requires 1 args")
      flag.Usage()
    }
    argvalue0, err866 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err866 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.FetchNotificationItems(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getApprovedChannels":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetApprovedChannels requires 2 args")
      flag.Usage()
    }
    argvalue0, err867 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err867 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetApprovedChannels(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChannelInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChannelInfo requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChannelInfo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChannelNotificationSetting":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChannelNotificationSetting requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChannelNotificationSetting(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChannelNotificationSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChannelNotificationSettings requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetChannelNotificationSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChannels":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChannels requires 2 args")
      flag.Usage()
    }
    argvalue0, err874 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err874 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChannels(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getDomains":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDomains requires 1 args")
      flag.Usage()
    }
    argvalue0, err876 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err876 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetDomains(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFriendChannelMatrices":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetFriendChannelMatrices requires 1 args")
      flag.Usage()
    }
    arg877 := flag.Arg(1)
    mbTrans878 := thrift.NewTMemoryBufferLen(len(arg877))
    defer mbTrans878.Close()
    _, err879 := mbTrans878.WriteString(arg877)
    if err879 != nil { 
      Usage()
      return
    }
    factory880 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt881 := factory880.GetProtocol(mbTrans878)
    containerStruct0 := line.NewChannelServiceGetFriendChannelMatricesArgs()
    err882 := containerStruct0.ReadField1(jsProt881)
    if err882 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChannelIds
    value0 := argvalue0
    fmt.Print(client.GetFriendChannelMatrices(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateChannelSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChannelSettings requires 1 args")
      flag.Usage()
    }
    arg883 := flag.Arg(1)
    mbTrans884 := thrift.NewTMemoryBufferLen(len(arg883))
    defer mbTrans884.Close()
    _, err885 := mbTrans884.WriteString(arg883)
    if err885 != nil {
      Usage()
      return
    }
    factory886 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt887 := factory886.GetProtocol(mbTrans884)
    argvalue0 := line.NewChannelSettings()
    err888 := argvalue0.Read(jsProt887)
    if err888 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateChannelSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCommonDomains":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCommonDomains requires 1 args")
      flag.Usage()
    }
    argvalue0, err889 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err889 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCommonDomains(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getNotificationBadgeCount":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotificationBadgeCount requires 1 args")
      flag.Usage()
    }
    argvalue0, err890 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err890 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetNotificationBadgeCount(context.Background(), value0))
    fmt.Print("\n")
    break
  case "issueChannelToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IssueChannelToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IssueChannelToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "issueRequestToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IssueRequestToken requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.IssueRequestToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "issueRequestTokenWithAuthScheme":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "IssueRequestTokenWithAuthScheme requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg896 := flag.Arg(3)
    mbTrans897 := thrift.NewTMemoryBufferLen(len(arg896))
    defer mbTrans897.Close()
    _, err898 := mbTrans897.WriteString(arg896)
    if err898 != nil { 
      Usage()
      return
    }
    factory899 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt900 := factory899.GetProtocol(mbTrans897)
    containerStruct2 := line.NewChannelServiceIssueRequestTokenWithAuthSchemeArgs()
    err901 := containerStruct2.ReadField3(jsProt900)
    if err901 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.AuthScheme
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.IssueRequestTokenWithAuthScheme(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "issueRequestTokenForAutoLogin":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "IssueRequestTokenForAutoLogin requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.IssueRequestTokenForAutoLogin(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getUpdatedChannelIds":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUpdatedChannelIds requires 1 args")
      flag.Usage()
    }
    arg906 := flag.Arg(1)
    mbTrans907 := thrift.NewTMemoryBufferLen(len(arg906))
    defer mbTrans907.Close()
    _, err908 := mbTrans907.WriteString(arg906)
    if err908 != nil { 
      Usage()
      return
    }
    factory909 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt910 := factory909.GetProtocol(mbTrans907)
    containerStruct0 := line.NewChannelServiceGetUpdatedChannelIdsArgs()
    err911 := containerStruct0.ReadField1(jsProt910)
    if err911 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChannelIds
    value0 := argvalue0
    fmt.Print(client.GetUpdatedChannelIds(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reserveCoinUse":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReserveCoinUse requires 2 args")
      flag.Usage()
    }
    arg912 := flag.Arg(1)
    mbTrans913 := thrift.NewTMemoryBufferLen(len(arg912))
    defer mbTrans913.Close()
    _, err914 := mbTrans913.WriteString(arg912)
    if err914 != nil {
      Usage()
      return
    }
    factory915 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt916 := factory915.GetProtocol(mbTrans913)
    argvalue0 := line.NewCoinUseReservation()
    err917 := argvalue0.Read(jsProt916)
    if err917 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ReserveCoinUse(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "revokeChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokeChannel requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RevokeChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "syncChannelData":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncChannelData requires 2 args")
      flag.Usage()
    }
    argvalue0, err920 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err920 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SyncChannelData(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateChannelNotificationSetting":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateChannelNotificationSetting requires 1 args")
      flag.Usage()
    }
    arg922 := flag.Arg(1)
    mbTrans923 := thrift.NewTMemoryBufferLen(len(arg922))
    defer mbTrans923.Close()
    _, err924 := mbTrans923.WriteString(arg922)
    if err924 != nil { 
      Usage()
      return
    }
    factory925 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt926 := factory925.GetProtocol(mbTrans923)
    containerStruct0 := line.NewChannelServiceUpdateChannelNotificationSettingArgs()
    err927 := containerStruct0.ReadField1(jsProt926)
    if err927 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Setting
    value0 := argvalue0
    fmt.Print(client.UpdateChannelNotificationSetting(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
