// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  UserStatus getUserStatus(string mid)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string value)")
  fmt.Fprintln(os.Stderr, "  void updateExtendedProfileAttribute(ExtendedProfileAttribute attr, ExtendedProfile extendedProfile)")
  fmt.Fprintln(os.Stderr, "   getAllSimpleChannelContacts(bool statusSticonFallbackDisabled)")
  fmt.Fprintln(os.Stderr, "   getUserIdentities()")
  fmt.Fprintln(os.Stderr, "  PaidCallDialing markPaidCallAd(string dialedNumber, string language, bool disableCallerId)")
  fmt.Fprintln(os.Stderr, "  bool isGroupMember(string groupId)")
  fmt.Fprintln(os.Stderr, "  PhoneInfoForChannel getPhoneInfoFromPhoneNumber(string region, string phoneNumber)")
  fmt.Fprintln(os.Stderr, "  PaidCallRedeemResult redeemPaidCallVoucher(string serial, string language)")
  fmt.Fprintln(os.Stderr, "   getPreferredDisplayName( mids)")
  fmt.Fprintln(os.Stderr, "   getContactsForChannel( ids)")
  fmt.Fprintln(os.Stderr, "   getCallCreditProducts(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)")
  fmt.Fprintln(os.Stderr, "   getCompactContacts(i64 lastModifiedTimestamp)")
  fmt.Fprintln(os.Stderr, "  void notifyNotiCenterEvent(NotiCenterEventData event)")
  fmt.Fprintln(os.Stderr, "  bool isInContact(string mid)")
  fmt.Fprintln(os.Stderr, "   lookupGroupMembers(string groupId,  mids)")
  fmt.Fprintln(os.Stderr, "  Room getRoomInformation(string roomMid)")
  fmt.Fprintln(os.Stderr, "  GroupCall getGroupCall(string chatMid)")
  fmt.Fprintln(os.Stderr, "  bool isAllowSecondaryDeviceLogin()")
  fmt.Fprintln(os.Stderr, "  SimpleChannelClient getPrimaryClientForChannel()")
  fmt.Fprintln(os.Stderr, "  Room createRoomWithBuddy(i32 reqSeq, string buddyMid,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string getDisplayName(string mid)")
  fmt.Fprintln(os.Stderr, "  PaidCallMetadataResult getPaidCallMetadata(string language)")
  fmt.Fprintln(os.Stderr, "  string getMid()")
  fmt.Fprintln(os.Stderr, "  string getUserCountryForBilling(string country, string remoteIp)")
  fmt.Fprintln(os.Stderr, "   getFavoriteGroupIdsForChannel()")
  fmt.Fprintln(os.Stderr, "  PaidCallHistoryResult getPaidCallHistory(i64 start, i32 size, string language)")
  fmt.Fprintln(os.Stderr, "  void sendPinCodeOperation(string verifier)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroupCall(string chatMid,  memberMids, GroupCallMediaType mediaType)")
  fmt.Fprintln(os.Stderr, "   getFriendMids()")
  fmt.Fprintln(os.Stderr, "  MetaProfile getMetaProfile()")
  fmt.Fprintln(os.Stderr, "  Message sendMessageForChannel(Message message)")
  fmt.Fprintln(os.Stderr, "  i64 activeBuddySubscriberCount()")
  fmt.Fprintln(os.Stderr, "  CoinHistoryResult getCallCreditPurchaseHistory(CoinHistoryCondition request)")
  fmt.Fprintln(os.Stderr, "  bool isRoomMember(string roomId)")
  fmt.Fprintln(os.Stderr, "  Message sendSystemOAMessage(Message message)")
  fmt.Fprintln(os.Stderr, "  PaidCallResponse acquirePaidCallRoute(PaidCallType paidCallType, string dialedNumber, string language, string networkCode, bool disableCallerId, string referer, string adSessionId)")
  fmt.Fprintln(os.Stderr, "   getGroupsForChannel( groupIds)")
  fmt.Fprintln(os.Stderr, "  i64 getUserCreateTime()")
  fmt.Fprintln(os.Stderr, "  string registerChannelCP(string cpId, string registerPassword)")
  fmt.Fprintln(os.Stderr, "  PaymentReservationResult reserveCallCreditPurchase(CoinPurchaseReservation request)")
  fmt.Fprintln(os.Stderr, "   acquirePaidCallCurrencyExchangeRate(string language)")
  fmt.Fprintln(os.Stderr, "   getRoomMemberMidsForAppPlatform(string roomId)")
  fmt.Fprintln(os.Stderr, "   getPaidCallBalanceList(string language)")
  fmt.Fprintln(os.Stderr, "   getPersonalInfos( requiredPersonalInfos)")
  fmt.Fprintln(os.Stderr, "   getPrimaryClientsForChannel( userMids)")
  fmt.Fprintln(os.Stderr, "  ContactTransition addBuddyToContact(string buddyMid)")
  fmt.Fprintln(os.Stderr, "   getGroupMemberMidsForAppPlatform(string groupId)")
  fmt.Fprintln(os.Stderr, "  string getUserLanguage()")
  fmt.Fprintln(os.Stderr, "  PaidCallResponse lookupPaidCall(string dialedNumber, string language, string referer)")
  fmt.Fprintln(os.Stderr, "  ExtendedProfile getExtendedProfile()")
  fmt.Fprintln(os.Stderr, "   getReverseCompactContacts( ids)")
  fmt.Fprintln(os.Stderr, "  PaidCallAdResult getPaidCallAdStatus()")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUseridWithoutAbuseBlockForChannel(string userid)")
  fmt.Fprintln(os.Stderr, "   getGroupMemberMids(string groupId)")
  fmt.Fprintln(os.Stderr, "  Message sendMessageWithoutRelationship(Message message)")
  fmt.Fprintln(os.Stderr, "   displayBuddySubscriberCountInBulk( mids)")
  fmt.Fprintln(os.Stderr, "   lookupRoomMembers(string roomId,  mids)")
  fmt.Fprintln(os.Stderr, "   getFavoriteMidsForChannel()")
  fmt.Fprintln(os.Stderr, "   getAllContactIdsForChannel()")
  fmt.Fprintln(os.Stderr, "  i64 displayBuddySubscriberCount()")
  fmt.Fprintln(os.Stderr, "  Profile getProfileForChannel()")
  fmt.Fprintln(os.Stderr, "   getUserTickets( userMids)")
  fmt.Fprintln(os.Stderr, "   getOAFriendMids()")
  fmt.Fprintln(os.Stderr, "   searchPaidCallUserRate(string countryCode, string language)")
  fmt.Fprintln(os.Stderr, "   getJoinedGroupIdsForChannel()")
  fmt.Fprintln(os.Stderr, "  GroupCallRoute acquireGroupCallRoute(string chatMid, GroupCallMediaType mediaType)")
  fmt.Fprintln(os.Stderr, "   getUserMidsWhoAddedMe()")
  fmt.Fprintln(os.Stderr, "  IdentityCredential getIdentityCredential()")
  fmt.Fprintln(os.Stderr, "  void addOperationForChannel(OpType opType, string param1, string param2, string param3)")
  fmt.Fprintln(os.Stderr, "   getSimpleChannelContacts( ids, bool statusSticonFallbackDisabled)")
  fmt.Fprintln(os.Stderr, "  i64 getUserLastSentMessageTimeStamp(string mid)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewCallServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getUserStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserStatus requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUserStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateProfileAttributeForChannel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttributeForChannel requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.ProfileAttribute(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateProfileAttributeForChannel(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateExtendedProfileAttribute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateExtendedProfileAttribute requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.ExtendedProfileAttribute(tmp0)
    value0 := argvalue0
    arg2719 := flag.Arg(2)
    mbTrans2720 := thrift.NewTMemoryBufferLen(len(arg2719))
    defer mbTrans2720.Close()
    _, err2721 := mbTrans2720.WriteString(arg2719)
    if err2721 != nil {
      Usage()
      return
    }
    factory2722 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2723 := factory2722.GetProtocol(mbTrans2720)
    argvalue1 := line.NewExtendedProfile()
    err2724 := argvalue1.Read(jsProt2723)
    if err2724 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateExtendedProfileAttribute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllSimpleChannelContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllSimpleChannelContacts requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.GetAllSimpleChannelContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUserIdentities":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserIdentities requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserIdentities(context.Background()))
    fmt.Print("\n")
    break
  case "markPaidCallAd":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MarkPaidCallAd requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.MarkPaidCallAd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "isGroupMember":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsGroupMember requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsGroupMember(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPhoneInfoFromPhoneNumber":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPhoneInfoFromPhoneNumber requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetPhoneInfoFromPhoneNumber(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "redeemPaidCallVoucher":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RedeemPaidCallVoucher requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RedeemPaidCallVoucher(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getPreferredDisplayName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPreferredDisplayName requires 1 args")
      flag.Usage()
    }
    arg2734 := flag.Arg(1)
    mbTrans2735 := thrift.NewTMemoryBufferLen(len(arg2734))
    defer mbTrans2735.Close()
    _, err2736 := mbTrans2735.WriteString(arg2734)
    if err2736 != nil { 
      Usage()
      return
    }
    factory2737 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2738 := factory2737.GetProtocol(mbTrans2735)
    containerStruct0 := line.NewCallServiceGetPreferredDisplayNameArgs()
    err2739 := containerStruct0.ReadField1(jsProt2738)
    if err2739 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Mids
    value0 := argvalue0
    fmt.Print(client.GetPreferredDisplayName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContactsForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContactsForChannel requires 1 args")
      flag.Usage()
    }
    arg2740 := flag.Arg(1)
    mbTrans2741 := thrift.NewTMemoryBufferLen(len(arg2740))
    defer mbTrans2741.Close()
    _, err2742 := mbTrans2741.WriteString(arg2740)
    if err2742 != nil { 
      Usage()
      return
    }
    factory2743 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2744 := factory2743.GetProtocol(mbTrans2741)
    containerStruct0 := line.NewCallServiceGetContactsForChannelArgs()
    err2745 := containerStruct0.ReadField1(jsProt2744)
    if err2745 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContactsForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCallCreditProducts":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetCallCreditProducts requires 4 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.PaymentType(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.PaymentPgType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetCallCreditProducts(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getCompactContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactContacts requires 1 args")
      flag.Usage()
    }
    argvalue0, err2748 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2748 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCompactContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyNotiCenterEvent":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NotifyNotiCenterEvent requires 1 args")
      flag.Usage()
    }
    arg2749 := flag.Arg(1)
    mbTrans2750 := thrift.NewTMemoryBufferLen(len(arg2749))
    defer mbTrans2750.Close()
    _, err2751 := mbTrans2750.WriteString(arg2749)
    if err2751 != nil {
      Usage()
      return
    }
    factory2752 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2753 := factory2752.GetProtocol(mbTrans2750)
    argvalue0 := line.NewNotiCenterEventData()
    err2754 := argvalue0.Read(jsProt2753)
    if err2754 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.NotifyNotiCenterEvent(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isInContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsInContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsInContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "lookupGroupMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LookupGroupMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2757 := flag.Arg(2)
    mbTrans2758 := thrift.NewTMemoryBufferLen(len(arg2757))
    defer mbTrans2758.Close()
    _, err2759 := mbTrans2758.WriteString(arg2757)
    if err2759 != nil { 
      Usage()
      return
    }
    factory2760 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2761 := factory2760.GetProtocol(mbTrans2758)
    containerStruct1 := line.NewCallServiceLookupGroupMembersArgs()
    err2762 := containerStruct1.ReadField2(jsProt2761)
    if err2762 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Mids
    value1 := argvalue1
    fmt.Print(client.LookupGroupMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRoomInformation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomInformation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRoomInformation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupCall":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupCall requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupCall(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isAllowSecondaryDeviceLogin":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "IsAllowSecondaryDeviceLogin requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.IsAllowSecondaryDeviceLogin(context.Background()))
    fmt.Print("\n")
    break
  case "getPrimaryClientForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetPrimaryClientForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetPrimaryClientForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "createRoomWithBuddy":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateRoomWithBuddy requires 3 args")
      flag.Usage()
    }
    tmp0, err2765 := (strconv.Atoi(flag.Arg(1)))
    if err2765 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2767 := flag.Arg(3)
    mbTrans2768 := thrift.NewTMemoryBufferLen(len(arg2767))
    defer mbTrans2768.Close()
    _, err2769 := mbTrans2768.WriteString(arg2767)
    if err2769 != nil { 
      Usage()
      return
    }
    factory2770 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2771 := factory2770.GetProtocol(mbTrans2768)
    containerStruct2 := line.NewCallServiceCreateRoomWithBuddyArgs()
    err2772 := containerStruct2.ReadField3(jsProt2771)
    if err2772 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CreateRoomWithBuddy(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getDisplayName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDisplayName requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDisplayName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPaidCallMetadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallMetadata requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMid":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMid requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMid(context.Background()))
    fmt.Print("\n")
    break
  case "getUserCountryForBilling":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUserCountryForBilling requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetUserCountryForBilling(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getFavoriteGroupIdsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFavoriteGroupIdsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFavoriteGroupIdsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getPaidCallHistory":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPaidCallHistory requires 3 args")
      flag.Usage()
    }
    argvalue0, err2777 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2777 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2778 := (strconv.Atoi(flag.Arg(2)))
    if err2778 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPaidCallHistory(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendPinCodeOperation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendPinCodeOperation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SendPinCodeOperation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroupCall":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroupCall requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2782 := flag.Arg(2)
    mbTrans2783 := thrift.NewTMemoryBufferLen(len(arg2782))
    defer mbTrans2783.Close()
    _, err2784 := mbTrans2783.WriteString(arg2782)
    if err2784 != nil { 
      Usage()
      return
    }
    factory2785 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2786 := factory2785.GetProtocol(mbTrans2783)
    containerStruct1 := line.NewCallServiceInviteIntoGroupCallArgs()
    err2787 := containerStruct1.ReadField2(jsProt2786)
    if err2787 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MemberMids
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.GroupCallMediaType(tmp2)
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroupCall(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getFriendMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFriendMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFriendMids(context.Background()))
    fmt.Print("\n")
    break
  case "getMetaProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMetaProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMetaProfile(context.Background()))
    fmt.Print("\n")
    break
  case "sendMessageForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendMessageForChannel requires 1 args")
      flag.Usage()
    }
    arg2788 := flag.Arg(1)
    mbTrans2789 := thrift.NewTMemoryBufferLen(len(arg2788))
    defer mbTrans2789.Close()
    _, err2790 := mbTrans2789.WriteString(arg2788)
    if err2790 != nil {
      Usage()
      return
    }
    factory2791 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2792 := factory2791.GetProtocol(mbTrans2789)
    argvalue0 := line.NewMessage()
    err2793 := argvalue0.Read(jsProt2792)
    if err2793 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendMessageForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "activeBuddySubscriberCount":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActiveBuddySubscriberCount requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActiveBuddySubscriberCount(context.Background()))
    fmt.Print("\n")
    break
  case "getCallCreditPurchaseHistory":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCallCreditPurchaseHistory requires 1 args")
      flag.Usage()
    }
    arg2794 := flag.Arg(1)
    mbTrans2795 := thrift.NewTMemoryBufferLen(len(arg2794))
    defer mbTrans2795.Close()
    _, err2796 := mbTrans2795.WriteString(arg2794)
    if err2796 != nil {
      Usage()
      return
    }
    factory2797 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2798 := factory2797.GetProtocol(mbTrans2795)
    argvalue0 := line.NewCoinHistoryCondition()
    err2799 := argvalue0.Read(jsProt2798)
    if err2799 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCallCreditPurchaseHistory(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isRoomMember":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsRoomMember requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsRoomMember(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendSystemOAMessage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendSystemOAMessage requires 1 args")
      flag.Usage()
    }
    arg2801 := flag.Arg(1)
    mbTrans2802 := thrift.NewTMemoryBufferLen(len(arg2801))
    defer mbTrans2802.Close()
    _, err2803 := mbTrans2802.WriteString(arg2801)
    if err2803 != nil {
      Usage()
      return
    }
    factory2804 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2805 := factory2804.GetProtocol(mbTrans2802)
    argvalue0 := line.NewMessage()
    err2806 := argvalue0.Read(jsProt2805)
    if err2806 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendSystemOAMessage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquirePaidCallRoute":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "AcquirePaidCallRoute requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.PaidCallType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.AcquirePaidCallRoute(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "getGroupsForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupsForChannel requires 1 args")
      flag.Usage()
    }
    arg2813 := flag.Arg(1)
    mbTrans2814 := thrift.NewTMemoryBufferLen(len(arg2813))
    defer mbTrans2814.Close()
    _, err2815 := mbTrans2814.WriteString(arg2813)
    if err2815 != nil { 
      Usage()
      return
    }
    factory2816 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2817 := factory2816.GetProtocol(mbTrans2814)
    containerStruct0 := line.NewCallServiceGetGroupsForChannelArgs()
    err2818 := containerStruct0.ReadField1(jsProt2817)
    if err2818 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupIds
    value0 := argvalue0
    fmt.Print(client.GetGroupsForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUserCreateTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserCreateTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserCreateTime(context.Background()))
    fmt.Print("\n")
    break
  case "registerChannelCP":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterChannelCP requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterChannelCP(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reserveCallCreditPurchase":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReserveCallCreditPurchase requires 1 args")
      flag.Usage()
    }
    arg2821 := flag.Arg(1)
    mbTrans2822 := thrift.NewTMemoryBufferLen(len(arg2821))
    defer mbTrans2822.Close()
    _, err2823 := mbTrans2822.WriteString(arg2821)
    if err2823 != nil {
      Usage()
      return
    }
    factory2824 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2825 := factory2824.GetProtocol(mbTrans2822)
    argvalue0 := line.NewCoinPurchaseReservation()
    err2826 := argvalue0.Read(jsProt2825)
    if err2826 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReserveCallCreditPurchase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquirePaidCallCurrencyExchangeRate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquirePaidCallCurrencyExchangeRate requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AcquirePaidCallCurrencyExchangeRate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRoomMemberMidsForAppPlatform":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomMemberMidsForAppPlatform requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRoomMemberMidsForAppPlatform(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPaidCallBalanceList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallBalanceList requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallBalanceList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPersonalInfos":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPersonalInfos requires 1 args")
      flag.Usage()
    }
    arg2830 := flag.Arg(1)
    mbTrans2831 := thrift.NewTMemoryBufferLen(len(arg2830))
    defer mbTrans2831.Close()
    _, err2832 := mbTrans2831.WriteString(arg2830)
    if err2832 != nil { 
      Usage()
      return
    }
    factory2833 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2834 := factory2833.GetProtocol(mbTrans2831)
    containerStruct0 := line.NewCallServiceGetPersonalInfosArgs()
    err2835 := containerStruct0.ReadField1(jsProt2834)
    if err2835 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RequiredPersonalInfos
    value0 := argvalue0
    fmt.Print(client.GetPersonalInfos(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPrimaryClientsForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrimaryClientsForChannel requires 1 args")
      flag.Usage()
    }
    arg2836 := flag.Arg(1)
    mbTrans2837 := thrift.NewTMemoryBufferLen(len(arg2836))
    defer mbTrans2837.Close()
    _, err2838 := mbTrans2837.WriteString(arg2836)
    if err2838 != nil { 
      Usage()
      return
    }
    factory2839 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2840 := factory2839.GetProtocol(mbTrans2837)
    containerStruct0 := line.NewCallServiceGetPrimaryClientsForChannelArgs()
    err2841 := containerStruct0.ReadField1(jsProt2840)
    if err2841 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.UserMids
    value0 := argvalue0
    fmt.Print(client.GetPrimaryClientsForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addBuddyToContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddBuddyToContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AddBuddyToContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupMemberMidsForAppPlatform":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupMemberMidsForAppPlatform requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupMemberMidsForAppPlatform(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUserLanguage":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserLanguage requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserLanguage(context.Background()))
    fmt.Print("\n")
    break
  case "lookupPaidCall":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "LookupPaidCall requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.LookupPaidCall(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getExtendedProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetExtendedProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetExtendedProfile(context.Background()))
    fmt.Print("\n")
    break
  case "getReverseCompactContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetReverseCompactContacts requires 1 args")
      flag.Usage()
    }
    arg2847 := flag.Arg(1)
    mbTrans2848 := thrift.NewTMemoryBufferLen(len(arg2847))
    defer mbTrans2848.Close()
    _, err2849 := mbTrans2848.WriteString(arg2847)
    if err2849 != nil { 
      Usage()
      return
    }
    factory2850 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2851 := factory2850.GetProtocol(mbTrans2848)
    containerStruct0 := line.NewCallServiceGetReverseCompactContactsArgs()
    err2852 := containerStruct0.ReadField1(jsProt2851)
    if err2852 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetReverseCompactContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPaidCallAdStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetPaidCallAdStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetPaidCallAdStatus(context.Background()))
    fmt.Print("\n")
    break
  case "findContactByUseridWithoutAbuseBlockForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUseridWithoutAbuseBlockForChannel requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUseridWithoutAbuseBlockForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupMemberMids":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupMemberMids requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupMemberMids(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendMessageWithoutRelationship":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendMessageWithoutRelationship requires 1 args")
      flag.Usage()
    }
    arg2855 := flag.Arg(1)
    mbTrans2856 := thrift.NewTMemoryBufferLen(len(arg2855))
    defer mbTrans2856.Close()
    _, err2857 := mbTrans2856.WriteString(arg2855)
    if err2857 != nil {
      Usage()
      return
    }
    factory2858 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2859 := factory2858.GetProtocol(mbTrans2856)
    argvalue0 := line.NewMessage()
    err2860 := argvalue0.Read(jsProt2859)
    if err2860 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendMessageWithoutRelationship(context.Background(), value0))
    fmt.Print("\n")
    break
  case "displayBuddySubscriberCountInBulk":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DisplayBuddySubscriberCountInBulk requires 1 args")
      flag.Usage()
    }
    arg2861 := flag.Arg(1)
    mbTrans2862 := thrift.NewTMemoryBufferLen(len(arg2861))
    defer mbTrans2862.Close()
    _, err2863 := mbTrans2862.WriteString(arg2861)
    if err2863 != nil { 
      Usage()
      return
    }
    factory2864 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2865 := factory2864.GetProtocol(mbTrans2862)
    containerStruct0 := line.NewCallServiceDisplayBuddySubscriberCountInBulkArgs()
    err2866 := containerStruct0.ReadField1(jsProt2865)
    if err2866 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Mids
    value0 := argvalue0
    fmt.Print(client.DisplayBuddySubscriberCountInBulk(context.Background(), value0))
    fmt.Print("\n")
    break
  case "lookupRoomMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LookupRoomMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2868 := flag.Arg(2)
    mbTrans2869 := thrift.NewTMemoryBufferLen(len(arg2868))
    defer mbTrans2869.Close()
    _, err2870 := mbTrans2869.WriteString(arg2868)
    if err2870 != nil { 
      Usage()
      return
    }
    factory2871 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2872 := factory2871.GetProtocol(mbTrans2869)
    containerStruct1 := line.NewCallServiceLookupRoomMembersArgs()
    err2873 := containerStruct1.ReadField2(jsProt2872)
    if err2873 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Mids
    value1 := argvalue1
    fmt.Print(client.LookupRoomMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getFavoriteMidsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFavoriteMidsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFavoriteMidsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getAllContactIdsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllContactIdsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllContactIdsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "displayBuddySubscriberCount":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "DisplayBuddySubscriberCount requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.DisplayBuddySubscriberCount(context.Background()))
    fmt.Print("\n")
    break
  case "getProfileForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetProfileForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetProfileForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getUserTickets":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserTickets requires 1 args")
      flag.Usage()
    }
    arg2874 := flag.Arg(1)
    mbTrans2875 := thrift.NewTMemoryBufferLen(len(arg2874))
    defer mbTrans2875.Close()
    _, err2876 := mbTrans2875.WriteString(arg2874)
    if err2876 != nil { 
      Usage()
      return
    }
    factory2877 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2878 := factory2877.GetProtocol(mbTrans2875)
    containerStruct0 := line.NewCallServiceGetUserTicketsArgs()
    err2879 := containerStruct0.ReadField1(jsProt2878)
    if err2879 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.UserMids
    value0 := argvalue0
    fmt.Print(client.GetUserTickets(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getOAFriendMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOAFriendMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOAFriendMids(context.Background()))
    fmt.Print("\n")
    break
  case "searchPaidCallUserRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SearchPaidCallUserRate requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SearchPaidCallUserRate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getJoinedGroupIdsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetJoinedGroupIdsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetJoinedGroupIdsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "acquireGroupCallRoute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcquireGroupCallRoute requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.GroupCallMediaType(tmp1)
    value1 := argvalue1
    fmt.Print(client.AcquireGroupCallRoute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getUserMidsWhoAddedMe":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserMidsWhoAddedMe requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserMidsWhoAddedMe(context.Background()))
    fmt.Print("\n")
    break
  case "getIdentityCredential":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetIdentityCredential requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetIdentityCredential(context.Background()))
    fmt.Print("\n")
    break
  case "addOperationForChannel":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddOperationForChannel requires 4 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.OpType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.AddOperationForChannel(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getSimpleChannelContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSimpleChannelContacts requires 2 args")
      flag.Usage()
    }
    arg2886 := flag.Arg(1)
    mbTrans2887 := thrift.NewTMemoryBufferLen(len(arg2886))
    defer mbTrans2887.Close()
    _, err2888 := mbTrans2887.WriteString(arg2886)
    if err2888 != nil { 
      Usage()
      return
    }
    factory2889 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2890 := factory2889.GetProtocol(mbTrans2887)
    containerStruct0 := line.NewCallServiceGetSimpleChannelContactsArgs()
    err2891 := containerStruct0.ReadField1(jsProt2890)
    if err2891 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.GetSimpleChannelContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getUserLastSentMessageTimeStamp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserLastSentMessageTimeStamp requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUserLastSentMessageTimeStamp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
