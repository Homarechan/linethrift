// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  UserStatus getUserStatus(string mid)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string value)")
  fmt.Fprintln(os.Stderr, "  void updateExtendedProfileAttribute(ExtendedProfileAttribute attr, ExtendedProfile extendedProfile)")
  fmt.Fprintln(os.Stderr, "   getAllSimpleChannelContacts(bool statusSticonFallbackDisabled)")
  fmt.Fprintln(os.Stderr, "   getUserIdentities()")
  fmt.Fprintln(os.Stderr, "  PaidCallDialing markPaidCallAd(string dialedNumber, string language, bool disableCallerId)")
  fmt.Fprintln(os.Stderr, "  bool isGroupMember(string groupId)")
  fmt.Fprintln(os.Stderr, "  PhoneInfoForChannel getPhoneInfoFromPhoneNumber(string region, string phoneNumber)")
  fmt.Fprintln(os.Stderr, "  PaidCallRedeemResult redeemPaidCallVoucher(string serial, string language)")
  fmt.Fprintln(os.Stderr, "   getPreferredDisplayName( mids)")
  fmt.Fprintln(os.Stderr, "   getContactsForChannel( ids)")
  fmt.Fprintln(os.Stderr, "   getCallCreditProducts(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)")
  fmt.Fprintln(os.Stderr, "   getCompactContacts(i64 lastModifiedTimestamp)")
  fmt.Fprintln(os.Stderr, "  void notifyNotiCenterEvent(NotiCenterEventData event)")
  fmt.Fprintln(os.Stderr, "  bool isInContact(string mid)")
  fmt.Fprintln(os.Stderr, "   lookupGroupMembers(string groupId,  mids)")
  fmt.Fprintln(os.Stderr, "  Room getRoomInformation(string roomMid)")
  fmt.Fprintln(os.Stderr, "  GroupCall getGroupCall(string chatMid)")
  fmt.Fprintln(os.Stderr, "  bool isAllowSecondaryDeviceLogin()")
  fmt.Fprintln(os.Stderr, "  SimpleChannelClient getPrimaryClientForChannel()")
  fmt.Fprintln(os.Stderr, "  Room createRoomWithBuddy(i32 reqSeq, string buddyMid,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string getDisplayName(string mid)")
  fmt.Fprintln(os.Stderr, "  PaidCallMetadataResult getPaidCallMetadata(string language)")
  fmt.Fprintln(os.Stderr, "  string getMid()")
  fmt.Fprintln(os.Stderr, "  string getUserCountryForBilling(string country, string remoteIp)")
  fmt.Fprintln(os.Stderr, "   getFavoriteGroupIdsForChannel()")
  fmt.Fprintln(os.Stderr, "  PaidCallHistoryResult getPaidCallHistory(i64 start, i32 size, string language)")
  fmt.Fprintln(os.Stderr, "  void sendPinCodeOperation(string verifier)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroupCall(string chatMid,  memberMids, GroupCallMediaType mediaType)")
  fmt.Fprintln(os.Stderr, "   getFriendMids()")
  fmt.Fprintln(os.Stderr, "  MetaProfile getMetaProfile()")
  fmt.Fprintln(os.Stderr, "  Message sendMessageForChannel(Message message)")
  fmt.Fprintln(os.Stderr, "  i64 activeBuddySubscriberCount()")
  fmt.Fprintln(os.Stderr, "  CoinHistoryResult getCallCreditPurchaseHistory(CoinHistoryCondition request)")
  fmt.Fprintln(os.Stderr, "  bool isRoomMember(string roomId)")
  fmt.Fprintln(os.Stderr, "  Message sendSystemOAMessage(Message message)")
  fmt.Fprintln(os.Stderr, "  PaidCallResponse acquirePaidCallRoute(PaidCallType paidCallType, string dialedNumber, string language, string networkCode, bool disableCallerId, string referer, string adSessionId)")
  fmt.Fprintln(os.Stderr, "   getGroupsForChannel( groupIds)")
  fmt.Fprintln(os.Stderr, "  i64 getUserCreateTime()")
  fmt.Fprintln(os.Stderr, "  string registerChannelCP(string cpId, string registerPassword)")
  fmt.Fprintln(os.Stderr, "  PaymentReservationResult reserveCallCreditPurchase(CoinPurchaseReservation request)")
  fmt.Fprintln(os.Stderr, "   acquirePaidCallCurrencyExchangeRate(string language)")
  fmt.Fprintln(os.Stderr, "   getRoomMemberMidsForAppPlatform(string roomId)")
  fmt.Fprintln(os.Stderr, "   getPaidCallBalanceList(string language)")
  fmt.Fprintln(os.Stderr, "   getPersonalInfos( requiredPersonalInfos)")
  fmt.Fprintln(os.Stderr, "   getPrimaryClientsForChannel( userMids)")
  fmt.Fprintln(os.Stderr, "  ContactTransition addBuddyToContact(string buddyMid)")
  fmt.Fprintln(os.Stderr, "   getGroupMemberMidsForAppPlatform(string groupId)")
  fmt.Fprintln(os.Stderr, "  string getUserLanguage()")
  fmt.Fprintln(os.Stderr, "  PaidCallResponse lookupPaidCall(string dialedNumber, string language, string referer)")
  fmt.Fprintln(os.Stderr, "  ExtendedProfile getExtendedProfile()")
  fmt.Fprintln(os.Stderr, "   getReverseCompactContacts( ids)")
  fmt.Fprintln(os.Stderr, "  PaidCallAdResult getPaidCallAdStatus()")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUseridWithoutAbuseBlockForChannel(string userid)")
  fmt.Fprintln(os.Stderr, "   getGroupMemberMids(string groupId)")
  fmt.Fprintln(os.Stderr, "  Message sendMessageWithoutRelationship(Message message)")
  fmt.Fprintln(os.Stderr, "   displayBuddySubscriberCountInBulk( mids)")
  fmt.Fprintln(os.Stderr, "   lookupRoomMembers(string roomId,  mids)")
  fmt.Fprintln(os.Stderr, "   getFavoriteMidsForChannel()")
  fmt.Fprintln(os.Stderr, "   getAllContactIdsForChannel()")
  fmt.Fprintln(os.Stderr, "  i64 displayBuddySubscriberCount()")
  fmt.Fprintln(os.Stderr, "  Profile getProfileForChannel()")
  fmt.Fprintln(os.Stderr, "   getUserTickets( userMids)")
  fmt.Fprintln(os.Stderr, "   getOAFriendMids()")
  fmt.Fprintln(os.Stderr, "   searchPaidCallUserRate(string countryCode, string language)")
  fmt.Fprintln(os.Stderr, "   getJoinedGroupIdsForChannel()")
  fmt.Fprintln(os.Stderr, "  GroupCallRoute acquireGroupCallRoute(string chatMid, GroupCallMediaType mediaType)")
  fmt.Fprintln(os.Stderr, "   getUserMidsWhoAddedMe()")
  fmt.Fprintln(os.Stderr, "  IdentityCredential getIdentityCredential()")
  fmt.Fprintln(os.Stderr, "  void addOperationForChannel(OpType opType, string param1, string param2, string param3)")
  fmt.Fprintln(os.Stderr, "   getSimpleChannelContacts( ids, bool statusSticonFallbackDisabled)")
  fmt.Fprintln(os.Stderr, "  i64 getUserLastSentMessageTimeStamp(string mid)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewCallServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getUserStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserStatus requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUserStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateProfileAttributeForChannel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttributeForChannel requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.ProfileAttribute(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateProfileAttributeForChannel(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateExtendedProfileAttribute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateExtendedProfileAttribute requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.ExtendedProfileAttribute(tmp0)
    value0 := argvalue0
    arg2765 := flag.Arg(2)
    mbTrans2766 := thrift.NewTMemoryBufferLen(len(arg2765))
    defer mbTrans2766.Close()
    _, err2767 := mbTrans2766.WriteString(arg2765)
    if err2767 != nil {
      Usage()
      return
    }
    factory2768 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2769 := factory2768.GetProtocol(mbTrans2766)
    argvalue1 := line.NewExtendedProfile()
    err2770 := argvalue1.Read(jsProt2769)
    if err2770 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateExtendedProfileAttribute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllSimpleChannelContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAllSimpleChannelContacts requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.GetAllSimpleChannelContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUserIdentities":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserIdentities requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserIdentities(context.Background()))
    fmt.Print("\n")
    break
  case "markPaidCallAd":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MarkPaidCallAd requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3) == "true"
    value2 := argvalue2
    fmt.Print(client.MarkPaidCallAd(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "isGroupMember":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsGroupMember requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsGroupMember(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPhoneInfoFromPhoneNumber":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetPhoneInfoFromPhoneNumber requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetPhoneInfoFromPhoneNumber(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "redeemPaidCallVoucher":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RedeemPaidCallVoucher requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RedeemPaidCallVoucher(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getPreferredDisplayName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPreferredDisplayName requires 1 args")
      flag.Usage()
    }
    arg2780 := flag.Arg(1)
    mbTrans2781 := thrift.NewTMemoryBufferLen(len(arg2780))
    defer mbTrans2781.Close()
    _, err2782 := mbTrans2781.WriteString(arg2780)
    if err2782 != nil { 
      Usage()
      return
    }
    factory2783 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2784 := factory2783.GetProtocol(mbTrans2781)
    containerStruct0 := line.NewCallServiceGetPreferredDisplayNameArgs()
    err2785 := containerStruct0.ReadField1(jsProt2784)
    if err2785 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Mids
    value0 := argvalue0
    fmt.Print(client.GetPreferredDisplayName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContactsForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContactsForChannel requires 1 args")
      flag.Usage()
    }
    arg2786 := flag.Arg(1)
    mbTrans2787 := thrift.NewTMemoryBufferLen(len(arg2786))
    defer mbTrans2787.Close()
    _, err2788 := mbTrans2787.WriteString(arg2786)
    if err2788 != nil { 
      Usage()
      return
    }
    factory2789 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2790 := factory2789.GetProtocol(mbTrans2787)
    containerStruct0 := line.NewCallServiceGetContactsForChannelArgs()
    err2791 := containerStruct0.ReadField1(jsProt2790)
    if err2791 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContactsForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCallCreditProducts":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetCallCreditProducts requires 4 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.PaymentType(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.PaymentPgType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetCallCreditProducts(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getCompactContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactContacts requires 1 args")
      flag.Usage()
    }
    argvalue0, err2794 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2794 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCompactContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyNotiCenterEvent":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NotifyNotiCenterEvent requires 1 args")
      flag.Usage()
    }
    arg2795 := flag.Arg(1)
    mbTrans2796 := thrift.NewTMemoryBufferLen(len(arg2795))
    defer mbTrans2796.Close()
    _, err2797 := mbTrans2796.WriteString(arg2795)
    if err2797 != nil {
      Usage()
      return
    }
    factory2798 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2799 := factory2798.GetProtocol(mbTrans2796)
    argvalue0 := line.NewNotiCenterEventData()
    err2800 := argvalue0.Read(jsProt2799)
    if err2800 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.NotifyNotiCenterEvent(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isInContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsInContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsInContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "lookupGroupMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LookupGroupMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2803 := flag.Arg(2)
    mbTrans2804 := thrift.NewTMemoryBufferLen(len(arg2803))
    defer mbTrans2804.Close()
    _, err2805 := mbTrans2804.WriteString(arg2803)
    if err2805 != nil { 
      Usage()
      return
    }
    factory2806 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2807 := factory2806.GetProtocol(mbTrans2804)
    containerStruct1 := line.NewCallServiceLookupGroupMembersArgs()
    err2808 := containerStruct1.ReadField2(jsProt2807)
    if err2808 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Mids
    value1 := argvalue1
    fmt.Print(client.LookupGroupMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRoomInformation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomInformation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRoomInformation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupCall":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupCall requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupCall(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isAllowSecondaryDeviceLogin":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "IsAllowSecondaryDeviceLogin requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.IsAllowSecondaryDeviceLogin(context.Background()))
    fmt.Print("\n")
    break
  case "getPrimaryClientForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetPrimaryClientForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetPrimaryClientForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "createRoomWithBuddy":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateRoomWithBuddy requires 3 args")
      flag.Usage()
    }
    tmp0, err2811 := (strconv.Atoi(flag.Arg(1)))
    if err2811 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2813 := flag.Arg(3)
    mbTrans2814 := thrift.NewTMemoryBufferLen(len(arg2813))
    defer mbTrans2814.Close()
    _, err2815 := mbTrans2814.WriteString(arg2813)
    if err2815 != nil { 
      Usage()
      return
    }
    factory2816 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2817 := factory2816.GetProtocol(mbTrans2814)
    containerStruct2 := line.NewCallServiceCreateRoomWithBuddyArgs()
    err2818 := containerStruct2.ReadField3(jsProt2817)
    if err2818 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CreateRoomWithBuddy(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getDisplayName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDisplayName requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDisplayName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPaidCallMetadata":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallMetadata requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallMetadata(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMid":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMid requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMid(context.Background()))
    fmt.Print("\n")
    break
  case "getUserCountryForBilling":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUserCountryForBilling requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetUserCountryForBilling(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getFavoriteGroupIdsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFavoriteGroupIdsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFavoriteGroupIdsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getPaidCallHistory":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPaidCallHistory requires 3 args")
      flag.Usage()
    }
    argvalue0, err2823 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2823 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2824 := (strconv.Atoi(flag.Arg(2)))
    if err2824 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetPaidCallHistory(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendPinCodeOperation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendPinCodeOperation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SendPinCodeOperation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroupCall":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroupCall requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2828 := flag.Arg(2)
    mbTrans2829 := thrift.NewTMemoryBufferLen(len(arg2828))
    defer mbTrans2829.Close()
    _, err2830 := mbTrans2829.WriteString(arg2828)
    if err2830 != nil { 
      Usage()
      return
    }
    factory2831 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2832 := factory2831.GetProtocol(mbTrans2829)
    containerStruct1 := line.NewCallServiceInviteIntoGroupCallArgs()
    err2833 := containerStruct1.ReadField2(jsProt2832)
    if err2833 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MemberMids
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.GroupCallMediaType(tmp2)
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroupCall(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getFriendMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFriendMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFriendMids(context.Background()))
    fmt.Print("\n")
    break
  case "getMetaProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMetaProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMetaProfile(context.Background()))
    fmt.Print("\n")
    break
  case "sendMessageForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendMessageForChannel requires 1 args")
      flag.Usage()
    }
    arg2834 := flag.Arg(1)
    mbTrans2835 := thrift.NewTMemoryBufferLen(len(arg2834))
    defer mbTrans2835.Close()
    _, err2836 := mbTrans2835.WriteString(arg2834)
    if err2836 != nil {
      Usage()
      return
    }
    factory2837 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2838 := factory2837.GetProtocol(mbTrans2835)
    argvalue0 := line.NewMessage()
    err2839 := argvalue0.Read(jsProt2838)
    if err2839 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendMessageForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "activeBuddySubscriberCount":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActiveBuddySubscriberCount requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActiveBuddySubscriberCount(context.Background()))
    fmt.Print("\n")
    break
  case "getCallCreditPurchaseHistory":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCallCreditPurchaseHistory requires 1 args")
      flag.Usage()
    }
    arg2840 := flag.Arg(1)
    mbTrans2841 := thrift.NewTMemoryBufferLen(len(arg2840))
    defer mbTrans2841.Close()
    _, err2842 := mbTrans2841.WriteString(arg2840)
    if err2842 != nil {
      Usage()
      return
    }
    factory2843 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2844 := factory2843.GetProtocol(mbTrans2841)
    argvalue0 := line.NewCoinHistoryCondition()
    err2845 := argvalue0.Read(jsProt2844)
    if err2845 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCallCreditPurchaseHistory(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isRoomMember":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsRoomMember requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsRoomMember(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendSystemOAMessage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendSystemOAMessage requires 1 args")
      flag.Usage()
    }
    arg2847 := flag.Arg(1)
    mbTrans2848 := thrift.NewTMemoryBufferLen(len(arg2847))
    defer mbTrans2848.Close()
    _, err2849 := mbTrans2848.WriteString(arg2847)
    if err2849 != nil {
      Usage()
      return
    }
    factory2850 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2851 := factory2850.GetProtocol(mbTrans2848)
    argvalue0 := line.NewMessage()
    err2852 := argvalue0.Read(jsProt2851)
    if err2852 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendSystemOAMessage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquirePaidCallRoute":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "AcquirePaidCallRoute requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.PaidCallType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5) == "true"
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.AcquirePaidCallRoute(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "getGroupsForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupsForChannel requires 1 args")
      flag.Usage()
    }
    arg2859 := flag.Arg(1)
    mbTrans2860 := thrift.NewTMemoryBufferLen(len(arg2859))
    defer mbTrans2860.Close()
    _, err2861 := mbTrans2860.WriteString(arg2859)
    if err2861 != nil { 
      Usage()
      return
    }
    factory2862 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2863 := factory2862.GetProtocol(mbTrans2860)
    containerStruct0 := line.NewCallServiceGetGroupsForChannelArgs()
    err2864 := containerStruct0.ReadField1(jsProt2863)
    if err2864 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupIds
    value0 := argvalue0
    fmt.Print(client.GetGroupsForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUserCreateTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserCreateTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserCreateTime(context.Background()))
    fmt.Print("\n")
    break
  case "registerChannelCP":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterChannelCP requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterChannelCP(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reserveCallCreditPurchase":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReserveCallCreditPurchase requires 1 args")
      flag.Usage()
    }
    arg2867 := flag.Arg(1)
    mbTrans2868 := thrift.NewTMemoryBufferLen(len(arg2867))
    defer mbTrans2868.Close()
    _, err2869 := mbTrans2868.WriteString(arg2867)
    if err2869 != nil {
      Usage()
      return
    }
    factory2870 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2871 := factory2870.GetProtocol(mbTrans2868)
    argvalue0 := line.NewCoinPurchaseReservation()
    err2872 := argvalue0.Read(jsProt2871)
    if err2872 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReserveCallCreditPurchase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquirePaidCallCurrencyExchangeRate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquirePaidCallCurrencyExchangeRate requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AcquirePaidCallCurrencyExchangeRate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRoomMemberMidsForAppPlatform":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoomMemberMidsForAppPlatform requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRoomMemberMidsForAppPlatform(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPaidCallBalanceList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPaidCallBalanceList requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetPaidCallBalanceList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPersonalInfos":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPersonalInfos requires 1 args")
      flag.Usage()
    }
    arg2876 := flag.Arg(1)
    mbTrans2877 := thrift.NewTMemoryBufferLen(len(arg2876))
    defer mbTrans2877.Close()
    _, err2878 := mbTrans2877.WriteString(arg2876)
    if err2878 != nil { 
      Usage()
      return
    }
    factory2879 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2880 := factory2879.GetProtocol(mbTrans2877)
    containerStruct0 := line.NewCallServiceGetPersonalInfosArgs()
    err2881 := containerStruct0.ReadField1(jsProt2880)
    if err2881 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RequiredPersonalInfos
    value0 := argvalue0
    fmt.Print(client.GetPersonalInfos(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPrimaryClientsForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPrimaryClientsForChannel requires 1 args")
      flag.Usage()
    }
    arg2882 := flag.Arg(1)
    mbTrans2883 := thrift.NewTMemoryBufferLen(len(arg2882))
    defer mbTrans2883.Close()
    _, err2884 := mbTrans2883.WriteString(arg2882)
    if err2884 != nil { 
      Usage()
      return
    }
    factory2885 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2886 := factory2885.GetProtocol(mbTrans2883)
    containerStruct0 := line.NewCallServiceGetPrimaryClientsForChannelArgs()
    err2887 := containerStruct0.ReadField1(jsProt2886)
    if err2887 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.UserMids
    value0 := argvalue0
    fmt.Print(client.GetPrimaryClientsForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addBuddyToContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddBuddyToContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AddBuddyToContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupMemberMidsForAppPlatform":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupMemberMidsForAppPlatform requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupMemberMidsForAppPlatform(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUserLanguage":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserLanguage requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserLanguage(context.Background()))
    fmt.Print("\n")
    break
  case "lookupPaidCall":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "LookupPaidCall requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.LookupPaidCall(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getExtendedProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetExtendedProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetExtendedProfile(context.Background()))
    fmt.Print("\n")
    break
  case "getReverseCompactContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetReverseCompactContacts requires 1 args")
      flag.Usage()
    }
    arg2893 := flag.Arg(1)
    mbTrans2894 := thrift.NewTMemoryBufferLen(len(arg2893))
    defer mbTrans2894.Close()
    _, err2895 := mbTrans2894.WriteString(arg2893)
    if err2895 != nil { 
      Usage()
      return
    }
    factory2896 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2897 := factory2896.GetProtocol(mbTrans2894)
    containerStruct0 := line.NewCallServiceGetReverseCompactContactsArgs()
    err2898 := containerStruct0.ReadField1(jsProt2897)
    if err2898 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetReverseCompactContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPaidCallAdStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetPaidCallAdStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetPaidCallAdStatus(context.Background()))
    fmt.Print("\n")
    break
  case "findContactByUseridWithoutAbuseBlockForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUseridWithoutAbuseBlockForChannel requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUseridWithoutAbuseBlockForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupMemberMids":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupMemberMids requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupMemberMids(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendMessageWithoutRelationship":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendMessageWithoutRelationship requires 1 args")
      flag.Usage()
    }
    arg2901 := flag.Arg(1)
    mbTrans2902 := thrift.NewTMemoryBufferLen(len(arg2901))
    defer mbTrans2902.Close()
    _, err2903 := mbTrans2902.WriteString(arg2901)
    if err2903 != nil {
      Usage()
      return
    }
    factory2904 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2905 := factory2904.GetProtocol(mbTrans2902)
    argvalue0 := line.NewMessage()
    err2906 := argvalue0.Read(jsProt2905)
    if err2906 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendMessageWithoutRelationship(context.Background(), value0))
    fmt.Print("\n")
    break
  case "displayBuddySubscriberCountInBulk":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DisplayBuddySubscriberCountInBulk requires 1 args")
      flag.Usage()
    }
    arg2907 := flag.Arg(1)
    mbTrans2908 := thrift.NewTMemoryBufferLen(len(arg2907))
    defer mbTrans2908.Close()
    _, err2909 := mbTrans2908.WriteString(arg2907)
    if err2909 != nil { 
      Usage()
      return
    }
    factory2910 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2911 := factory2910.GetProtocol(mbTrans2908)
    containerStruct0 := line.NewCallServiceDisplayBuddySubscriberCountInBulkArgs()
    err2912 := containerStruct0.ReadField1(jsProt2911)
    if err2912 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Mids
    value0 := argvalue0
    fmt.Print(client.DisplayBuddySubscriberCountInBulk(context.Background(), value0))
    fmt.Print("\n")
    break
  case "lookupRoomMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LookupRoomMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2914 := flag.Arg(2)
    mbTrans2915 := thrift.NewTMemoryBufferLen(len(arg2914))
    defer mbTrans2915.Close()
    _, err2916 := mbTrans2915.WriteString(arg2914)
    if err2916 != nil { 
      Usage()
      return
    }
    factory2917 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2918 := factory2917.GetProtocol(mbTrans2915)
    containerStruct1 := line.NewCallServiceLookupRoomMembersArgs()
    err2919 := containerStruct1.ReadField2(jsProt2918)
    if err2919 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Mids
    value1 := argvalue1
    fmt.Print(client.LookupRoomMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getFavoriteMidsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFavoriteMidsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFavoriteMidsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getAllContactIdsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllContactIdsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllContactIdsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "displayBuddySubscriberCount":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "DisplayBuddySubscriberCount requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.DisplayBuddySubscriberCount(context.Background()))
    fmt.Print("\n")
    break
  case "getProfileForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetProfileForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetProfileForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getUserTickets":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserTickets requires 1 args")
      flag.Usage()
    }
    arg2920 := flag.Arg(1)
    mbTrans2921 := thrift.NewTMemoryBufferLen(len(arg2920))
    defer mbTrans2921.Close()
    _, err2922 := mbTrans2921.WriteString(arg2920)
    if err2922 != nil { 
      Usage()
      return
    }
    factory2923 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2924 := factory2923.GetProtocol(mbTrans2921)
    containerStruct0 := line.NewCallServiceGetUserTicketsArgs()
    err2925 := containerStruct0.ReadField1(jsProt2924)
    if err2925 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.UserMids
    value0 := argvalue0
    fmt.Print(client.GetUserTickets(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getOAFriendMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetOAFriendMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetOAFriendMids(context.Background()))
    fmt.Print("\n")
    break
  case "searchPaidCallUserRate":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SearchPaidCallUserRate requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.SearchPaidCallUserRate(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getJoinedGroupIdsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetJoinedGroupIdsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetJoinedGroupIdsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "acquireGroupCallRoute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcquireGroupCallRoute requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.GroupCallMediaType(tmp1)
    value1 := argvalue1
    fmt.Print(client.AcquireGroupCallRoute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getUserMidsWhoAddedMe":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserMidsWhoAddedMe requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserMidsWhoAddedMe(context.Background()))
    fmt.Print("\n")
    break
  case "getIdentityCredential":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetIdentityCredential requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetIdentityCredential(context.Background()))
    fmt.Print("\n")
    break
  case "addOperationForChannel":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddOperationForChannel requires 4 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.OpType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.AddOperationForChannel(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getSimpleChannelContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetSimpleChannelContacts requires 2 args")
      flag.Usage()
    }
    arg2932 := flag.Arg(1)
    mbTrans2933 := thrift.NewTMemoryBufferLen(len(arg2932))
    defer mbTrans2933.Close()
    _, err2934 := mbTrans2933.WriteString(arg2932)
    if err2934 != nil { 
      Usage()
      return
    }
    factory2935 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2936 := factory2935.GetProtocol(mbTrans2933)
    containerStruct0 := line.NewCallServiceGetSimpleChannelContactsArgs()
    err2937 := containerStruct0.ReadField1(jsProt2936)
    if err2937 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.GetSimpleChannelContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getUserLastSentMessageTimeStamp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserLastSentMessageTimeStamp requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUserLastSentMessageTimeStamp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
