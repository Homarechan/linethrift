// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  IdentityCredentialResponse updatePassword(string authSessionId, IdentityCredentialRequest request)")
  fmt.Fprintln(os.Stderr, "  RSAKey getAuthRSAKey(string authSessionId, IdentityProvider identityProvider)")
  fmt.Fprintln(os.Stderr, "  string openAuthSession(AuthSessionRequest request)")
  fmt.Fprintln(os.Stderr, "  string normalizePhoneNumber(string countryCode, string phoneNumber, string countryCodeHint)")
  fmt.Fprintln(os.Stderr, "  void respondE2EELoginRequest(string verifier, E2EEPublicKey publicKey, string encryptedKeyChain, string hashKeyChain, ErrorCode errorCode)")
  fmt.Fprintln(os.Stderr, "  string confirmE2EELogin(string verifier, string deviceSecret)")
  fmt.Fprintln(os.Stderr, "  void logoutZ()")
  fmt.Fprintln(os.Stderr, "  LoginResult loginZ(LoginRequest loginRequest)")
  fmt.Fprintln(os.Stderr, "  SecurityCenterResult issueTokenForAccountMigrationSettings(bool enforce)")
  fmt.Fprintln(os.Stderr, "  SecurityCenterResult issueTokenForAccountMigration(string migrationSessionId)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcodeWithE2EE(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, string encryptedKeyChain, string hashKeyChain)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewAuthServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "updatePassword":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdatePassword requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2965 := flag.Arg(2)
    mbTrans2966 := thrift.NewTMemoryBufferLen(len(arg2965))
    defer mbTrans2966.Close()
    _, err2967 := mbTrans2966.WriteString(arg2965)
    if err2967 != nil {
      Usage()
      return
    }
    factory2968 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2969 := factory2968.GetProtocol(mbTrans2966)
    argvalue1 := line.NewIdentityCredentialRequest()
    err2970 := argvalue1.Read(jsProt2969)
    if err2970 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdatePassword(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAuthRSAKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAuthRSAKey requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.IdentityProvider(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetAuthRSAKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openAuthSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenAuthSession requires 1 args")
      flag.Usage()
    }
    arg2972 := flag.Arg(1)
    mbTrans2973 := thrift.NewTMemoryBufferLen(len(arg2972))
    defer mbTrans2973.Close()
    _, err2974 := mbTrans2973.WriteString(arg2972)
    if err2974 != nil {
      Usage()
      return
    }
    factory2975 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2976 := factory2975.GetProtocol(mbTrans2973)
    argvalue0 := line.NewAuthSessionRequest()
    err2977 := argvalue0.Read(jsProt2976)
    if err2977 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenAuthSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "normalizePhoneNumber":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "NormalizePhoneNumber requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.NormalizePhoneNumber(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "respondE2EELoginRequest":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RespondE2EELoginRequest requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2982 := flag.Arg(2)
    mbTrans2983 := thrift.NewTMemoryBufferLen(len(arg2982))
    defer mbTrans2983.Close()
    _, err2984 := mbTrans2983.WriteString(arg2982)
    if err2984 != nil {
      Usage()
      return
    }
    factory2985 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2986 := factory2985.GetProtocol(mbTrans2983)
    argvalue1 := line.NewE2EEPublicKey()
    err2987 := argvalue1.Read(jsProt2986)
    if err2987 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := line.ErrorCode(tmp4)
    value4 := argvalue4
    fmt.Print(client.RespondE2EELoginRequest(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "confirmE2EELogin":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ConfirmE2EELogin requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.ConfirmE2EELogin(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "logoutZ":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "LogoutZ requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.LogoutZ(context.Background()))
    fmt.Print("\n")
    break
  case "loginZ":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginZ requires 1 args")
      flag.Usage()
    }
    arg2992 := flag.Arg(1)
    mbTrans2993 := thrift.NewTMemoryBufferLen(len(arg2992))
    defer mbTrans2993.Close()
    _, err2994 := mbTrans2993.WriteString(arg2992)
    if err2994 != nil {
      Usage()
      return
    }
    factory2995 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2996 := factory2995.GetProtocol(mbTrans2993)
    argvalue0 := line.NewLoginRequest()
    err2997 := argvalue0.Read(jsProt2996)
    if err2997 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LoginZ(context.Background(), value0))
    fmt.Print("\n")
    break
  case "issueTokenForAccountMigrationSettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IssueTokenForAccountMigrationSettings requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.IssueTokenForAccountMigrationSettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "issueTokenForAccountMigration":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IssueTokenForAccountMigration requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IssueTokenForAccountMigration(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyQrcodeWithE2EE":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "VerifyQrcodeWithE2EE requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ErrorCode(tmp2)
    value2 := argvalue2
    arg3002 := flag.Arg(4)
    mbTrans3003 := thrift.NewTMemoryBufferLen(len(arg3002))
    defer mbTrans3003.Close()
    _, err3004 := mbTrans3003.WriteString(arg3002)
    if err3004 != nil {
      Usage()
      return
    }
    factory3005 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt3006 := factory3005.GetProtocol(mbTrans3003)
    argvalue3 := line.NewE2EEPublicKey()
    err3007 := argvalue3.Read(jsProt3006)
    if err3007 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    argvalue5 := []byte(flag.Arg(6))
    value5 := argvalue5
    fmt.Print(client.VerifyQrcodeWithE2EE(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
