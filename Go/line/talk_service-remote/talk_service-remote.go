// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  SearchResult searchCollection(string query, SearchPagingParameter param)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncementsBulk( chatRoomMids)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncements(string chatRoomMid)")
  fmt.Fprintln(os.Stderr, "  ChatRoomAnnouncement createChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents)")
  fmt.Fprintln(os.Stderr, "  void removeChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, i64 announcementSeq)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  Group getGroupWithoutMembers(string groupId)")
  fmt.Fprintln(os.Stderr, "  void requestResendMessage(i32 reqSeq, string senderMid, string messageId)")
  fmt.Fprintln(os.Stderr, "  void respondResendMessage(i32 reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitationByTicket(i32 reqSeq, string GroupMid, string ticketId)")
  fmt.Fprintln(os.Stderr, "  void acceptProximityMatches(string sessionId,  ids)")
  fmt.Fprintln(os.Stderr, "   acquireCallRoute(string to)")
  fmt.Fprintln(os.Stderr, "  string acquireCallTicket(string to)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureType featureType)")
  fmt.Fprintln(os.Stderr, "  string addSnsId(SnsIdType snsIdType, string snsAccessToken)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)")
  fmt.Fprintln(os.Stderr, "  void clearIdentityCredential()")
  fmt.Fprintln(os.Stderr, "  void clearMessageBox(string channelId, string messageBoxId)")
  fmt.Fprintln(os.Stderr, "  void closeProximityMatch(string sessionId)")
  fmt.Fprintln(os.Stderr, "   commitSendMessage(i32 seq, string messageId,  receiverMids)")
  fmt.Fprintln(os.Stderr, "   commitSendMessages(i32 seq,  messageIds,  receiverMids)")
  fmt.Fprintln(os.Stderr, "   commitUpdateProfile(i32 seq,  attrs,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void confirmEmail(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  Group createGroup(i32 seq, string name,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string createQrcodeBase64Image(string url, string characterSet, i32 imageSize, i32 x, i32 y, i32 width, i32 height)")
  fmt.Fprintln(os.Stderr, "  Room createRoom(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string createSession()")
  fmt.Fprintln(os.Stderr, "   fetchAnnouncements(i32 lastFetchedIndex)")
  fmt.Fprintln(os.Stderr, "   fetchMessages(i64 localTs, i32 count)")
  fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByEmail(i32 reqSeq,  emails)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)")
  fmt.Fprintln(os.Stderr, "  Group findGroupByTicketV2(string ticketId)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones)")
  fmt.Fprintln(os.Stderr, "   getFriendRequests(FriendRequestDirection direction, i64 lastSeenSeqId)")
  fmt.Fprintln(os.Stderr, "  void removeFriendRequest(FriendRequestDirection direction, string midOrEMid)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string userid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string userid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketIdWithTag)")
  fmt.Fprintln(os.Stderr, "   findContactsByEmail( emails)")
  fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
  fmt.Fprintln(os.Stderr, "  SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash)")
  fmt.Fprintln(os.Stderr, "  void finishUpdateVerification(string sessionId)")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  void destroyMessage(i32 seq, string chatId, string messageId, i32 sessionId)")
  fmt.Fprintln(os.Stderr, "   getAcceptedProximityMatches(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getActiveBuddySubscriberIds()")
  fmt.Fprintln(os.Stderr, "   getAllContactIds()")
  fmt.Fprintln(os.Stderr, "  AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds()")
  fmt.Fprintln(os.Stderr, "  RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  RegisterWithPhoneNumberResult registerWithPhoneNumberAndPassword(string sessionId, string keynm, string encrypted)")
  fmt.Fprintln(os.Stderr, "  AnalyticsInfo getAnalyticsInfo()")
  fmt.Fprintln(os.Stderr, "  void reportClientStatistics(i32 reqSeq, ReportCategory category, i32 count)")
  fmt.Fprintln(os.Stderr, "  string verifyPhoneNumberForLogin(string verifierFromPhone, string pinCodeForPhone, string verifierFromLogin)")
  fmt.Fprintln(os.Stderr, "  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIdsByRange(i32 start, i32 count)")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds()")
  fmt.Fprintln(os.Stderr, "   getBuddyBlockerIds()")
  fmt.Fprintln(os.Stderr, "  Geolocation getBuddyLocation(string mid, i32 index)")
  fmt.Fprintln(os.Stderr, "   getCompactContactsModifiedSince(i64 timestamp)")
  fmt.Fprintln(os.Stderr, "  Group getCompactGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  Room getCompactRoom(string roomId)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "  Contact getContactWithFriendRequestStatus(string id)")
  fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
  fmt.Fprintln(os.Stderr, "   getFavoriteMids()")
  fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsInvited()")
  fmt.Fprintln(os.Stderr, "   getGroupIdsJoined()")
  fmt.Fprintln(os.Stderr, "   getGroups( groupIds)")
  fmt.Fprintln(os.Stderr, "   getHiddenContactMids()")
  fmt.Fprintln(os.Stderr, "  string getIdentityIdentifier()")
  fmt.Fprintln(os.Stderr, "  i32 getLastAnnouncementIndex()")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "  SuggestDictionaryRevisions getSuggestRevisions()")
  fmt.Fprintln(os.Stderr, "   getPreviousMessagesV2WithReadCount(string messageBoxId, MessageBoxV2MessageId endMessageId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  TMessageBox getMessageBox(string channelId, string messageBoxId, i32 lastMessagesCount)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUp getMessageBoxCompactWrapUp(string mid)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(i32 start, i32 messageBoxCount)")
  fmt.Fprintln(os.Stderr, "   getMessageBoxList(string channelId, i32 lastMessagesCount)")
  fmt.Fprintln(os.Stderr, "   getMessageBoxListByStatus(string channelId, i32 lastMessagesCount, i32 status)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUp getMessageBoxWrapUp(string mid)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUpResponse getMessageBoxWrapUpList(i32 start, i32 messageBoxCount)")
  fmt.Fprintln(os.Stderr, "   getMessagesBySequenceNumber(string channelId, string messageBoxId, i64 startSeq, i64 endSeq)")
  fmt.Fprintln(os.Stderr, "   getNextMessages(string messageBoxId, i64 startSeq, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "   getNotificationPolicy(CarrierCode carrier)")
  fmt.Fprintln(os.Stderr, "   getPreviousMessages(string messageBoxId, i64 endSeq, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile()")
  fmt.Fprintln(os.Stderr, "  ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getProximityMatchCandidates(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getRecentMessages(string messageBoxId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds()")
  fmt.Fprintln(os.Stderr, "  Room getRoom(string roomId)")
  fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "   getSessions()")
  fmt.Fprintln(os.Stderr, "  Settings getSettings()")
  fmt.Fprintln(os.Stderr, "   getGroupsV2( groupIds)")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes(i32 attrBitset)")
  fmt.Fprintln(os.Stderr, "  SystemConfiguration getSystemConfiguration()")
  fmt.Fprintln(os.Stderr, "  Ticket getUserTicket()")
  fmt.Fprintln(os.Stderr, "  WapInvitation getWapInvitation(string invitationHash)")
  fmt.Fprintln(os.Stderr, "  void invalidateUserTicket()")
  fmt.Fprintln(os.Stderr, "  void inviteFriendsBySms( phoneNumberList)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void inviteViaEmail(i32 reqSeq, string email, string name)")
  fmt.Fprintln(os.Stderr, "  bool isIdentityIdentifierAvailable(IdentityProvider provider, string identifier)")
  fmt.Fprintln(os.Stderr, "  bool isUseridAvailable(string userid)")
  fmt.Fprintln(os.Stderr, "  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string reissueGroupTicket(string groupMid)")
  fmt.Fprintln(os.Stderr, "  Group findGroupByTicket(string ticketId)")
  fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr, "  string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)")
  fmt.Fprintln(os.Stderr, "  LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)")
  fmt.Fprintln(os.Stderr, "  string loginWithVerifier(string verifier)")
  fmt.Fprintln(os.Stderr, "  LoginResult loginWithVerifierForCerificate(string verifier)")
  fmt.Fprintln(os.Stderr, "  LoginResult loginWithVerifierForCertificate(string verifier)")
  fmt.Fprintln(os.Stderr, "  void logout()")
  fmt.Fprintln(os.Stderr, "  void logoutSession(string tokenKey)")
  fmt.Fprintln(os.Stderr, "  void noop()")
  fmt.Fprintln(os.Stderr, "  void notifiedRedirect( paramMap)")
  fmt.Fprintln(os.Stderr, "   notifyBuddyOnAir(i32 seq,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void notifyIndividualEvent(NotificationStatus notificationStatus,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void notifyInstalled(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  void notifySleep(i64 lastRev, i32 badge)")
  fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string openProximityMatch(Location location)")
  fmt.Fprintln(os.Stderr, "  string registerBuddyUser(string buddyId, string registrarPassword)")
  fmt.Fprintln(os.Stderr, "  void registerBuddyUserid(i32 seq, string userid)")
  fmt.Fprintln(os.Stderr, "  string registerDevice(string sessionId)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  bool registerUserid(i32 reqSeq, string userid)")
  fmt.Fprintln(os.Stderr, "  string registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)")
  fmt.Fprintln(os.Stderr, "  string registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string reissueDeviceCredential()")
  fmt.Fprintln(os.Stderr, "  string reissueUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "   getMessageReadRange( chatIds)")
  fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void releaseSession()")
  fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void removeBuddyLocation(string mid, i32 index)")
  fmt.Fprintln(os.Stderr, "  bool removeMessage(string messageId)")
  fmt.Fprintln(os.Stderr, "  ContactTransition makeUserAddMyselfAsContact(string contactOwnerMid)")
  fmt.Fprintln(os.Stderr, "  bool removeMessageFromMyHome(string messageId)")
  fmt.Fprintln(os.Stderr, "  string removeSnsId(SnsIdType snsIdType)")
  fmt.Fprintln(os.Stderr, "  void report(i64 syncOpRevision, SyncCategory category, string report)")
  fmt.Fprintln(os.Stderr, "   reportContacts(i64 syncOpRevision, SyncCategory category,  contactReports, SyncActionType actionType)")
  fmt.Fprintln(os.Stderr, "  void reportGroups(i64 syncOpRevision,  groups)")
  fmt.Fprintln(os.Stderr, "  void reportProfile(i64 syncOpRevision, Profile profile)")
  fmt.Fprintln(os.Stderr, "  void reportRooms(i64 syncOpRevision,  rooms)")
  fmt.Fprintln(os.Stderr, "  Contact findAndAddContactByMetaTag(i32 reqSeq, string userid, string reference)")
  fmt.Fprintln(os.Stderr, "  void reportSettings(i64 syncOpRevision, Settings settings)")
  fmt.Fprintln(os.Stderr, "  void reportSpam(string chatMid,  memberMids,  spammerReasons,  senderMids,  spamMessageIds,  spamMessages)")
  fmt.Fprintln(os.Stderr, "  void reportSpammer(string spammerMid,  spammerReasons,  spamMessageIds)")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)")
  fmt.Fprintln(os.Stderr, "  EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation)")
  fmt.Fprintln(os.Stderr, "  void requestIdentityUnbind(IdentityProvider provider, string identifier)")
  fmt.Fprintln(os.Stderr, "  EmailConfirmationSession resendEmailConfirmation(string verifier)")
  fmt.Fprintln(os.Stderr, "  void resendPinCode(string sessionId)")
  fmt.Fprintln(os.Stderr, "  void resendPinCodeBySMS(string sessionId)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string consumer, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  CommitMessageResult sendMessageAwaitCommit(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string consumer, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "   sendContentPreviewUpdated(i32 esq, string messageId,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void sendContentReceipt(i32 seq, string consumer, string messageId)")
  fmt.Fprintln(os.Stderr, "  void sendDummyPush()")
  fmt.Fprintln(os.Stderr, "  void removeE2EEPublicKey(E2EEPublicKey publicKey)")
  fmt.Fprintln(os.Stderr, "  E2EENegotiationResult negotiateE2EEPublicKey(string mid)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey getE2EEPublicKey(string mid, i32 version, i32 keyId)")
  fmt.Fprintln(os.Stderr, "  void requestE2EEKeyExchange(i32 reqSeq, string temporalPublicKey, E2EEPublicKey publicKey, string verifier)")
  fmt.Fprintln(os.Stderr, "   getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey registerE2EEPublicKey(i32 reqSeq, E2EEPublicKey publicKey)")
  fmt.Fprintln(os.Stderr, "   getE2EEPublicKeys()")
  fmt.Fprintln(os.Stderr, "   getE2EEPublicKeysEx(bool ignoreE2EEStatus)")
  fmt.Fprintln(os.Stderr, "   getReadMessageOpsInBulk( chatIds)")
  fmt.Fprintln(os.Stderr, "  Message sendEvent(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void sendMessageIgnored(i32 seq, string consumer,  messageIds)")
  fmt.Fprintln(os.Stderr, "  void sendMessageReceipt(i32 seq, string consumer,  messageIds)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByMetaTag(string userid, string reference)")
  fmt.Fprintln(os.Stderr, "  Message sendMessageToMyHome(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void setBuddyLocation(string mid, i32 index, Geolocation location)")
  fmt.Fprintln(os.Stderr, "  void setIdentityCredential(string identifier, string verifier, IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "  void setNotificationsEnabled(i32 reqSeq, MIDType type, string target, bool enablement)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void updateGroupPreferenceAttribute(i32 reqSeq, string groupMid,  updatedAttrs)")
  fmt.Fprintln(os.Stderr, "  Room createRoomV2(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void storeUpdateProfileAttribute(i32 seq, ProfileAttribute profileAttribute, string value)")
  fmt.Fprintln(os.Stderr, "   syncContactBySnsIds(i32 reqSeq,  modifications)")
  fmt.Fprintln(os.Stderr, "   syncContacts(i32 reqSeq,  localContacts)")
  fmt.Fprintln(os.Stderr, "  Message trySendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "   getNextMessagesV2(string messageBoxId, MessageBoxV2MessageId startMessageId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUp getMessageBoxCompactWrapUpV2(string messageBoxId)")
  fmt.Fprintln(os.Stderr, "   getRecentMessagesV2(string messageBoxId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "   validateContactsOnBot( contacts)")
  fmt.Fprintln(os.Stderr, "  void tryFriendRequest(string midOrEMid, FriendRequestMethod method, string friendRequestParams)")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  void updateApnsDeviceToken(string apnsDeviceToken)")
  fmt.Fprintln(os.Stderr, "  void updateBuddySetting(string key, string value)")
  fmt.Fprintln(os.Stderr, "  void updateC2DMRegistrationId(string registrationId)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
  fmt.Fprintln(os.Stderr, "  void updateCustomModeSettings(CustomMode customMode,  paramMap)")
  fmt.Fprintln(os.Stderr, "  void updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, Group group)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationTokenWithBytes(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  void updateProfile(i32 reqSeq, Profile profile)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttributes(i32 reqSeq, UpdateProfileAttributesRequest request)")
  fmt.Fprintln(os.Stderr, "  void updateRegion(string region)")
  fmt.Fprintln(os.Stderr, "  void updateSettings(i32 reqSeq, Settings settings)")
  fmt.Fprintln(os.Stderr, "  i32 updateSettings2(i32 reqSeq, Settings settings)")
  fmt.Fprintln(os.Stderr, "  void updateSettingsAttribute(i32 reqSeq, SettingsAttribute attr, string value)")
  fmt.Fprintln(os.Stderr, "  i32 updateSettingsAttributes(i32 reqSeq, i32 attrBitset, Settings settings)")
  fmt.Fprintln(os.Stderr, "  void verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password)")
  fmt.Fprintln(os.Stderr, "  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential)")
  fmt.Fprintln(os.Stderr, "  VerificationResult verifyPhone(string sessionId, string pinCode, string udidHash)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "searchCollection":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SearchCollection requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1724 := flag.Arg(2)
    mbTrans1725 := thrift.NewTMemoryBufferLen(len(arg1724))
    defer mbTrans1725.Close()
    _, err1726 := mbTrans1725.WriteString(arg1724)
    if err1726 != nil {
      Usage()
      return
    }
    factory1727 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1728 := factory1727.GetProtocol(mbTrans1725)
    argvalue1 := line.NewSearchPagingParameter()
    err1729 := argvalue1.Read(jsProt1728)
    if err1729 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SearchCollection(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncementsBulk":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncementsBulk requires 1 args")
      flag.Usage()
    }
    arg1730 := flag.Arg(1)
    mbTrans1731 := thrift.NewTMemoryBufferLen(len(arg1730))
    defer mbTrans1731.Close()
    _, err1732 := mbTrans1731.WriteString(arg1730)
    if err1732 != nil { 
      Usage()
      return
    }
    factory1733 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1734 := factory1733.GetProtocol(mbTrans1731)
    containerStruct0 := line.NewTalkServiceGetChatRoomAnnouncementsBulkArgs()
    err1735 := containerStruct0.ReadField1(jsProt1734)
    if err1735 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatRoomMids
    value0 := argvalue0
    fmt.Print(client.GetChatRoomAnnouncementsBulk(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncements":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncements requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetChatRoomAnnouncements(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChatRoomAnnouncement":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CreateChatRoomAnnouncement requires 4 args")
      flag.Usage()
    }
    tmp0, err1737 := (strconv.Atoi(flag.Arg(1)))
    if err1737 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ChatRoomAnnouncementType(tmp2)
    value2 := argvalue2
    arg1739 := flag.Arg(4)
    mbTrans1740 := thrift.NewTMemoryBufferLen(len(arg1739))
    defer mbTrans1740.Close()
    _, err1741 := mbTrans1740.WriteString(arg1739)
    if err1741 != nil {
      Usage()
      return
    }
    factory1742 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1743 := factory1742.GetProtocol(mbTrans1740)
    argvalue3 := line.NewChatRoomAnnouncementContents()
    err1744 := argvalue3.Read(jsProt1743)
    if err1744 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.CreateChatRoomAnnouncement(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "removeChatRoomAnnouncement":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RemoveChatRoomAnnouncement requires 3 args")
      flag.Usage()
    }
    tmp0, err1745 := (strconv.Atoi(flag.Arg(1)))
    if err1745 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err1747 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1747 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RemoveChatRoomAnnouncement(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err1748 := (strconv.Atoi(flag.Arg(1)))
    if err1748 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getGroupWithoutMembers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupWithoutMembers requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupWithoutMembers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestResendMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestResendMessage requires 3 args")
      flag.Usage()
    }
    tmp0, err1751 := (strconv.Atoi(flag.Arg(1)))
    if err1751 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestResendMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "respondResendMessage":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RespondResendMessage requires 5 args")
      flag.Usage()
    }
    tmp0, err1754 := (strconv.Atoi(flag.Arg(1)))
    if err1754 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1757 := flag.Arg(4)
    mbTrans1758 := thrift.NewTMemoryBufferLen(len(arg1757))
    defer mbTrans1758.Close()
    _, err1759 := mbTrans1758.WriteString(arg1757)
    if err1759 != nil {
      Usage()
      return
    }
    factory1760 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1761 := factory1760.GetProtocol(mbTrans1758)
    argvalue3 := line.NewMessage()
    err1762 := argvalue3.Read(jsProt1761)
    if err1762 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := line.ErrorCode(tmp4)
    value4 := argvalue4
    fmt.Print(client.RespondResendMessage(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "acceptGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err1763 := (strconv.Atoi(flag.Arg(1)))
    if err1763 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AcceptGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acceptGroupInvitationByTicket":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitationByTicket requires 3 args")
      flag.Usage()
    }
    tmp0, err1765 := (strconv.Atoi(flag.Arg(1)))
    if err1765 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AcceptGroupInvitationByTicket(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "acceptProximityMatches":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptProximityMatches requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1769 := flag.Arg(2)
    mbTrans1770 := thrift.NewTMemoryBufferLen(len(arg1769))
    defer mbTrans1770.Close()
    _, err1771 := mbTrans1770.WriteString(arg1769)
    if err1771 != nil { 
      Usage()
      return
    }
    factory1772 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1773 := factory1772.GetProtocol(mbTrans1770)
    containerStruct1 := line.NewTalkServiceAcceptProximityMatchesArgs()
    err1774 := containerStruct1.ReadField2(jsProt1773)
    if err1774 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Ids
    value1 := argvalue1
    fmt.Print(client.AcceptProximityMatches(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acquireCallRoute":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireCallRoute requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AcquireCallRoute(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireCallTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireCallTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AcquireCallTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.FeatureType(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addSnsId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddSnsId requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddSnsId(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err1778 := (strconv.Atoi(flag.Arg(1)))
    if err1778 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err1780 := (strconv.Atoi(flag.Arg(1)))
    if err1780 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cancelGroupInvitation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CancelGroupInvitation requires 3 args")
      flag.Usage()
    }
    tmp0, err1782 := (strconv.Atoi(flag.Arg(1)))
    if err1782 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1784 := flag.Arg(3)
    mbTrans1785 := thrift.NewTMemoryBufferLen(len(arg1784))
    defer mbTrans1785.Close()
    _, err1786 := mbTrans1785.WriteString(arg1784)
    if err1786 != nil { 
      Usage()
      return
    }
    factory1787 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1788 := factory1787.GetProtocol(mbTrans1785)
    containerStruct2 := line.NewTalkServiceCancelGroupInvitationArgs()
    err1789 := containerStruct2.ReadField3(jsProt1788)
    if err1789 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CancelGroupInvitation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "changeVerificationMethod":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangeVerificationMethod requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.VerificationMethod(tmp1)
    value1 := argvalue1
    fmt.Print(client.ChangeVerificationMethod(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "clearIdentityCredential":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ClearIdentityCredential requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ClearIdentityCredential(context.Background()))
    fmt.Print("\n")
    break
  case "clearMessageBox":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ClearMessageBox requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ClearMessageBox(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "closeProximityMatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseProximityMatch requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CloseProximityMatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitSendMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CommitSendMessage requires 3 args")
      flag.Usage()
    }
    tmp0, err1794 := (strconv.Atoi(flag.Arg(1)))
    if err1794 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1796 := flag.Arg(3)
    mbTrans1797 := thrift.NewTMemoryBufferLen(len(arg1796))
    defer mbTrans1797.Close()
    _, err1798 := mbTrans1797.WriteString(arg1796)
    if err1798 != nil { 
      Usage()
      return
    }
    factory1799 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1800 := factory1799.GetProtocol(mbTrans1797)
    containerStruct2 := line.NewTalkServiceCommitSendMessageArgs()
    err1801 := containerStruct2.ReadField3(jsProt1800)
    if err1801 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.CommitSendMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "commitSendMessages":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CommitSendMessages requires 3 args")
      flag.Usage()
    }
    tmp0, err1802 := (strconv.Atoi(flag.Arg(1)))
    if err1802 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1803 := flag.Arg(2)
    mbTrans1804 := thrift.NewTMemoryBufferLen(len(arg1803))
    defer mbTrans1804.Close()
    _, err1805 := mbTrans1804.WriteString(arg1803)
    if err1805 != nil { 
      Usage()
      return
    }
    factory1806 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1807 := factory1806.GetProtocol(mbTrans1804)
    containerStruct1 := line.NewTalkServiceCommitSendMessagesArgs()
    err1808 := containerStruct1.ReadField2(jsProt1807)
    if err1808 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MessageIds
    value1 := argvalue1
    arg1809 := flag.Arg(3)
    mbTrans1810 := thrift.NewTMemoryBufferLen(len(arg1809))
    defer mbTrans1810.Close()
    _, err1811 := mbTrans1810.WriteString(arg1809)
    if err1811 != nil { 
      Usage()
      return
    }
    factory1812 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1813 := factory1812.GetProtocol(mbTrans1810)
    containerStruct2 := line.NewTalkServiceCommitSendMessagesArgs()
    err1814 := containerStruct2.ReadField3(jsProt1813)
    if err1814 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.CommitSendMessages(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "commitUpdateProfile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CommitUpdateProfile requires 3 args")
      flag.Usage()
    }
    tmp0, err1815 := (strconv.Atoi(flag.Arg(1)))
    if err1815 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1816 := flag.Arg(2)
    mbTrans1817 := thrift.NewTMemoryBufferLen(len(arg1816))
    defer mbTrans1817.Close()
    _, err1818 := mbTrans1817.WriteString(arg1816)
    if err1818 != nil { 
      Usage()
      return
    }
    factory1819 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1820 := factory1819.GetProtocol(mbTrans1817)
    containerStruct1 := line.NewTalkServiceCommitUpdateProfileArgs()
    err1821 := containerStruct1.ReadField2(jsProt1820)
    if err1821 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attrs
    value1 := argvalue1
    arg1822 := flag.Arg(3)
    mbTrans1823 := thrift.NewTMemoryBufferLen(len(arg1822))
    defer mbTrans1823.Close()
    _, err1824 := mbTrans1823.WriteString(arg1822)
    if err1824 != nil { 
      Usage()
      return
    }
    factory1825 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1826 := factory1825.GetProtocol(mbTrans1823)
    containerStruct2 := line.NewTalkServiceCommitUpdateProfileArgs()
    err1827 := containerStruct2.ReadField3(jsProt1826)
    if err1827 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.CommitUpdateProfile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "confirmEmail":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ConfirmEmail requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ConfirmEmail(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err1830 := (strconv.Atoi(flag.Arg(1)))
    if err1830 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1832 := flag.Arg(3)
    mbTrans1833 := thrift.NewTMemoryBufferLen(len(arg1832))
    defer mbTrans1833.Close()
    _, err1834 := mbTrans1833.WriteString(arg1832)
    if err1834 != nil { 
      Usage()
      return
    }
    factory1835 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1836 := factory1835.GetProtocol(mbTrans1833)
    containerStruct2 := line.NewTalkServiceCreateGroupArgs()
    err1837 := containerStruct2.ReadField3(jsProt1836)
    if err1837 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CreateGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createQrcodeBase64Image":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "CreateQrcodeBase64Image requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1840 := (strconv.Atoi(flag.Arg(3)))
    if err1840 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err1841 := (strconv.Atoi(flag.Arg(4)))
    if err1841 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err1842 := (strconv.Atoi(flag.Arg(5)))
    if err1842 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err1843 := (strconv.Atoi(flag.Arg(6)))
    if err1843 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    tmp6, err1844 := (strconv.Atoi(flag.Arg(7)))
    if err1844 != nil {
      Usage()
      return
    }
    argvalue6 := int32(tmp6)
    value6 := argvalue6
    fmt.Print(client.CreateQrcodeBase64Image(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "createRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err1845 := (strconv.Atoi(flag.Arg(1)))
    if err1845 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1846 := flag.Arg(2)
    mbTrans1847 := thrift.NewTMemoryBufferLen(len(arg1846))
    defer mbTrans1847.Close()
    _, err1848 := mbTrans1847.WriteString(arg1846)
    if err1848 != nil { 
      Usage()
      return
    }
    factory1849 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1850 := factory1849.GetProtocol(mbTrans1847)
    containerStruct1 := line.NewTalkServiceCreateRoomArgs()
    err1851 := containerStruct1.ReadField2(jsProt1850)
    if err1851 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createSession":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CreateSession requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CreateSession(context.Background()))
    fmt.Print("\n")
    break
  case "fetchAnnouncements":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchAnnouncements requires 1 args")
      flag.Usage()
    }
    tmp0, err1852 := (strconv.Atoi(flag.Arg(1)))
    if err1852 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.FetchAnnouncements(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchMessages requires 2 args")
      flag.Usage()
    }
    argvalue0, err1853 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1853 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1854 := (strconv.Atoi(flag.Arg(2)))
    if err1854 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "fetchOperations":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
      flag.Usage()
    }
    argvalue0, err1855 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1855 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1856 := (strconv.Atoi(flag.Arg(2)))
    if err1856 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchOperations(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err1857 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1857 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1858 := (strconv.Atoi(flag.Arg(2)))
    if err1858 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err1859 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1859 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1860 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1860 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactsByEmail":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByEmail requires 2 args")
      flag.Usage()
    }
    tmp0, err1861 := (strconv.Atoi(flag.Arg(1)))
    if err1861 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1862 := flag.Arg(2)
    mbTrans1863 := thrift.NewTMemoryBufferLen(len(arg1862))
    defer mbTrans1863.Close()
    _, err1864 := mbTrans1863.WriteString(arg1862)
    if err1864 != nil { 
      Usage()
      return
    }
    factory1865 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1866 := factory1865.GetProtocol(mbTrans1863)
    containerStruct1 := line.NewTalkServiceFindAndAddContactsByEmailArgs()
    err1867 := containerStruct1.ReadField2(jsProt1866)
    if err1867 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Emails
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByEmail(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err1868 := (strconv.Atoi(flag.Arg(1)))
    if err1868 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ContactType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findGroupByTicketV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindGroupByTicketV2 requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindGroupByTicketV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 2 args")
      flag.Usage()
    }
    tmp0, err1872 := (strconv.Atoi(flag.Arg(1)))
    if err1872 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1873 := flag.Arg(2)
    mbTrans1874 := thrift.NewTMemoryBufferLen(len(arg1873))
    defer mbTrans1874.Close()
    _, err1875 := mbTrans1874.WriteString(arg1873)
    if err1875 != nil { 
      Usage()
      return
    }
    factory1876 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1877 := factory1876.GetProtocol(mbTrans1874)
    containerStruct1 := line.NewTalkServiceFindAndAddContactsByPhoneArgs()
    err1878 := containerStruct1.ReadField2(jsProt1877)
    if err1878 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getFriendRequests":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFriendRequests requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.FriendRequestDirection(tmp0)
    value0 := argvalue0
    argvalue1, err1879 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1879 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetFriendRequests(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeFriendRequest":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveFriendRequest requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.FriendRequestDirection(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveFriendRequest(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err1881 := (strconv.Atoi(flag.Arg(1)))
    if err1881 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactsByEmail":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByEmail requires 1 args")
      flag.Usage()
    }
    arg1885 := flag.Arg(1)
    mbTrans1886 := thrift.NewTMemoryBufferLen(len(arg1885))
    defer mbTrans1886.Close()
    _, err1887 := mbTrans1886.WriteString(arg1885)
    if err1887 != nil { 
      Usage()
      return
    }
    factory1888 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1889 := factory1888.GetProtocol(mbTrans1886)
    containerStruct0 := line.NewTalkServiceFindContactsByEmailArgs()
    err1890 := containerStruct0.ReadField1(jsProt1889)
    if err1890 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Emails
    value0 := argvalue0
    fmt.Print(client.FindContactsByEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactsByPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
      flag.Usage()
    }
    arg1891 := flag.Arg(1)
    mbTrans1892 := thrift.NewTMemoryBufferLen(len(arg1891))
    defer mbTrans1892.Close()
    _, err1893 := mbTrans1892.WriteString(arg1891)
    if err1893 != nil { 
      Usage()
      return
    }
    factory1894 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1895 := factory1894.GetProtocol(mbTrans1892)
    containerStruct0 := line.NewTalkServiceFindContactsByPhoneArgs()
    err1896 := containerStruct0.ReadField1(jsProt1895)
    if err1896 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Phones
    value0 := argvalue0
    fmt.Print(client.FindContactsByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findSnsIdUserStatus":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindSnsIdUserStatus requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindSnsIdUserStatus(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "finishUpdateVerification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FinishUpdateVerification requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FinishUpdateVerification(context.Background(), value0))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err1900 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1900 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1901 := (strconv.Atoi(flag.Arg(2)))
    if err1901 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "destroyMessage":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DestroyMessage requires 4 args")
      flag.Usage()
    }
    tmp0, err1902 := (strconv.Atoi(flag.Arg(1)))
    if err1902 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1905 := (strconv.Atoi(flag.Arg(4)))
    if err1905 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    fmt.Print(client.DestroyMessage(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getAcceptedProximityMatches":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAcceptedProximityMatches requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAcceptedProximityMatches(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getActiveBuddySubscriberIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveBuddySubscriberIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveBuddySubscriberIds(context.Background()))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "getAuthQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAuthQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAuthQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "registerWithPhoneNumber":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterWithPhoneNumber requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterWithPhoneNumber(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerWithPhoneNumberAndPassword":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RegisterWithPhoneNumberAndPassword requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RegisterWithPhoneNumberAndPassword(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAnalyticsInfo":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAnalyticsInfo requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAnalyticsInfo(context.Background()))
    fmt.Print("\n")
    break
  case "reportClientStatistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReportClientStatistics requires 3 args")
      flag.Usage()
    }
    tmp0, err1914 := (strconv.Atoi(flag.Arg(1)))
    if err1914 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.ReportCategory(tmp1)
    value1 := argvalue1
    tmp2, err1915 := (strconv.Atoi(flag.Arg(3)))
    if err1915 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.ReportClientStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyPhoneNumberForLogin":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumberForLogin requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.VerifyPhoneNumberForLogin(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyPhoneNumber":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumber requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.VerifyPhoneNumber(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "getBlockedContactIdsByRange":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIdsByRange requires 2 args")
      flag.Usage()
    }
    tmp0, err1924 := (strconv.Atoi(flag.Arg(1)))
    if err1924 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1925 := (strconv.Atoi(flag.Arg(2)))
    if err1925 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetBlockedContactIdsByRange(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBuddyBlockerIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBuddyBlockerIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBuddyBlockerIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBuddyLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetBuddyLocation requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1927 := (strconv.Atoi(flag.Arg(2)))
    if err1927 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetBuddyLocation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getCompactContactsModifiedSince":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactContactsModifiedSince requires 1 args")
      flag.Usage()
    }
    argvalue0, err1928 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1928 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCompactContactsModifiedSince(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCompactGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCompactRoom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactRoom requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactRoom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg1932 := flag.Arg(1)
    mbTrans1933 := thrift.NewTMemoryBufferLen(len(arg1932))
    defer mbTrans1933.Close()
    _, err1934 := mbTrans1933.WriteString(arg1932)
    if err1934 != nil { 
      Usage()
      return
    }
    factory1935 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1936 := factory1935.GetProtocol(mbTrans1933)
    containerStruct0 := line.NewTalkServiceGetContactsArgs()
    err1937 := containerStruct0.ReadField1(jsProt1936)
    if err1937 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContactWithFriendRequestStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContactWithFriendRequestStatus requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContactWithFriendRequestStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCountryWithRequestIp":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCountryWithRequestIp(context.Background()))
    fmt.Print("\n")
    break
  case "getFavoriteMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFavoriteMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFavoriteMids(context.Background()))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupIdsInvited":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetGroupIdsInvited(context.Background()))
    fmt.Print("\n")
    break
  case "getGroupIdsJoined":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetGroupIdsJoined(context.Background()))
    fmt.Print("\n")
    break
  case "getGroups":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroups requires 1 args")
      flag.Usage()
    }
    arg1940 := flag.Arg(1)
    mbTrans1941 := thrift.NewTMemoryBufferLen(len(arg1940))
    defer mbTrans1941.Close()
    _, err1942 := mbTrans1941.WriteString(arg1940)
    if err1942 != nil { 
      Usage()
      return
    }
    factory1943 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1944 := factory1943.GetProtocol(mbTrans1941)
    containerStruct0 := line.NewTalkServiceGetGroupsArgs()
    err1945 := containerStruct0.ReadField1(jsProt1944)
    if err1945 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupIds
    value0 := argvalue0
    fmt.Print(client.GetGroups(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getHiddenContactMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetHiddenContactMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetHiddenContactMids(context.Background()))
    fmt.Print("\n")
    break
  case "getIdentityIdentifier":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetIdentityIdentifier requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetIdentityIdentifier(context.Background()))
    fmt.Print("\n")
    break
  case "getLastAnnouncementIndex":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastAnnouncementIndex requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastAnnouncementIndex(context.Background()))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "getSuggestRevisions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSuggestRevisions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSuggestRevisions(context.Background()))
    fmt.Print("\n")
    break
  case "getPreviousMessagesV2WithReadCount":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPreviousMessagesV2WithReadCount requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1947 := flag.Arg(2)
    mbTrans1948 := thrift.NewTMemoryBufferLen(len(arg1947))
    defer mbTrans1948.Close()
    _, err1949 := mbTrans1948.WriteString(arg1947)
    if err1949 != nil {
      Usage()
      return
    }
    factory1950 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1951 := factory1950.GetProtocol(mbTrans1948)
    argvalue1 := line.NewMessageBoxV2MessageId()
    err1952 := argvalue1.Read(jsProt1951)
    if err1952 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err1953 := (strconv.Atoi(flag.Arg(3)))
    if err1953 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPreviousMessagesV2WithReadCount(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBox":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetMessageBox requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1956 := (strconv.Atoi(flag.Arg(3)))
    if err1956 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMessageBox(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBoxCompactWrapUp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxCompactWrapUp requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMessageBoxCompactWrapUp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMessageBoxCompactWrapUpList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxCompactWrapUpList requires 2 args")
      flag.Usage()
    }
    tmp0, err1958 := (strconv.Atoi(flag.Arg(1)))
    if err1958 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1959 := (strconv.Atoi(flag.Arg(2)))
    if err1959 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxCompactWrapUpList(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageBoxList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxList requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1961 := (strconv.Atoi(flag.Arg(2)))
    if err1961 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxList(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageBoxListByStatus":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxListByStatus requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1963 := (strconv.Atoi(flag.Arg(2)))
    if err1963 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err1964 := (strconv.Atoi(flag.Arg(3)))
    if err1964 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMessageBoxListByStatus(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBoxWrapUp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxWrapUp requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMessageBoxWrapUp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMessageBoxWrapUpList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxWrapUpList requires 2 args")
      flag.Usage()
    }
    tmp0, err1966 := (strconv.Atoi(flag.Arg(1)))
    if err1966 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1967 := (strconv.Atoi(flag.Arg(2)))
    if err1967 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxWrapUpList(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessagesBySequenceNumber":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetMessagesBySequenceNumber requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err1970 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1970 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1971 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1971 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.GetMessagesBySequenceNumber(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getNextMessages":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNextMessages requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err1973 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1973 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err1974 := (strconv.Atoi(flag.Arg(3)))
    if err1974 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNextMessages(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNotificationPolicy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotificationPolicy requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.CarrierCode(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetNotificationPolicy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPreviousMessages":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPreviousMessages requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err1976 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1976 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err1977 := (strconv.Atoi(flag.Arg(3)))
    if err1977 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPreviousMessages(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetProfile(context.Background()))
    fmt.Print("\n")
    break
  case "getProximityMatchCandidateList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProximityMatchCandidateList requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetProximityMatchCandidateList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProximityMatchCandidates":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProximityMatchCandidates requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetProximityMatchCandidates(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecentMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetRecentMessages requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1981 := (strconv.Atoi(flag.Arg(2)))
    if err1981 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetRecentMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getRoom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoom requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRoom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRSAKeyInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRSAKeyInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "getSessions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSessions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSessions(context.Background()))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSettings(context.Background()))
    fmt.Print("\n")
    break
  case "getGroupsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupsV2 requires 1 args")
      flag.Usage()
    }
    arg1983 := flag.Arg(1)
    mbTrans1984 := thrift.NewTMemoryBufferLen(len(arg1983))
    defer mbTrans1984.Close()
    _, err1985 := mbTrans1984.WriteString(arg1983)
    if err1985 != nil { 
      Usage()
      return
    }
    factory1986 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1987 := factory1986.GetProtocol(mbTrans1984)
    containerStruct0 := line.NewTalkServiceGetGroupsV2Args()
    err1988 := containerStruct0.ReadField1(jsProt1987)
    if err1988 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupIds
    value0 := argvalue0
    fmt.Print(client.GetGroupsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes requires 1 args")
      flag.Usage()
    }
    tmp0, err1989 := (strconv.Atoi(flag.Arg(1)))
    if err1989 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSystemConfiguration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSystemConfiguration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSystemConfiguration(context.Background()))
    fmt.Print("\n")
    break
  case "getUserTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserTicket(context.Background()))
    fmt.Print("\n")
    break
  case "getWapInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetWapInvitation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetWapInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "invalidateUserTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "InvalidateUserTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.InvalidateUserTicket(context.Background()))
    fmt.Print("\n")
    break
  case "inviteFriendsBySms":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteFriendsBySms requires 1 args")
      flag.Usage()
    }
    arg1991 := flag.Arg(1)
    mbTrans1992 := thrift.NewTMemoryBufferLen(len(arg1991))
    defer mbTrans1992.Close()
    _, err1993 := mbTrans1992.WriteString(arg1991)
    if err1993 != nil { 
      Usage()
      return
    }
    factory1994 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1995 := factory1994.GetProtocol(mbTrans1992)
    containerStruct0 := line.NewTalkServiceInviteFriendsBySmsArgs()
    err1996 := containerStruct0.ReadField1(jsProt1995)
    if err1996 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PhoneNumberList
    value0 := argvalue0
    fmt.Print(client.InviteFriendsBySms(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err1997 := (strconv.Atoi(flag.Arg(1)))
    if err1997 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1999 := flag.Arg(3)
    mbTrans2000 := thrift.NewTMemoryBufferLen(len(arg1999))
    defer mbTrans2000.Close()
    _, err2001 := mbTrans2000.WriteString(arg1999)
    if err2001 != nil { 
      Usage()
      return
    }
    factory2002 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2003 := factory2002.GetProtocol(mbTrans2000)
    containerStruct2 := line.NewTalkServiceInviteIntoGroupArgs()
    err2004 := containerStruct2.ReadField3(jsProt2003)
    if err2004 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err2005 := (strconv.Atoi(flag.Arg(1)))
    if err2005 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2007 := flag.Arg(3)
    mbTrans2008 := thrift.NewTMemoryBufferLen(len(arg2007))
    defer mbTrans2008.Close()
    _, err2009 := mbTrans2008.WriteString(arg2007)
    if err2009 != nil { 
      Usage()
      return
    }
    factory2010 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2011 := factory2010.GetProtocol(mbTrans2008)
    containerStruct2 := line.NewTalkServiceInviteIntoRoomArgs()
    err2012 := containerStruct2.ReadField3(jsProt2011)
    if err2012 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "inviteViaEmail":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteViaEmail requires 3 args")
      flag.Usage()
    }
    tmp0, err2013 := (strconv.Atoi(flag.Arg(1)))
    if err2013 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.InviteViaEmail(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "isIdentityIdentifierAvailable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IsIdentityIdentifierAvailable requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.IsIdentityIdentifierAvailable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "isUseridAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsUseridAvailable requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsUseridAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "kickoutFromGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KickoutFromGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err2018 := (strconv.Atoi(flag.Arg(1)))
    if err2018 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2020 := flag.Arg(3)
    mbTrans2021 := thrift.NewTMemoryBufferLen(len(arg2020))
    defer mbTrans2021.Close()
    _, err2022 := mbTrans2021.WriteString(arg2020)
    if err2022 != nil { 
      Usage()
      return
    }
    factory2023 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2024 := factory2023.GetProtocol(mbTrans2021)
    containerStruct2 := line.NewTalkServiceKickoutFromGroupArgs()
    err2025 := containerStruct2.ReadField3(jsProt2024)
    if err2025 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.KickoutFromGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reissueGroupTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueGroupTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ReissueGroupTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findGroupByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindGroupByTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindGroupByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "leaveGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err2028 := (strconv.Atoi(flag.Arg(1)))
    if err2028 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err2030 := (strconv.Atoi(flag.Arg(1)))
    if err2030 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "loginWithIdentityCredential":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "LoginWithIdentityCredential requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.LoginWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "loginWithIdentityCredentialForCertificate":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "LoginWithIdentityCredentialForCertificate requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.LoginWithIdentityCredentialForCertificate(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "loginWithVerifier":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginWithVerifier requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LoginWithVerifier(context.Background(), value0))
    fmt.Print("\n")
    break
  case "loginWithVerifierForCerificate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginWithVerifierForCerificate requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LoginWithVerifierForCerificate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "loginWithVerifierForCertificate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginWithVerifierForCertificate requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LoginWithVerifierForCertificate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "logout":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Logout requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Logout(context.Background()))
    fmt.Print("\n")
    break
  case "logoutSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LogoutSession requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LogoutSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "noop":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Noop requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Noop(context.Background()))
    fmt.Print("\n")
    break
  case "notifiedRedirect":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NotifiedRedirect requires 1 args")
      flag.Usage()
    }
    arg2048 := flag.Arg(1)
    mbTrans2049 := thrift.NewTMemoryBufferLen(len(arg2048))
    defer mbTrans2049.Close()
    _, err2050 := mbTrans2049.WriteString(arg2048)
    if err2050 != nil { 
      Usage()
      return
    }
    factory2051 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2052 := factory2051.GetProtocol(mbTrans2049)
    containerStruct0 := line.NewTalkServiceNotifiedRedirectArgs()
    err2053 := containerStruct0.ReadField1(jsProt2052)
    if err2053 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ParamMap
    value0 := argvalue0
    fmt.Print(client.NotifiedRedirect(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyBuddyOnAir":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyBuddyOnAir requires 2 args")
      flag.Usage()
    }
    tmp0, err2054 := (strconv.Atoi(flag.Arg(1)))
    if err2054 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2055 := flag.Arg(2)
    mbTrans2056 := thrift.NewTMemoryBufferLen(len(arg2055))
    defer mbTrans2056.Close()
    _, err2057 := mbTrans2056.WriteString(arg2055)
    if err2057 != nil { 
      Usage()
      return
    }
    factory2058 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2059 := factory2058.GetProtocol(mbTrans2056)
    containerStruct1 := line.NewTalkServiceNotifyBuddyOnAirArgs()
    err2060 := containerStruct1.ReadField2(jsProt2059)
    if err2060 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ReceiverMids
    value1 := argvalue1
    fmt.Print(client.NotifyBuddyOnAir(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyIndividualEvent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyIndividualEvent requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationStatus(tmp0)
    value0 := argvalue0
    arg2061 := flag.Arg(2)
    mbTrans2062 := thrift.NewTMemoryBufferLen(len(arg2061))
    defer mbTrans2062.Close()
    _, err2063 := mbTrans2062.WriteString(arg2061)
    if err2063 != nil { 
      Usage()
      return
    }
    factory2064 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2065 := factory2064.GetProtocol(mbTrans2062)
    containerStruct1 := line.NewTalkServiceNotifyIndividualEventArgs()
    err2066 := containerStruct1.ReadField2(jsProt2065)
    if err2066 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ReceiverMids
    value1 := argvalue1
    fmt.Print(client.NotifyIndividualEvent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyInstalled":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyInstalled requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyInstalled(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyRegistrationComplete":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyRegistrationComplete requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyRegistrationComplete(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifySleep":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifySleep requires 2 args")
      flag.Usage()
    }
    argvalue0, err2071 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2071 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2072 := (strconv.Atoi(flag.Arg(2)))
    if err2072 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.NotifySleep(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyUpdated":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyUpdated requires 2 args")
      flag.Usage()
    }
    argvalue0, err2073 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2073 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2074 := flag.Arg(2)
    mbTrans2075 := thrift.NewTMemoryBufferLen(len(arg2074))
    defer mbTrans2075.Close()
    _, err2076 := mbTrans2075.WriteString(arg2074)
    if err2076 != nil {
      Usage()
      return
    }
    factory2077 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2078 := factory2077.GetProtocol(mbTrans2075)
    argvalue1 := line.NewDeviceInfo()
    err2079 := argvalue1.Read(jsProt2078)
    if err2079 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.NotifyUpdated(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openProximityMatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenProximityMatch requires 1 args")
      flag.Usage()
    }
    arg2080 := flag.Arg(1)
    mbTrans2081 := thrift.NewTMemoryBufferLen(len(arg2080))
    defer mbTrans2081.Close()
    _, err2082 := mbTrans2081.WriteString(arg2080)
    if err2082 != nil {
      Usage()
      return
    }
    factory2083 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2084 := factory2083.GetProtocol(mbTrans2081)
    argvalue0 := line.NewLocation()
    err2085 := argvalue0.Read(jsProt2084)
    if err2085 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenProximityMatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerBuddyUser":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterBuddyUser requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterBuddyUser(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerBuddyUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterBuddyUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err2088 := (strconv.Atoi(flag.Arg(1)))
    if err2088 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterBuddyUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerDevice":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterDevice requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RegisterDevice(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerDeviceWithIdentityCredential":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithIdentityCredential requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.IdentityProvider(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.RegisterDeviceWithIdentityCredential(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerDeviceWithoutPhoneNumber":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithoutPhoneNumber requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2096 := flag.Arg(3)
    mbTrans2097 := thrift.NewTMemoryBufferLen(len(arg2096))
    defer mbTrans2097.Close()
    _, err2098 := mbTrans2097.WriteString(arg2096)
    if err2098 != nil {
      Usage()
      return
    }
    factory2099 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2100 := factory2099.GetProtocol(mbTrans2097)
    argvalue2 := line.NewDeviceInfo()
    err2101 := argvalue2.Read(jsProt2100)
    if err2101 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RegisterDeviceWithoutPhoneNumber(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerDeviceWithoutPhoneNumberWithIdentityCredential":
    if flag.NArg() - 1 != 8 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithoutPhoneNumberWithIdentityCredential requires 8 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2104 := flag.Arg(3)
    mbTrans2105 := thrift.NewTMemoryBufferLen(len(arg2104))
    defer mbTrans2105.Close()
    _, err2106 := mbTrans2105.WriteString(arg2104)
    if err2106 != nil {
      Usage()
      return
    }
    factory2107 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2108 := factory2107.GetProtocol(mbTrans2105)
    argvalue2 := line.NewDeviceInfo()
    err2109 := argvalue2.Read(jsProt2108)
    if err2109 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := line.IdentityProvider(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7 := flag.Arg(8)
    value7 := argvalue7
    fmt.Print(client.RegisterDeviceWithoutPhoneNumberWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7))
    fmt.Print("\n")
    break
  case "registerUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err2114 := (strconv.Atoi(flag.Arg(1)))
    if err2114 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerWapDevice":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterWapDevice requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg2119 := flag.Arg(4)
    mbTrans2120 := thrift.NewTMemoryBufferLen(len(arg2119))
    defer mbTrans2120.Close()
    _, err2121 := mbTrans2120.WriteString(arg2119)
    if err2121 != nil {
      Usage()
      return
    }
    factory2122 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2123 := factory2122.GetProtocol(mbTrans2120)
    argvalue3 := line.NewDeviceInfo()
    err2124 := argvalue3.Read(jsProt2123)
    if err2124 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RegisterWapDevice(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerWithExistingSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterWithExistingSnsIdAndIdentityCredential requires 4 args")
      flag.Usage()
    }
    arg2125 := flag.Arg(1)
    mbTrans2126 := thrift.NewTMemoryBufferLen(len(arg2125))
    defer mbTrans2126.Close()
    _, err2127 := mbTrans2126.WriteString(arg2125)
    if err2127 != nil {
      Usage()
      return
    }
    factory2128 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2129 := factory2128.GetProtocol(mbTrans2126)
    argvalue0 := line.NewIdentityCredential()
    err2130 := argvalue0.Read(jsProt2129)
    if err2130 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg2133 := flag.Arg(4)
    mbTrans2134 := thrift.NewTMemoryBufferLen(len(arg2133))
    defer mbTrans2134.Close()
    _, err2135 := mbTrans2134.WriteString(arg2133)
    if err2135 != nil {
      Usage()
      return
    }
    factory2136 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2137 := factory2136.GetProtocol(mbTrans2134)
    argvalue3 := line.NewDeviceInfo()
    err2138 := argvalue3.Read(jsProt2137)
    if err2138 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RegisterWithExistingSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerWithSnsId":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsId requires 6 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg2142 := flag.Arg(5)
    mbTrans2143 := thrift.NewTMemoryBufferLen(len(arg2142))
    defer mbTrans2143.Close()
    _, err2144 := mbTrans2143.WriteString(arg2142)
    if err2144 != nil {
      Usage()
      return
    }
    factory2145 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2146 := factory2145.GetProtocol(mbTrans2143)
    argvalue4 := line.NewDeviceInfo()
    err2147 := argvalue4.Read(jsProt2146)
    if err2147 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    fmt.Print(client.RegisterWithSnsId(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "registerWithSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsIdAndIdentityCredential requires 6 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2150 := flag.Arg(3)
    mbTrans2151 := thrift.NewTMemoryBufferLen(len(arg2150))
    defer mbTrans2151.Close()
    _, err2152 := mbTrans2151.WriteString(arg2150)
    if err2152 != nil {
      Usage()
      return
    }
    factory2153 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2154 := factory2153.GetProtocol(mbTrans2151)
    argvalue2 := line.NewIdentityCredential()
    err2155 := argvalue2.Read(jsProt2154)
    if err2155 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg2158 := flag.Arg(6)
    mbTrans2159 := thrift.NewTMemoryBufferLen(len(arg2158))
    defer mbTrans2159.Close()
    _, err2160 := mbTrans2159.WriteString(arg2158)
    if err2160 != nil {
      Usage()
      return
    }
    factory2161 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2162 := factory2161.GetProtocol(mbTrans2159)
    argvalue5 := line.NewDeviceInfo()
    err2163 := argvalue5.Read(jsProt2162)
    if err2163 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.RegisterWithSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "reissueDeviceCredential":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReissueDeviceCredential requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReissueDeviceCredential(context.Background()))
    fmt.Print("\n")
    break
  case "reissueUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReissueUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err2164 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2164 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2165 := (strconv.Atoi(flag.Arg(2)))
    if err2165 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.ReissueUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageReadRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageReadRange requires 1 args")
      flag.Usage()
    }
    arg2166 := flag.Arg(1)
    mbTrans2167 := thrift.NewTMemoryBufferLen(len(arg2166))
    defer mbTrans2167.Close()
    _, err2168 := mbTrans2167.WriteString(arg2166)
    if err2168 != nil { 
      Usage()
      return
    }
    factory2169 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2170 := factory2169.GetProtocol(mbTrans2167)
    containerStruct0 := line.NewTalkServiceGetMessageReadRangeArgs()
    err2171 := containerStruct0.ReadField1(jsProt2170)
    if err2171 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatIds
    value0 := argvalue0
    fmt.Print(client.GetMessageReadRange(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err2172 := (strconv.Atoi(flag.Arg(1)))
    if err2172 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RejectGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "releaseSession":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReleaseSession requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReleaseSession(context.Background()))
    fmt.Print("\n")
    break
  case "removeAllMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
      flag.Usage()
    }
    tmp0, err2174 := (strconv.Atoi(flag.Arg(1)))
    if err2174 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveAllMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeBuddyLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveBuddyLocation requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err2177 := (strconv.Atoi(flag.Arg(2)))
    if err2177 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.RemoveBuddyLocation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeMessage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMessage requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveMessage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "makeUserAddMyselfAsContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MakeUserAddMyselfAsContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.MakeUserAddMyselfAsContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeMessageFromMyHome":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMessageFromMyHome requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveMessageFromMyHome(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeSnsId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveSnsId requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveSnsId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "report":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Report requires 3 args")
      flag.Usage()
    }
    argvalue0, err2181 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2181 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.SyncCategory(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.Report(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reportContacts":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ReportContacts requires 4 args")
      flag.Usage()
    }
    argvalue0, err2183 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2183 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.SyncCategory(tmp1)
    value1 := argvalue1
    arg2184 := flag.Arg(3)
    mbTrans2185 := thrift.NewTMemoryBufferLen(len(arg2184))
    defer mbTrans2185.Close()
    _, err2186 := mbTrans2185.WriteString(arg2184)
    if err2186 != nil { 
      Usage()
      return
    }
    factory2187 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2188 := factory2187.GetProtocol(mbTrans2185)
    containerStruct2 := line.NewTalkServiceReportContactsArgs()
    err2189 := containerStruct2.ReadField3(jsProt2188)
    if err2189 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactReports
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := line.SyncActionType(tmp3)
    value3 := argvalue3
    fmt.Print(client.ReportContacts(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "reportGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportGroups requires 2 args")
      flag.Usage()
    }
    argvalue0, err2190 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2190 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2191 := flag.Arg(2)
    mbTrans2192 := thrift.NewTMemoryBufferLen(len(arg2191))
    defer mbTrans2192.Close()
    _, err2193 := mbTrans2192.WriteString(arg2191)
    if err2193 != nil { 
      Usage()
      return
    }
    factory2194 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2195 := factory2194.GetProtocol(mbTrans2192)
    containerStruct1 := line.NewTalkServiceReportGroupsArgs()
    err2196 := containerStruct1.ReadField2(jsProt2195)
    if err2196 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Groups
    value1 := argvalue1
    fmt.Print(client.ReportGroups(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportProfile requires 2 args")
      flag.Usage()
    }
    argvalue0, err2197 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2197 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2198 := flag.Arg(2)
    mbTrans2199 := thrift.NewTMemoryBufferLen(len(arg2198))
    defer mbTrans2199.Close()
    _, err2200 := mbTrans2199.WriteString(arg2198)
    if err2200 != nil {
      Usage()
      return
    }
    factory2201 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2202 := factory2201.GetProtocol(mbTrans2199)
    argvalue1 := line.NewProfile()
    err2203 := argvalue1.Read(jsProt2202)
    if err2203 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ReportProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportRooms":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportRooms requires 2 args")
      flag.Usage()
    }
    argvalue0, err2204 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2204 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2205 := flag.Arg(2)
    mbTrans2206 := thrift.NewTMemoryBufferLen(len(arg2205))
    defer mbTrans2206.Close()
    _, err2207 := mbTrans2206.WriteString(arg2205)
    if err2207 != nil { 
      Usage()
      return
    }
    factory2208 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2209 := factory2208.GetProtocol(mbTrans2206)
    containerStruct1 := line.NewTalkServiceReportRoomsArgs()
    err2210 := containerStruct1.ReadField2(jsProt2209)
    if err2210 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rooms
    value1 := argvalue1
    fmt.Print(client.ReportRooms(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactByMetaTag":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactByMetaTag requires 3 args")
      flag.Usage()
    }
    tmp0, err2211 := (strconv.Atoi(flag.Arg(1)))
    if err2211 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactByMetaTag(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reportSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportSettings requires 2 args")
      flag.Usage()
    }
    argvalue0, err2214 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2214 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2215 := flag.Arg(2)
    mbTrans2216 := thrift.NewTMemoryBufferLen(len(arg2215))
    defer mbTrans2216.Close()
    _, err2217 := mbTrans2216.WriteString(arg2215)
    if err2217 != nil {
      Usage()
      return
    }
    factory2218 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2219 := factory2218.GetProtocol(mbTrans2216)
    argvalue1 := line.NewSettings()
    err2220 := argvalue1.Read(jsProt2219)
    if err2220 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ReportSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportSpam":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "ReportSpam requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2222 := flag.Arg(2)
    mbTrans2223 := thrift.NewTMemoryBufferLen(len(arg2222))
    defer mbTrans2223.Close()
    _, err2224 := mbTrans2223.WriteString(arg2222)
    if err2224 != nil { 
      Usage()
      return
    }
    factory2225 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2226 := factory2225.GetProtocol(mbTrans2223)
    containerStruct1 := line.NewTalkServiceReportSpamArgs()
    err2227 := containerStruct1.ReadField2(jsProt2226)
    if err2227 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MemberMids
    value1 := argvalue1
    arg2228 := flag.Arg(3)
    mbTrans2229 := thrift.NewTMemoryBufferLen(len(arg2228))
    defer mbTrans2229.Close()
    _, err2230 := mbTrans2229.WriteString(arg2228)
    if err2230 != nil { 
      Usage()
      return
    }
    factory2231 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2232 := factory2231.GetProtocol(mbTrans2229)
    containerStruct2 := line.NewTalkServiceReportSpamArgs()
    err2233 := containerStruct2.ReadField3(jsProt2232)
    if err2233 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.SpammerReasons
    value2 := argvalue2
    arg2234 := flag.Arg(4)
    mbTrans2235 := thrift.NewTMemoryBufferLen(len(arg2234))
    defer mbTrans2235.Close()
    _, err2236 := mbTrans2235.WriteString(arg2234)
    if err2236 != nil { 
      Usage()
      return
    }
    factory2237 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2238 := factory2237.GetProtocol(mbTrans2235)
    containerStruct3 := line.NewTalkServiceReportSpamArgs()
    err2239 := containerStruct3.ReadField4(jsProt2238)
    if err2239 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.SenderMids
    value3 := argvalue3
    arg2240 := flag.Arg(5)
    mbTrans2241 := thrift.NewTMemoryBufferLen(len(arg2240))
    defer mbTrans2241.Close()
    _, err2242 := mbTrans2241.WriteString(arg2240)
    if err2242 != nil { 
      Usage()
      return
    }
    factory2243 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2244 := factory2243.GetProtocol(mbTrans2241)
    containerStruct4 := line.NewTalkServiceReportSpamArgs()
    err2245 := containerStruct4.ReadField5(jsProt2244)
    if err2245 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.SpamMessageIds
    value4 := argvalue4
    arg2246 := flag.Arg(6)
    mbTrans2247 := thrift.NewTMemoryBufferLen(len(arg2246))
    defer mbTrans2247.Close()
    _, err2248 := mbTrans2247.WriteString(arg2246)
    if err2248 != nil { 
      Usage()
      return
    }
    factory2249 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2250 := factory2249.GetProtocol(mbTrans2247)
    containerStruct5 := line.NewTalkServiceReportSpamArgs()
    err2251 := containerStruct5.ReadField6(jsProt2250)
    if err2251 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.SpamMessages
    value5 := argvalue5
    fmt.Print(client.ReportSpam(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "reportSpammer":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReportSpammer requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2253 := flag.Arg(2)
    mbTrans2254 := thrift.NewTMemoryBufferLen(len(arg2253))
    defer mbTrans2254.Close()
    _, err2255 := mbTrans2254.WriteString(arg2253)
    if err2255 != nil { 
      Usage()
      return
    }
    factory2256 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2257 := factory2256.GetProtocol(mbTrans2254)
    containerStruct1 := line.NewTalkServiceReportSpammerArgs()
    err2258 := containerStruct1.ReadField2(jsProt2257)
    if err2258 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.SpammerReasons
    value1 := argvalue1
    arg2259 := flag.Arg(3)
    mbTrans2260 := thrift.NewTMemoryBufferLen(len(arg2259))
    defer mbTrans2260.Close()
    _, err2261 := mbTrans2260.WriteString(arg2259)
    if err2261 != nil { 
      Usage()
      return
    }
    factory2262 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2263 := factory2262.GetProtocol(mbTrans2260)
    containerStruct2 := line.NewTalkServiceReportSpammerArgs()
    err2264 := containerStruct2.ReadField3(jsProt2263)
    if err2264 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.SpamMessageIds
    value2 := argvalue2
    fmt.Print(client.ReportSpammer(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "requestEmailConfirmation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestEmailConfirmation requires 1 args")
      flag.Usage()
    }
    arg2267 := flag.Arg(1)
    mbTrans2268 := thrift.NewTMemoryBufferLen(len(arg2267))
    defer mbTrans2268.Close()
    _, err2269 := mbTrans2268.WriteString(arg2267)
    if err2269 != nil {
      Usage()
      return
    }
    factory2270 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2271 := factory2270.GetProtocol(mbTrans2268)
    argvalue0 := line.NewEmailConfirmation()
    err2272 := argvalue0.Read(jsProt2271)
    if err2272 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequestEmailConfirmation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestIdentityUnbind":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequestIdentityUnbind requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RequestIdentityUnbind(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "resendEmailConfirmation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendEmailConfirmation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendEmailConfirmation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "resendPinCode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendPinCode requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendPinCode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "resendPinCodeBySMS":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendPinCodeBySMS requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendPinCodeBySMS(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 3 args")
      flag.Usage()
    }
    tmp0, err2277 := (strconv.Atoi(flag.Arg(1)))
    if err2277 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendMessageAwaitCommit":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessageAwaitCommit requires 2 args")
      flag.Usage()
    }
    tmp0, err2280 := (strconv.Atoi(flag.Arg(1)))
    if err2280 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2281 := flag.Arg(2)
    mbTrans2282 := thrift.NewTMemoryBufferLen(len(arg2281))
    defer mbTrans2282.Close()
    _, err2283 := mbTrans2282.WriteString(arg2281)
    if err2283 != nil {
      Usage()
      return
    }
    factory2284 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2285 := factory2284.GetProtocol(mbTrans2282)
    argvalue1 := line.NewMessage()
    err2286 := argvalue1.Read(jsProt2285)
    if err2286 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessageAwaitCommit(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 3 args")
      flag.Usage()
    }
    tmp0, err2287 := (strconv.Atoi(flag.Arg(1)))
    if err2287 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendContentPreviewUpdated":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendContentPreviewUpdated requires 3 args")
      flag.Usage()
    }
    tmp0, err2290 := (strconv.Atoi(flag.Arg(1)))
    if err2290 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2292 := flag.Arg(3)
    mbTrans2293 := thrift.NewTMemoryBufferLen(len(arg2292))
    defer mbTrans2293.Close()
    _, err2294 := mbTrans2293.WriteString(arg2292)
    if err2294 != nil { 
      Usage()
      return
    }
    factory2295 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2296 := factory2295.GetProtocol(mbTrans2293)
    containerStruct2 := line.NewTalkServiceSendContentPreviewUpdatedArgs()
    err2297 := containerStruct2.ReadField3(jsProt2296)
    if err2297 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.SendContentPreviewUpdated(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendContentReceipt":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendContentReceipt requires 3 args")
      flag.Usage()
    }
    tmp0, err2298 := (strconv.Atoi(flag.Arg(1)))
    if err2298 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendContentReceipt(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendDummyPush":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "SendDummyPush requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.SendDummyPush(context.Background()))
    fmt.Print("\n")
    break
  case "removeE2EEPublicKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveE2EEPublicKey requires 1 args")
      flag.Usage()
    }
    arg2301 := flag.Arg(1)
    mbTrans2302 := thrift.NewTMemoryBufferLen(len(arg2301))
    defer mbTrans2302.Close()
    _, err2303 := mbTrans2302.WriteString(arg2301)
    if err2303 != nil {
      Usage()
      return
    }
    factory2304 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2305 := factory2304.GetProtocol(mbTrans2302)
    argvalue0 := line.NewE2EEPublicKey()
    err2306 := argvalue0.Read(jsProt2305)
    if err2306 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveE2EEPublicKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "negotiateE2EEPublicKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NegotiateE2EEPublicKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.NegotiateE2EEPublicKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err2309 := (strconv.Atoi(flag.Arg(2)))
    if err2309 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err2310 := (strconv.Atoi(flag.Arg(3)))
    if err2310 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "requestE2EEKeyExchange":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RequestE2EEKeyExchange requires 4 args")
      flag.Usage()
    }
    tmp0, err2311 := (strconv.Atoi(flag.Arg(1)))
    if err2311 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    arg2313 := flag.Arg(3)
    mbTrans2314 := thrift.NewTMemoryBufferLen(len(arg2313))
    defer mbTrans2314.Close()
    _, err2315 := mbTrans2314.WriteString(arg2313)
    if err2315 != nil {
      Usage()
      return
    }
    factory2316 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2317 := factory2316.GetProtocol(mbTrans2314)
    argvalue2 := line.NewE2EEPublicKey()
    err2318 := argvalue2.Read(jsProt2317)
    if err2318 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.RequestE2EEKeyExchange(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerE2EEPublicKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEPublicKey requires 2 args")
      flag.Usage()
    }
    tmp0, err2321 := (strconv.Atoi(flag.Arg(1)))
    if err2321 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2322 := flag.Arg(2)
    mbTrans2323 := thrift.NewTMemoryBufferLen(len(arg2322))
    defer mbTrans2323.Close()
    _, err2324 := mbTrans2323.WriteString(arg2322)
    if err2324 != nil {
      Usage()
      return
    }
    factory2325 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2326 := factory2325.GetProtocol(mbTrans2323)
    argvalue1 := line.NewE2EEPublicKey()
    err2327 := argvalue1.Read(jsProt2326)
    if err2327 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterE2EEPublicKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEPublicKeys":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKeys requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetE2EEPublicKeys(context.Background()))
    fmt.Print("\n")
    break
  case "getE2EEPublicKeysEx":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKeysEx requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.GetE2EEPublicKeysEx(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getReadMessageOpsInBulk":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetReadMessageOpsInBulk requires 1 args")
      flag.Usage()
    }
    arg2329 := flag.Arg(1)
    mbTrans2330 := thrift.NewTMemoryBufferLen(len(arg2329))
    defer mbTrans2330.Close()
    _, err2331 := mbTrans2330.WriteString(arg2329)
    if err2331 != nil { 
      Usage()
      return
    }
    factory2332 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2333 := factory2332.GetProtocol(mbTrans2330)
    containerStruct0 := line.NewTalkServiceGetReadMessageOpsInBulkArgs()
    err2334 := containerStruct0.ReadField1(jsProt2333)
    if err2334 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatIds
    value0 := argvalue0
    fmt.Print(client.GetReadMessageOpsInBulk(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendEvent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendEvent requires 2 args")
      flag.Usage()
    }
    tmp0, err2335 := (strconv.Atoi(flag.Arg(1)))
    if err2335 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2336 := flag.Arg(2)
    mbTrans2337 := thrift.NewTMemoryBufferLen(len(arg2336))
    defer mbTrans2337.Close()
    _, err2338 := mbTrans2337.WriteString(arg2336)
    if err2338 != nil {
      Usage()
      return
    }
    factory2339 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2340 := factory2339.GetProtocol(mbTrans2337)
    argvalue1 := line.NewMessage()
    err2341 := argvalue1.Read(jsProt2340)
    if err2341 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendEvent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err2342 := (strconv.Atoi(flag.Arg(1)))
    if err2342 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2343 := flag.Arg(2)
    mbTrans2344 := thrift.NewTMemoryBufferLen(len(arg2343))
    defer mbTrans2344.Close()
    _, err2345 := mbTrans2344.WriteString(arg2343)
    if err2345 != nil {
      Usage()
      return
    }
    factory2346 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2347 := factory2346.GetProtocol(mbTrans2344)
    argvalue1 := line.NewMessage()
    err2348 := argvalue1.Read(jsProt2347)
    if err2348 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendMessageIgnored":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendMessageIgnored requires 3 args")
      flag.Usage()
    }
    tmp0, err2349 := (strconv.Atoi(flag.Arg(1)))
    if err2349 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2351 := flag.Arg(3)
    mbTrans2352 := thrift.NewTMemoryBufferLen(len(arg2351))
    defer mbTrans2352.Close()
    _, err2353 := mbTrans2352.WriteString(arg2351)
    if err2353 != nil { 
      Usage()
      return
    }
    factory2354 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2355 := factory2354.GetProtocol(mbTrans2352)
    containerStruct2 := line.NewTalkServiceSendMessageIgnoredArgs()
    err2356 := containerStruct2.ReadField3(jsProt2355)
    if err2356 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.MessageIds
    value2 := argvalue2
    fmt.Print(client.SendMessageIgnored(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendMessageReceipt":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendMessageReceipt requires 3 args")
      flag.Usage()
    }
    tmp0, err2357 := (strconv.Atoi(flag.Arg(1)))
    if err2357 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2359 := flag.Arg(3)
    mbTrans2360 := thrift.NewTMemoryBufferLen(len(arg2359))
    defer mbTrans2360.Close()
    _, err2361 := mbTrans2360.WriteString(arg2359)
    if err2361 != nil { 
      Usage()
      return
    }
    factory2362 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2363 := factory2362.GetProtocol(mbTrans2360)
    containerStruct2 := line.NewTalkServiceSendMessageReceiptArgs()
    err2364 := containerStruct2.ReadField3(jsProt2363)
    if err2364 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.MessageIds
    value2 := argvalue2
    fmt.Print(client.SendMessageReceipt(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findContactByMetaTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindContactByMetaTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindContactByMetaTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendMessageToMyHome":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessageToMyHome requires 2 args")
      flag.Usage()
    }
    tmp0, err2367 := (strconv.Atoi(flag.Arg(1)))
    if err2367 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2368 := flag.Arg(2)
    mbTrans2369 := thrift.NewTMemoryBufferLen(len(arg2368))
    defer mbTrans2369.Close()
    _, err2370 := mbTrans2369.WriteString(arg2368)
    if err2370 != nil {
      Usage()
      return
    }
    factory2371 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2372 := factory2371.GetProtocol(mbTrans2369)
    argvalue1 := line.NewMessage()
    err2373 := argvalue1.Read(jsProt2372)
    if err2373 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessageToMyHome(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setBuddyLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetBuddyLocation requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err2375 := (strconv.Atoi(flag.Arg(2)))
    if err2375 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg2376 := flag.Arg(3)
    mbTrans2377 := thrift.NewTMemoryBufferLen(len(arg2376))
    defer mbTrans2377.Close()
    _, err2378 := mbTrans2377.WriteString(arg2376)
    if err2378 != nil {
      Usage()
      return
    }
    factory2379 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2380 := factory2379.GetProtocol(mbTrans2377)
    argvalue2 := line.NewGeolocation()
    err2381 := argvalue2.Read(jsProt2380)
    if err2381 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetBuddyLocation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setIdentityCredential":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetIdentityCredential requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.IdentityProvider(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetIdentityCredential(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setNotificationsEnabled":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetNotificationsEnabled requires 4 args")
      flag.Usage()
    }
    tmp0, err2384 := (strconv.Atoi(flag.Arg(1)))
    if err2384 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.MIDType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.SetNotificationsEnabled(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "startUpdateVerification":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "StartUpdateVerification requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.CarrierCode(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg2390 := flag.Arg(5)
    mbTrans2391 := thrift.NewTMemoryBufferLen(len(arg2390))
    defer mbTrans2391.Close()
    _, err2392 := mbTrans2391.WriteString(arg2390)
    if err2392 != nil {
      Usage()
      return
    }
    factory2393 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2394 := factory2393.GetProtocol(mbTrans2391)
    argvalue4 := line.NewDeviceInfo()
    err2395 := argvalue4.Read(jsProt2394)
    if err2395 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.StartUpdateVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "startVerification":
    if flag.NArg() - 1 != 10 {
      fmt.Fprintln(os.Stderr, "StartVerification requires 10 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.CarrierCode(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg2401 := flag.Arg(5)
    mbTrans2402 := thrift.NewTMemoryBufferLen(len(arg2401))
    defer mbTrans2402.Close()
    _, err2403 := mbTrans2402.WriteString(arg2401)
    if err2403 != nil {
      Usage()
      return
    }
    factory2404 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2405 := factory2404.GetProtocol(mbTrans2402)
    argvalue4 := line.NewDeviceInfo()
    err2406 := argvalue4.Read(jsProt2405)
    if err2406 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7 := flag.Arg(8)
    value7 := argvalue7
    arg2410 := flag.Arg(9)
    mbTrans2411 := thrift.NewTMemoryBufferLen(len(arg2410))
    defer mbTrans2411.Close()
    _, err2412 := mbTrans2411.WriteString(arg2410)
    if err2412 != nil {
      Usage()
      return
    }
    factory2413 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2414 := factory2413.GetProtocol(mbTrans2411)
    argvalue8 := line.NewSIMInfo()
    err2415 := argvalue8.Read(jsProt2414)
    if err2415 != nil {
      Usage()
      return
    }
    value8 := argvalue8
    argvalue9 := flag.Arg(10)
    value9 := argvalue9
    fmt.Print(client.StartVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9))
    fmt.Print("\n")
    break
  case "updateGroupPreferenceAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateGroupPreferenceAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err2417 := (strconv.Atoi(flag.Arg(1)))
    if err2417 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2419 := flag.Arg(3)
    mbTrans2420 := thrift.NewTMemoryBufferLen(len(arg2419))
    defer mbTrans2420.Close()
    _, err2421 := mbTrans2420.WriteString(arg2419)
    if err2421 != nil { 
      Usage()
      return
    }
    factory2422 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2423 := factory2422.GetProtocol(mbTrans2420)
    containerStruct2 := line.NewTalkServiceUpdateGroupPreferenceAttributeArgs()
    err2424 := containerStruct2.ReadField3(jsProt2423)
    if err2424 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.UpdatedAttrs
    value2 := argvalue2
    fmt.Print(client.UpdateGroupPreferenceAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createRoomV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoomV2 requires 2 args")
      flag.Usage()
    }
    tmp0, err2425 := (strconv.Atoi(flag.Arg(1)))
    if err2425 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2426 := flag.Arg(2)
    mbTrans2427 := thrift.NewTMemoryBufferLen(len(arg2426))
    defer mbTrans2427.Close()
    _, err2428 := mbTrans2427.WriteString(arg2426)
    if err2428 != nil { 
      Usage()
      return
    }
    factory2429 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2430 := factory2429.GetProtocol(mbTrans2427)
    containerStruct1 := line.NewTalkServiceCreateRoomV2Args()
    err2431 := containerStruct1.ReadField2(jsProt2430)
    if err2431 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoomV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "storeUpdateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "StoreUpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err2432 := (strconv.Atoi(flag.Arg(1)))
    if err2432 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.StoreUpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "syncContactBySnsIds":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContactBySnsIds requires 2 args")
      flag.Usage()
    }
    tmp0, err2434 := (strconv.Atoi(flag.Arg(1)))
    if err2434 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2435 := flag.Arg(2)
    mbTrans2436 := thrift.NewTMemoryBufferLen(len(arg2435))
    defer mbTrans2436.Close()
    _, err2437 := mbTrans2436.WriteString(arg2435)
    if err2437 != nil { 
      Usage()
      return
    }
    factory2438 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2439 := factory2438.GetProtocol(mbTrans2436)
    containerStruct1 := line.NewTalkServiceSyncContactBySnsIdsArgs()
    err2440 := containerStruct1.ReadField2(jsProt2439)
    if err2440 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Modifications
    value1 := argvalue1
    fmt.Print(client.SyncContactBySnsIds(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "syncContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContacts requires 2 args")
      flag.Usage()
    }
    tmp0, err2441 := (strconv.Atoi(flag.Arg(1)))
    if err2441 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2442 := flag.Arg(2)
    mbTrans2443 := thrift.NewTMemoryBufferLen(len(arg2442))
    defer mbTrans2443.Close()
    _, err2444 := mbTrans2443.WriteString(arg2442)
    if err2444 != nil { 
      Usage()
      return
    }
    factory2445 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2446 := factory2445.GetProtocol(mbTrans2443)
    containerStruct1 := line.NewTalkServiceSyncContactsArgs()
    err2447 := containerStruct1.ReadField2(jsProt2446)
    if err2447 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.LocalContacts
    value1 := argvalue1
    fmt.Print(client.SyncContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "trySendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TrySendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err2448 := (strconv.Atoi(flag.Arg(1)))
    if err2448 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2449 := flag.Arg(2)
    mbTrans2450 := thrift.NewTMemoryBufferLen(len(arg2449))
    defer mbTrans2450.Close()
    _, err2451 := mbTrans2450.WriteString(arg2449)
    if err2451 != nil {
      Usage()
      return
    }
    factory2452 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2453 := factory2452.GetProtocol(mbTrans2450)
    argvalue1 := line.NewMessage()
    err2454 := argvalue1.Read(jsProt2453)
    if err2454 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.TrySendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNextMessagesV2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNextMessagesV2 requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2456 := flag.Arg(2)
    mbTrans2457 := thrift.NewTMemoryBufferLen(len(arg2456))
    defer mbTrans2457.Close()
    _, err2458 := mbTrans2457.WriteString(arg2456)
    if err2458 != nil {
      Usage()
      return
    }
    factory2459 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2460 := factory2459.GetProtocol(mbTrans2457)
    argvalue1 := line.NewMessageBoxV2MessageId()
    err2461 := argvalue1.Read(jsProt2460)
    if err2461 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2462 := (strconv.Atoi(flag.Arg(3)))
    if err2462 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNextMessagesV2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBoxCompactWrapUpV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxCompactWrapUpV2 requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMessageBoxCompactWrapUpV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecentMessagesV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetRecentMessagesV2 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err2465 := (strconv.Atoi(flag.Arg(2)))
    if err2465 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetRecentMessagesV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "validateContactsOnBot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ValidateContactsOnBot requires 1 args")
      flag.Usage()
    }
    arg2466 := flag.Arg(1)
    mbTrans2467 := thrift.NewTMemoryBufferLen(len(arg2466))
    defer mbTrans2467.Close()
    _, err2468 := mbTrans2467.WriteString(arg2466)
    if err2468 != nil { 
      Usage()
      return
    }
    factory2469 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2470 := factory2469.GetProtocol(mbTrans2467)
    containerStruct0 := line.NewTalkServiceValidateContactsOnBotArgs()
    err2471 := containerStruct0.ReadField1(jsProt2470)
    if err2471 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Contacts
    value0 := argvalue0
    fmt.Print(client.ValidateContactsOnBot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "tryFriendRequest":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TryFriendRequest requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.FriendRequestMethod(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TryFriendRequest(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err2474 := (strconv.Atoi(flag.Arg(1)))
    if err2474 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err2476 := (strconv.Atoi(flag.Arg(1)))
    if err2476 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "updateApnsDeviceToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateApnsDeviceToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.UpdateApnsDeviceToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateBuddySetting":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddySetting requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateBuddySetting(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateC2DMRegistrationId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateC2DMRegistrationId requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UpdateC2DMRegistrationId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err2482 := (strconv.Atoi(flag.Arg(1)))
    if err2482 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ContactSetting(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateCustomModeSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateCustomModeSettings requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.CustomMode(tmp0)
    value0 := argvalue0
    arg2485 := flag.Arg(2)
    mbTrans2486 := thrift.NewTMemoryBufferLen(len(arg2485))
    defer mbTrans2486.Close()
    _, err2487 := mbTrans2486.WriteString(arg2485)
    if err2487 != nil { 
      Usage()
      return
    }
    factory2488 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2489 := factory2488.GetProtocol(mbTrans2486)
    containerStruct1 := line.NewTalkServiceUpdateCustomModeSettingsArgs()
    err2490 := containerStruct1.ReadField2(jsProt2489)
    if err2490 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ParamMap
    value1 := argvalue1
    fmt.Print(client.UpdateCustomModeSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateDeviceInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateDeviceInfo requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2492 := flag.Arg(2)
    mbTrans2493 := thrift.NewTMemoryBufferLen(len(arg2492))
    defer mbTrans2493.Close()
    _, err2494 := mbTrans2493.WriteString(arg2492)
    if err2494 != nil {
      Usage()
      return
    }
    factory2495 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2496 := factory2495.GetProtocol(mbTrans2493)
    argvalue1 := line.NewDeviceInfo()
    err2497 := argvalue1.Read(jsProt2496)
    if err2497 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateDeviceInfo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err2498 := (strconv.Atoi(flag.Arg(1)))
    if err2498 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2499 := flag.Arg(2)
    mbTrans2500 := thrift.NewTMemoryBufferLen(len(arg2499))
    defer mbTrans2500.Close()
    _, err2501 := mbTrans2500.WriteString(arg2499)
    if err2501 != nil {
      Usage()
      return
    }
    factory2502 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2503 := factory2502.GetProtocol(mbTrans2500)
    argvalue1 := line.NewGroup()
    err2504 := argvalue1.Read(jsProt2503)
    if err2504 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotificationTokenWithBytes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationTokenWithBytes requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationTokenWithBytes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfile requires 2 args")
      flag.Usage()
    }
    tmp0, err2507 := (strconv.Atoi(flag.Arg(1)))
    if err2507 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2508 := flag.Arg(2)
    mbTrans2509 := thrift.NewTMemoryBufferLen(len(arg2508))
    defer mbTrans2509.Close()
    _, err2510 := mbTrans2509.WriteString(arg2508)
    if err2510 != nil {
      Usage()
      return
    }
    factory2511 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2512 := factory2511.GetProtocol(mbTrans2509)
    argvalue1 := line.NewProfile()
    err2513 := argvalue1.Read(jsProt2512)
    if err2513 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err2514 := (strconv.Atoi(flag.Arg(1)))
    if err2514 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateProfileAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttributes requires 2 args")
      flag.Usage()
    }
    tmp0, err2516 := (strconv.Atoi(flag.Arg(1)))
    if err2516 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2517 := flag.Arg(2)
    mbTrans2518 := thrift.NewTMemoryBufferLen(len(arg2517))
    defer mbTrans2518.Close()
    _, err2519 := mbTrans2518.WriteString(arg2517)
    if err2519 != nil {
      Usage()
      return
    }
    factory2520 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2521 := factory2520.GetProtocol(mbTrans2518)
    argvalue1 := line.NewUpdateProfileAttributesRequest()
    err2522 := argvalue1.Read(jsProt2521)
    if err2522 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfileAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateRegion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateRegion requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UpdateRegion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSettings requires 2 args")
      flag.Usage()
    }
    tmp0, err2524 := (strconv.Atoi(flag.Arg(1)))
    if err2524 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2525 := flag.Arg(2)
    mbTrans2526 := thrift.NewTMemoryBufferLen(len(arg2525))
    defer mbTrans2526.Close()
    _, err2527 := mbTrans2526.WriteString(arg2525)
    if err2527 != nil {
      Usage()
      return
    }
    factory2528 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2529 := factory2528.GetProtocol(mbTrans2526)
    argvalue1 := line.NewSettings()
    err2530 := argvalue1.Read(jsProt2529)
    if err2530 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSettings2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSettings2 requires 2 args")
      flag.Usage()
    }
    tmp0, err2531 := (strconv.Atoi(flag.Arg(1)))
    if err2531 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2532 := flag.Arg(2)
    mbTrans2533 := thrift.NewTMemoryBufferLen(len(arg2532))
    defer mbTrans2533.Close()
    _, err2534 := mbTrans2533.WriteString(arg2532)
    if err2534 != nil {
      Usage()
      return
    }
    factory2535 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2536 := factory2535.GetProtocol(mbTrans2533)
    argvalue1 := line.NewSettings()
    err2537 := argvalue1.Read(jsProt2536)
    if err2537 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSettings2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSettingsAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err2538 := (strconv.Atoi(flag.Arg(1)))
    if err2538 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.SettingsAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes requires 3 args")
      flag.Usage()
    }
    tmp0, err2540 := (strconv.Atoi(flag.Arg(1)))
    if err2540 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2541 := (strconv.Atoi(flag.Arg(2)))
    if err2541 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg2542 := flag.Arg(3)
    mbTrans2543 := thrift.NewTMemoryBufferLen(len(arg2542))
    defer mbTrans2543.Close()
    _, err2544 := mbTrans2543.WriteString(arg2542)
    if err2544 != nil {
      Usage()
      return
    }
    factory2545 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2546 := factory2545.GetProtocol(mbTrans2543)
    argvalue2 := line.NewSettings()
    err2547 := argvalue2.Read(jsProt2546)
    if err2547 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredential":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredential requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.VerifyIdentityCredential(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredentialWithResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredentialWithResult_ requires 1 args")
      flag.Usage()
    }
    arg2550 := flag.Arg(1)
    mbTrans2551 := thrift.NewTMemoryBufferLen(len(arg2550))
    defer mbTrans2551.Close()
    _, err2552 := mbTrans2551.WriteString(arg2550)
    if err2552 != nil {
      Usage()
      return
    }
    factory2553 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2554 := factory2553.GetProtocol(mbTrans2551)
    argvalue0 := line.NewIdentityCredential()
    err2555 := argvalue0.Read(jsProt2554)
    if err2555 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.VerifyIdentityCredentialWithResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyPhone":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyPhone requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.VerifyPhone(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
