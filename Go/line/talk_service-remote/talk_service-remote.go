// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncementsBulk( chatRoomMids)")
  fmt.Fprintln(os.Stderr, "   getChatRoomAnnouncements(string chatRoomMid)")
  fmt.Fprintln(os.Stderr, "  ChatRoomAnnouncement createChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents)")
  fmt.Fprintln(os.Stderr, "  void removeChatRoomAnnouncement(i32 reqSeq, string chatRoomMid, i64 announcementSeq)")
  fmt.Fprintln(os.Stderr, "  void unsendMessage(i32 seq, string messageId)")
  fmt.Fprintln(os.Stderr, "  Group getGroupWithoutMembers(string groupId)")
  fmt.Fprintln(os.Stderr, "  void requestResendMessage(i32 reqSeq, string senderMid, string messageId)")
  fmt.Fprintln(os.Stderr, "  void respondResendMessage(i32 reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void acceptGroupInvitationByTicket(i32 reqSeq, string GroupMid, string ticketId)")
  fmt.Fprintln(os.Stderr, "  void acceptProximityMatches(string sessionId,  ids)")
  fmt.Fprintln(os.Stderr, "   acquireCallRoute(string to)")
  fmt.Fprintln(os.Stderr, "  string acquireCallTicket(string to)")
  fmt.Fprintln(os.Stderr, "  string acquireEncryptedAccessToken(FeatureType featureType)")
  fmt.Fprintln(os.Stderr, "  string addSnsId(SnsIdType snsIdType, string snsAccessToken)")
  fmt.Fprintln(os.Stderr, "  void blockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void blockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void cancelGroupInvitation(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)")
  fmt.Fprintln(os.Stderr, "  void clearIdentityCredential()")
  fmt.Fprintln(os.Stderr, "  void clearMessageBox(string channelId, string messageBoxId)")
  fmt.Fprintln(os.Stderr, "  void closeProximityMatch(string sessionId)")
  fmt.Fprintln(os.Stderr, "   commitSendMessage(i32 seq, string messageId,  receiverMids)")
  fmt.Fprintln(os.Stderr, "   commitSendMessages(i32 seq,  messageIds,  receiverMids)")
  fmt.Fprintln(os.Stderr, "   commitUpdateProfile(i32 seq,  attrs,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void confirmEmail(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr, "  Group createGroup(i32 seq, string name,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string createQrcodeBase64Image(string url, string characterSet, i32 imageSize, i32 x, i32 y, i32 width, i32 height)")
  fmt.Fprintln(os.Stderr, "  Room createRoom(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string createSession()")
  fmt.Fprintln(os.Stderr, "   fetchAnnouncements(i32 lastFetchedIndex)")
  fmt.Fprintln(os.Stderr, "   fetchMessages(i64 localTs, i32 count)")
  fmt.Fprintln(os.Stderr, "   fetchOperations(i64 localRev, i32 count)")
  fmt.Fprintln(os.Stderr, "   fetchOps(i64 localRev, i32 count, i64 globalRev, i64 individualRev)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByEmail(i32 reqSeq,  emails)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByMid(i32 reqSeq, string mid, ContactType type, string reference)")
  fmt.Fprintln(os.Stderr, "  Group findGroupByTicketV2(string ticketId)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByPhone(i32 reqSeq,  phones)")
  fmt.Fprintln(os.Stderr, "   getFriendRequests(FriendRequestDirection direction, i64 lastSeenSeqId)")
  fmt.Fprintln(os.Stderr, "  void removeFriendRequest(FriendRequestDirection direction, string midOrEMid)")
  fmt.Fprintln(os.Stderr, "   findAndAddContactsByUserid(i32 reqSeq, string userid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserid(string userid)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUserTicket(string ticketIdWithTag)")
  fmt.Fprintln(os.Stderr, "   findContactsByEmail( emails)")
  fmt.Fprintln(os.Stderr, "   findContactsByPhone( phones)")
  fmt.Fprintln(os.Stderr, "  SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash)")
  fmt.Fprintln(os.Stderr, "  void finishUpdateVerification(string sessionId)")
  fmt.Fprintln(os.Stderr, "  Ticket generateUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  void destroyMessage(i32 seq, string chatId, string messageId, i8 sessionId)")
  fmt.Fprintln(os.Stderr, "   getAcceptedProximityMatches(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getActiveBuddySubscriberIds()")
  fmt.Fprintln(os.Stderr, "   getAllContactIds()")
  fmt.Fprintln(os.Stderr, "  AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIds()")
  fmt.Fprintln(os.Stderr, "  RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  RegisterWithPhoneNumberResult registerWithPhoneNumberAndPassword(string sessionId, string keynm, string encrypted)")
  fmt.Fprintln(os.Stderr, "  AnalyticsInfo getAnalyticsInfo()")
  fmt.Fprintln(os.Stderr, "  void reportClientStatistics(i32 reqSeq, ReportCategory category, i32 count)")
  fmt.Fprintln(os.Stderr, "  string verifyPhoneNumberForLogin(string verifierFromPhone, string pinCodeForPhone, string verifierFromLogin)")
  fmt.Fprintln(os.Stderr, "  PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "   getBlockedContactIdsByRange(i32 start, i32 count)")
  fmt.Fprintln(os.Stderr, "   getBlockedRecommendationIds()")
  fmt.Fprintln(os.Stderr, "   getBuddyBlockerIds()")
  fmt.Fprintln(os.Stderr, "  Geolocation getBuddyLocation(string mid, i32 index)")
  fmt.Fprintln(os.Stderr, "   getCompactContactsModifiedSince(i64 timestamp)")
  fmt.Fprintln(os.Stderr, "  Group getCompactGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "  Room getCompactRoom(string roomId)")
  fmt.Fprintln(os.Stderr, "  Contact getContact(string id)")
  fmt.Fprintln(os.Stderr, "   getContacts( ids)")
  fmt.Fprintln(os.Stderr, "  Contact getContactWithFriendRequestStatus(string id)")
  fmt.Fprintln(os.Stderr, "  string getCountryWithRequestIp()")
  fmt.Fprintln(os.Stderr, "   getFavoriteMids()")
  fmt.Fprintln(os.Stderr, "  Group getGroup(string groupId)")
  fmt.Fprintln(os.Stderr, "   getGroupIdsInvited()")
  fmt.Fprintln(os.Stderr, "   getGroupIdsJoined()")
  fmt.Fprintln(os.Stderr, "   getGroups( groupIds)")
  fmt.Fprintln(os.Stderr, "   getHiddenContactMids()")
  fmt.Fprintln(os.Stderr, "  string getIdentityIdentifier()")
  fmt.Fprintln(os.Stderr, "  i32 getLastAnnouncementIndex()")
  fmt.Fprintln(os.Stderr, "  i64 getLastOpRevision()")
  fmt.Fprintln(os.Stderr, "  SuggestDictionaryRevisions getSuggestRevisions()")
  fmt.Fprintln(os.Stderr, "   getPreviousMessagesV2WithReadCount(string messageBoxId, MessageBoxV2MessageId endMessageId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  TMessageBox getMessageBox(string channelId, string messageBoxId, i32 lastMessagesCount)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUp getMessageBoxCompactWrapUp(string mid)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(i32 start, i32 messageBoxCount)")
  fmt.Fprintln(os.Stderr, "   getMessageBoxList(string channelId, i32 lastMessagesCount)")
  fmt.Fprintln(os.Stderr, "   getMessageBoxListByStatus(string channelId, i32 lastMessagesCount, i32 status)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUp getMessageBoxWrapUp(string mid)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUpResponse getMessageBoxWrapUpList(i32 start, i32 messageBoxCount)")
  fmt.Fprintln(os.Stderr, "   getMessagesBySequenceNumber(string channelId, string messageBoxId, i64 startSeq, i64 endSeq)")
  fmt.Fprintln(os.Stderr, "   getNextMessages(string messageBoxId, i64 startSeq, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "   getNotificationPolicy(CarrierCode carrier)")
  fmt.Fprintln(os.Stderr, "   getPreviousMessages(string messageBoxId, i64 endSeq, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  Profile getProfile()")
  fmt.Fprintln(os.Stderr, "  ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getProximityMatchCandidates(string sessionId)")
  fmt.Fprintln(os.Stderr, "   getRecentMessages(string messageBoxId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "   getRecommendationIds()")
  fmt.Fprintln(os.Stderr, "  Room getRoom(string roomId)")
  fmt.Fprintln(os.Stderr, "  RSAKey getRSAKeyInfo(IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "  i64 getServerTime()")
  fmt.Fprintln(os.Stderr, "   getSessions()")
  fmt.Fprintln(os.Stderr, "  Settings getSettings()")
  fmt.Fprintln(os.Stderr, "   getGroupsV2( groupIds)")
  fmt.Fprintln(os.Stderr, "  Settings getSettingsAttributes(i32 attrBitset)")
  fmt.Fprintln(os.Stderr, "  SystemConfiguration getSystemConfiguration()")
  fmt.Fprintln(os.Stderr, "  Ticket getUserTicket()")
  fmt.Fprintln(os.Stderr, "  WapInvitation getWapInvitation(string invitationHash)")
  fmt.Fprintln(os.Stderr, "  void invalidateUserTicket()")
  fmt.Fprintln(os.Stderr, "  void inviteFriendsBySms( phoneNumberList)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void inviteIntoRoom(i32 reqSeq, string roomId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void inviteViaEmail(i32 reqSeq, string email, string name)")
  fmt.Fprintln(os.Stderr, "  bool isIdentityIdentifierAvailable(IdentityProvider provider, string identifier)")
  fmt.Fprintln(os.Stderr, "  bool isUseridAvailable(string userid)")
  fmt.Fprintln(os.Stderr, "  void kickoutFromGroup(i32 reqSeq, string groupId,  contactIds)")
  fmt.Fprintln(os.Stderr, "  string reissueGroupTicket(string groupMid)")
  fmt.Fprintln(os.Stderr, "  Group findGroupByTicket(string ticketId)")
  fmt.Fprintln(os.Stderr, "  void leaveGroup(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void leaveRoom(i32 reqSeq, string roomId)")
  fmt.Fprintln(os.Stderr, "  string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)")
  fmt.Fprintln(os.Stderr, "  LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)")
  fmt.Fprintln(os.Stderr, "  string loginWithVerifier(string verifier)")
  fmt.Fprintln(os.Stderr, "  LoginResult loginWithVerifierForCerificate(string verifier)")
  fmt.Fprintln(os.Stderr, "  LoginResult loginWithVerifierForCertificate(string verifier)")
  fmt.Fprintln(os.Stderr, "  void logout()")
  fmt.Fprintln(os.Stderr, "  void logoutSession(string tokenKey)")
  fmt.Fprintln(os.Stderr, "  void noop()")
  fmt.Fprintln(os.Stderr, "  void notifiedRedirect( paramMap)")
  fmt.Fprintln(os.Stderr, "   notifyBuddyOnAir(i32 seq,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void notifyIndividualEvent(NotificationStatus notificationStatus,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void notifyInstalled(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)")
  fmt.Fprintln(os.Stderr, "  void notifySleep(i64 lastRev, i32 badge)")
  fmt.Fprintln(os.Stderr, "  void notifyUpdated(i64 lastRev, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string openProximityMatch(Location location)")
  fmt.Fprintln(os.Stderr, "  string registerBuddyUser(string buddyId, string registrarPassword)")
  fmt.Fprintln(os.Stderr, "  void registerBuddyUserid(i32 seq, string userid)")
  fmt.Fprintln(os.Stderr, "  string registerDevice(string sessionId)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid, string migrationPincodeSessionId)")
  fmt.Fprintln(os.Stderr, "  bool registerUserid(i32 reqSeq, string userid)")
  fmt.Fprintln(os.Stderr, "  string registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)")
  fmt.Fprintln(os.Stderr, "  string registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  string reissueDeviceCredential()")
  fmt.Fprintln(os.Stderr, "  string reissueUserTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "   getMessageReadRange( chatIds)")
  fmt.Fprintln(os.Stderr, "  void rejectGroupInvitation(i32 reqSeq, string groupId)")
  fmt.Fprintln(os.Stderr, "  void releaseSession()")
  fmt.Fprintln(os.Stderr, "  void removeAllMessages(i32 seq, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  void removeBuddyLocation(string mid, i32 index)")
  fmt.Fprintln(os.Stderr, "  bool removeMessage(string messageId)")
  fmt.Fprintln(os.Stderr, "  ContactTransition makeUserAddMyselfAsContact(string contactOwnerMid)")
  fmt.Fprintln(os.Stderr, "  bool removeMessageFromMyHome(string messageId)")
  fmt.Fprintln(os.Stderr, "  string removeSnsId(SnsIdType snsIdType)")
  fmt.Fprintln(os.Stderr, "  void report(i64 syncOpRevision, SyncCategory category, string report)")
  fmt.Fprintln(os.Stderr, "   reportContacts(i64 syncOpRevision, SyncCategory category,  contactReports, SyncActionType actionType)")
  fmt.Fprintln(os.Stderr, "  void reportGroups(i64 syncOpRevision,  groups)")
  fmt.Fprintln(os.Stderr, "  void reportProfile(i64 syncOpRevision, Profile profile)")
  fmt.Fprintln(os.Stderr, "  void reportRooms(i64 syncOpRevision,  rooms)")
  fmt.Fprintln(os.Stderr, "  Contact findAndAddContactByMetaTag(i32 reqSeq, string userid, string reference)")
  fmt.Fprintln(os.Stderr, "  void reportSettings(i64 syncOpRevision, Settings settings)")
  fmt.Fprintln(os.Stderr, "  void reportSpam(string chatMid,  memberMids,  spammerReasons,  senderMids,  spamMessageIds,  spamMessages)")
  fmt.Fprintln(os.Stderr, "  void reportSpammer(string spammerMid,  spammerReasons,  spamMessageIds)")
  fmt.Fprintln(os.Stderr, "  void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)")
  fmt.Fprintln(os.Stderr, "  EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation)")
  fmt.Fprintln(os.Stderr, "  void requestIdentityUnbind(IdentityProvider provider, string identifier)")
  fmt.Fprintln(os.Stderr, "  EmailConfirmationSession resendEmailConfirmation(string verifier)")
  fmt.Fprintln(os.Stderr, "  void resendPinCode(string sessionId)")
  fmt.Fprintln(os.Stderr, "  void resendPinCodeBySMS(string sessionId)")
  fmt.Fprintln(os.Stderr, "  void sendChatChecked(i32 seq, string consumer, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "  CommitMessageResult sendMessageAwaitCommit(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void sendChatRemoved(i32 seq, string consumer, string lastMessageId)")
  fmt.Fprintln(os.Stderr, "   sendContentPreviewUpdated(i32 esq, string messageId,  receiverMids)")
  fmt.Fprintln(os.Stderr, "  void sendContentReceipt(i32 seq, string consumer, string messageId)")
  fmt.Fprintln(os.Stderr, "  void sendDummyPush()")
  fmt.Fprintln(os.Stderr, "  void removeE2EEPublicKey(E2EEPublicKey publicKey)")
  fmt.Fprintln(os.Stderr, "  E2EENegotiationResult negotiateE2EEPublicKey(string mid)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey getE2EEPublicKey(string mid, i32 version, i32 keyId)")
  fmt.Fprintln(os.Stderr, "  void requestE2EEKeyExchange(i32 reqSeq, string temporalPublicKey, E2EEPublicKey publicKey, string verifier)")
  fmt.Fprintln(os.Stderr, "   getLastE2EEPublicKeys(string chatMid)")
  fmt.Fprintln(os.Stderr, "  E2EEPublicKey registerE2EEPublicKey(i32 reqSeq, E2EEPublicKey publicKey)")
  fmt.Fprintln(os.Stderr, "   getE2EEPublicKeys()")
  fmt.Fprintln(os.Stderr, "   getE2EEPublicKeysEx(bool ignoreE2EEStatus)")
  fmt.Fprintln(os.Stderr, "   getReadMessageOpsInBulk( chatIds)")
  fmt.Fprintln(os.Stderr, "  Message sendEvent(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  Message sendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void sendMessageIgnored(i32 seq, string consumer,  messageIds)")
  fmt.Fprintln(os.Stderr, "  void sendMessageReceipt(i32 seq, string consumer,  messageIds)")
  fmt.Fprintln(os.Stderr, "  Contact findContactByMetaTag(string userid, string reference)")
  fmt.Fprintln(os.Stderr, "  Message sendMessageToMyHome(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "  void setBuddyLocation(string mid, i32 index, Geolocation location)")
  fmt.Fprintln(os.Stderr, "  void setIdentityCredential(string identifier, string verifier, IdentityProvider provider)")
  fmt.Fprintln(os.Stderr, "  void setNotificationsEnabled(i32 reqSeq, MIDType type, string target, bool enablement)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)")
  fmt.Fprintln(os.Stderr, "  VerificationSessionData startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash)")
  fmt.Fprintln(os.Stderr, "  void updateGroupPreferenceAttribute(i32 reqSeq, string groupMid,  updatedAttrs)")
  fmt.Fprintln(os.Stderr, "  Room createRoomV2(i32 reqSeq,  contactIds)")
  fmt.Fprintln(os.Stderr, "  void storeUpdateProfileAttribute(i32 seq, ProfileAttribute profileAttribute, string value)")
  fmt.Fprintln(os.Stderr, "   syncContactBySnsIds(i32 reqSeq,  modifications)")
  fmt.Fprintln(os.Stderr, "   syncContacts(i32 reqSeq,  localContacts)")
  fmt.Fprintln(os.Stderr, "  Message trySendMessage(i32 seq, Message message)")
  fmt.Fprintln(os.Stderr, "   getNextMessagesV2(string messageBoxId, MessageBoxV2MessageId startMessageId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "  TMessageBoxWrapUp getMessageBoxCompactWrapUpV2(string messageBoxId)")
  fmt.Fprintln(os.Stderr, "   getRecentMessagesV2(string messageBoxId, i32 messagesCount)")
  fmt.Fprintln(os.Stderr, "   validateContactsOnBot( contacts)")
  fmt.Fprintln(os.Stderr, "  void tryFriendRequest(string midOrEMid, FriendRequestMethod method, string friendRequestParams)")
  fmt.Fprintln(os.Stderr, "  void unblockContact(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  void unblockRecommendation(i32 reqSeq, string id)")
  fmt.Fprintln(os.Stderr, "  string unregisterUserAndDevice()")
  fmt.Fprintln(os.Stderr, "  void updateApnsDeviceToken(string apnsDeviceToken)")
  fmt.Fprintln(os.Stderr, "  void updateBuddySetting(string key, string value)")
  fmt.Fprintln(os.Stderr, "  void updateC2DMRegistrationId(string registrationId)")
  fmt.Fprintln(os.Stderr, "  void updateContactSetting(i32 reqSeq, string mid, ContactSetting flag, string value)")
  fmt.Fprintln(os.Stderr, "  void updateCustomModeSettings(CustomMode customMode,  paramMap)")
  fmt.Fprintln(os.Stderr, "  void updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo)")
  fmt.Fprintln(os.Stderr, "  void updateGroup(i32 reqSeq, Group group)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationToken(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  void updateNotificationTokenWithBytes(NotificationType type, string token)")
  fmt.Fprintln(os.Stderr, "  void updateProfile(i32 reqSeq, Profile profile)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttribute(i32 reqSeq, ProfileAttribute attr, string value)")
  fmt.Fprintln(os.Stderr, "  void updateRegion(string region)")
  fmt.Fprintln(os.Stderr, "  void updateSettings(i32 reqSeq, Settings settings)")
  fmt.Fprintln(os.Stderr, "  i32 updateSettings2(i32 reqSeq, Settings settings)")
  fmt.Fprintln(os.Stderr, "  void updateSettingsAttribute(i32 reqSeq, SettingsAttribute attr, string value)")
  fmt.Fprintln(os.Stderr, "  i32 updateSettingsAttributes(i32 reqSeq, i32 attrBitset, Settings settings)")
  fmt.Fprintln(os.Stderr, "  void verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password)")
  fmt.Fprintln(os.Stderr, "  UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential)")
  fmt.Fprintln(os.Stderr, "  VerificationResult verifyPhone(string sessionId, string pinCode, string udidHash)")
  fmt.Fprintln(os.Stderr, "  string verifyQrcode(string verifier, string pinCode)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewTalkServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getChatRoomAnnouncementsBulk":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncementsBulk requires 1 args")
      flag.Usage()
    }
    arg1691 := flag.Arg(1)
    mbTrans1692 := thrift.NewTMemoryBufferLen(len(arg1691))
    defer mbTrans1692.Close()
    _, err1693 := mbTrans1692.WriteString(arg1691)
    if err1693 != nil { 
      Usage()
      return
    }
    factory1694 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1695 := factory1694.GetProtocol(mbTrans1692)
    containerStruct0 := line.NewTalkServiceGetChatRoomAnnouncementsBulkArgs()
    err1696 := containerStruct0.ReadField1(jsProt1695)
    if err1696 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatRoomMids
    value0 := argvalue0
    fmt.Print(client.GetChatRoomAnnouncementsBulk(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getChatRoomAnnouncements":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetChatRoomAnnouncements requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetChatRoomAnnouncements(context.Background(), value0))
    fmt.Print("\n")
    break
  case "createChatRoomAnnouncement":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CreateChatRoomAnnouncement requires 4 args")
      flag.Usage()
    }
    tmp0, err1698 := (strconv.Atoi(flag.Arg(1)))
    if err1698 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ChatRoomAnnouncementType(tmp2)
    value2 := argvalue2
    arg1700 := flag.Arg(4)
    mbTrans1701 := thrift.NewTMemoryBufferLen(len(arg1700))
    defer mbTrans1701.Close()
    _, err1702 := mbTrans1701.WriteString(arg1700)
    if err1702 != nil {
      Usage()
      return
    }
    factory1703 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1704 := factory1703.GetProtocol(mbTrans1701)
    argvalue3 := line.NewChatRoomAnnouncementContents()
    err1705 := argvalue3.Read(jsProt1704)
    if err1705 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.CreateChatRoomAnnouncement(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "removeChatRoomAnnouncement":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RemoveChatRoomAnnouncement requires 3 args")
      flag.Usage()
    }
    tmp0, err1706 := (strconv.Atoi(flag.Arg(1)))
    if err1706 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err1708 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1708 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RemoveChatRoomAnnouncement(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "unsendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnsendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err1709 := (strconv.Atoi(flag.Arg(1)))
    if err1709 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnsendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getGroupWithoutMembers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupWithoutMembers requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupWithoutMembers(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestResendMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestResendMessage requires 3 args")
      flag.Usage()
    }
    tmp0, err1712 := (strconv.Atoi(flag.Arg(1)))
    if err1712 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestResendMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "respondResendMessage":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RespondResendMessage requires 5 args")
      flag.Usage()
    }
    tmp0, err1715 := (strconv.Atoi(flag.Arg(1)))
    if err1715 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg1718 := flag.Arg(4)
    mbTrans1719 := thrift.NewTMemoryBufferLen(len(arg1718))
    defer mbTrans1719.Close()
    _, err1720 := mbTrans1719.WriteString(arg1718)
    if err1720 != nil {
      Usage()
      return
    }
    factory1721 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1722 := factory1721.GetProtocol(mbTrans1719)
    argvalue3 := line.NewMessage()
    err1723 := argvalue3.Read(jsProt1722)
    if err1723 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    tmp4, err := (strconv.Atoi(flag.Arg(5)))
    if err != nil {
      Usage()
     return
    }
    argvalue4 := line.ErrorCode(tmp4)
    value4 := argvalue4
    fmt.Print(client.RespondResendMessage(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "acceptGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err1724 := (strconv.Atoi(flag.Arg(1)))
    if err1724 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AcceptGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acceptGroupInvitationByTicket":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "AcceptGroupInvitationByTicket requires 3 args")
      flag.Usage()
    }
    tmp0, err1726 := (strconv.Atoi(flag.Arg(1)))
    if err1726 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.AcceptGroupInvitationByTicket(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "acceptProximityMatches":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AcceptProximityMatches requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1730 := flag.Arg(2)
    mbTrans1731 := thrift.NewTMemoryBufferLen(len(arg1730))
    defer mbTrans1731.Close()
    _, err1732 := mbTrans1731.WriteString(arg1730)
    if err1732 != nil { 
      Usage()
      return
    }
    factory1733 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1734 := factory1733.GetProtocol(mbTrans1731)
    containerStruct1 := line.NewTalkServiceAcceptProximityMatchesArgs()
    err1735 := containerStruct1.ReadField2(jsProt1734)
    if err1735 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Ids
    value1 := argvalue1
    fmt.Print(client.AcceptProximityMatches(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "acquireCallRoute":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireCallRoute requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AcquireCallRoute(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireCallTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireCallTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.AcquireCallTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "acquireEncryptedAccessToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AcquireEncryptedAccessToken requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.FeatureType(tmp0)
    value0 := argvalue0
    fmt.Print(client.AcquireEncryptedAccessToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "addSnsId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddSnsId requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddSnsId(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err1739 := (strconv.Atoi(flag.Arg(1)))
    if err1739 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err1741 := (strconv.Atoi(flag.Arg(1)))
    if err1741 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "cancelGroupInvitation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CancelGroupInvitation requires 3 args")
      flag.Usage()
    }
    tmp0, err1743 := (strconv.Atoi(flag.Arg(1)))
    if err1743 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1745 := flag.Arg(3)
    mbTrans1746 := thrift.NewTMemoryBufferLen(len(arg1745))
    defer mbTrans1746.Close()
    _, err1747 := mbTrans1746.WriteString(arg1745)
    if err1747 != nil { 
      Usage()
      return
    }
    factory1748 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1749 := factory1748.GetProtocol(mbTrans1746)
    containerStruct2 := line.NewTalkServiceCancelGroupInvitationArgs()
    err1750 := containerStruct2.ReadField3(jsProt1749)
    if err1750 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CancelGroupInvitation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "changeVerificationMethod":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ChangeVerificationMethod requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.VerificationMethod(tmp1)
    value1 := argvalue1
    fmt.Print(client.ChangeVerificationMethod(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "clearIdentityCredential":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ClearIdentityCredential requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ClearIdentityCredential(context.Background()))
    fmt.Print("\n")
    break
  case "clearMessageBox":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ClearMessageBox requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ClearMessageBox(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "closeProximityMatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CloseProximityMatch requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.CloseProximityMatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitSendMessage":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CommitSendMessage requires 3 args")
      flag.Usage()
    }
    tmp0, err1755 := (strconv.Atoi(flag.Arg(1)))
    if err1755 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1757 := flag.Arg(3)
    mbTrans1758 := thrift.NewTMemoryBufferLen(len(arg1757))
    defer mbTrans1758.Close()
    _, err1759 := mbTrans1758.WriteString(arg1757)
    if err1759 != nil { 
      Usage()
      return
    }
    factory1760 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1761 := factory1760.GetProtocol(mbTrans1758)
    containerStruct2 := line.NewTalkServiceCommitSendMessageArgs()
    err1762 := containerStruct2.ReadField3(jsProt1761)
    if err1762 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.CommitSendMessage(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "commitSendMessages":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CommitSendMessages requires 3 args")
      flag.Usage()
    }
    tmp0, err1763 := (strconv.Atoi(flag.Arg(1)))
    if err1763 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1764 := flag.Arg(2)
    mbTrans1765 := thrift.NewTMemoryBufferLen(len(arg1764))
    defer mbTrans1765.Close()
    _, err1766 := mbTrans1765.WriteString(arg1764)
    if err1766 != nil { 
      Usage()
      return
    }
    factory1767 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1768 := factory1767.GetProtocol(mbTrans1765)
    containerStruct1 := line.NewTalkServiceCommitSendMessagesArgs()
    err1769 := containerStruct1.ReadField2(jsProt1768)
    if err1769 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MessageIds
    value1 := argvalue1
    arg1770 := flag.Arg(3)
    mbTrans1771 := thrift.NewTMemoryBufferLen(len(arg1770))
    defer mbTrans1771.Close()
    _, err1772 := mbTrans1771.WriteString(arg1770)
    if err1772 != nil { 
      Usage()
      return
    }
    factory1773 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1774 := factory1773.GetProtocol(mbTrans1771)
    containerStruct2 := line.NewTalkServiceCommitSendMessagesArgs()
    err1775 := containerStruct2.ReadField3(jsProt1774)
    if err1775 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.CommitSendMessages(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "commitUpdateProfile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CommitUpdateProfile requires 3 args")
      flag.Usage()
    }
    tmp0, err1776 := (strconv.Atoi(flag.Arg(1)))
    if err1776 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1777 := flag.Arg(2)
    mbTrans1778 := thrift.NewTMemoryBufferLen(len(arg1777))
    defer mbTrans1778.Close()
    _, err1779 := mbTrans1778.WriteString(arg1777)
    if err1779 != nil { 
      Usage()
      return
    }
    factory1780 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1781 := factory1780.GetProtocol(mbTrans1778)
    containerStruct1 := line.NewTalkServiceCommitUpdateProfileArgs()
    err1782 := containerStruct1.ReadField2(jsProt1781)
    if err1782 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attrs
    value1 := argvalue1
    arg1783 := flag.Arg(3)
    mbTrans1784 := thrift.NewTMemoryBufferLen(len(arg1783))
    defer mbTrans1784.Close()
    _, err1785 := mbTrans1784.WriteString(arg1783)
    if err1785 != nil { 
      Usage()
      return
    }
    factory1786 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1787 := factory1786.GetProtocol(mbTrans1784)
    containerStruct2 := line.NewTalkServiceCommitUpdateProfileArgs()
    err1788 := containerStruct2.ReadField3(jsProt1787)
    if err1788 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.CommitUpdateProfile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "confirmEmail":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ConfirmEmail requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ConfirmEmail(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "CreateGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err1791 := (strconv.Atoi(flag.Arg(1)))
    if err1791 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1793 := flag.Arg(3)
    mbTrans1794 := thrift.NewTMemoryBufferLen(len(arg1793))
    defer mbTrans1794.Close()
    _, err1795 := mbTrans1794.WriteString(arg1793)
    if err1795 != nil { 
      Usage()
      return
    }
    factory1796 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1797 := factory1796.GetProtocol(mbTrans1794)
    containerStruct2 := line.NewTalkServiceCreateGroupArgs()
    err1798 := containerStruct2.ReadField3(jsProt1797)
    if err1798 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.CreateGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createQrcodeBase64Image":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "CreateQrcodeBase64Image requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1801 := (strconv.Atoi(flag.Arg(3)))
    if err1801 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    tmp3, err1802 := (strconv.Atoi(flag.Arg(4)))
    if err1802 != nil {
      Usage()
      return
    }
    argvalue3 := int32(tmp3)
    value3 := argvalue3
    tmp4, err1803 := (strconv.Atoi(flag.Arg(5)))
    if err1803 != nil {
      Usage()
      return
    }
    argvalue4 := int32(tmp4)
    value4 := argvalue4
    tmp5, err1804 := (strconv.Atoi(flag.Arg(6)))
    if err1804 != nil {
      Usage()
      return
    }
    argvalue5 := int32(tmp5)
    value5 := argvalue5
    tmp6, err1805 := (strconv.Atoi(flag.Arg(7)))
    if err1805 != nil {
      Usage()
      return
    }
    argvalue6 := int32(tmp6)
    value6 := argvalue6
    fmt.Print(client.CreateQrcodeBase64Image(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "createRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err1806 := (strconv.Atoi(flag.Arg(1)))
    if err1806 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1807 := flag.Arg(2)
    mbTrans1808 := thrift.NewTMemoryBufferLen(len(arg1807))
    defer mbTrans1808.Close()
    _, err1809 := mbTrans1808.WriteString(arg1807)
    if err1809 != nil { 
      Usage()
      return
    }
    factory1810 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1811 := factory1810.GetProtocol(mbTrans1808)
    containerStruct1 := line.NewTalkServiceCreateRoomArgs()
    err1812 := containerStruct1.ReadField2(jsProt1811)
    if err1812 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "createSession":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CreateSession requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CreateSession(context.Background()))
    fmt.Print("\n")
    break
  case "fetchAnnouncements":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FetchAnnouncements requires 1 args")
      flag.Usage()
    }
    tmp0, err1813 := (strconv.Atoi(flag.Arg(1)))
    if err1813 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.FetchAnnouncements(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchMessages requires 2 args")
      flag.Usage()
    }
    argvalue0, err1814 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1814 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1815 := (strconv.Atoi(flag.Arg(2)))
    if err1815 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "fetchOperations":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchOperations requires 2 args")
      flag.Usage()
    }
    argvalue0, err1816 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1816 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1817 := (strconv.Atoi(flag.Arg(2)))
    if err1817 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.FetchOperations(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "fetchOps":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FetchOps requires 4 args")
      flag.Usage()
    }
    argvalue0, err1818 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1818 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1819 := (strconv.Atoi(flag.Arg(2)))
    if err1819 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2, err1820 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1820 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1821 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1821 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.FetchOps(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findAndAddContactsByEmail":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByEmail requires 2 args")
      flag.Usage()
    }
    tmp0, err1822 := (strconv.Atoi(flag.Arg(1)))
    if err1822 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1823 := flag.Arg(2)
    mbTrans1824 := thrift.NewTMemoryBufferLen(len(arg1823))
    defer mbTrans1824.Close()
    _, err1825 := mbTrans1824.WriteString(arg1823)
    if err1825 != nil { 
      Usage()
      return
    }
    factory1826 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1827 := factory1826.GetProtocol(mbTrans1824)
    containerStruct1 := line.NewTalkServiceFindAndAddContactsByEmailArgs()
    err1828 := containerStruct1.ReadField2(jsProt1827)
    if err1828 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Emails
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByEmail(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByMid":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByMid requires 4 args")
      flag.Usage()
    }
    tmp0, err1829 := (strconv.Atoi(flag.Arg(1)))
    if err1829 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ContactType(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.FindAndAddContactsByMid(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "findGroupByTicketV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindGroupByTicketV2 requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindGroupByTicketV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findAndAddContactsByPhone":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByPhone requires 2 args")
      flag.Usage()
    }
    tmp0, err1833 := (strconv.Atoi(flag.Arg(1)))
    if err1833 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg1834 := flag.Arg(2)
    mbTrans1835 := thrift.NewTMemoryBufferLen(len(arg1834))
    defer mbTrans1835.Close()
    _, err1836 := mbTrans1835.WriteString(arg1834)
    if err1836 != nil { 
      Usage()
      return
    }
    factory1837 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1838 := factory1837.GetProtocol(mbTrans1835)
    containerStruct1 := line.NewTalkServiceFindAndAddContactsByPhoneArgs()
    err1839 := containerStruct1.ReadField2(jsProt1838)
    if err1839 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Phones
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByPhone(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getFriendRequests":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetFriendRequests requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.FriendRequestDirection(tmp0)
    value0 := argvalue0
    argvalue1, err1840 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1840 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.GetFriendRequests(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeFriendRequest":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveFriendRequest requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.FriendRequestDirection(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveFriendRequest(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactsByUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactsByUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err1842 := (strconv.Atoi(flag.Arg(1)))
    if err1842 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindAndAddContactsByUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findContactByUserid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactByUserTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUserTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUserTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactsByEmail":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByEmail requires 1 args")
      flag.Usage()
    }
    arg1846 := flag.Arg(1)
    mbTrans1847 := thrift.NewTMemoryBufferLen(len(arg1846))
    defer mbTrans1847.Close()
    _, err1848 := mbTrans1847.WriteString(arg1846)
    if err1848 != nil { 
      Usage()
      return
    }
    factory1849 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1850 := factory1849.GetProtocol(mbTrans1847)
    containerStruct0 := line.NewTalkServiceFindContactsByEmailArgs()
    err1851 := containerStruct0.ReadField1(jsProt1850)
    if err1851 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Emails
    value0 := argvalue0
    fmt.Print(client.FindContactsByEmail(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findContactsByPhone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactsByPhone requires 1 args")
      flag.Usage()
    }
    arg1852 := flag.Arg(1)
    mbTrans1853 := thrift.NewTMemoryBufferLen(len(arg1852))
    defer mbTrans1853.Close()
    _, err1854 := mbTrans1853.WriteString(arg1852)
    if err1854 != nil { 
      Usage()
      return
    }
    factory1855 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1856 := factory1855.GetProtocol(mbTrans1853)
    containerStruct0 := line.NewTalkServiceFindContactsByPhoneArgs()
    err1857 := containerStruct0.ReadField1(jsProt1856)
    if err1857 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Phones
    value0 := argvalue0
    fmt.Print(client.FindContactsByPhone(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findSnsIdUserStatus":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindSnsIdUserStatus requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindSnsIdUserStatus(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "finishUpdateVerification":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FinishUpdateVerification requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FinishUpdateVerification(context.Background(), value0))
    fmt.Print("\n")
    break
  case "generateUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GenerateUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err1861 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1861 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1862 := (strconv.Atoi(flag.Arg(2)))
    if err1862 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GenerateUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "destroyMessage":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "DestroyMessage requires 4 args")
      flag.Usage()
    }
    tmp0, err1863 := (strconv.Atoi(flag.Arg(1)))
    if err1863 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    tmp3, err1866 := (strconv.Atoi(flag.Arg(4)))
    if err1866 != nil {
      Usage()
      return
    }
    argvalue3 := int8(tmp3)
    value3 := argvalue3
    fmt.Print(client.DestroyMessage(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getAcceptedProximityMatches":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAcceptedProximityMatches requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetAcceptedProximityMatches(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getActiveBuddySubscriberIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetActiveBuddySubscriberIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetActiveBuddySubscriberIds(context.Background()))
    fmt.Print("\n")
    break
  case "getAllContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "getAuthQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAuthQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetAuthQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getBlockedContactIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedContactIds(context.Background()))
    fmt.Print("\n")
    break
  case "registerWithPhoneNumber":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterWithPhoneNumber requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterWithPhoneNumber(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerWithPhoneNumberAndPassword":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RegisterWithPhoneNumberAndPassword requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RegisterWithPhoneNumberAndPassword(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAnalyticsInfo":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAnalyticsInfo requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAnalyticsInfo(context.Background()))
    fmt.Print("\n")
    break
  case "reportClientStatistics":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReportClientStatistics requires 3 args")
      flag.Usage()
    }
    tmp0, err1875 := (strconv.Atoi(flag.Arg(1)))
    if err1875 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.ReportCategory(tmp1)
    value1 := argvalue1
    tmp2, err1876 := (strconv.Atoi(flag.Arg(3)))
    if err1876 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.ReportClientStatistics(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyPhoneNumberForLogin":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumberForLogin requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.VerifyPhoneNumberForLogin(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyPhoneNumber":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "VerifyPhoneNumber requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    fmt.Print(client.VerifyPhoneNumber(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "getBlockedContactIdsByRange":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetBlockedContactIdsByRange requires 2 args")
      flag.Usage()
    }
    tmp0, err1885 := (strconv.Atoi(flag.Arg(1)))
    if err1885 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1886 := (strconv.Atoi(flag.Arg(2)))
    if err1886 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetBlockedContactIdsByRange(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getBlockedRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBuddyBlockerIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBuddyBlockerIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBuddyBlockerIds(context.Background()))
    fmt.Print("\n")
    break
  case "getBuddyLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetBuddyLocation requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1888 := (strconv.Atoi(flag.Arg(2)))
    if err1888 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetBuddyLocation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getCompactContactsModifiedSince":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactContactsModifiedSince requires 1 args")
      flag.Usage()
    }
    argvalue0, err1889 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1889 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCompactContactsModifiedSince(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCompactGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCompactRoom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactRoom requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetCompactRoom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContacts requires 1 args")
      flag.Usage()
    }
    arg1893 := flag.Arg(1)
    mbTrans1894 := thrift.NewTMemoryBufferLen(len(arg1893))
    defer mbTrans1894.Close()
    _, err1895 := mbTrans1894.WriteString(arg1893)
    if err1895 != nil { 
      Usage()
      return
    }
    factory1896 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1897 := factory1896.GetProtocol(mbTrans1894)
    containerStruct0 := line.NewTalkServiceGetContactsArgs()
    err1898 := containerStruct0.ReadField1(jsProt1897)
    if err1898 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContactWithFriendRequestStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContactWithFriendRequestStatus requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetContactWithFriendRequestStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCountryWithRequestIp":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetCountryWithRequestIp requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetCountryWithRequestIp(context.Background()))
    fmt.Print("\n")
    break
  case "getFavoriteMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFavoriteMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFavoriteMids(context.Background()))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroup(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupIdsInvited":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsInvited requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetGroupIdsInvited(context.Background()))
    fmt.Print("\n")
    break
  case "getGroupIdsJoined":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetGroupIdsJoined requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetGroupIdsJoined(context.Background()))
    fmt.Print("\n")
    break
  case "getGroups":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroups requires 1 args")
      flag.Usage()
    }
    arg1901 := flag.Arg(1)
    mbTrans1902 := thrift.NewTMemoryBufferLen(len(arg1901))
    defer mbTrans1902.Close()
    _, err1903 := mbTrans1902.WriteString(arg1901)
    if err1903 != nil { 
      Usage()
      return
    }
    factory1904 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1905 := factory1904.GetProtocol(mbTrans1902)
    containerStruct0 := line.NewTalkServiceGetGroupsArgs()
    err1906 := containerStruct0.ReadField1(jsProt1905)
    if err1906 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupIds
    value0 := argvalue0
    fmt.Print(client.GetGroups(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getHiddenContactMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetHiddenContactMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetHiddenContactMids(context.Background()))
    fmt.Print("\n")
    break
  case "getIdentityIdentifier":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetIdentityIdentifier requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetIdentityIdentifier(context.Background()))
    fmt.Print("\n")
    break
  case "getLastAnnouncementIndex":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastAnnouncementIndex requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastAnnouncementIndex(context.Background()))
    fmt.Print("\n")
    break
  case "getLastOpRevision":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetLastOpRevision requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetLastOpRevision(context.Background()))
    fmt.Print("\n")
    break
  case "getSuggestRevisions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSuggestRevisions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSuggestRevisions(context.Background()))
    fmt.Print("\n")
    break
  case "getPreviousMessagesV2WithReadCount":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPreviousMessagesV2WithReadCount requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg1908 := flag.Arg(2)
    mbTrans1909 := thrift.NewTMemoryBufferLen(len(arg1908))
    defer mbTrans1909.Close()
    _, err1910 := mbTrans1909.WriteString(arg1908)
    if err1910 != nil {
      Usage()
      return
    }
    factory1911 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1912 := factory1911.GetProtocol(mbTrans1909)
    argvalue1 := line.NewMessageBoxV2MessageId()
    err1913 := argvalue1.Read(jsProt1912)
    if err1913 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err1914 := (strconv.Atoi(flag.Arg(3)))
    if err1914 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPreviousMessagesV2WithReadCount(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBox":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetMessageBox requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1917 := (strconv.Atoi(flag.Arg(3)))
    if err1917 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMessageBox(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBoxCompactWrapUp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxCompactWrapUp requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMessageBoxCompactWrapUp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMessageBoxCompactWrapUpList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxCompactWrapUpList requires 2 args")
      flag.Usage()
    }
    tmp0, err1919 := (strconv.Atoi(flag.Arg(1)))
    if err1919 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1920 := (strconv.Atoi(flag.Arg(2)))
    if err1920 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxCompactWrapUpList(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageBoxList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxList requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1922 := (strconv.Atoi(flag.Arg(2)))
    if err1922 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxList(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageBoxListByStatus":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxListByStatus requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1924 := (strconv.Atoi(flag.Arg(2)))
    if err1924 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err1925 := (strconv.Atoi(flag.Arg(3)))
    if err1925 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetMessageBoxListByStatus(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBoxWrapUp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxWrapUp requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMessageBoxWrapUp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getMessageBoxWrapUpList":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxWrapUpList requires 2 args")
      flag.Usage()
    }
    tmp0, err1927 := (strconv.Atoi(flag.Arg(1)))
    if err1927 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err1928 := (strconv.Atoi(flag.Arg(2)))
    if err1928 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetMessageBoxWrapUpList(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessagesBySequenceNumber":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetMessagesBySequenceNumber requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2, err1931 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err1931 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3, err1932 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err1932 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.GetMessagesBySequenceNumber(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getNextMessages":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNextMessages requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err1934 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1934 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err1935 := (strconv.Atoi(flag.Arg(3)))
    if err1935 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNextMessages(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getNotificationPolicy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetNotificationPolicy requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.CarrierCode(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetNotificationPolicy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPreviousMessages":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPreviousMessages requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err1937 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1937 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err1938 := (strconv.Atoi(flag.Arg(3)))
    if err1938 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetPreviousMessages(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetProfile(context.Background()))
    fmt.Print("\n")
    break
  case "getProximityMatchCandidateList":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProximityMatchCandidateList requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetProximityMatchCandidateList(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getProximityMatchCandidates":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProximityMatchCandidates requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetProximityMatchCandidates(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecentMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetRecentMessages requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err1942 := (strconv.Atoi(flag.Arg(2)))
    if err1942 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetRecentMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getRecommendationIds":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetRecommendationIds requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetRecommendationIds(context.Background()))
    fmt.Print("\n")
    break
  case "getRoom":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRoom requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetRoom(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRSAKeyInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetRSAKeyInfo requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetRSAKeyInfo(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getServerTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetServerTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetServerTime(context.Background()))
    fmt.Print("\n")
    break
  case "getSessions":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSessions requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSessions(context.Background()))
    fmt.Print("\n")
    break
  case "getSettings":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSettings requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSettings(context.Background()))
    fmt.Print("\n")
    break
  case "getGroupsV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupsV2 requires 1 args")
      flag.Usage()
    }
    arg1944 := flag.Arg(1)
    mbTrans1945 := thrift.NewTMemoryBufferLen(len(arg1944))
    defer mbTrans1945.Close()
    _, err1946 := mbTrans1945.WriteString(arg1944)
    if err1946 != nil { 
      Usage()
      return
    }
    factory1947 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1948 := factory1947.GetProtocol(mbTrans1945)
    containerStruct0 := line.NewTalkServiceGetGroupsV2Args()
    err1949 := containerStruct0.ReadField1(jsProt1948)
    if err1949 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupIds
    value0 := argvalue0
    fmt.Print(client.GetGroupsV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSettingsAttributes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSettingsAttributes requires 1 args")
      flag.Usage()
    }
    tmp0, err1950 := (strconv.Atoi(flag.Arg(1)))
    if err1950 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetSettingsAttributes(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSystemConfiguration":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetSystemConfiguration requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetSystemConfiguration(context.Background()))
    fmt.Print("\n")
    break
  case "getUserTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserTicket(context.Background()))
    fmt.Print("\n")
    break
  case "getWapInvitation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetWapInvitation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetWapInvitation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "invalidateUserTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "InvalidateUserTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.InvalidateUserTicket(context.Background()))
    fmt.Print("\n")
    break
  case "inviteFriendsBySms":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "InviteFriendsBySms requires 1 args")
      flag.Usage()
    }
    arg1952 := flag.Arg(1)
    mbTrans1953 := thrift.NewTMemoryBufferLen(len(arg1952))
    defer mbTrans1953.Close()
    _, err1954 := mbTrans1953.WriteString(arg1952)
    if err1954 != nil { 
      Usage()
      return
    }
    factory1955 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1956 := factory1955.GetProtocol(mbTrans1953)
    containerStruct0 := line.NewTalkServiceInviteFriendsBySmsArgs()
    err1957 := containerStruct0.ReadField1(jsProt1956)
    if err1957 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.PhoneNumberList
    value0 := argvalue0
    fmt.Print(client.InviteFriendsBySms(context.Background(), value0))
    fmt.Print("\n")
    break
  case "inviteIntoGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err1958 := (strconv.Atoi(flag.Arg(1)))
    if err1958 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1960 := flag.Arg(3)
    mbTrans1961 := thrift.NewTMemoryBufferLen(len(arg1960))
    defer mbTrans1961.Close()
    _, err1962 := mbTrans1961.WriteString(arg1960)
    if err1962 != nil { 
      Usage()
      return
    }
    factory1963 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1964 := factory1963.GetProtocol(mbTrans1961)
    containerStruct2 := line.NewTalkServiceInviteIntoGroupArgs()
    err1965 := containerStruct2.ReadField3(jsProt1964)
    if err1965 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "inviteIntoRoom":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteIntoRoom requires 3 args")
      flag.Usage()
    }
    tmp0, err1966 := (strconv.Atoi(flag.Arg(1)))
    if err1966 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1968 := flag.Arg(3)
    mbTrans1969 := thrift.NewTMemoryBufferLen(len(arg1968))
    defer mbTrans1969.Close()
    _, err1970 := mbTrans1969.WriteString(arg1968)
    if err1970 != nil { 
      Usage()
      return
    }
    factory1971 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1972 := factory1971.GetProtocol(mbTrans1969)
    containerStruct2 := line.NewTalkServiceInviteIntoRoomArgs()
    err1973 := containerStruct2.ReadField3(jsProt1972)
    if err1973 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.InviteIntoRoom(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "inviteViaEmail":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "InviteViaEmail requires 3 args")
      flag.Usage()
    }
    tmp0, err1974 := (strconv.Atoi(flag.Arg(1)))
    if err1974 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.InviteViaEmail(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "isIdentityIdentifierAvailable":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "IsIdentityIdentifierAvailable requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.IsIdentityIdentifierAvailable(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "isUseridAvailable":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsUseridAvailable requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsUseridAvailable(context.Background(), value0))
    fmt.Print("\n")
    break
  case "kickoutFromGroup":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "KickoutFromGroup requires 3 args")
      flag.Usage()
    }
    tmp0, err1979 := (strconv.Atoi(flag.Arg(1)))
    if err1979 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg1981 := flag.Arg(3)
    mbTrans1982 := thrift.NewTMemoryBufferLen(len(arg1981))
    defer mbTrans1982.Close()
    _, err1983 := mbTrans1982.WriteString(arg1981)
    if err1983 != nil { 
      Usage()
      return
    }
    factory1984 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1985 := factory1984.GetProtocol(mbTrans1982)
    containerStruct2 := line.NewTalkServiceKickoutFromGroupArgs()
    err1986 := containerStruct2.ReadField3(jsProt1985)
    if err1986 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactIds
    value2 := argvalue2
    fmt.Print(client.KickoutFromGroup(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reissueGroupTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReissueGroupTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ReissueGroupTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "findGroupByTicket":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindGroupByTicket requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindGroupByTicket(context.Background(), value0))
    fmt.Print("\n")
    break
  case "leaveGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err1989 := (strconv.Atoi(flag.Arg(1)))
    if err1989 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "leaveRoom":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "LeaveRoom requires 2 args")
      flag.Usage()
    }
    tmp0, err1991 := (strconv.Atoi(flag.Arg(1)))
    if err1991 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.LeaveRoom(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "loginWithIdentityCredential":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "LoginWithIdentityCredential requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.LoginWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "loginWithIdentityCredentialForCertificate":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "LoginWithIdentityCredentialForCertificate requires 7 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.LoginWithIdentityCredentialForCertificate(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "loginWithVerifier":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginWithVerifier requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LoginWithVerifier(context.Background(), value0))
    fmt.Print("\n")
    break
  case "loginWithVerifierForCerificate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginWithVerifierForCerificate requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LoginWithVerifierForCerificate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "loginWithVerifierForCertificate":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LoginWithVerifierForCertificate requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LoginWithVerifierForCertificate(context.Background(), value0))
    fmt.Print("\n")
    break
  case "logout":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Logout requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Logout(context.Background()))
    fmt.Print("\n")
    break
  case "logoutSession":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LogoutSession requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.LogoutSession(context.Background(), value0))
    fmt.Print("\n")
    break
  case "noop":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Noop requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Noop(context.Background()))
    fmt.Print("\n")
    break
  case "notifiedRedirect":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NotifiedRedirect requires 1 args")
      flag.Usage()
    }
    arg2009 := flag.Arg(1)
    mbTrans2010 := thrift.NewTMemoryBufferLen(len(arg2009))
    defer mbTrans2010.Close()
    _, err2011 := mbTrans2010.WriteString(arg2009)
    if err2011 != nil { 
      Usage()
      return
    }
    factory2012 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2013 := factory2012.GetProtocol(mbTrans2010)
    containerStruct0 := line.NewTalkServiceNotifiedRedirectArgs()
    err2014 := containerStruct0.ReadField1(jsProt2013)
    if err2014 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ParamMap
    value0 := argvalue0
    fmt.Print(client.NotifiedRedirect(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyBuddyOnAir":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyBuddyOnAir requires 2 args")
      flag.Usage()
    }
    tmp0, err2015 := (strconv.Atoi(flag.Arg(1)))
    if err2015 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2016 := flag.Arg(2)
    mbTrans2017 := thrift.NewTMemoryBufferLen(len(arg2016))
    defer mbTrans2017.Close()
    _, err2018 := mbTrans2017.WriteString(arg2016)
    if err2018 != nil { 
      Usage()
      return
    }
    factory2019 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2020 := factory2019.GetProtocol(mbTrans2017)
    containerStruct1 := line.NewTalkServiceNotifyBuddyOnAirArgs()
    err2021 := containerStruct1.ReadField2(jsProt2020)
    if err2021 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ReceiverMids
    value1 := argvalue1
    fmt.Print(client.NotifyBuddyOnAir(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyIndividualEvent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyIndividualEvent requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationStatus(tmp0)
    value0 := argvalue0
    arg2022 := flag.Arg(2)
    mbTrans2023 := thrift.NewTMemoryBufferLen(len(arg2022))
    defer mbTrans2023.Close()
    _, err2024 := mbTrans2023.WriteString(arg2022)
    if err2024 != nil { 
      Usage()
      return
    }
    factory2025 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2026 := factory2025.GetProtocol(mbTrans2023)
    containerStruct1 := line.NewTalkServiceNotifyIndividualEventArgs()
    err2027 := containerStruct1.ReadField2(jsProt2026)
    if err2027 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ReceiverMids
    value1 := argvalue1
    fmt.Print(client.NotifyIndividualEvent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyInstalled":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyInstalled requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyInstalled(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyRegistrationComplete":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyRegistrationComplete requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyRegistrationComplete(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifySleep":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifySleep requires 2 args")
      flag.Usage()
    }
    argvalue0, err2032 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2032 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2033 := (strconv.Atoi(flag.Arg(2)))
    if err2033 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.NotifySleep(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyUpdated":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyUpdated requires 2 args")
      flag.Usage()
    }
    argvalue0, err2034 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2034 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2035 := flag.Arg(2)
    mbTrans2036 := thrift.NewTMemoryBufferLen(len(arg2035))
    defer mbTrans2036.Close()
    _, err2037 := mbTrans2036.WriteString(arg2035)
    if err2037 != nil {
      Usage()
      return
    }
    factory2038 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2039 := factory2038.GetProtocol(mbTrans2036)
    argvalue1 := line.NewDeviceInfo()
    err2040 := argvalue1.Read(jsProt2039)
    if err2040 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.NotifyUpdated(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "openProximityMatch":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "OpenProximityMatch requires 1 args")
      flag.Usage()
    }
    arg2041 := flag.Arg(1)
    mbTrans2042 := thrift.NewTMemoryBufferLen(len(arg2041))
    defer mbTrans2042.Close()
    _, err2043 := mbTrans2042.WriteString(arg2041)
    if err2043 != nil {
      Usage()
      return
    }
    factory2044 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2045 := factory2044.GetProtocol(mbTrans2042)
    argvalue0 := line.NewLocation()
    err2046 := argvalue0.Read(jsProt2045)
    if err2046 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.OpenProximityMatch(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerBuddyUser":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterBuddyUser requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterBuddyUser(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerBuddyUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterBuddyUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err2049 := (strconv.Atoi(flag.Arg(1)))
    if err2049 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterBuddyUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerDevice":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegisterDevice requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RegisterDevice(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerDeviceWithIdentityCredential":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithIdentityCredential requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.IdentityProvider(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.RegisterDeviceWithIdentityCredential(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerDeviceWithoutPhoneNumber":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithoutPhoneNumber requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2057 := flag.Arg(3)
    mbTrans2058 := thrift.NewTMemoryBufferLen(len(arg2057))
    defer mbTrans2058.Close()
    _, err2059 := mbTrans2058.WriteString(arg2057)
    if err2059 != nil {
      Usage()
      return
    }
    factory2060 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2061 := factory2060.GetProtocol(mbTrans2058)
    argvalue2 := line.NewDeviceInfo()
    err2062 := argvalue2.Read(jsProt2061)
    if err2062 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.RegisterDeviceWithoutPhoneNumber(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "registerDeviceWithoutPhoneNumberWithIdentityCredential":
    if flag.NArg() - 1 != 8 {
      fmt.Fprintln(os.Stderr, "RegisterDeviceWithoutPhoneNumberWithIdentityCredential requires 8 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2065 := flag.Arg(3)
    mbTrans2066 := thrift.NewTMemoryBufferLen(len(arg2065))
    defer mbTrans2066.Close()
    _, err2067 := mbTrans2066.WriteString(arg2065)
    if err2067 != nil {
      Usage()
      return
    }
    factory2068 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2069 := factory2068.GetProtocol(mbTrans2066)
    argvalue2 := line.NewDeviceInfo()
    err2070 := argvalue2.Read(jsProt2069)
    if err2070 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := line.IdentityProvider(tmp3)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7 := flag.Arg(8)
    value7 := argvalue7
    fmt.Print(client.RegisterDeviceWithoutPhoneNumberWithIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7))
    fmt.Print("\n")
    break
  case "registerUserid":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterUserid requires 2 args")
      flag.Usage()
    }
    tmp0, err2075 := (strconv.Atoi(flag.Arg(1)))
    if err2075 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterUserid(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerWapDevice":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterWapDevice requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg2080 := flag.Arg(4)
    mbTrans2081 := thrift.NewTMemoryBufferLen(len(arg2080))
    defer mbTrans2081.Close()
    _, err2082 := mbTrans2081.WriteString(arg2080)
    if err2082 != nil {
      Usage()
      return
    }
    factory2083 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2084 := factory2083.GetProtocol(mbTrans2081)
    argvalue3 := line.NewDeviceInfo()
    err2085 := argvalue3.Read(jsProt2084)
    if err2085 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RegisterWapDevice(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerWithExistingSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RegisterWithExistingSnsIdAndIdentityCredential requires 4 args")
      flag.Usage()
    }
    arg2086 := flag.Arg(1)
    mbTrans2087 := thrift.NewTMemoryBufferLen(len(arg2086))
    defer mbTrans2087.Close()
    _, err2088 := mbTrans2087.WriteString(arg2086)
    if err2088 != nil {
      Usage()
      return
    }
    factory2089 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2090 := factory2089.GetProtocol(mbTrans2087)
    argvalue0 := line.NewIdentityCredential()
    err2091 := argvalue0.Read(jsProt2090)
    if err2091 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg2094 := flag.Arg(4)
    mbTrans2095 := thrift.NewTMemoryBufferLen(len(arg2094))
    defer mbTrans2095.Close()
    _, err2096 := mbTrans2095.WriteString(arg2094)
    if err2096 != nil {
      Usage()
      return
    }
    factory2097 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2098 := factory2097.GetProtocol(mbTrans2095)
    argvalue3 := line.NewDeviceInfo()
    err2099 := argvalue3.Read(jsProt2098)
    if err2099 != nil {
      Usage()
      return
    }
    value3 := argvalue3
    fmt.Print(client.RegisterWithExistingSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "registerWithSnsId":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsId requires 6 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg2103 := flag.Arg(5)
    mbTrans2104 := thrift.NewTMemoryBufferLen(len(arg2103))
    defer mbTrans2104.Close()
    _, err2105 := mbTrans2104.WriteString(arg2103)
    if err2105 != nil {
      Usage()
      return
    }
    factory2106 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2107 := factory2106.GetProtocol(mbTrans2104)
    argvalue4 := line.NewDeviceInfo()
    err2108 := argvalue4.Read(jsProt2107)
    if err2108 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    fmt.Print(client.RegisterWithSnsId(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "registerWithSnsIdAndIdentityCredential":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterWithSnsIdAndIdentityCredential requires 6 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2111 := flag.Arg(3)
    mbTrans2112 := thrift.NewTMemoryBufferLen(len(arg2111))
    defer mbTrans2112.Close()
    _, err2113 := mbTrans2112.WriteString(arg2111)
    if err2113 != nil {
      Usage()
      return
    }
    factory2114 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2115 := factory2114.GetProtocol(mbTrans2112)
    argvalue2 := line.NewIdentityCredential()
    err2116 := argvalue2.Read(jsProt2115)
    if err2116 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    arg2119 := flag.Arg(6)
    mbTrans2120 := thrift.NewTMemoryBufferLen(len(arg2119))
    defer mbTrans2120.Close()
    _, err2121 := mbTrans2120.WriteString(arg2119)
    if err2121 != nil {
      Usage()
      return
    }
    factory2122 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2123 := factory2122.GetProtocol(mbTrans2120)
    argvalue5 := line.NewDeviceInfo()
    err2124 := argvalue5.Read(jsProt2123)
    if err2124 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.RegisterWithSnsIdAndIdentityCredential(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "reissueDeviceCredential":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReissueDeviceCredential requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReissueDeviceCredential(context.Background()))
    fmt.Print("\n")
    break
  case "reissueUserTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReissueUserTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err2125 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2125 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err2126 := (strconv.Atoi(flag.Arg(2)))
    if err2126 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.ReissueUserTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getMessageReadRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageReadRange requires 1 args")
      flag.Usage()
    }
    arg2127 := flag.Arg(1)
    mbTrans2128 := thrift.NewTMemoryBufferLen(len(arg2127))
    defer mbTrans2128.Close()
    _, err2129 := mbTrans2128.WriteString(arg2127)
    if err2129 != nil { 
      Usage()
      return
    }
    factory2130 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2131 := factory2130.GetProtocol(mbTrans2128)
    containerStruct0 := line.NewTalkServiceGetMessageReadRangeArgs()
    err2132 := containerStruct0.ReadField1(jsProt2131)
    if err2132 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatIds
    value0 := argvalue0
    fmt.Print(client.GetMessageReadRange(context.Background(), value0))
    fmt.Print("\n")
    break
  case "rejectGroupInvitation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RejectGroupInvitation requires 2 args")
      flag.Usage()
    }
    tmp0, err2133 := (strconv.Atoi(flag.Arg(1)))
    if err2133 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RejectGroupInvitation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "releaseSession":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ReleaseSession requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ReleaseSession(context.Background()))
    fmt.Print("\n")
    break
  case "removeAllMessages":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveAllMessages requires 2 args")
      flag.Usage()
    }
    tmp0, err2135 := (strconv.Atoi(flag.Arg(1)))
    if err2135 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveAllMessages(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeBuddyLocation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveBuddyLocation requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err2138 := (strconv.Atoi(flag.Arg(2)))
    if err2138 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.RemoveBuddyLocation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeMessage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMessage requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveMessage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "makeUserAddMyselfAsContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MakeUserAddMyselfAsContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.MakeUserAddMyselfAsContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeMessageFromMyHome":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveMessageFromMyHome requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.RemoveMessageFromMyHome(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeSnsId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveSnsId requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.SnsIdType(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveSnsId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "report":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "Report requires 3 args")
      flag.Usage()
    }
    argvalue0, err2142 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2142 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.SyncCategory(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.Report(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reportContacts":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "ReportContacts requires 4 args")
      flag.Usage()
    }
    argvalue0, err2144 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2144 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.SyncCategory(tmp1)
    value1 := argvalue1
    arg2145 := flag.Arg(3)
    mbTrans2146 := thrift.NewTMemoryBufferLen(len(arg2145))
    defer mbTrans2146.Close()
    _, err2147 := mbTrans2146.WriteString(arg2145)
    if err2147 != nil { 
      Usage()
      return
    }
    factory2148 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2149 := factory2148.GetProtocol(mbTrans2146)
    containerStruct2 := line.NewTalkServiceReportContactsArgs()
    err2150 := containerStruct2.ReadField3(jsProt2149)
    if err2150 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ContactReports
    value2 := argvalue2
    tmp3, err := (strconv.Atoi(flag.Arg(4)))
    if err != nil {
      Usage()
     return
    }
    argvalue3 := line.SyncActionType(tmp3)
    value3 := argvalue3
    fmt.Print(client.ReportContacts(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "reportGroups":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportGroups requires 2 args")
      flag.Usage()
    }
    argvalue0, err2151 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2151 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2152 := flag.Arg(2)
    mbTrans2153 := thrift.NewTMemoryBufferLen(len(arg2152))
    defer mbTrans2153.Close()
    _, err2154 := mbTrans2153.WriteString(arg2152)
    if err2154 != nil { 
      Usage()
      return
    }
    factory2155 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2156 := factory2155.GetProtocol(mbTrans2153)
    containerStruct1 := line.NewTalkServiceReportGroupsArgs()
    err2157 := containerStruct1.ReadField2(jsProt2156)
    if err2157 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Groups
    value1 := argvalue1
    fmt.Print(client.ReportGroups(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportProfile requires 2 args")
      flag.Usage()
    }
    argvalue0, err2158 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2158 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2159 := flag.Arg(2)
    mbTrans2160 := thrift.NewTMemoryBufferLen(len(arg2159))
    defer mbTrans2160.Close()
    _, err2161 := mbTrans2160.WriteString(arg2159)
    if err2161 != nil {
      Usage()
      return
    }
    factory2162 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2163 := factory2162.GetProtocol(mbTrans2160)
    argvalue1 := line.NewProfile()
    err2164 := argvalue1.Read(jsProt2163)
    if err2164 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ReportProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportRooms":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportRooms requires 2 args")
      flag.Usage()
    }
    argvalue0, err2165 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2165 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2166 := flag.Arg(2)
    mbTrans2167 := thrift.NewTMemoryBufferLen(len(arg2166))
    defer mbTrans2167.Close()
    _, err2168 := mbTrans2167.WriteString(arg2166)
    if err2168 != nil { 
      Usage()
      return
    }
    factory2169 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2170 := factory2169.GetProtocol(mbTrans2167)
    containerStruct1 := line.NewTalkServiceReportRoomsArgs()
    err2171 := containerStruct1.ReadField2(jsProt2170)
    if err2171 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Rooms
    value1 := argvalue1
    fmt.Print(client.ReportRooms(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "findAndAddContactByMetaTag":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FindAndAddContactByMetaTag requires 3 args")
      flag.Usage()
    }
    tmp0, err2172 := (strconv.Atoi(flag.Arg(1)))
    if err2172 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.FindAndAddContactByMetaTag(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "reportSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReportSettings requires 2 args")
      flag.Usage()
    }
    argvalue0, err2175 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err2175 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg2176 := flag.Arg(2)
    mbTrans2177 := thrift.NewTMemoryBufferLen(len(arg2176))
    defer mbTrans2177.Close()
    _, err2178 := mbTrans2177.WriteString(arg2176)
    if err2178 != nil {
      Usage()
      return
    }
    factory2179 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2180 := factory2179.GetProtocol(mbTrans2177)
    argvalue1 := line.NewSettings()
    err2181 := argvalue1.Read(jsProt2180)
    if err2181 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.ReportSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reportSpam":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "ReportSpam requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2183 := flag.Arg(2)
    mbTrans2184 := thrift.NewTMemoryBufferLen(len(arg2183))
    defer mbTrans2184.Close()
    _, err2185 := mbTrans2184.WriteString(arg2183)
    if err2185 != nil { 
      Usage()
      return
    }
    factory2186 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2187 := factory2186.GetProtocol(mbTrans2184)
    containerStruct1 := line.NewTalkServiceReportSpamArgs()
    err2188 := containerStruct1.ReadField2(jsProt2187)
    if err2188 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.MemberMids
    value1 := argvalue1
    arg2189 := flag.Arg(3)
    mbTrans2190 := thrift.NewTMemoryBufferLen(len(arg2189))
    defer mbTrans2190.Close()
    _, err2191 := mbTrans2190.WriteString(arg2189)
    if err2191 != nil { 
      Usage()
      return
    }
    factory2192 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2193 := factory2192.GetProtocol(mbTrans2190)
    containerStruct2 := line.NewTalkServiceReportSpamArgs()
    err2194 := containerStruct2.ReadField3(jsProt2193)
    if err2194 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.SpammerReasons
    value2 := argvalue2
    arg2195 := flag.Arg(4)
    mbTrans2196 := thrift.NewTMemoryBufferLen(len(arg2195))
    defer mbTrans2196.Close()
    _, err2197 := mbTrans2196.WriteString(arg2195)
    if err2197 != nil { 
      Usage()
      return
    }
    factory2198 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2199 := factory2198.GetProtocol(mbTrans2196)
    containerStruct3 := line.NewTalkServiceReportSpamArgs()
    err2200 := containerStruct3.ReadField4(jsProt2199)
    if err2200 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.SenderMids
    value3 := argvalue3
    arg2201 := flag.Arg(5)
    mbTrans2202 := thrift.NewTMemoryBufferLen(len(arg2201))
    defer mbTrans2202.Close()
    _, err2203 := mbTrans2202.WriteString(arg2201)
    if err2203 != nil { 
      Usage()
      return
    }
    factory2204 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2205 := factory2204.GetProtocol(mbTrans2202)
    containerStruct4 := line.NewTalkServiceReportSpamArgs()
    err2206 := containerStruct4.ReadField5(jsProt2205)
    if err2206 != nil {
      Usage()
      return
    }
    argvalue4 := containerStruct4.SpamMessageIds
    value4 := argvalue4
    arg2207 := flag.Arg(6)
    mbTrans2208 := thrift.NewTMemoryBufferLen(len(arg2207))
    defer mbTrans2208.Close()
    _, err2209 := mbTrans2208.WriteString(arg2207)
    if err2209 != nil { 
      Usage()
      return
    }
    factory2210 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2211 := factory2210.GetProtocol(mbTrans2208)
    containerStruct5 := line.NewTalkServiceReportSpamArgs()
    err2212 := containerStruct5.ReadField6(jsProt2211)
    if err2212 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.SpamMessages
    value5 := argvalue5
    fmt.Print(client.ReportSpam(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "reportSpammer":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReportSpammer requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2214 := flag.Arg(2)
    mbTrans2215 := thrift.NewTMemoryBufferLen(len(arg2214))
    defer mbTrans2215.Close()
    _, err2216 := mbTrans2215.WriteString(arg2214)
    if err2216 != nil { 
      Usage()
      return
    }
    factory2217 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2218 := factory2217.GetProtocol(mbTrans2215)
    containerStruct1 := line.NewTalkServiceReportSpammerArgs()
    err2219 := containerStruct1.ReadField2(jsProt2218)
    if err2219 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.SpammerReasons
    value1 := argvalue1
    arg2220 := flag.Arg(3)
    mbTrans2221 := thrift.NewTMemoryBufferLen(len(arg2220))
    defer mbTrans2221.Close()
    _, err2222 := mbTrans2221.WriteString(arg2220)
    if err2222 != nil { 
      Usage()
      return
    }
    factory2223 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2224 := factory2223.GetProtocol(mbTrans2221)
    containerStruct2 := line.NewTalkServiceReportSpammerArgs()
    err2225 := containerStruct2.ReadField3(jsProt2224)
    if err2225 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.SpamMessageIds
    value2 := argvalue2
    fmt.Print(client.ReportSpammer(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "requestAccountPasswordReset":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "RequestAccountPasswordReset requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.RequestAccountPasswordReset(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "requestEmailConfirmation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestEmailConfirmation requires 1 args")
      flag.Usage()
    }
    arg2228 := flag.Arg(1)
    mbTrans2229 := thrift.NewTMemoryBufferLen(len(arg2228))
    defer mbTrans2229.Close()
    _, err2230 := mbTrans2229.WriteString(arg2228)
    if err2230 != nil {
      Usage()
      return
    }
    factory2231 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2232 := factory2231.GetProtocol(mbTrans2229)
    argvalue0 := line.NewEmailConfirmation()
    err2233 := argvalue0.Read(jsProt2232)
    if err2233 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequestEmailConfirmation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestIdentityUnbind":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RequestIdentityUnbind requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RequestIdentityUnbind(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "resendEmailConfirmation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendEmailConfirmation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendEmailConfirmation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "resendPinCode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendPinCode requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendPinCode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "resendPinCodeBySMS":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ResendPinCodeBySMS requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.ResendPinCodeBySMS(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendChatChecked":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendChatChecked requires 3 args")
      flag.Usage()
    }
    tmp0, err2238 := (strconv.Atoi(flag.Arg(1)))
    if err2238 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendChatChecked(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendMessageAwaitCommit":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessageAwaitCommit requires 2 args")
      flag.Usage()
    }
    tmp0, err2241 := (strconv.Atoi(flag.Arg(1)))
    if err2241 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2242 := flag.Arg(2)
    mbTrans2243 := thrift.NewTMemoryBufferLen(len(arg2242))
    defer mbTrans2243.Close()
    _, err2244 := mbTrans2243.WriteString(arg2242)
    if err2244 != nil {
      Usage()
      return
    }
    factory2245 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2246 := factory2245.GetProtocol(mbTrans2243)
    argvalue1 := line.NewMessage()
    err2247 := argvalue1.Read(jsProt2246)
    if err2247 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessageAwaitCommit(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendChatRemoved":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendChatRemoved requires 3 args")
      flag.Usage()
    }
    tmp0, err2248 := (strconv.Atoi(flag.Arg(1)))
    if err2248 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendChatRemoved(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendContentPreviewUpdated":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendContentPreviewUpdated requires 3 args")
      flag.Usage()
    }
    tmp0, err2251 := (strconv.Atoi(flag.Arg(1)))
    if err2251 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2253 := flag.Arg(3)
    mbTrans2254 := thrift.NewTMemoryBufferLen(len(arg2253))
    defer mbTrans2254.Close()
    _, err2255 := mbTrans2254.WriteString(arg2253)
    if err2255 != nil { 
      Usage()
      return
    }
    factory2256 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2257 := factory2256.GetProtocol(mbTrans2254)
    containerStruct2 := line.NewTalkServiceSendContentPreviewUpdatedArgs()
    err2258 := containerStruct2.ReadField3(jsProt2257)
    if err2258 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.ReceiverMids
    value2 := argvalue2
    fmt.Print(client.SendContentPreviewUpdated(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendContentReceipt":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendContentReceipt requires 3 args")
      flag.Usage()
    }
    tmp0, err2259 := (strconv.Atoi(flag.Arg(1)))
    if err2259 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.SendContentReceipt(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendDummyPush":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "SendDummyPush requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.SendDummyPush(context.Background()))
    fmt.Print("\n")
    break
  case "removeE2EEPublicKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveE2EEPublicKey requires 1 args")
      flag.Usage()
    }
    arg2262 := flag.Arg(1)
    mbTrans2263 := thrift.NewTMemoryBufferLen(len(arg2262))
    defer mbTrans2263.Close()
    _, err2264 := mbTrans2263.WriteString(arg2262)
    if err2264 != nil {
      Usage()
      return
    }
    factory2265 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2266 := factory2265.GetProtocol(mbTrans2263)
    argvalue0 := line.NewE2EEPublicKey()
    err2267 := argvalue0.Read(jsProt2266)
    if err2267 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveE2EEPublicKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "negotiateE2EEPublicKey":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "NegotiateE2EEPublicKey requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.NegotiateE2EEPublicKey(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getE2EEPublicKey":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKey requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err2270 := (strconv.Atoi(flag.Arg(2)))
    if err2270 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    tmp2, err2271 := (strconv.Atoi(flag.Arg(3)))
    if err2271 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetE2EEPublicKey(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "requestE2EEKeyExchange":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "RequestE2EEKeyExchange requires 4 args")
      flag.Usage()
    }
    tmp0, err2272 := (strconv.Atoi(flag.Arg(1)))
    if err2272 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    arg2274 := flag.Arg(3)
    mbTrans2275 := thrift.NewTMemoryBufferLen(len(arg2274))
    defer mbTrans2275.Close()
    _, err2276 := mbTrans2275.WriteString(arg2274)
    if err2276 != nil {
      Usage()
      return
    }
    factory2277 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2278 := factory2277.GetProtocol(mbTrans2275)
    argvalue2 := line.NewE2EEPublicKey()
    err2279 := argvalue2.Read(jsProt2278)
    if err2279 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    argvalue3 := []byte(flag.Arg(4))
    value3 := argvalue3
    fmt.Print(client.RequestE2EEKeyExchange(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getLastE2EEPublicKeys":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLastE2EEPublicKeys requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetLastE2EEPublicKeys(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerE2EEPublicKey":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterE2EEPublicKey requires 2 args")
      flag.Usage()
    }
    tmp0, err2282 := (strconv.Atoi(flag.Arg(1)))
    if err2282 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2283 := flag.Arg(2)
    mbTrans2284 := thrift.NewTMemoryBufferLen(len(arg2283))
    defer mbTrans2284.Close()
    _, err2285 := mbTrans2284.WriteString(arg2283)
    if err2285 != nil {
      Usage()
      return
    }
    factory2286 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2287 := factory2286.GetProtocol(mbTrans2284)
    argvalue1 := line.NewE2EEPublicKey()
    err2288 := argvalue1.Read(jsProt2287)
    if err2288 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.RegisterE2EEPublicKey(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getE2EEPublicKeys":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKeys requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetE2EEPublicKeys(context.Background()))
    fmt.Print("\n")
    break
  case "getE2EEPublicKeysEx":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetE2EEPublicKeysEx requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1) == "true"
    value0 := argvalue0
    fmt.Print(client.GetE2EEPublicKeysEx(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getReadMessageOpsInBulk":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetReadMessageOpsInBulk requires 1 args")
      flag.Usage()
    }
    arg2290 := flag.Arg(1)
    mbTrans2291 := thrift.NewTMemoryBufferLen(len(arg2290))
    defer mbTrans2291.Close()
    _, err2292 := mbTrans2291.WriteString(arg2290)
    if err2292 != nil { 
      Usage()
      return
    }
    factory2293 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2294 := factory2293.GetProtocol(mbTrans2291)
    containerStruct0 := line.NewTalkServiceGetReadMessageOpsInBulkArgs()
    err2295 := containerStruct0.ReadField1(jsProt2294)
    if err2295 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ChatIds
    value0 := argvalue0
    fmt.Print(client.GetReadMessageOpsInBulk(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendEvent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendEvent requires 2 args")
      flag.Usage()
    }
    tmp0, err2296 := (strconv.Atoi(flag.Arg(1)))
    if err2296 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2297 := flag.Arg(2)
    mbTrans2298 := thrift.NewTMemoryBufferLen(len(arg2297))
    defer mbTrans2298.Close()
    _, err2299 := mbTrans2298.WriteString(arg2297)
    if err2299 != nil {
      Usage()
      return
    }
    factory2300 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2301 := factory2300.GetProtocol(mbTrans2298)
    argvalue1 := line.NewMessage()
    err2302 := argvalue1.Read(jsProt2301)
    if err2302 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendEvent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err2303 := (strconv.Atoi(flag.Arg(1)))
    if err2303 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2304 := flag.Arg(2)
    mbTrans2305 := thrift.NewTMemoryBufferLen(len(arg2304))
    defer mbTrans2305.Close()
    _, err2306 := mbTrans2305.WriteString(arg2304)
    if err2306 != nil {
      Usage()
      return
    }
    factory2307 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2308 := factory2307.GetProtocol(mbTrans2305)
    argvalue1 := line.NewMessage()
    err2309 := argvalue1.Read(jsProt2308)
    if err2309 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendMessageIgnored":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendMessageIgnored requires 3 args")
      flag.Usage()
    }
    tmp0, err2310 := (strconv.Atoi(flag.Arg(1)))
    if err2310 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2312 := flag.Arg(3)
    mbTrans2313 := thrift.NewTMemoryBufferLen(len(arg2312))
    defer mbTrans2313.Close()
    _, err2314 := mbTrans2313.WriteString(arg2312)
    if err2314 != nil { 
      Usage()
      return
    }
    factory2315 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2316 := factory2315.GetProtocol(mbTrans2313)
    containerStruct2 := line.NewTalkServiceSendMessageIgnoredArgs()
    err2317 := containerStruct2.ReadField3(jsProt2316)
    if err2317 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.MessageIds
    value2 := argvalue2
    fmt.Print(client.SendMessageIgnored(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendMessageReceipt":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendMessageReceipt requires 3 args")
      flag.Usage()
    }
    tmp0, err2318 := (strconv.Atoi(flag.Arg(1)))
    if err2318 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2320 := flag.Arg(3)
    mbTrans2321 := thrift.NewTMemoryBufferLen(len(arg2320))
    defer mbTrans2321.Close()
    _, err2322 := mbTrans2321.WriteString(arg2320)
    if err2322 != nil { 
      Usage()
      return
    }
    factory2323 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2324 := factory2323.GetProtocol(mbTrans2321)
    containerStruct2 := line.NewTalkServiceSendMessageReceiptArgs()
    err2325 := containerStruct2.ReadField3(jsProt2324)
    if err2325 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.MessageIds
    value2 := argvalue2
    fmt.Print(client.SendMessageReceipt(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "findContactByMetaTag":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FindContactByMetaTag requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.FindContactByMetaTag(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendMessageToMyHome":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendMessageToMyHome requires 2 args")
      flag.Usage()
    }
    tmp0, err2328 := (strconv.Atoi(flag.Arg(1)))
    if err2328 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2329 := flag.Arg(2)
    mbTrans2330 := thrift.NewTMemoryBufferLen(len(arg2329))
    defer mbTrans2330.Close()
    _, err2331 := mbTrans2330.WriteString(arg2329)
    if err2331 != nil {
      Usage()
      return
    }
    factory2332 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2333 := factory2332.GetProtocol(mbTrans2330)
    argvalue1 := line.NewMessage()
    err2334 := argvalue1.Read(jsProt2333)
    if err2334 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendMessageToMyHome(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setBuddyLocation":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetBuddyLocation requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err2336 := (strconv.Atoi(flag.Arg(2)))
    if err2336 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg2337 := flag.Arg(3)
    mbTrans2338 := thrift.NewTMemoryBufferLen(len(arg2337))
    defer mbTrans2338.Close()
    _, err2339 := mbTrans2338.WriteString(arg2337)
    if err2339 != nil {
      Usage()
      return
    }
    factory2340 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2341 := factory2340.GetProtocol(mbTrans2338)
    argvalue2 := line.NewGeolocation()
    err2342 := argvalue2.Read(jsProt2341)
    if err2342 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.SetBuddyLocation(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setIdentityCredential":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SetIdentityCredential requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.IdentityProvider(tmp2)
    value2 := argvalue2
    fmt.Print(client.SetIdentityCredential(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setNotificationsEnabled":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SetNotificationsEnabled requires 4 args")
      flag.Usage()
    }
    tmp0, err2345 := (strconv.Atoi(flag.Arg(1)))
    if err2345 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.MIDType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4) == "true"
    value3 := argvalue3
    fmt.Print(client.SetNotificationsEnabled(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "startUpdateVerification":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "StartUpdateVerification requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.CarrierCode(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg2351 := flag.Arg(5)
    mbTrans2352 := thrift.NewTMemoryBufferLen(len(arg2351))
    defer mbTrans2352.Close()
    _, err2353 := mbTrans2352.WriteString(arg2351)
    if err2353 != nil {
      Usage()
      return
    }
    factory2354 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2355 := factory2354.GetProtocol(mbTrans2352)
    argvalue4 := line.NewDeviceInfo()
    err2356 := argvalue4.Read(jsProt2355)
    if err2356 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.StartUpdateVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "startVerification":
    if flag.NArg() - 1 != 10 {
      fmt.Fprintln(os.Stderr, "StartVerification requires 10 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.CarrierCode(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    arg2362 := flag.Arg(5)
    mbTrans2363 := thrift.NewTMemoryBufferLen(len(arg2362))
    defer mbTrans2363.Close()
    _, err2364 := mbTrans2363.WriteString(arg2362)
    if err2364 != nil {
      Usage()
      return
    }
    factory2365 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2366 := factory2365.GetProtocol(mbTrans2363)
    argvalue4 := line.NewDeviceInfo()
    err2367 := argvalue4.Read(jsProt2366)
    if err2367 != nil {
      Usage()
      return
    }
    value4 := argvalue4
    argvalue5 := flag.Arg(6)
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    argvalue7 := flag.Arg(8)
    value7 := argvalue7
    arg2371 := flag.Arg(9)
    mbTrans2372 := thrift.NewTMemoryBufferLen(len(arg2371))
    defer mbTrans2372.Close()
    _, err2373 := mbTrans2372.WriteString(arg2371)
    if err2373 != nil {
      Usage()
      return
    }
    factory2374 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2375 := factory2374.GetProtocol(mbTrans2372)
    argvalue8 := line.NewSIMInfo()
    err2376 := argvalue8.Read(jsProt2375)
    if err2376 != nil {
      Usage()
      return
    }
    value8 := argvalue8
    argvalue9 := flag.Arg(10)
    value9 := argvalue9
    fmt.Print(client.StartVerification(context.Background(), value0, value1, value2, value3, value4, value5, value6, value7, value8, value9))
    fmt.Print("\n")
    break
  case "updateGroupPreferenceAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateGroupPreferenceAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err2378 := (strconv.Atoi(flag.Arg(1)))
    if err2378 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    arg2380 := flag.Arg(3)
    mbTrans2381 := thrift.NewTMemoryBufferLen(len(arg2380))
    defer mbTrans2381.Close()
    _, err2382 := mbTrans2381.WriteString(arg2380)
    if err2382 != nil { 
      Usage()
      return
    }
    factory2383 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2384 := factory2383.GetProtocol(mbTrans2381)
    containerStruct2 := line.NewTalkServiceUpdateGroupPreferenceAttributeArgs()
    err2385 := containerStruct2.ReadField3(jsProt2384)
    if err2385 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.UpdatedAttrs
    value2 := argvalue2
    fmt.Print(client.UpdateGroupPreferenceAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "createRoomV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CreateRoomV2 requires 2 args")
      flag.Usage()
    }
    tmp0, err2386 := (strconv.Atoi(flag.Arg(1)))
    if err2386 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2387 := flag.Arg(2)
    mbTrans2388 := thrift.NewTMemoryBufferLen(len(arg2387))
    defer mbTrans2388.Close()
    _, err2389 := mbTrans2388.WriteString(arg2387)
    if err2389 != nil { 
      Usage()
      return
    }
    factory2390 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2391 := factory2390.GetProtocol(mbTrans2388)
    containerStruct1 := line.NewTalkServiceCreateRoomV2Args()
    err2392 := containerStruct1.ReadField2(jsProt2391)
    if err2392 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ContactIds
    value1 := argvalue1
    fmt.Print(client.CreateRoomV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "storeUpdateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "StoreUpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err2393 := (strconv.Atoi(flag.Arg(1)))
    if err2393 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.StoreUpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "syncContactBySnsIds":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContactBySnsIds requires 2 args")
      flag.Usage()
    }
    tmp0, err2395 := (strconv.Atoi(flag.Arg(1)))
    if err2395 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2396 := flag.Arg(2)
    mbTrans2397 := thrift.NewTMemoryBufferLen(len(arg2396))
    defer mbTrans2397.Close()
    _, err2398 := mbTrans2397.WriteString(arg2396)
    if err2398 != nil { 
      Usage()
      return
    }
    factory2399 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2400 := factory2399.GetProtocol(mbTrans2397)
    containerStruct1 := line.NewTalkServiceSyncContactBySnsIdsArgs()
    err2401 := containerStruct1.ReadField2(jsProt2400)
    if err2401 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Modifications
    value1 := argvalue1
    fmt.Print(client.SyncContactBySnsIds(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "syncContacts":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SyncContacts requires 2 args")
      flag.Usage()
    }
    tmp0, err2402 := (strconv.Atoi(flag.Arg(1)))
    if err2402 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2403 := flag.Arg(2)
    mbTrans2404 := thrift.NewTMemoryBufferLen(len(arg2403))
    defer mbTrans2404.Close()
    _, err2405 := mbTrans2404.WriteString(arg2403)
    if err2405 != nil { 
      Usage()
      return
    }
    factory2406 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2407 := factory2406.GetProtocol(mbTrans2404)
    containerStruct1 := line.NewTalkServiceSyncContactsArgs()
    err2408 := containerStruct1.ReadField2(jsProt2407)
    if err2408 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.LocalContacts
    value1 := argvalue1
    fmt.Print(client.SyncContacts(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "trySendMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "TrySendMessage requires 2 args")
      flag.Usage()
    }
    tmp0, err2409 := (strconv.Atoi(flag.Arg(1)))
    if err2409 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2410 := flag.Arg(2)
    mbTrans2411 := thrift.NewTMemoryBufferLen(len(arg2410))
    defer mbTrans2411.Close()
    _, err2412 := mbTrans2411.WriteString(arg2410)
    if err2412 != nil {
      Usage()
      return
    }
    factory2413 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2414 := factory2413.GetProtocol(mbTrans2411)
    argvalue1 := line.NewMessage()
    err2415 := argvalue1.Read(jsProt2414)
    if err2415 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.TrySendMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNextMessagesV2":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNextMessagesV2 requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2417 := flag.Arg(2)
    mbTrans2418 := thrift.NewTMemoryBufferLen(len(arg2417))
    defer mbTrans2418.Close()
    _, err2419 := mbTrans2418.WriteString(arg2417)
    if err2419 != nil {
      Usage()
      return
    }
    factory2420 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2421 := factory2420.GetProtocol(mbTrans2418)
    argvalue1 := line.NewMessageBoxV2MessageId()
    err2422 := argvalue1.Read(jsProt2421)
    if err2422 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err2423 := (strconv.Atoi(flag.Arg(3)))
    if err2423 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.GetNextMessagesV2(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getMessageBoxCompactWrapUpV2":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMessageBoxCompactWrapUpV2 requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMessageBoxCompactWrapUpV2(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getRecentMessagesV2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetRecentMessagesV2 requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err2426 := (strconv.Atoi(flag.Arg(2)))
    if err2426 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.GetRecentMessagesV2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "validateContactsOnBot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ValidateContactsOnBot requires 1 args")
      flag.Usage()
    }
    arg2427 := flag.Arg(1)
    mbTrans2428 := thrift.NewTMemoryBufferLen(len(arg2427))
    defer mbTrans2428.Close()
    _, err2429 := mbTrans2428.WriteString(arg2427)
    if err2429 != nil { 
      Usage()
      return
    }
    factory2430 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2431 := factory2430.GetProtocol(mbTrans2428)
    containerStruct0 := line.NewTalkServiceValidateContactsOnBotArgs()
    err2432 := containerStruct0.ReadField1(jsProt2431)
    if err2432 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Contacts
    value0 := argvalue0
    fmt.Print(client.ValidateContactsOnBot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "tryFriendRequest":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "TryFriendRequest requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.FriendRequestMethod(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.TryFriendRequest(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "unblockContact":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockContact requires 2 args")
      flag.Usage()
    }
    tmp0, err2435 := (strconv.Atoi(flag.Arg(1)))
    if err2435 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockContact(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockRecommendation":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockRecommendation requires 2 args")
      flag.Usage()
    }
    tmp0, err2437 := (strconv.Atoi(flag.Arg(1)))
    if err2437 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockRecommendation(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unregisterUserAndDevice":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "UnregisterUserAndDevice requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.UnregisterUserAndDevice(context.Background()))
    fmt.Print("\n")
    break
  case "updateApnsDeviceToken":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateApnsDeviceToken requires 1 args")
      flag.Usage()
    }
    argvalue0 := []byte(flag.Arg(1))
    value0 := argvalue0
    fmt.Print(client.UpdateApnsDeviceToken(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateBuddySetting":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddySetting requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateBuddySetting(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateC2DMRegistrationId":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateC2DMRegistrationId requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UpdateC2DMRegistrationId(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateContactSetting":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "UpdateContactSetting requires 4 args")
      flag.Usage()
    }
    tmp0, err2443 := (strconv.Atoi(flag.Arg(1)))
    if err2443 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.ContactSetting(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.UpdateContactSetting(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "updateCustomModeSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateCustomModeSettings requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.CustomMode(tmp0)
    value0 := argvalue0
    arg2446 := flag.Arg(2)
    mbTrans2447 := thrift.NewTMemoryBufferLen(len(arg2446))
    defer mbTrans2447.Close()
    _, err2448 := mbTrans2447.WriteString(arg2446)
    if err2448 != nil { 
      Usage()
      return
    }
    factory2449 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2450 := factory2449.GetProtocol(mbTrans2447)
    containerStruct1 := line.NewTalkServiceUpdateCustomModeSettingsArgs()
    err2451 := containerStruct1.ReadField2(jsProt2450)
    if err2451 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.ParamMap
    value1 := argvalue1
    fmt.Print(client.UpdateCustomModeSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateDeviceInfo":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateDeviceInfo requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg2453 := flag.Arg(2)
    mbTrans2454 := thrift.NewTMemoryBufferLen(len(arg2453))
    defer mbTrans2454.Close()
    _, err2455 := mbTrans2454.WriteString(arg2453)
    if err2455 != nil {
      Usage()
      return
    }
    factory2456 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2457 := factory2456.GetProtocol(mbTrans2454)
    argvalue1 := line.NewDeviceInfo()
    err2458 := argvalue1.Read(jsProt2457)
    if err2458 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateDeviceInfo(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateGroup":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateGroup requires 2 args")
      flag.Usage()
    }
    tmp0, err2459 := (strconv.Atoi(flag.Arg(1)))
    if err2459 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2460 := flag.Arg(2)
    mbTrans2461 := thrift.NewTMemoryBufferLen(len(arg2460))
    defer mbTrans2461.Close()
    _, err2462 := mbTrans2461.WriteString(arg2460)
    if err2462 != nil {
      Usage()
      return
    }
    factory2463 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2464 := factory2463.GetProtocol(mbTrans2461)
    argvalue1 := line.NewGroup()
    err2465 := argvalue1.Read(jsProt2464)
    if err2465 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateGroup(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotificationToken":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationToken requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationToken(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateNotificationTokenWithBytes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateNotificationTokenWithBytes requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationType(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateNotificationTokenWithBytes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfile":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfile requires 2 args")
      flag.Usage()
    }
    tmp0, err2468 := (strconv.Atoi(flag.Arg(1)))
    if err2468 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2469 := flag.Arg(2)
    mbTrans2470 := thrift.NewTMemoryBufferLen(len(arg2469))
    defer mbTrans2470.Close()
    _, err2471 := mbTrans2470.WriteString(arg2469)
    if err2471 != nil {
      Usage()
      return
    }
    factory2472 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2473 := factory2472.GetProtocol(mbTrans2470)
    argvalue1 := line.NewProfile()
    err2474 := argvalue1.Read(jsProt2473)
    if err2474 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateProfile(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateProfileAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err2475 := (strconv.Atoi(flag.Arg(1)))
    if err2475 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.ProfileAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateProfileAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateRegion":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateRegion requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UpdateRegion(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateSettings":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSettings requires 2 args")
      flag.Usage()
    }
    tmp0, err2478 := (strconv.Atoi(flag.Arg(1)))
    if err2478 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2479 := flag.Arg(2)
    mbTrans2480 := thrift.NewTMemoryBufferLen(len(arg2479))
    defer mbTrans2480.Close()
    _, err2481 := mbTrans2480.WriteString(arg2479)
    if err2481 != nil {
      Usage()
      return
    }
    factory2482 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2483 := factory2482.GetProtocol(mbTrans2480)
    argvalue1 := line.NewSettings()
    err2484 := argvalue1.Read(jsProt2483)
    if err2484 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSettings(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSettings2":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateSettings2 requires 2 args")
      flag.Usage()
    }
    tmp0, err2485 := (strconv.Atoi(flag.Arg(1)))
    if err2485 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    arg2486 := flag.Arg(2)
    mbTrans2487 := thrift.NewTMemoryBufferLen(len(arg2486))
    defer mbTrans2487.Close()
    _, err2488 := mbTrans2487.WriteString(arg2486)
    if err2488 != nil {
      Usage()
      return
    }
    factory2489 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2490 := factory2489.GetProtocol(mbTrans2487)
    argvalue1 := line.NewSettings()
    err2491 := argvalue1.Read(jsProt2490)
    if err2491 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.UpdateSettings2(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateSettingsAttribute":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttribute requires 3 args")
      flag.Usage()
    }
    tmp0, err2492 := (strconv.Atoi(flag.Arg(1)))
    if err2492 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.SettingsAttribute(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttribute(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "updateSettingsAttributes":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "UpdateSettingsAttributes requires 3 args")
      flag.Usage()
    }
    tmp0, err2494 := (strconv.Atoi(flag.Arg(1)))
    if err2494 != nil {
      Usage()
      return
    }
    argvalue0 := int32(tmp0)
    value0 := argvalue0
    tmp1, err2495 := (strconv.Atoi(flag.Arg(2)))
    if err2495 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    arg2496 := flag.Arg(3)
    mbTrans2497 := thrift.NewTMemoryBufferLen(len(arg2496))
    defer mbTrans2497.Close()
    _, err2498 := mbTrans2497.WriteString(arg2496)
    if err2498 != nil {
      Usage()
      return
    }
    factory2499 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2500 := factory2499.GetProtocol(mbTrans2497)
    argvalue2 := line.NewSettings()
    err2501 := argvalue2.Read(jsProt2500)
    if err2501 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.UpdateSettingsAttributes(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredential":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredential requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.IdentityProvider(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.VerifyIdentityCredential(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyIdentityCredentialWithResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "VerifyIdentityCredentialWithResult_ requires 1 args")
      flag.Usage()
    }
    arg2504 := flag.Arg(1)
    mbTrans2505 := thrift.NewTMemoryBufferLen(len(arg2504))
    defer mbTrans2505.Close()
    _, err2506 := mbTrans2505.WriteString(arg2504)
    if err2506 != nil {
      Usage()
      return
    }
    factory2507 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt2508 := factory2507.GetProtocol(mbTrans2505)
    argvalue0 := line.NewIdentityCredential()
    err2509 := argvalue0.Read(jsProt2508)
    if err2509 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.VerifyIdentityCredentialWithResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "verifyPhone":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "VerifyPhone requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.VerifyPhone(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "verifyQrcode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "VerifyQrcode requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.VerifyQrcode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
