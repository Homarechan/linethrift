// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void buyCoinProduct(PaymentReservation paymentReservation)")
  fmt.Fprintln(os.Stderr, "  void buyFreeProduct(string receiverMid, string productId, i32 messageTemplate, string language, string country, i64 packageId)")
  fmt.Fprintln(os.Stderr, "  void buyMustbuyProduct(string receiverMid, string productId, i32 messageTemplate, string language, string country, i64 packageId, string serialNumber)")
  fmt.Fprintln(os.Stderr, "  void checkCanReceivePresent(string recipientMid, i64 packageId, string language, string country)")
  fmt.Fprintln(os.Stderr, "  ProductList getActivePurchases(i64 start, i32 size, string language, string country)")
  fmt.Fprintln(os.Stderr, "  ProductSimpleList getActivePurchaseVersions(i64 start, i32 size, string language, string country)")
  fmt.Fprintln(os.Stderr, "   getCoinProducts(PaymentType appStoreCode, string country, string language)")
  fmt.Fprintln(os.Stderr, "   getCoinProductsByPgCode(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)")
  fmt.Fprintln(os.Stderr, "  CoinHistoryResult getCoinPurchaseHistory(CoinHistoryCondition request)")
  fmt.Fprintln(os.Stderr, "  CoinHistoryResult getCoinUseAndRefundHistory(CoinHistoryCondition request)")
  fmt.Fprintln(os.Stderr, "  ProductList getDownloads(i64 start, i32 size, string language, string country)")
  fmt.Fprintln(os.Stderr, "  ProductList getEventPackages(i64 start, i32 size, string language, string country)")
  fmt.Fprintln(os.Stderr, "  ProductList getNewlyReleasedPackages(i64 start, i32 size, string language, string country)")
  fmt.Fprintln(os.Stderr, "  ProductList getPopularPackages(i64 start, i32 size, string language, string country)")
  fmt.Fprintln(os.Stderr, "  ProductList getPresentsReceived(i64 start, i32 size, string language, string country)")
  fmt.Fprintln(os.Stderr, "  ProductList getPresentsSent(i64 start, i32 size, string language, string country)")
  fmt.Fprintln(os.Stderr, "  Product getProduct(i64 packageID, string language, string country)")
  fmt.Fprintln(os.Stderr, "  ProductList getProductList( productIdList, string language, string country)")
  fmt.Fprintln(os.Stderr, "  ProductList getProductListWithCarrier( productIdList, string language, string country, string carrierCode)")
  fmt.Fprintln(os.Stderr, "  Product getProductWithCarrier(i64 packageID, string language, string country, string carrierCode)")
  fmt.Fprintln(os.Stderr, "  ProductList getPurchaseHistory(i64 start, i32 size, string language, string country)")
  fmt.Fprintln(os.Stderr, "  Coin getTotalBalance(PaymentType appStoreCode)")
  fmt.Fprintln(os.Stderr, "  i64 notifyDownloaded(i64 packageId, string language)")
  fmt.Fprintln(os.Stderr, "  PaymentReservationResult reserveCoinPurchase(CoinPurchaseReservation request)")
  fmt.Fprintln(os.Stderr, "  PaymentReservationResult reservePayment(PaymentReservation paymentReservation)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewShopServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "buyCoinProduct":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BuyCoinProduct requires 1 args")
      flag.Usage()
    }
    arg1004 := flag.Arg(1)
    mbTrans1005 := thrift.NewTMemoryBufferLen(len(arg1004))
    defer mbTrans1005.Close()
    _, err1006 := mbTrans1005.WriteString(arg1004)
    if err1006 != nil {
      Usage()
      return
    }
    factory1007 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1008 := factory1007.GetProtocol(mbTrans1005)
    argvalue0 := line.NewPaymentReservation()
    err1009 := argvalue0.Read(jsProt1008)
    if err1009 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.BuyCoinProduct(context.Background(), value0))
    fmt.Print("\n")
    break
  case "buyFreeProduct":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "BuyFreeProduct requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1012 := (strconv.Atoi(flag.Arg(3)))
    if err1012 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5, err1015 := (strconv.ParseInt(flag.Arg(6), 10, 64))
    if err1015 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    fmt.Print(client.BuyFreeProduct(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "buyMustbuyProduct":
    if flag.NArg() - 1 != 7 {
      fmt.Fprintln(os.Stderr, "BuyMustbuyProduct requires 7 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err1018 := (strconv.Atoi(flag.Arg(3)))
    if err1018 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := flag.Arg(5)
    value4 := argvalue4
    argvalue5, err1021 := (strconv.ParseInt(flag.Arg(6), 10, 64))
    if err1021 != nil {
      Usage()
      return
    }
    value5 := argvalue5
    argvalue6 := flag.Arg(7)
    value6 := argvalue6
    fmt.Print(client.BuyMustbuyProduct(context.Background(), value0, value1, value2, value3, value4, value5, value6))
    fmt.Print("\n")
    break
  case "checkCanReceivePresent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "CheckCanReceivePresent requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err1024 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err1024 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.CheckCanReceivePresent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getActivePurchases":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetActivePurchases requires 4 args")
      flag.Usage()
    }
    argvalue0, err1027 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1027 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1028 := (strconv.Atoi(flag.Arg(2)))
    if err1028 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetActivePurchases(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getActivePurchaseVersions":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetActivePurchaseVersions requires 4 args")
      flag.Usage()
    }
    argvalue0, err1031 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1031 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1032 := (strconv.Atoi(flag.Arg(2)))
    if err1032 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetActivePurchaseVersions(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getCoinProducts":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetCoinProducts requires 3 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.PaymentType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetCoinProducts(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getCoinProductsByPgCode":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetCoinProductsByPgCode requires 4 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.PaymentType(tmp0)
    value0 := argvalue0
    tmp1, err := (strconv.Atoi(flag.Arg(2)))
    if err != nil {
      Usage()
     return
    }
    argvalue1 := line.PaymentPgType(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetCoinProductsByPgCode(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getCoinPurchaseHistory":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCoinPurchaseHistory requires 1 args")
      flag.Usage()
    }
    arg1039 := flag.Arg(1)
    mbTrans1040 := thrift.NewTMemoryBufferLen(len(arg1039))
    defer mbTrans1040.Close()
    _, err1041 := mbTrans1040.WriteString(arg1039)
    if err1041 != nil {
      Usage()
      return
    }
    factory1042 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1043 := factory1042.GetProtocol(mbTrans1040)
    argvalue0 := line.NewCoinHistoryCondition()
    err1044 := argvalue0.Read(jsProt1043)
    if err1044 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCoinPurchaseHistory(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getCoinUseAndRefundHistory":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCoinUseAndRefundHistory requires 1 args")
      flag.Usage()
    }
    arg1045 := flag.Arg(1)
    mbTrans1046 := thrift.NewTMemoryBufferLen(len(arg1045))
    defer mbTrans1046.Close()
    _, err1047 := mbTrans1046.WriteString(arg1045)
    if err1047 != nil {
      Usage()
      return
    }
    factory1048 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1049 := factory1048.GetProtocol(mbTrans1046)
    argvalue0 := line.NewCoinHistoryCondition()
    err1050 := argvalue0.Read(jsProt1049)
    if err1050 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCoinUseAndRefundHistory(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getDownloads":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetDownloads requires 4 args")
      flag.Usage()
    }
    argvalue0, err1051 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1051 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1052 := (strconv.Atoi(flag.Arg(2)))
    if err1052 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetDownloads(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getEventPackages":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetEventPackages requires 4 args")
      flag.Usage()
    }
    argvalue0, err1055 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1055 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1056 := (strconv.Atoi(flag.Arg(2)))
    if err1056 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetEventPackages(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getNewlyReleasedPackages":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetNewlyReleasedPackages requires 4 args")
      flag.Usage()
    }
    argvalue0, err1059 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1059 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1060 := (strconv.Atoi(flag.Arg(2)))
    if err1060 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetNewlyReleasedPackages(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getPopularPackages":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPopularPackages requires 4 args")
      flag.Usage()
    }
    argvalue0, err1063 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1063 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1064 := (strconv.Atoi(flag.Arg(2)))
    if err1064 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPopularPackages(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getPresentsReceived":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPresentsReceived requires 4 args")
      flag.Usage()
    }
    argvalue0, err1067 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1067 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1068 := (strconv.Atoi(flag.Arg(2)))
    if err1068 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPresentsReceived(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getPresentsSent":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPresentsSent requires 4 args")
      flag.Usage()
    }
    argvalue0, err1071 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1071 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1072 := (strconv.Atoi(flag.Arg(2)))
    if err1072 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPresentsSent(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getProduct":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetProduct requires 3 args")
      flag.Usage()
    }
    argvalue0, err1075 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1075 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetProduct(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getProductList":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetProductList requires 3 args")
      flag.Usage()
    }
    arg1078 := flag.Arg(1)
    mbTrans1079 := thrift.NewTMemoryBufferLen(len(arg1078))
    defer mbTrans1079.Close()
    _, err1080 := mbTrans1079.WriteString(arg1078)
    if err1080 != nil { 
      Usage()
      return
    }
    factory1081 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1082 := factory1081.GetProtocol(mbTrans1079)
    containerStruct0 := line.NewShopServiceGetProductListArgs()
    err1083 := containerStruct0.ReadField1(jsProt1082)
    if err1083 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ProductIdList
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.GetProductList(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getProductListWithCarrier":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetProductListWithCarrier requires 4 args")
      flag.Usage()
    }
    arg1086 := flag.Arg(1)
    mbTrans1087 := thrift.NewTMemoryBufferLen(len(arg1086))
    defer mbTrans1087.Close()
    _, err1088 := mbTrans1087.WriteString(arg1086)
    if err1088 != nil { 
      Usage()
      return
    }
    factory1089 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1090 := factory1089.GetProtocol(mbTrans1087)
    containerStruct0 := line.NewShopServiceGetProductListWithCarrierArgs()
    err1091 := containerStruct0.ReadField1(jsProt1090)
    if err1091 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.ProductIdList
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetProductListWithCarrier(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getProductWithCarrier":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetProductWithCarrier requires 4 args")
      flag.Usage()
    }
    argvalue0, err1095 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1095 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetProductWithCarrier(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getPurchaseHistory":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetPurchaseHistory requires 4 args")
      flag.Usage()
    }
    argvalue0, err1099 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1099 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err1100 := (strconv.Atoi(flag.Arg(2)))
    if err1100 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.GetPurchaseHistory(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "getTotalBalance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTotalBalance requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.PaymentType(tmp0)
    value0 := argvalue0
    fmt.Print(client.GetTotalBalance(context.Background(), value0))
    fmt.Print("\n")
    break
  case "notifyDownloaded":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyDownloaded requires 2 args")
      flag.Usage()
    }
    argvalue0, err1103 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err1103 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyDownloaded(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "reserveCoinPurchase":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReserveCoinPurchase requires 1 args")
      flag.Usage()
    }
    arg1105 := flag.Arg(1)
    mbTrans1106 := thrift.NewTMemoryBufferLen(len(arg1105))
    defer mbTrans1106.Close()
    _, err1107 := mbTrans1106.WriteString(arg1105)
    if err1107 != nil {
      Usage()
      return
    }
    factory1108 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1109 := factory1108.GetProtocol(mbTrans1106)
    argvalue0 := line.NewCoinPurchaseReservation()
    err1110 := argvalue0.Read(jsProt1109)
    if err1110 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReserveCoinPurchase(context.Background(), value0))
    fmt.Print("\n")
    break
  case "reservePayment":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ReservePayment requires 1 args")
      flag.Usage()
    }
    arg1111 := flag.Arg(1)
    mbTrans1112 := thrift.NewTMemoryBufferLen(len(arg1111))
    defer mbTrans1112.Close()
    _, err1113 := mbTrans1112.WriteString(arg1111)
    if err1113 != nil {
      Usage()
      return
    }
    factory1114 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt1115 := factory1114.GetProtocol(mbTrans1112)
    argvalue0 := line.NewPaymentReservation()
    err1116 := argvalue0.Read(jsProt1115)
    if err1116 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ReservePayment(context.Background(), value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
