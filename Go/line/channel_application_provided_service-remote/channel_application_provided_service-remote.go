// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  i64 activeBuddySubscriberCount()")
  fmt.Fprintln(os.Stderr, "  void addOperationForChannel(OpType opType, string param1, string param2, string param3)")
  fmt.Fprintln(os.Stderr, "  i64 displayBuddySubscriberCount()")
  fmt.Fprintln(os.Stderr, "  Contact findContactByUseridWithoutAbuseBlockForChannel(string userid)")
  fmt.Fprintln(os.Stderr, "   getAllContactIdsForChannel()")
  fmt.Fprintln(os.Stderr, "   getCompactContacts(i64 lastModifiedTimestamp)")
  fmt.Fprintln(os.Stderr, "   getContactsForChannel( ids)")
  fmt.Fprintln(os.Stderr, "  string getDisplayName(string mid)")
  fmt.Fprintln(os.Stderr, "   getFavoriteMidsForChannel()")
  fmt.Fprintln(os.Stderr, "   getFriendMids()")
  fmt.Fprintln(os.Stderr, "   getGroupMemberMids(string groupId)")
  fmt.Fprintln(os.Stderr, "   getGroupsForChannel( groupIds)")
  fmt.Fprintln(os.Stderr, "  IdentityCredential getIdentityCredential()")
  fmt.Fprintln(os.Stderr, "   getJoinedGroupIdsForChannel()")
  fmt.Fprintln(os.Stderr, "  MetaProfile getMetaProfile()")
  fmt.Fprintln(os.Stderr, "  string getMid()")
  fmt.Fprintln(os.Stderr, "  SimpleChannelClient getPrimaryClientForChannel()")
  fmt.Fprintln(os.Stderr, "  Profile getProfileForChannel()")
  fmt.Fprintln(os.Stderr, "   getSimpleChannelContacts( ids)")
  fmt.Fprintln(os.Stderr, "  string getUserCountryForBilling(string country, string remoteIp)")
  fmt.Fprintln(os.Stderr, "  i64 getUserCreateTime()")
  fmt.Fprintln(os.Stderr, "   getUserIdentities()")
  fmt.Fprintln(os.Stderr, "  string getUserLanguage()")
  fmt.Fprintln(os.Stderr, "   getUserMidsWhoAddedMe()")
  fmt.Fprintln(os.Stderr, "  bool isGroupMember(string groupId)")
  fmt.Fprintln(os.Stderr, "  bool isInContact(string mid)")
  fmt.Fprintln(os.Stderr, "  string registerChannelCP(string cpId, string registerPassword)")
  fmt.Fprintln(os.Stderr, "  void removeNotificationStatus(NotificationStatus notificationStatus)")
  fmt.Fprintln(os.Stderr, "  Message sendMessageForChannel(Message message)")
  fmt.Fprintln(os.Stderr, "  void sendPinCodeOperation(string verifier)")
  fmt.Fprintln(os.Stderr, "  void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string value)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewChannelApplicationProvidedServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "activeBuddySubscriberCount":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "ActiveBuddySubscriberCount requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.ActiveBuddySubscriberCount(context.Background()))
    fmt.Print("\n")
    break
  case "addOperationForChannel":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "AddOperationForChannel requires 4 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.OpType(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    fmt.Print(client.AddOperationForChannel(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "displayBuddySubscriberCount":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "DisplayBuddySubscriberCount requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.DisplayBuddySubscriberCount(context.Background()))
    fmt.Print("\n")
    break
  case "findContactByUseridWithoutAbuseBlockForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "FindContactByUseridWithoutAbuseBlockForChannel requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.FindContactByUseridWithoutAbuseBlockForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllContactIdsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllContactIdsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllContactIdsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getCompactContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetCompactContacts requires 1 args")
      flag.Usage()
    }
    argvalue0, err773 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err773 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetCompactContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getContactsForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetContactsForChannel requires 1 args")
      flag.Usage()
    }
    arg774 := flag.Arg(1)
    mbTrans775 := thrift.NewTMemoryBufferLen(len(arg774))
    defer mbTrans775.Close()
    _, err776 := mbTrans775.WriteString(arg774)
    if err776 != nil { 
      Usage()
      return
    }
    factory777 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt778 := factory777.GetProtocol(mbTrans775)
    containerStruct0 := line.NewChannelApplicationProvidedServiceGetContactsForChannelArgs()
    err779 := containerStruct0.ReadField1(jsProt778)
    if err779 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetContactsForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getDisplayName":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetDisplayName requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetDisplayName(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getFavoriteMidsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFavoriteMidsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFavoriteMidsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getFriendMids":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetFriendMids requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetFriendMids(context.Background()))
    fmt.Print("\n")
    break
  case "getGroupMemberMids":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupMemberMids requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetGroupMemberMids(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupsForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupsForChannel requires 1 args")
      flag.Usage()
    }
    arg782 := flag.Arg(1)
    mbTrans783 := thrift.NewTMemoryBufferLen(len(arg782))
    defer mbTrans783.Close()
    _, err784 := mbTrans783.WriteString(arg782)
    if err784 != nil { 
      Usage()
      return
    }
    factory785 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt786 := factory785.GetProtocol(mbTrans783)
    containerStruct0 := line.NewChannelApplicationProvidedServiceGetGroupsForChannelArgs()
    err787 := containerStruct0.ReadField1(jsProt786)
    if err787 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.GroupIds
    value0 := argvalue0
    fmt.Print(client.GetGroupsForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getIdentityCredential":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetIdentityCredential requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetIdentityCredential(context.Background()))
    fmt.Print("\n")
    break
  case "getJoinedGroupIdsForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetJoinedGroupIdsForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetJoinedGroupIdsForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getMetaProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMetaProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMetaProfile(context.Background()))
    fmt.Print("\n")
    break
  case "getMid":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetMid requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetMid(context.Background()))
    fmt.Print("\n")
    break
  case "getPrimaryClientForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetPrimaryClientForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetPrimaryClientForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getProfileForChannel":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetProfileForChannel requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetProfileForChannel(context.Background()))
    fmt.Print("\n")
    break
  case "getSimpleChannelContacts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSimpleChannelContacts requires 1 args")
      flag.Usage()
    }
    arg788 := flag.Arg(1)
    mbTrans789 := thrift.NewTMemoryBufferLen(len(arg788))
    defer mbTrans789.Close()
    _, err790 := mbTrans789.WriteString(arg788)
    if err790 != nil { 
      Usage()
      return
    }
    factory791 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt792 := factory791.GetProtocol(mbTrans789)
    containerStruct0 := line.NewChannelApplicationProvidedServiceGetSimpleChannelContactsArgs()
    err793 := containerStruct0.ReadField1(jsProt792)
    if err793 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Ids
    value0 := argvalue0
    fmt.Print(client.GetSimpleChannelContacts(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUserCountryForBilling":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUserCountryForBilling requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetUserCountryForBilling(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getUserCreateTime":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserCreateTime requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserCreateTime(context.Background()))
    fmt.Print("\n")
    break
  case "getUserIdentities":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserIdentities requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserIdentities(context.Background()))
    fmt.Print("\n")
    break
  case "getUserLanguage":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserLanguage requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserLanguage(context.Background()))
    fmt.Print("\n")
    break
  case "getUserMidsWhoAddedMe":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetUserMidsWhoAddedMe requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetUserMidsWhoAddedMe(context.Background()))
    fmt.Print("\n")
    break
  case "isGroupMember":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsGroupMember requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsGroupMember(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isInContact":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsInContact requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsInContact(context.Background(), value0))
    fmt.Print("\n")
    break
  case "registerChannelCP":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RegisterChannelCP requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RegisterChannelCP(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeNotificationStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveNotificationStatus requires 1 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.NotificationStatus(tmp0)
    value0 := argvalue0
    fmt.Print(client.RemoveNotificationStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendMessageForChannel":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendMessageForChannel requires 1 args")
      flag.Usage()
    }
    arg800 := flag.Arg(1)
    mbTrans801 := thrift.NewTMemoryBufferLen(len(arg800))
    defer mbTrans801.Close()
    _, err802 := mbTrans801.WriteString(arg800)
    if err802 != nil {
      Usage()
      return
    }
    factory803 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt804 := factory803.GetProtocol(mbTrans801)
    argvalue0 := line.NewMessage()
    err805 := argvalue0.Read(jsProt804)
    if err805 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendMessageForChannel(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendPinCodeOperation":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendPinCodeOperation requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.SendPinCodeOperation(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateProfileAttributeForChannel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateProfileAttributeForChannel requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.ProfileAttribute(tmp0)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateProfileAttributeForChannel(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
