// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void addBuddyMember(string requestId, string userMid)")
  fmt.Fprintln(os.Stderr, "  void addBuddyMembers(string requestId,  userMids)")
  fmt.Fprintln(os.Stderr, "  void blockBuddyMember(string requestId, string mid)")
  fmt.Fprintln(os.Stderr, "   commitSendMessagesToAll( requestIdList)")
  fmt.Fprintln(os.Stderr, "   commitSendMessagesToMids( requestIdList,  mids)")
  fmt.Fprintln(os.Stderr, "  bool containsBuddyMember(string requestId, string userMid)")
  fmt.Fprintln(os.Stderr, "  string downloadMessageContent(string requestId, string messageId)")
  fmt.Fprintln(os.Stderr, "  string downloadMessageContentPreview(string requestId, string messageId)")
  fmt.Fprintln(os.Stderr, "  string downloadProfileImage(string requestId)")
  fmt.Fprintln(os.Stderr, "  string downloadProfileImagePreview(string requestId)")
  fmt.Fprintln(os.Stderr, "  i64 getActiveMemberCountByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "   getActiveMemberMidsByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "   getAllBuddyMembers()")
  fmt.Fprintln(os.Stderr, "   getBlockedBuddyMembers()")
  fmt.Fprintln(os.Stderr, "  i64 getBlockerCountByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  BuddyDetail getBuddyDetailByMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  BuddyProfile getBuddyProfile()")
  fmt.Fprintln(os.Stderr, "  Ticket getContactTicket()")
  fmt.Fprintln(os.Stderr, "  i64 getMemberCountByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult getSendBuddyMessageResult(string sendBuddyMessageRequestId)")
  fmt.Fprintln(os.Stderr, "  SetBuddyOnAirResult getSetBuddyOnAirResult(string setBuddyOnAirRequestId)")
  fmt.Fprintln(os.Stderr, "  UpdateBuddyProfileResult getUpdateBuddyProfileResult(string updateBuddyProfileRequestId)")
  fmt.Fprintln(os.Stderr, "  bool isBuddyOnAirByMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  string linkAndSendBuddyContentMessageToAllAsync(string requestId, Message msg, string sourceContentId)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult linkAndSendBuddyContentMessageToMids(string requestId, Message msg, string sourceContentId,  mids)")
  fmt.Fprintln(os.Stderr, "  void notifyBuddyBlocked(string buddyMid, string blockerMid)")
  fmt.Fprintln(os.Stderr, "  void notifyBuddyUnblocked(string buddyMid, string blockerMid)")
  fmt.Fprintln(os.Stderr, "  string registerBuddy(string buddyId, string searchId, string displayName, string statusMeessage, string picture,  settings)")
  fmt.Fprintln(os.Stderr, "  string registerBuddyAdmin(string buddyId, string searchId, string displayName, string statusMessage, string picture)")
  fmt.Fprintln(os.Stderr, "  string reissueContactTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  void removeBuddyMember(string requestId, string userMid)")
  fmt.Fprintln(os.Stderr, "  void removeBuddyMembers(string requestId,  userMids)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyContentMessageToAll(string requestId, Message msg, string content)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyContentMessageToAllAsync(string requestId, Message msg, string content)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyContentMessageToMids(string requestId, Message msg, string content,  mids)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyContentMessageToMidsAsync(string requestId, Message msg, string content,  mids)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyMessageToAll(string requestId, Message msg)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyMessageToAllAsync(string requestId, Message msg)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyMessageToMids(string requestId, Message msg,  mids)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyMessageToMidsAsync(string requestId, Message msg,  mids)")
  fmt.Fprintln(os.Stderr, "  void sendIndividualEventToAllAsync(string requestId, string buddyMid, NotificationStatus notificationStatus)")
  fmt.Fprintln(os.Stderr, "  SetBuddyOnAirResult setBuddyOnAir(string requestId, bool onAir)")
  fmt.Fprintln(os.Stderr, "  string setBuddyOnAirAsync(string requestId, bool onAir)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult storeMessage(string requestId, BuddyMessageRequest messageRequest)")
  fmt.Fprintln(os.Stderr, "  void unblockBuddyMember(string requestId, string mid)")
  fmt.Fprintln(os.Stderr, "  void unregisterBuddy(string requestId)")
  fmt.Fprintln(os.Stderr, "  void unregisterBuddyAdmin(string requestId)")
  fmt.Fprintln(os.Stderr, "  void updateBuddyAdminProfileAttribute(string requestId,  attributes)")
  fmt.Fprintln(os.Stderr, "  void updateBuddyAdminProfileImage(string requestId, string picture)")
  fmt.Fprintln(os.Stderr, "  UpdateBuddyProfileResult updateBuddyProfileAttributes(string requestId,  attributes)")
  fmt.Fprintln(os.Stderr, "  string updateBuddyProfileAttributesAsync(string requestId,  attributes)")
  fmt.Fprintln(os.Stderr, "  UpdateBuddyProfileResult updateBuddyProfileImage(string requestId, string image)")
  fmt.Fprintln(os.Stderr, "  string updateBuddyProfileImageAsync(string requestId, string image)")
  fmt.Fprintln(os.Stderr, "  void updateBuddySearchId(string requestId, string searchId)")
  fmt.Fprintln(os.Stderr, "  void updateBuddySettings( settings)")
  fmt.Fprintln(os.Stderr, "  string uploadBuddyContent(ContentType contentType, string content)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewBuddyManagementServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "addBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addBuddyMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddBuddyMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg382 := flag.Arg(2)
    mbTrans383 := thrift.NewTMemoryBufferLen(len(arg382))
    defer mbTrans383.Close()
    _, err384 := mbTrans383.WriteString(arg382)
    if err384 != nil { 
      Usage()
      return
    }
    factory385 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt386 := factory385.GetProtocol(mbTrans383)
    containerStruct1 := line.NewBuddyManagementServiceAddBuddyMembersArgs()
    err387 := containerStruct1.ReadField2(jsProt386)
    if err387 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.UserMids
    value1 := argvalue1
    fmt.Print(client.AddBuddyMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "commitSendMessagesToAll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CommitSendMessagesToAll requires 1 args")
      flag.Usage()
    }
    arg390 := flag.Arg(1)
    mbTrans391 := thrift.NewTMemoryBufferLen(len(arg390))
    defer mbTrans391.Close()
    _, err392 := mbTrans391.WriteString(arg390)
    if err392 != nil { 
      Usage()
      return
    }
    factory393 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt394 := factory393.GetProtocol(mbTrans391)
    containerStruct0 := line.NewBuddyManagementServiceCommitSendMessagesToAllArgs()
    err395 := containerStruct0.ReadField1(jsProt394)
    if err395 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RequestIdList
    value0 := argvalue0
    fmt.Print(client.CommitSendMessagesToAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitSendMessagesToMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CommitSendMessagesToMids requires 2 args")
      flag.Usage()
    }
    arg396 := flag.Arg(1)
    mbTrans397 := thrift.NewTMemoryBufferLen(len(arg396))
    defer mbTrans397.Close()
    _, err398 := mbTrans397.WriteString(arg396)
    if err398 != nil { 
      Usage()
      return
    }
    factory399 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt400 := factory399.GetProtocol(mbTrans397)
    containerStruct0 := line.NewBuddyManagementServiceCommitSendMessagesToMidsArgs()
    err401 := containerStruct0.ReadField1(jsProt400)
    if err401 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RequestIdList
    value0 := argvalue0
    arg402 := flag.Arg(2)
    mbTrans403 := thrift.NewTMemoryBufferLen(len(arg402))
    defer mbTrans403.Close()
    _, err404 := mbTrans403.WriteString(arg402)
    if err404 != nil { 
      Usage()
      return
    }
    factory405 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt406 := factory405.GetProtocol(mbTrans403)
    containerStruct1 := line.NewBuddyManagementServiceCommitSendMessagesToMidsArgs()
    err407 := containerStruct1.ReadField2(jsProt406)
    if err407 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Mids
    value1 := argvalue1
    fmt.Print(client.CommitSendMessagesToMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "containsBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ContainsBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ContainsBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "downloadMessageContent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DownloadMessageContent requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DownloadMessageContent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "downloadMessageContentPreview":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DownloadMessageContentPreview requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DownloadMessageContentPreview(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "downloadProfileImage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DownloadProfileImage requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DownloadProfileImage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "downloadProfileImagePreview":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DownloadProfileImagePreview requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DownloadProfileImagePreview(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getActiveMemberCountByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveMemberCountByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetActiveMemberCountByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getActiveMemberMidsByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveMemberMidsByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetActiveMemberMidsByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllBuddyMembers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllBuddyMembers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllBuddyMembers(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockedBuddyMembers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedBuddyMembers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedBuddyMembers(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockerCountByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockerCountByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetBlockerCountByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBuddyDetailByMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBuddyDetailByMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetBuddyDetailByMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBuddyProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBuddyProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBuddyProfile(context.Background()))
    fmt.Print("\n")
    break
  case "getContactTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetContactTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetContactTicket(context.Background()))
    fmt.Print("\n")
    break
  case "getMemberCountByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMemberCountByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMemberCountByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSendBuddyMessageResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSendBuddyMessageResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSendBuddyMessageResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSetBuddyOnAirResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSetBuddyOnAirResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSetBuddyOnAirResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUpdateBuddyProfileResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUpdateBuddyProfileResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUpdateBuddyProfileResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isBuddyOnAirByMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsBuddyOnAirByMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsBuddyOnAirByMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "linkAndSendBuddyContentMessageToAllAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "LinkAndSendBuddyContentMessageToAllAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg426 := flag.Arg(2)
    mbTrans427 := thrift.NewTMemoryBufferLen(len(arg426))
    defer mbTrans427.Close()
    _, err428 := mbTrans427.WriteString(arg426)
    if err428 != nil {
      Usage()
      return
    }
    factory429 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt430 := factory429.GetProtocol(mbTrans427)
    argvalue1 := line.NewMessage()
    err431 := argvalue1.Read(jsProt430)
    if err431 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.LinkAndSendBuddyContentMessageToAllAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "linkAndSendBuddyContentMessageToMids":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "LinkAndSendBuddyContentMessageToMids requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg434 := flag.Arg(2)
    mbTrans435 := thrift.NewTMemoryBufferLen(len(arg434))
    defer mbTrans435.Close()
    _, err436 := mbTrans435.WriteString(arg434)
    if err436 != nil {
      Usage()
      return
    }
    factory437 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt438 := factory437.GetProtocol(mbTrans435)
    argvalue1 := line.NewMessage()
    err439 := argvalue1.Read(jsProt438)
    if err439 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg441 := flag.Arg(4)
    mbTrans442 := thrift.NewTMemoryBufferLen(len(arg441))
    defer mbTrans442.Close()
    _, err443 := mbTrans442.WriteString(arg441)
    if err443 != nil { 
      Usage()
      return
    }
    factory444 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt445 := factory444.GetProtocol(mbTrans442)
    containerStruct3 := line.NewBuddyManagementServiceLinkAndSendBuddyContentMessageToMidsArgs()
    err446 := containerStruct3.ReadField4(jsProt445)
    if err446 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Mids
    value3 := argvalue3
    fmt.Print(client.LinkAndSendBuddyContentMessageToMids(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "notifyBuddyBlocked":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyBuddyBlocked requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyBuddyBlocked(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyBuddyUnblocked":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyBuddyUnblocked requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyBuddyUnblocked(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerBuddy":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterBuddy requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    arg456 := flag.Arg(6)
    mbTrans457 := thrift.NewTMemoryBufferLen(len(arg456))
    defer mbTrans457.Close()
    _, err458 := mbTrans457.WriteString(arg456)
    if err458 != nil { 
      Usage()
      return
    }
    factory459 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt460 := factory459.GetProtocol(mbTrans457)
    containerStruct5 := line.NewBuddyManagementServiceRegisterBuddyArgs()
    err461 := containerStruct5.ReadField6(jsProt460)
    if err461 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Settings
    value5 := argvalue5
    fmt.Print(client.RegisterBuddy(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "registerBuddyAdmin":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterBuddyAdmin requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.RegisterBuddyAdmin(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "reissueContactTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReissueContactTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err467 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err467 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err468 := (strconv.Atoi(flag.Arg(2)))
    if err468 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.ReissueContactTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeBuddyMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveBuddyMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg472 := flag.Arg(2)
    mbTrans473 := thrift.NewTMemoryBufferLen(len(arg472))
    defer mbTrans473.Close()
    _, err474 := mbTrans473.WriteString(arg472)
    if err474 != nil { 
      Usage()
      return
    }
    factory475 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt476 := factory475.GetProtocol(mbTrans473)
    containerStruct1 := line.NewBuddyManagementServiceRemoveBuddyMembersArgs()
    err477 := containerStruct1.ReadField2(jsProt476)
    if err477 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.UserMids
    value1 := argvalue1
    fmt.Print(client.RemoveBuddyMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToAll":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToAll requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg479 := flag.Arg(2)
    mbTrans480 := thrift.NewTMemoryBufferLen(len(arg479))
    defer mbTrans480.Close()
    _, err481 := mbTrans480.WriteString(arg479)
    if err481 != nil {
      Usage()
      return
    }
    factory482 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt483 := factory482.GetProtocol(mbTrans480)
    argvalue1 := line.NewMessage()
    err484 := argvalue1.Read(jsProt483)
    if err484 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.SendBuddyContentMessageToAll(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToAllAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToAllAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg487 := flag.Arg(2)
    mbTrans488 := thrift.NewTMemoryBufferLen(len(arg487))
    defer mbTrans488.Close()
    _, err489 := mbTrans488.WriteString(arg487)
    if err489 != nil {
      Usage()
      return
    }
    factory490 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt491 := factory490.GetProtocol(mbTrans488)
    argvalue1 := line.NewMessage()
    err492 := argvalue1.Read(jsProt491)
    if err492 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.SendBuddyContentMessageToAllAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToMids":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToMids requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg495 := flag.Arg(2)
    mbTrans496 := thrift.NewTMemoryBufferLen(len(arg495))
    defer mbTrans496.Close()
    _, err497 := mbTrans496.WriteString(arg495)
    if err497 != nil {
      Usage()
      return
    }
    factory498 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt499 := factory498.GetProtocol(mbTrans496)
    argvalue1 := line.NewMessage()
    err500 := argvalue1.Read(jsProt499)
    if err500 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    arg502 := flag.Arg(4)
    mbTrans503 := thrift.NewTMemoryBufferLen(len(arg502))
    defer mbTrans503.Close()
    _, err504 := mbTrans503.WriteString(arg502)
    if err504 != nil { 
      Usage()
      return
    }
    factory505 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt506 := factory505.GetProtocol(mbTrans503)
    containerStruct3 := line.NewBuddyManagementServiceSendBuddyContentMessageToMidsArgs()
    err507 := containerStruct3.ReadField4(jsProt506)
    if err507 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Mids
    value3 := argvalue3
    fmt.Print(client.SendBuddyContentMessageToMids(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToMidsAsync":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToMidsAsync requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg509 := flag.Arg(2)
    mbTrans510 := thrift.NewTMemoryBufferLen(len(arg509))
    defer mbTrans510.Close()
    _, err511 := mbTrans510.WriteString(arg509)
    if err511 != nil {
      Usage()
      return
    }
    factory512 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt513 := factory512.GetProtocol(mbTrans510)
    argvalue1 := line.NewMessage()
    err514 := argvalue1.Read(jsProt513)
    if err514 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    arg516 := flag.Arg(4)
    mbTrans517 := thrift.NewTMemoryBufferLen(len(arg516))
    defer mbTrans517.Close()
    _, err518 := mbTrans517.WriteString(arg516)
    if err518 != nil { 
      Usage()
      return
    }
    factory519 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt520 := factory519.GetProtocol(mbTrans517)
    containerStruct3 := line.NewBuddyManagementServiceSendBuddyContentMessageToMidsAsyncArgs()
    err521 := containerStruct3.ReadField4(jsProt520)
    if err521 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Mids
    value3 := argvalue3
    fmt.Print(client.SendBuddyContentMessageToMidsAsync(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToAll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToAll requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg523 := flag.Arg(2)
    mbTrans524 := thrift.NewTMemoryBufferLen(len(arg523))
    defer mbTrans524.Close()
    _, err525 := mbTrans524.WriteString(arg523)
    if err525 != nil {
      Usage()
      return
    }
    factory526 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt527 := factory526.GetProtocol(mbTrans524)
    argvalue1 := line.NewMessage()
    err528 := argvalue1.Read(jsProt527)
    if err528 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendBuddyMessageToAll(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToAllAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToAllAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg530 := flag.Arg(2)
    mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
    defer mbTrans531.Close()
    _, err532 := mbTrans531.WriteString(arg530)
    if err532 != nil {
      Usage()
      return
    }
    factory533 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt534 := factory533.GetProtocol(mbTrans531)
    argvalue1 := line.NewMessage()
    err535 := argvalue1.Read(jsProt534)
    if err535 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendBuddyMessageToAllAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToMids":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToMids requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg537 := flag.Arg(2)
    mbTrans538 := thrift.NewTMemoryBufferLen(len(arg537))
    defer mbTrans538.Close()
    _, err539 := mbTrans538.WriteString(arg537)
    if err539 != nil {
      Usage()
      return
    }
    factory540 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt541 := factory540.GetProtocol(mbTrans538)
    argvalue1 := line.NewMessage()
    err542 := argvalue1.Read(jsProt541)
    if err542 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg543 := flag.Arg(3)
    mbTrans544 := thrift.NewTMemoryBufferLen(len(arg543))
    defer mbTrans544.Close()
    _, err545 := mbTrans544.WriteString(arg543)
    if err545 != nil { 
      Usage()
      return
    }
    factory546 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt547 := factory546.GetProtocol(mbTrans544)
    containerStruct2 := line.NewBuddyManagementServiceSendBuddyMessageToMidsArgs()
    err548 := containerStruct2.ReadField3(jsProt547)
    if err548 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mids
    value2 := argvalue2
    fmt.Print(client.SendBuddyMessageToMids(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToMidsAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToMidsAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg550 := flag.Arg(2)
    mbTrans551 := thrift.NewTMemoryBufferLen(len(arg550))
    defer mbTrans551.Close()
    _, err552 := mbTrans551.WriteString(arg550)
    if err552 != nil {
      Usage()
      return
    }
    factory553 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt554 := factory553.GetProtocol(mbTrans551)
    argvalue1 := line.NewMessage()
    err555 := argvalue1.Read(jsProt554)
    if err555 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg556 := flag.Arg(3)
    mbTrans557 := thrift.NewTMemoryBufferLen(len(arg556))
    defer mbTrans557.Close()
    _, err558 := mbTrans557.WriteString(arg556)
    if err558 != nil { 
      Usage()
      return
    }
    factory559 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt560 := factory559.GetProtocol(mbTrans557)
    containerStruct2 := line.NewBuddyManagementServiceSendBuddyMessageToMidsAsyncArgs()
    err561 := containerStruct2.ReadField3(jsProt560)
    if err561 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mids
    value2 := argvalue2
    fmt.Print(client.SendBuddyMessageToMidsAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendIndividualEventToAllAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendIndividualEventToAllAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.NotificationStatus(tmp2)
    value2 := argvalue2
    fmt.Print(client.SendIndividualEventToAllAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setBuddyOnAir":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetBuddyOnAir requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetBuddyOnAir(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setBuddyOnAirAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetBuddyOnAirAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetBuddyOnAirAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "storeMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "StoreMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg569 := flag.Arg(2)
    mbTrans570 := thrift.NewTMemoryBufferLen(len(arg569))
    defer mbTrans570.Close()
    _, err571 := mbTrans570.WriteString(arg569)
    if err571 != nil {
      Usage()
      return
    }
    factory572 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt573 := factory572.GetProtocol(mbTrans570)
    argvalue1 := line.NewBuddyMessageRequest()
    err574 := argvalue1.Read(jsProt573)
    if err574 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.StoreMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unregisterBuddy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UnregisterBuddy requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UnregisterBuddy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unregisterBuddyAdmin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UnregisterBuddyAdmin requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UnregisterBuddyAdmin(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateBuddyAdminProfileAttribute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyAdminProfileAttribute requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg580 := flag.Arg(2)
    mbTrans581 := thrift.NewTMemoryBufferLen(len(arg580))
    defer mbTrans581.Close()
    _, err582 := mbTrans581.WriteString(arg580)
    if err582 != nil { 
      Usage()
      return
    }
    factory583 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt584 := factory583.GetProtocol(mbTrans581)
    containerStruct1 := line.NewBuddyManagementServiceUpdateBuddyAdminProfileAttributeArgs()
    err585 := containerStruct1.ReadField2(jsProt584)
    if err585 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attributes
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyAdminProfileAttribute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyAdminProfileImage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyAdminProfileImage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyAdminProfileImage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileAttributes requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg589 := flag.Arg(2)
    mbTrans590 := thrift.NewTMemoryBufferLen(len(arg589))
    defer mbTrans590.Close()
    _, err591 := mbTrans590.WriteString(arg589)
    if err591 != nil { 
      Usage()
      return
    }
    factory592 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt593 := factory592.GetProtocol(mbTrans590)
    containerStruct1 := line.NewBuddyManagementServiceUpdateBuddyProfileAttributesArgs()
    err594 := containerStruct1.ReadField2(jsProt593)
    if err594 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attributes
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileAttributesAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileAttributesAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg596 := flag.Arg(2)
    mbTrans597 := thrift.NewTMemoryBufferLen(len(arg596))
    defer mbTrans597.Close()
    _, err598 := mbTrans597.WriteString(arg596)
    if err598 != nil { 
      Usage()
      return
    }
    factory599 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt600 := factory599.GetProtocol(mbTrans597)
    containerStruct1 := line.NewBuddyManagementServiceUpdateBuddyProfileAttributesAsyncArgs()
    err601 := containerStruct1.ReadField2(jsProt600)
    if err601 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attributes
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileAttributesAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileImage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileImage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileImage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileImageAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileImageAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileImageAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddySearchId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddySearchId requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateBuddySearchId(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddySettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateBuddySettings requires 1 args")
      flag.Usage()
    }
    arg608 := flag.Arg(1)
    mbTrans609 := thrift.NewTMemoryBufferLen(len(arg608))
    defer mbTrans609.Close()
    _, err610 := mbTrans609.WriteString(arg608)
    if err610 != nil { 
      Usage()
      return
    }
    factory611 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt612 := factory611.GetProtocol(mbTrans609)
    containerStruct0 := line.NewBuddyManagementServiceUpdateBuddySettingsArgs()
    err613 := containerStruct0.ReadField1(jsProt612)
    if err613 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Settings
    value0 := argvalue0
    fmt.Print(client.UpdateBuddySettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "uploadBuddyContent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UploadBuddyContent requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.ContentType(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UploadBuddyContent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
