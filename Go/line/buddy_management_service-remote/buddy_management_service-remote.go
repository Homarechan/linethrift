// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
        "context"
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        "git.apache.org/thrift.git/lib/go/thrift"
        "line"
)


func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  void addBuddyMember(string requestId, string userMid)")
  fmt.Fprintln(os.Stderr, "  void addBuddyMembers(string requestId,  userMids)")
  fmt.Fprintln(os.Stderr, "  void blockBuddyMember(string requestId, string mid)")
  fmt.Fprintln(os.Stderr, "   commitSendMessagesToAll( requestIdList)")
  fmt.Fprintln(os.Stderr, "   commitSendMessagesToMids( requestIdList,  mids)")
  fmt.Fprintln(os.Stderr, "  bool containsBuddyMember(string requestId, string userMid)")
  fmt.Fprintln(os.Stderr, "  string downloadMessageContent(string requestId, string messageId)")
  fmt.Fprintln(os.Stderr, "  string downloadMessageContentPreview(string requestId, string messageId)")
  fmt.Fprintln(os.Stderr, "  string downloadProfileImage(string requestId)")
  fmt.Fprintln(os.Stderr, "  string downloadProfileImagePreview(string requestId)")
  fmt.Fprintln(os.Stderr, "  i64 getActiveMemberCountByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "   getActiveMemberMidsByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "   getAllBuddyMembers()")
  fmt.Fprintln(os.Stderr, "   getBlockedBuddyMembers()")
  fmt.Fprintln(os.Stderr, "  i64 getBlockerCountByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  BuddyDetail getBuddyDetailByMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  BuddyProfile getBuddyProfile()")
  fmt.Fprintln(os.Stderr, "  Ticket getContactTicket()")
  fmt.Fprintln(os.Stderr, "  i64 getMemberCountByBuddyMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult getSendBuddyMessageResult(string sendBuddyMessageRequestId)")
  fmt.Fprintln(os.Stderr, "  SetBuddyOnAirResult getSetBuddyOnAirResult(string setBuddyOnAirRequestId)")
  fmt.Fprintln(os.Stderr, "  UpdateBuddyProfileResult getUpdateBuddyProfileResult(string updateBuddyProfileRequestId)")
  fmt.Fprintln(os.Stderr, "  bool isBuddyOnAirByMid(string buddyMid)")
  fmt.Fprintln(os.Stderr, "  string linkAndSendBuddyContentMessageToAllAsync(string requestId, Message msg, string sourceContentId)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult linkAndSendBuddyContentMessageToMids(string requestId, Message msg, string sourceContentId,  mids)")
  fmt.Fprintln(os.Stderr, "  void notifyBuddyBlocked(string buddyMid, string blockerMid)")
  fmt.Fprintln(os.Stderr, "  void notifyBuddyUnblocked(string buddyMid, string blockerMid)")
  fmt.Fprintln(os.Stderr, "  string registerBuddy(string buddyId, string searchId, string displayName, string statusMeessage, string picture,  settings)")
  fmt.Fprintln(os.Stderr, "  string registerBuddyAdmin(string buddyId, string searchId, string displayName, string statusMessage, string picture)")
  fmt.Fprintln(os.Stderr, "  string reissueContactTicket(i64 expirationTime, i32 maxUseCount)")
  fmt.Fprintln(os.Stderr, "  void removeBuddyMember(string requestId, string userMid)")
  fmt.Fprintln(os.Stderr, "  void removeBuddyMembers(string requestId,  userMids)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyContentMessageToAll(string requestId, Message msg, string content)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyContentMessageToAllAsync(string requestId, Message msg, string content)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyContentMessageToMids(string requestId, Message msg, string content,  mids)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyContentMessageToMidsAsync(string requestId, Message msg, string content,  mids)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyMessageToAll(string requestId, Message msg)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyMessageToAllAsync(string requestId, Message msg)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult sendBuddyMessageToMids(string requestId, Message msg,  mids)")
  fmt.Fprintln(os.Stderr, "  string sendBuddyMessageToMidsAsync(string requestId, Message msg,  mids)")
  fmt.Fprintln(os.Stderr, "  void sendIndividualEventToAllAsync(string requestId, string buddyMid, NotificationStatus notificationStatus)")
  fmt.Fprintln(os.Stderr, "  SetBuddyOnAirResult setBuddyOnAir(string requestId, bool onAir)")
  fmt.Fprintln(os.Stderr, "  string setBuddyOnAirAsync(string requestId, bool onAir)")
  fmt.Fprintln(os.Stderr, "  SendBuddyMessageResult storeMessage(string requestId, BuddyMessageRequest messageRequest)")
  fmt.Fprintln(os.Stderr, "  void unblockBuddyMember(string requestId, string mid)")
  fmt.Fprintln(os.Stderr, "  void unregisterBuddy(string requestId)")
  fmt.Fprintln(os.Stderr, "  void unregisterBuddyAdmin(string requestId)")
  fmt.Fprintln(os.Stderr, "  void updateBuddyAdminProfileAttribute(string requestId,  attributes)")
  fmt.Fprintln(os.Stderr, "  void updateBuddyAdminProfileImage(string requestId, string picture)")
  fmt.Fprintln(os.Stderr, "  UpdateBuddyProfileResult updateBuddyProfileAttributes(string requestId,  attributes)")
  fmt.Fprintln(os.Stderr, "  string updateBuddyProfileAttributesAsync(string requestId,  attributes)")
  fmt.Fprintln(os.Stderr, "  UpdateBuddyProfileResult updateBuddyProfileImage(string requestId, string image)")
  fmt.Fprintln(os.Stderr, "  string updateBuddyProfileImageAsync(string requestId, string image)")
  fmt.Fprintln(os.Stderr, "  void updateBuddySearchId(string requestId, string searchId)")
  fmt.Fprintln(os.Stderr, "  void updateBuddySettings( settings)")
  fmt.Fprintln(os.Stderr, "  string uploadBuddyContent(ContentType contentType, string content)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := line.NewBuddyManagementServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "addBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.AddBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "addBuddyMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddBuddyMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg410 := flag.Arg(2)
    mbTrans411 := thrift.NewTMemoryBufferLen(len(arg410))
    defer mbTrans411.Close()
    _, err412 := mbTrans411.WriteString(arg410)
    if err412 != nil { 
      Usage()
      return
    }
    factory413 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt414 := factory413.GetProtocol(mbTrans411)
    containerStruct1 := line.NewBuddyManagementServiceAddBuddyMembersArgs()
    err415 := containerStruct1.ReadField2(jsProt414)
    if err415 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.UserMids
    value1 := argvalue1
    fmt.Print(client.AddBuddyMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "blockBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "BlockBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.BlockBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "commitSendMessagesToAll":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CommitSendMessagesToAll requires 1 args")
      flag.Usage()
    }
    arg418 := flag.Arg(1)
    mbTrans419 := thrift.NewTMemoryBufferLen(len(arg418))
    defer mbTrans419.Close()
    _, err420 := mbTrans419.WriteString(arg418)
    if err420 != nil { 
      Usage()
      return
    }
    factory421 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt422 := factory421.GetProtocol(mbTrans419)
    containerStruct0 := line.NewBuddyManagementServiceCommitSendMessagesToAllArgs()
    err423 := containerStruct0.ReadField1(jsProt422)
    if err423 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RequestIdList
    value0 := argvalue0
    fmt.Print(client.CommitSendMessagesToAll(context.Background(), value0))
    fmt.Print("\n")
    break
  case "commitSendMessagesToMids":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "CommitSendMessagesToMids requires 2 args")
      flag.Usage()
    }
    arg424 := flag.Arg(1)
    mbTrans425 := thrift.NewTMemoryBufferLen(len(arg424))
    defer mbTrans425.Close()
    _, err426 := mbTrans425.WriteString(arg424)
    if err426 != nil { 
      Usage()
      return
    }
    factory427 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt428 := factory427.GetProtocol(mbTrans425)
    containerStruct0 := line.NewBuddyManagementServiceCommitSendMessagesToMidsArgs()
    err429 := containerStruct0.ReadField1(jsProt428)
    if err429 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.RequestIdList
    value0 := argvalue0
    arg430 := flag.Arg(2)
    mbTrans431 := thrift.NewTMemoryBufferLen(len(arg430))
    defer mbTrans431.Close()
    _, err432 := mbTrans431.WriteString(arg430)
    if err432 != nil { 
      Usage()
      return
    }
    factory433 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt434 := factory433.GetProtocol(mbTrans431)
    containerStruct1 := line.NewBuddyManagementServiceCommitSendMessagesToMidsArgs()
    err435 := containerStruct1.ReadField2(jsProt434)
    if err435 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Mids
    value1 := argvalue1
    fmt.Print(client.CommitSendMessagesToMids(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "containsBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ContainsBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.ContainsBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "downloadMessageContent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DownloadMessageContent requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DownloadMessageContent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "downloadMessageContentPreview":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "DownloadMessageContentPreview requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.DownloadMessageContentPreview(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "downloadProfileImage":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DownloadProfileImage requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DownloadProfileImage(context.Background(), value0))
    fmt.Print("\n")
    break
  case "downloadProfileImagePreview":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DownloadProfileImagePreview requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.DownloadProfileImagePreview(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getActiveMemberCountByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveMemberCountByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetActiveMemberCountByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getActiveMemberMidsByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetActiveMemberMidsByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetActiveMemberMidsByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getAllBuddyMembers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetAllBuddyMembers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetAllBuddyMembers(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockedBuddyMembers":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBlockedBuddyMembers requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBlockedBuddyMembers(context.Background()))
    fmt.Print("\n")
    break
  case "getBlockerCountByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBlockerCountByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetBlockerCountByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBuddyDetailByMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBuddyDetailByMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetBuddyDetailByMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getBuddyProfile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetBuddyProfile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetBuddyProfile(context.Background()))
    fmt.Print("\n")
    break
  case "getContactTicket":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "GetContactTicket requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.GetContactTicket(context.Background()))
    fmt.Print("\n")
    break
  case "getMemberCountByBuddyMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetMemberCountByBuddyMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetMemberCountByBuddyMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSendBuddyMessageResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSendBuddyMessageResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSendBuddyMessageResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getSetBuddyOnAirResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSetBuddyOnAirResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetSetBuddyOnAirResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUpdateBuddyProfileResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUpdateBuddyProfileResult_ requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.GetUpdateBuddyProfileResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "isBuddyOnAirByMid":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "IsBuddyOnAirByMid requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.IsBuddyOnAirByMid(context.Background(), value0))
    fmt.Print("\n")
    break
  case "linkAndSendBuddyContentMessageToAllAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "LinkAndSendBuddyContentMessageToAllAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg454 := flag.Arg(2)
    mbTrans455 := thrift.NewTMemoryBufferLen(len(arg454))
    defer mbTrans455.Close()
    _, err456 := mbTrans455.WriteString(arg454)
    if err456 != nil {
      Usage()
      return
    }
    factory457 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt458 := factory457.GetProtocol(mbTrans455)
    argvalue1 := line.NewMessage()
    err459 := argvalue1.Read(jsProt458)
    if err459 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    fmt.Print(client.LinkAndSendBuddyContentMessageToAllAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "linkAndSendBuddyContentMessageToMids":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "LinkAndSendBuddyContentMessageToMids requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg462 := flag.Arg(2)
    mbTrans463 := thrift.NewTMemoryBufferLen(len(arg462))
    defer mbTrans463.Close()
    _, err464 := mbTrans463.WriteString(arg462)
    if err464 != nil {
      Usage()
      return
    }
    factory465 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt466 := factory465.GetProtocol(mbTrans463)
    argvalue1 := line.NewMessage()
    err467 := argvalue1.Read(jsProt466)
    if err467 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    arg469 := flag.Arg(4)
    mbTrans470 := thrift.NewTMemoryBufferLen(len(arg469))
    defer mbTrans470.Close()
    _, err471 := mbTrans470.WriteString(arg469)
    if err471 != nil { 
      Usage()
      return
    }
    factory472 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt473 := factory472.GetProtocol(mbTrans470)
    containerStruct3 := line.NewBuddyManagementServiceLinkAndSendBuddyContentMessageToMidsArgs()
    err474 := containerStruct3.ReadField4(jsProt473)
    if err474 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Mids
    value3 := argvalue3
    fmt.Print(client.LinkAndSendBuddyContentMessageToMids(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "notifyBuddyBlocked":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyBuddyBlocked requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyBuddyBlocked(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "notifyBuddyUnblocked":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "NotifyBuddyUnblocked requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.NotifyBuddyUnblocked(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "registerBuddy":
    if flag.NArg() - 1 != 6 {
      fmt.Fprintln(os.Stderr, "RegisterBuddy requires 6 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    arg484 := flag.Arg(6)
    mbTrans485 := thrift.NewTMemoryBufferLen(len(arg484))
    defer mbTrans485.Close()
    _, err486 := mbTrans485.WriteString(arg484)
    if err486 != nil { 
      Usage()
      return
    }
    factory487 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt488 := factory487.GetProtocol(mbTrans485)
    containerStruct5 := line.NewBuddyManagementServiceRegisterBuddyArgs()
    err489 := containerStruct5.ReadField6(jsProt488)
    if err489 != nil {
      Usage()
      return
    }
    argvalue5 := containerStruct5.Settings
    value5 := argvalue5
    fmt.Print(client.RegisterBuddy(context.Background(), value0, value1, value2, value3, value4, value5))
    fmt.Print("\n")
    break
  case "registerBuddyAdmin":
    if flag.NArg() - 1 != 5 {
      fmt.Fprintln(os.Stderr, "RegisterBuddyAdmin requires 5 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    argvalue2 := flag.Arg(3)
    value2 := argvalue2
    argvalue3 := flag.Arg(4)
    value3 := argvalue3
    argvalue4 := []byte(flag.Arg(5))
    value4 := argvalue4
    fmt.Print(client.RegisterBuddyAdmin(context.Background(), value0, value1, value2, value3, value4))
    fmt.Print("\n")
    break
  case "reissueContactTicket":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "ReissueContactTicket requires 2 args")
      flag.Usage()
    }
    argvalue0, err495 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err495 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    tmp1, err496 := (strconv.Atoi(flag.Arg(2)))
    if err496 != nil {
      Usage()
      return
    }
    argvalue1 := int32(tmp1)
    value1 := argvalue1
    fmt.Print(client.ReissueContactTicket(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.RemoveBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "removeBuddyMembers":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "RemoveBuddyMembers requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg500 := flag.Arg(2)
    mbTrans501 := thrift.NewTMemoryBufferLen(len(arg500))
    defer mbTrans501.Close()
    _, err502 := mbTrans501.WriteString(arg500)
    if err502 != nil { 
      Usage()
      return
    }
    factory503 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt504 := factory503.GetProtocol(mbTrans501)
    containerStruct1 := line.NewBuddyManagementServiceRemoveBuddyMembersArgs()
    err505 := containerStruct1.ReadField2(jsProt504)
    if err505 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.UserMids
    value1 := argvalue1
    fmt.Print(client.RemoveBuddyMembers(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToAll":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToAll requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg507 := flag.Arg(2)
    mbTrans508 := thrift.NewTMemoryBufferLen(len(arg507))
    defer mbTrans508.Close()
    _, err509 := mbTrans508.WriteString(arg507)
    if err509 != nil {
      Usage()
      return
    }
    factory510 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt511 := factory510.GetProtocol(mbTrans508)
    argvalue1 := line.NewMessage()
    err512 := argvalue1.Read(jsProt511)
    if err512 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.SendBuddyContentMessageToAll(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToAllAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToAllAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg515 := flag.Arg(2)
    mbTrans516 := thrift.NewTMemoryBufferLen(len(arg515))
    defer mbTrans516.Close()
    _, err517 := mbTrans516.WriteString(arg515)
    if err517 != nil {
      Usage()
      return
    }
    factory518 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt519 := factory518.GetProtocol(mbTrans516)
    argvalue1 := line.NewMessage()
    err520 := argvalue1.Read(jsProt519)
    if err520 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    fmt.Print(client.SendBuddyContentMessageToAllAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToMids":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToMids requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg523 := flag.Arg(2)
    mbTrans524 := thrift.NewTMemoryBufferLen(len(arg523))
    defer mbTrans524.Close()
    _, err525 := mbTrans524.WriteString(arg523)
    if err525 != nil {
      Usage()
      return
    }
    factory526 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt527 := factory526.GetProtocol(mbTrans524)
    argvalue1 := line.NewMessage()
    err528 := argvalue1.Read(jsProt527)
    if err528 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    arg530 := flag.Arg(4)
    mbTrans531 := thrift.NewTMemoryBufferLen(len(arg530))
    defer mbTrans531.Close()
    _, err532 := mbTrans531.WriteString(arg530)
    if err532 != nil { 
      Usage()
      return
    }
    factory533 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt534 := factory533.GetProtocol(mbTrans531)
    containerStruct3 := line.NewBuddyManagementServiceSendBuddyContentMessageToMidsArgs()
    err535 := containerStruct3.ReadField4(jsProt534)
    if err535 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Mids
    value3 := argvalue3
    fmt.Print(client.SendBuddyContentMessageToMids(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendBuddyContentMessageToMidsAsync":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "SendBuddyContentMessageToMidsAsync requires 4 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg537 := flag.Arg(2)
    mbTrans538 := thrift.NewTMemoryBufferLen(len(arg537))
    defer mbTrans538.Close()
    _, err539 := mbTrans538.WriteString(arg537)
    if err539 != nil {
      Usage()
      return
    }
    factory540 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt541 := factory540.GetProtocol(mbTrans538)
    argvalue1 := line.NewMessage()
    err542 := argvalue1.Read(jsProt541)
    if err542 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2 := []byte(flag.Arg(3))
    value2 := argvalue2
    arg544 := flag.Arg(4)
    mbTrans545 := thrift.NewTMemoryBufferLen(len(arg544))
    defer mbTrans545.Close()
    _, err546 := mbTrans545.WriteString(arg544)
    if err546 != nil { 
      Usage()
      return
    }
    factory547 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt548 := factory547.GetProtocol(mbTrans545)
    containerStruct3 := line.NewBuddyManagementServiceSendBuddyContentMessageToMidsAsyncArgs()
    err549 := containerStruct3.ReadField4(jsProt548)
    if err549 != nil {
      Usage()
      return
    }
    argvalue3 := containerStruct3.Mids
    value3 := argvalue3
    fmt.Print(client.SendBuddyContentMessageToMidsAsync(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToAll":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToAll requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg551 := flag.Arg(2)
    mbTrans552 := thrift.NewTMemoryBufferLen(len(arg551))
    defer mbTrans552.Close()
    _, err553 := mbTrans552.WriteString(arg551)
    if err553 != nil {
      Usage()
      return
    }
    factory554 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt555 := factory554.GetProtocol(mbTrans552)
    argvalue1 := line.NewMessage()
    err556 := argvalue1.Read(jsProt555)
    if err556 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendBuddyMessageToAll(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToAllAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToAllAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg558 := flag.Arg(2)
    mbTrans559 := thrift.NewTMemoryBufferLen(len(arg558))
    defer mbTrans559.Close()
    _, err560 := mbTrans559.WriteString(arg558)
    if err560 != nil {
      Usage()
      return
    }
    factory561 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt562 := factory561.GetProtocol(mbTrans559)
    argvalue1 := line.NewMessage()
    err563 := argvalue1.Read(jsProt562)
    if err563 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.SendBuddyMessageToAllAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToMids":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToMids requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg565 := flag.Arg(2)
    mbTrans566 := thrift.NewTMemoryBufferLen(len(arg565))
    defer mbTrans566.Close()
    _, err567 := mbTrans566.WriteString(arg565)
    if err567 != nil {
      Usage()
      return
    }
    factory568 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt569 := factory568.GetProtocol(mbTrans566)
    argvalue1 := line.NewMessage()
    err570 := argvalue1.Read(jsProt569)
    if err570 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg571 := flag.Arg(3)
    mbTrans572 := thrift.NewTMemoryBufferLen(len(arg571))
    defer mbTrans572.Close()
    _, err573 := mbTrans572.WriteString(arg571)
    if err573 != nil { 
      Usage()
      return
    }
    factory574 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt575 := factory574.GetProtocol(mbTrans572)
    containerStruct2 := line.NewBuddyManagementServiceSendBuddyMessageToMidsArgs()
    err576 := containerStruct2.ReadField3(jsProt575)
    if err576 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mids
    value2 := argvalue2
    fmt.Print(client.SendBuddyMessageToMids(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendBuddyMessageToMidsAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendBuddyMessageToMidsAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg578 := flag.Arg(2)
    mbTrans579 := thrift.NewTMemoryBufferLen(len(arg578))
    defer mbTrans579.Close()
    _, err580 := mbTrans579.WriteString(arg578)
    if err580 != nil {
      Usage()
      return
    }
    factory581 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt582 := factory581.GetProtocol(mbTrans579)
    argvalue1 := line.NewMessage()
    err583 := argvalue1.Read(jsProt582)
    if err583 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    arg584 := flag.Arg(3)
    mbTrans585 := thrift.NewTMemoryBufferLen(len(arg584))
    defer mbTrans585.Close()
    _, err586 := mbTrans585.WriteString(arg584)
    if err586 != nil { 
      Usage()
      return
    }
    factory587 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt588 := factory587.GetProtocol(mbTrans585)
    containerStruct2 := line.NewBuddyManagementServiceSendBuddyMessageToMidsAsyncArgs()
    err589 := containerStruct2.ReadField3(jsProt588)
    if err589 != nil {
      Usage()
      return
    }
    argvalue2 := containerStruct2.Mids
    value2 := argvalue2
    fmt.Print(client.SendBuddyMessageToMidsAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "sendIndividualEventToAllAsync":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "SendIndividualEventToAllAsync requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err := (strconv.Atoi(flag.Arg(3)))
    if err != nil {
      Usage()
     return
    }
    argvalue2 := line.NotificationStatus(tmp2)
    value2 := argvalue2
    fmt.Print(client.SendIndividualEventToAllAsync(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "setBuddyOnAir":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetBuddyOnAir requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetBuddyOnAir(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "setBuddyOnAirAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "SetBuddyOnAirAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2) == "true"
    value1 := argvalue1
    fmt.Print(client.SetBuddyOnAirAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "storeMessage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "StoreMessage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg597 := flag.Arg(2)
    mbTrans598 := thrift.NewTMemoryBufferLen(len(arg597))
    defer mbTrans598.Close()
    _, err599 := mbTrans598.WriteString(arg597)
    if err599 != nil {
      Usage()
      return
    }
    factory600 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt601 := factory600.GetProtocol(mbTrans598)
    argvalue1 := line.NewBuddyMessageRequest()
    err602 := argvalue1.Read(jsProt601)
    if err602 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.StoreMessage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unblockBuddyMember":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UnblockBuddyMember requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UnblockBuddyMember(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "unregisterBuddy":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UnregisterBuddy requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UnregisterBuddy(context.Background(), value0))
    fmt.Print("\n")
    break
  case "unregisterBuddyAdmin":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UnregisterBuddyAdmin requires 1 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    fmt.Print(client.UnregisterBuddyAdmin(context.Background(), value0))
    fmt.Print("\n")
    break
  case "updateBuddyAdminProfileAttribute":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyAdminProfileAttribute requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg608 := flag.Arg(2)
    mbTrans609 := thrift.NewTMemoryBufferLen(len(arg608))
    defer mbTrans609.Close()
    _, err610 := mbTrans609.WriteString(arg608)
    if err610 != nil { 
      Usage()
      return
    }
    factory611 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt612 := factory611.GetProtocol(mbTrans609)
    containerStruct1 := line.NewBuddyManagementServiceUpdateBuddyAdminProfileAttributeArgs()
    err613 := containerStruct1.ReadField2(jsProt612)
    if err613 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attributes
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyAdminProfileAttribute(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyAdminProfileImage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyAdminProfileImage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyAdminProfileImage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileAttributes":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileAttributes requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg617 := flag.Arg(2)
    mbTrans618 := thrift.NewTMemoryBufferLen(len(arg617))
    defer mbTrans618.Close()
    _, err619 := mbTrans618.WriteString(arg617)
    if err619 != nil { 
      Usage()
      return
    }
    factory620 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt621 := factory620.GetProtocol(mbTrans618)
    containerStruct1 := line.NewBuddyManagementServiceUpdateBuddyProfileAttributesArgs()
    err622 := containerStruct1.ReadField2(jsProt621)
    if err622 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attributes
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileAttributes(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileAttributesAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileAttributesAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    arg624 := flag.Arg(2)
    mbTrans625 := thrift.NewTMemoryBufferLen(len(arg624))
    defer mbTrans625.Close()
    _, err626 := mbTrans625.WriteString(arg624)
    if err626 != nil { 
      Usage()
      return
    }
    factory627 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt628 := factory627.GetProtocol(mbTrans625)
    containerStruct1 := line.NewBuddyManagementServiceUpdateBuddyProfileAttributesAsyncArgs()
    err629 := containerStruct1.ReadField2(jsProt628)
    if err629 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Attributes
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileAttributesAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileImage":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileImage requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileImage(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddyProfileImageAsync":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddyProfileImageAsync requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UpdateBuddyProfileImageAsync(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddySearchId":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UpdateBuddySearchId requires 2 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.UpdateBuddySearchId(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "updateBuddySettings":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateBuddySettings requires 1 args")
      flag.Usage()
    }
    arg636 := flag.Arg(1)
    mbTrans637 := thrift.NewTMemoryBufferLen(len(arg636))
    defer mbTrans637.Close()
    _, err638 := mbTrans637.WriteString(arg636)
    if err638 != nil { 
      Usage()
      return
    }
    factory639 := thrift.NewTSimpleJSONProtocolFactory()
    jsProt640 := factory639.GetProtocol(mbTrans637)
    containerStruct0 := line.NewBuddyManagementServiceUpdateBuddySettingsArgs()
    err641 := containerStruct0.ReadField1(jsProt640)
    if err641 != nil {
      Usage()
      return
    }
    argvalue0 := containerStruct0.Settings
    value0 := argvalue0
    fmt.Print(client.UpdateBuddySettings(context.Background(), value0))
    fmt.Print("\n")
    break
  case "uploadBuddyContent":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "UploadBuddyContent requires 2 args")
      flag.Usage()
    }
    tmp0, err := (strconv.Atoi(flag.Arg(1)))
    if err != nil {
      Usage()
     return
    }
    argvalue0 := line.ContentType(tmp0)
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.UploadBuddyContent(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
