/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ChannelInfo : TBase
{
  private string _channelId;
  private string _name;
  private string _entryPageUrl;
  private string _descriptionText;
  private ChannelProvider _provider;
  private PublicType _publicType;
  private string _iconImage;
  private List<string> _permissions;
  private string _iconThumbnailImage;
  private List<ChannelConfiguration> _channelConfigurations;
  private bool _lcsAllApiUsable;
  private THashSet<ChannelPermission> _allowedPermissions;
  private List<ChannelDomain> _channelDomains;
  private long _updatedTimestamp;

  public string ChannelId
  {
    get
    {
      return _channelId;
    }
    set
    {
      __isset.channelId = true;
      this._channelId = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string EntryPageUrl
  {
    get
    {
      return _entryPageUrl;
    }
    set
    {
      __isset.entryPageUrl = true;
      this._entryPageUrl = value;
    }
  }

  public string DescriptionText
  {
    get
    {
      return _descriptionText;
    }
    set
    {
      __isset.descriptionText = true;
      this._descriptionText = value;
    }
  }

  public ChannelProvider Provider
  {
    get
    {
      return _provider;
    }
    set
    {
      __isset.provider = true;
      this._provider = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PublicType"/>
  /// </summary>
  public PublicType PublicType
  {
    get
    {
      return _publicType;
    }
    set
    {
      __isset.publicType = true;
      this._publicType = value;
    }
  }

  public string IconImage
  {
    get
    {
      return _iconImage;
    }
    set
    {
      __isset.iconImage = true;
      this._iconImage = value;
    }
  }

  public List<string> Permissions
  {
    get
    {
      return _permissions;
    }
    set
    {
      __isset.permissions = true;
      this._permissions = value;
    }
  }

  public string IconThumbnailImage
  {
    get
    {
      return _iconThumbnailImage;
    }
    set
    {
      __isset.iconThumbnailImage = true;
      this._iconThumbnailImage = value;
    }
  }

  public List<ChannelConfiguration> ChannelConfigurations
  {
    get
    {
      return _channelConfigurations;
    }
    set
    {
      __isset.channelConfigurations = true;
      this._channelConfigurations = value;
    }
  }

  public bool LcsAllApiUsable
  {
    get
    {
      return _lcsAllApiUsable;
    }
    set
    {
      __isset.lcsAllApiUsable = true;
      this._lcsAllApiUsable = value;
    }
  }

  public THashSet<ChannelPermission> AllowedPermissions
  {
    get
    {
      return _allowedPermissions;
    }
    set
    {
      __isset.allowedPermissions = true;
      this._allowedPermissions = value;
    }
  }

  public List<ChannelDomain> ChannelDomains
  {
    get
    {
      return _channelDomains;
    }
    set
    {
      __isset.channelDomains = true;
      this._channelDomains = value;
    }
  }

  public long UpdatedTimestamp
  {
    get
    {
      return _updatedTimestamp;
    }
    set
    {
      __isset.updatedTimestamp = true;
      this._updatedTimestamp = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool channelId;
    public bool name;
    public bool entryPageUrl;
    public bool descriptionText;
    public bool provider;
    public bool publicType;
    public bool iconImage;
    public bool permissions;
    public bool iconThumbnailImage;
    public bool channelConfigurations;
    public bool lcsAllApiUsable;
    public bool allowedPermissions;
    public bool channelDomains;
    public bool updatedTimestamp;
  }

  public ChannelInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ChannelId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              EntryPageUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              DescriptionText = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Struct) {
              Provider = new ChannelProvider();
              Provider.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              PublicType = (PublicType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              IconImage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.List) {
              {
                Permissions = new List<string>();
                TList _list111 = iprot.ReadListBegin();
                for( int _i112 = 0; _i112 < _list111.Count; ++_i112)
                {
                  string _elem113;
                  _elem113 = iprot.ReadString();
                  Permissions.Add(_elem113);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              IconThumbnailImage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                ChannelConfigurations = new List<ChannelConfiguration>();
                TList _list114 = iprot.ReadListBegin();
                for( int _i115 = 0; _i115 < _list114.Count; ++_i115)
                {
                  ChannelConfiguration _elem116;
                  _elem116 = (ChannelConfiguration)iprot.ReadI32();
                  ChannelConfigurations.Add(_elem116);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Bool) {
              LcsAllApiUsable = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Set) {
              {
                AllowedPermissions = new THashSet<ChannelPermission>();
                TSet _set117 = iprot.ReadSetBegin();
                for( int _i118 = 0; _i118 < _set117.Count; ++_i118)
                {
                  ChannelPermission _elem119;
                  _elem119 = (ChannelPermission)iprot.ReadI32();
                  AllowedPermissions.Add(_elem119);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.List) {
              {
                ChannelDomains = new List<ChannelDomain>();
                TList _list120 = iprot.ReadListBegin();
                for( int _i121 = 0; _i121 < _list120.Count; ++_i121)
                {
                  ChannelDomain _elem122;
                  _elem122 = new ChannelDomain();
                  _elem122.Read(iprot);
                  ChannelDomains.Add(_elem122);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I64) {
              UpdatedTimestamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ChannelInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ChannelId != null && __isset.channelId) {
        field.Name = "channelId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChannelId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (EntryPageUrl != null && __isset.entryPageUrl) {
        field.Name = "entryPageUrl";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(EntryPageUrl);
        oprot.WriteFieldEnd();
      }
      if (DescriptionText != null && __isset.descriptionText) {
        field.Name = "descriptionText";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DescriptionText);
        oprot.WriteFieldEnd();
      }
      if (Provider != null && __isset.provider) {
        field.Name = "provider";
        field.Type = TType.Struct;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        Provider.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.publicType) {
        field.Name = "publicType";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)PublicType);
        oprot.WriteFieldEnd();
      }
      if (IconImage != null && __isset.iconImage) {
        field.Name = "iconImage";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IconImage);
        oprot.WriteFieldEnd();
      }
      if (Permissions != null && __isset.permissions) {
        field.Name = "permissions";
        field.Type = TType.List;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Permissions.Count));
          foreach (string _iter123 in Permissions)
          {
            oprot.WriteString(_iter123);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (IconThumbnailImage != null && __isset.iconThumbnailImage) {
        field.Name = "iconThumbnailImage";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IconThumbnailImage);
        oprot.WriteFieldEnd();
      }
      if (ChannelConfigurations != null && __isset.channelConfigurations) {
        field.Name = "channelConfigurations";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, ChannelConfigurations.Count));
          foreach (ChannelConfiguration _iter124 in ChannelConfigurations)
          {
            oprot.WriteI32((int)_iter124);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.lcsAllApiUsable) {
        field.Name = "lcsAllApiUsable";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(LcsAllApiUsable);
        oprot.WriteFieldEnd();
      }
      if (AllowedPermissions != null && __isset.allowedPermissions) {
        field.Name = "allowedPermissions";
        field.Type = TType.Set;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I32, AllowedPermissions.Count));
          foreach (ChannelPermission _iter125 in AllowedPermissions)
          {
            oprot.WriteI32((int)_iter125);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ChannelDomains != null && __isset.channelDomains) {
        field.Name = "channelDomains";
        field.Type = TType.List;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ChannelDomains.Count));
          foreach (ChannelDomain _iter126 in ChannelDomains)
          {
            _iter126.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.updatedTimestamp) {
        field.Name = "updatedTimestamp";
        field.Type = TType.I64;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UpdatedTimestamp);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ChannelInfo(");
    bool __first = true;
    if (ChannelId != null && __isset.channelId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChannelId: ");
      __sb.Append(ChannelId);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (EntryPageUrl != null && __isset.entryPageUrl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EntryPageUrl: ");
      __sb.Append(EntryPageUrl);
    }
    if (DescriptionText != null && __isset.descriptionText) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DescriptionText: ");
      __sb.Append(DescriptionText);
    }
    if (Provider != null && __isset.provider) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Provider: ");
      __sb.Append(Provider== null ? "<null>" : Provider.ToString());
    }
    if (__isset.publicType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PublicType: ");
      __sb.Append(PublicType);
    }
    if (IconImage != null && __isset.iconImage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IconImage: ");
      __sb.Append(IconImage);
    }
    if (Permissions != null && __isset.permissions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Permissions: ");
      __sb.Append(Permissions);
    }
    if (IconThumbnailImage != null && __isset.iconThumbnailImage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IconThumbnailImage: ");
      __sb.Append(IconThumbnailImage);
    }
    if (ChannelConfigurations != null && __isset.channelConfigurations) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChannelConfigurations: ");
      __sb.Append(ChannelConfigurations);
    }
    if (__isset.lcsAllApiUsable) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LcsAllApiUsable: ");
      __sb.Append(LcsAllApiUsable);
    }
    if (AllowedPermissions != null && __isset.allowedPermissions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AllowedPermissions: ");
      __sb.Append(AllowedPermissions);
    }
    if (ChannelDomains != null && __isset.channelDomains) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChannelDomains: ");
      __sb.Append(ChannelDomains);
    }
    if (__isset.updatedTimestamp) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UpdatedTimestamp: ");
      __sb.Append(UpdatedTimestamp);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

