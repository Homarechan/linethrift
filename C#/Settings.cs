/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Settings : TBase
{
  private bool _notificationEnable;
  private long _notificationMuteExpiration;
  private bool _notificationNewMessage;
  private bool _notificationGroupInvitation;
  private bool _notificationShowMessage;
  private bool _notificationIncomingCall;
  private string _notificationSoundMessage;
  private string _notificationSoundGroup;
  private bool _notificationDisabledWithSub;
  private bool _privacySyncContacts;
  private bool _privacySearchByPhoneNumber;
  private bool _privacySearchByUserid;
  private bool _privacySearchByEmail;
  private bool _privacyAllowSecondaryDeviceLogin;
  private bool _privacyProfileImagePostToMyhome;
  private bool _privacyReceiveMessagesFromNotFriend;
  private string _contactMyTicket;
  private IdentityProvider _identityProvider;
  private string _identityIdentifier;
  private Dictionary<SnsIdType, string> _snsAccounts;
  private bool _phoneRegistration;
  private EmailConfirmationStatus _emailConfirmationStatus;
  private string _preferenceLocale;
  private Dictionary<CustomMode, string> _customModes;
  private bool _e2eeEnable;
  private bool _hitokotoBackupRequested;
  private bool _privacyProfileMusicPostToMyhome;
  private bool _privacyAllowNearby;
  private long _agreementNearbyTime;
  private long _agreementSquareTime;
  private bool _notificationMention;
  private long _botUseAgreementAcceptedAt;

  public bool NotificationEnable
  {
    get
    {
      return _notificationEnable;
    }
    set
    {
      __isset.notificationEnable = true;
      this._notificationEnable = value;
    }
  }

  public long NotificationMuteExpiration
  {
    get
    {
      return _notificationMuteExpiration;
    }
    set
    {
      __isset.notificationMuteExpiration = true;
      this._notificationMuteExpiration = value;
    }
  }

  public bool NotificationNewMessage
  {
    get
    {
      return _notificationNewMessage;
    }
    set
    {
      __isset.notificationNewMessage = true;
      this._notificationNewMessage = value;
    }
  }

  public bool NotificationGroupInvitation
  {
    get
    {
      return _notificationGroupInvitation;
    }
    set
    {
      __isset.notificationGroupInvitation = true;
      this._notificationGroupInvitation = value;
    }
  }

  public bool NotificationShowMessage
  {
    get
    {
      return _notificationShowMessage;
    }
    set
    {
      __isset.notificationShowMessage = true;
      this._notificationShowMessage = value;
    }
  }

  public bool NotificationIncomingCall
  {
    get
    {
      return _notificationIncomingCall;
    }
    set
    {
      __isset.notificationIncomingCall = true;
      this._notificationIncomingCall = value;
    }
  }

  public string NotificationSoundMessage
  {
    get
    {
      return _notificationSoundMessage;
    }
    set
    {
      __isset.notificationSoundMessage = true;
      this._notificationSoundMessage = value;
    }
  }

  public string NotificationSoundGroup
  {
    get
    {
      return _notificationSoundGroup;
    }
    set
    {
      __isset.notificationSoundGroup = true;
      this._notificationSoundGroup = value;
    }
  }

  public bool NotificationDisabledWithSub
  {
    get
    {
      return _notificationDisabledWithSub;
    }
    set
    {
      __isset.notificationDisabledWithSub = true;
      this._notificationDisabledWithSub = value;
    }
  }

  public bool PrivacySyncContacts
  {
    get
    {
      return _privacySyncContacts;
    }
    set
    {
      __isset.privacySyncContacts = true;
      this._privacySyncContacts = value;
    }
  }

  public bool PrivacySearchByPhoneNumber
  {
    get
    {
      return _privacySearchByPhoneNumber;
    }
    set
    {
      __isset.privacySearchByPhoneNumber = true;
      this._privacySearchByPhoneNumber = value;
    }
  }

  public bool PrivacySearchByUserid
  {
    get
    {
      return _privacySearchByUserid;
    }
    set
    {
      __isset.privacySearchByUserid = true;
      this._privacySearchByUserid = value;
    }
  }

  public bool PrivacySearchByEmail
  {
    get
    {
      return _privacySearchByEmail;
    }
    set
    {
      __isset.privacySearchByEmail = true;
      this._privacySearchByEmail = value;
    }
  }

  public bool PrivacyAllowSecondaryDeviceLogin
  {
    get
    {
      return _privacyAllowSecondaryDeviceLogin;
    }
    set
    {
      __isset.privacyAllowSecondaryDeviceLogin = true;
      this._privacyAllowSecondaryDeviceLogin = value;
    }
  }

  public bool PrivacyProfileImagePostToMyhome
  {
    get
    {
      return _privacyProfileImagePostToMyhome;
    }
    set
    {
      __isset.privacyProfileImagePostToMyhome = true;
      this._privacyProfileImagePostToMyhome = value;
    }
  }

  public bool PrivacyReceiveMessagesFromNotFriend
  {
    get
    {
      return _privacyReceiveMessagesFromNotFriend;
    }
    set
    {
      __isset.privacyReceiveMessagesFromNotFriend = true;
      this._privacyReceiveMessagesFromNotFriend = value;
    }
  }

  public string ContactMyTicket
  {
    get
    {
      return _contactMyTicket;
    }
    set
    {
      __isset.contactMyTicket = true;
      this._contactMyTicket = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="IdentityProvider"/>
  /// </summary>
  public IdentityProvider IdentityProvider
  {
    get
    {
      return _identityProvider;
    }
    set
    {
      __isset.identityProvider = true;
      this._identityProvider = value;
    }
  }

  public string IdentityIdentifier
  {
    get
    {
      return _identityIdentifier;
    }
    set
    {
      __isset.identityIdentifier = true;
      this._identityIdentifier = value;
    }
  }

  public Dictionary<SnsIdType, string> SnsAccounts
  {
    get
    {
      return _snsAccounts;
    }
    set
    {
      __isset.snsAccounts = true;
      this._snsAccounts = value;
    }
  }

  public bool PhoneRegistration
  {
    get
    {
      return _phoneRegistration;
    }
    set
    {
      __isset.phoneRegistration = true;
      this._phoneRegistration = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="EmailConfirmationStatus"/>
  /// </summary>
  public EmailConfirmationStatus EmailConfirmationStatus
  {
    get
    {
      return _emailConfirmationStatus;
    }
    set
    {
      __isset.emailConfirmationStatus = true;
      this._emailConfirmationStatus = value;
    }
  }

  public string PreferenceLocale
  {
    get
    {
      return _preferenceLocale;
    }
    set
    {
      __isset.preferenceLocale = true;
      this._preferenceLocale = value;
    }
  }

  public Dictionary<CustomMode, string> CustomModes
  {
    get
    {
      return _customModes;
    }
    set
    {
      __isset.customModes = true;
      this._customModes = value;
    }
  }

  public bool E2eeEnable
  {
    get
    {
      return _e2eeEnable;
    }
    set
    {
      __isset.e2eeEnable = true;
      this._e2eeEnable = value;
    }
  }

  public bool HitokotoBackupRequested
  {
    get
    {
      return _hitokotoBackupRequested;
    }
    set
    {
      __isset.hitokotoBackupRequested = true;
      this._hitokotoBackupRequested = value;
    }
  }

  public bool PrivacyProfileMusicPostToMyhome
  {
    get
    {
      return _privacyProfileMusicPostToMyhome;
    }
    set
    {
      __isset.privacyProfileMusicPostToMyhome = true;
      this._privacyProfileMusicPostToMyhome = value;
    }
  }

  public bool PrivacyAllowNearby
  {
    get
    {
      return _privacyAllowNearby;
    }
    set
    {
      __isset.privacyAllowNearby = true;
      this._privacyAllowNearby = value;
    }
  }

  public long AgreementNearbyTime
  {
    get
    {
      return _agreementNearbyTime;
    }
    set
    {
      __isset.agreementNearbyTime = true;
      this._agreementNearbyTime = value;
    }
  }

  public long AgreementSquareTime
  {
    get
    {
      return _agreementSquareTime;
    }
    set
    {
      __isset.agreementSquareTime = true;
      this._agreementSquareTime = value;
    }
  }

  public bool NotificationMention
  {
    get
    {
      return _notificationMention;
    }
    set
    {
      __isset.notificationMention = true;
      this._notificationMention = value;
    }
  }

  public long BotUseAgreementAcceptedAt
  {
    get
    {
      return _botUseAgreementAcceptedAt;
    }
    set
    {
      __isset.botUseAgreementAcceptedAt = true;
      this._botUseAgreementAcceptedAt = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool notificationEnable;
    public bool notificationMuteExpiration;
    public bool notificationNewMessage;
    public bool notificationGroupInvitation;
    public bool notificationShowMessage;
    public bool notificationIncomingCall;
    public bool notificationSoundMessage;
    public bool notificationSoundGroup;
    public bool notificationDisabledWithSub;
    public bool privacySyncContacts;
    public bool privacySearchByPhoneNumber;
    public bool privacySearchByUserid;
    public bool privacySearchByEmail;
    public bool privacyAllowSecondaryDeviceLogin;
    public bool privacyProfileImagePostToMyhome;
    public bool privacyReceiveMessagesFromNotFriend;
    public bool contactMyTicket;
    public bool identityProvider;
    public bool identityIdentifier;
    public bool snsAccounts;
    public bool phoneRegistration;
    public bool emailConfirmationStatus;
    public bool preferenceLocale;
    public bool customModes;
    public bool e2eeEnable;
    public bool hitokotoBackupRequested;
    public bool privacyProfileMusicPostToMyhome;
    public bool privacyAllowNearby;
    public bool agreementNearbyTime;
    public bool agreementSquareTime;
    public bool notificationMention;
    public bool botUseAgreementAcceptedAt;
  }

  public Settings() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 10:
            if (field.Type == TType.Bool) {
              NotificationEnable = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              NotificationMuteExpiration = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Bool) {
              NotificationNewMessage = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Bool) {
              NotificationGroupInvitation = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Bool) {
              NotificationShowMessage = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.Bool) {
              NotificationIncomingCall = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              NotificationSoundMessage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              NotificationSoundGroup = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Bool) {
              NotificationDisabledWithSub = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.Bool) {
              PrivacySyncContacts = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.Bool) {
              PrivacySearchByPhoneNumber = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.Bool) {
              PrivacySearchByUserid = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.Bool) {
              PrivacySearchByEmail = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.Bool) {
              PrivacyAllowSecondaryDeviceLogin = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 25:
            if (field.Type == TType.Bool) {
              PrivacyProfileImagePostToMyhome = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 26:
            if (field.Type == TType.Bool) {
              PrivacyReceiveMessagesFromNotFriend = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 30:
            if (field.Type == TType.String) {
              ContactMyTicket = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 40:
            if (field.Type == TType.I32) {
              IdentityProvider = (IdentityProvider)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.String) {
              IdentityIdentifier = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 42:
            if (field.Type == TType.Map) {
              {
                SnsAccounts = new Dictionary<SnsIdType, string>();
                TMap _map329 = iprot.ReadMapBegin();
                for( int _i330 = 0; _i330 < _map329.Count; ++_i330)
                {
                  SnsIdType _key331;
                  string _val332;
                  _key331 = (SnsIdType)iprot.ReadI32();
                  _val332 = iprot.ReadString();
                  SnsAccounts[_key331] = _val332;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 43:
            if (field.Type == TType.Bool) {
              PhoneRegistration = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 44:
            if (field.Type == TType.I32) {
              EmailConfirmationStatus = (EmailConfirmationStatus)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 50:
            if (field.Type == TType.String) {
              PreferenceLocale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 60:
            if (field.Type == TType.Map) {
              {
                CustomModes = new Dictionary<CustomMode, string>();
                TMap _map333 = iprot.ReadMapBegin();
                for( int _i334 = 0; _i334 < _map333.Count; ++_i334)
                {
                  CustomMode _key335;
                  string _val336;
                  _key335 = (CustomMode)iprot.ReadI32();
                  _val336 = iprot.ReadString();
                  CustomModes[_key335] = _val336;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 61:
            if (field.Type == TType.Bool) {
              E2eeEnable = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 62:
            if (field.Type == TType.Bool) {
              HitokotoBackupRequested = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 63:
            if (field.Type == TType.Bool) {
              PrivacyProfileMusicPostToMyhome = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 65:
            if (field.Type == TType.Bool) {
              PrivacyAllowNearby = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 66:
            if (field.Type == TType.I64) {
              AgreementNearbyTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 67:
            if (field.Type == TType.I64) {
              AgreementSquareTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 68:
            if (field.Type == TType.Bool) {
              NotificationMention = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 69:
            if (field.Type == TType.I64) {
              BotUseAgreementAcceptedAt = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Settings");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.notificationEnable) {
        field.Name = "notificationEnable";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NotificationEnable);
        oprot.WriteFieldEnd();
      }
      if (__isset.notificationMuteExpiration) {
        field.Name = "notificationMuteExpiration";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NotificationMuteExpiration);
        oprot.WriteFieldEnd();
      }
      if (__isset.notificationNewMessage) {
        field.Name = "notificationNewMessage";
        field.Type = TType.Bool;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NotificationNewMessage);
        oprot.WriteFieldEnd();
      }
      if (__isset.notificationGroupInvitation) {
        field.Name = "notificationGroupInvitation";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NotificationGroupInvitation);
        oprot.WriteFieldEnd();
      }
      if (__isset.notificationShowMessage) {
        field.Name = "notificationShowMessage";
        field.Type = TType.Bool;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NotificationShowMessage);
        oprot.WriteFieldEnd();
      }
      if (__isset.notificationIncomingCall) {
        field.Name = "notificationIncomingCall";
        field.Type = TType.Bool;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NotificationIncomingCall);
        oprot.WriteFieldEnd();
      }
      if (NotificationSoundMessage != null && __isset.notificationSoundMessage) {
        field.Name = "notificationSoundMessage";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NotificationSoundMessage);
        oprot.WriteFieldEnd();
      }
      if (NotificationSoundGroup != null && __isset.notificationSoundGroup) {
        field.Name = "notificationSoundGroup";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(NotificationSoundGroup);
        oprot.WriteFieldEnd();
      }
      if (__isset.notificationDisabledWithSub) {
        field.Name = "notificationDisabledWithSub";
        field.Type = TType.Bool;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NotificationDisabledWithSub);
        oprot.WriteFieldEnd();
      }
      if (__isset.privacySyncContacts) {
        field.Name = "privacySyncContacts";
        field.Type = TType.Bool;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivacySyncContacts);
        oprot.WriteFieldEnd();
      }
      if (__isset.privacySearchByPhoneNumber) {
        field.Name = "privacySearchByPhoneNumber";
        field.Type = TType.Bool;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivacySearchByPhoneNumber);
        oprot.WriteFieldEnd();
      }
      if (__isset.privacySearchByUserid) {
        field.Name = "privacySearchByUserid";
        field.Type = TType.Bool;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivacySearchByUserid);
        oprot.WriteFieldEnd();
      }
      if (__isset.privacySearchByEmail) {
        field.Name = "privacySearchByEmail";
        field.Type = TType.Bool;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivacySearchByEmail);
        oprot.WriteFieldEnd();
      }
      if (__isset.privacyAllowSecondaryDeviceLogin) {
        field.Name = "privacyAllowSecondaryDeviceLogin";
        field.Type = TType.Bool;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivacyAllowSecondaryDeviceLogin);
        oprot.WriteFieldEnd();
      }
      if (__isset.privacyProfileImagePostToMyhome) {
        field.Name = "privacyProfileImagePostToMyhome";
        field.Type = TType.Bool;
        field.ID = 25;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivacyProfileImagePostToMyhome);
        oprot.WriteFieldEnd();
      }
      if (__isset.privacyReceiveMessagesFromNotFriend) {
        field.Name = "privacyReceiveMessagesFromNotFriend";
        field.Type = TType.Bool;
        field.ID = 26;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivacyReceiveMessagesFromNotFriend);
        oprot.WriteFieldEnd();
      }
      if (ContactMyTicket != null && __isset.contactMyTicket) {
        field.Name = "contactMyTicket";
        field.Type = TType.String;
        field.ID = 30;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContactMyTicket);
        oprot.WriteFieldEnd();
      }
      if (__isset.identityProvider) {
        field.Name = "identityProvider";
        field.Type = TType.I32;
        field.ID = 40;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)IdentityProvider);
        oprot.WriteFieldEnd();
      }
      if (IdentityIdentifier != null && __isset.identityIdentifier) {
        field.Name = "identityIdentifier";
        field.Type = TType.String;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IdentityIdentifier);
        oprot.WriteFieldEnd();
      }
      if (SnsAccounts != null && __isset.snsAccounts) {
        field.Name = "snsAccounts";
        field.Type = TType.Map;
        field.ID = 42;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.String, SnsAccounts.Count));
          foreach (SnsIdType _iter337 in SnsAccounts.Keys)
          {
            oprot.WriteI32((int)_iter337);
            oprot.WriteString(SnsAccounts[_iter337]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.phoneRegistration) {
        field.Name = "phoneRegistration";
        field.Type = TType.Bool;
        field.ID = 43;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PhoneRegistration);
        oprot.WriteFieldEnd();
      }
      if (__isset.emailConfirmationStatus) {
        field.Name = "emailConfirmationStatus";
        field.Type = TType.I32;
        field.ID = 44;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)EmailConfirmationStatus);
        oprot.WriteFieldEnd();
      }
      if (PreferenceLocale != null && __isset.preferenceLocale) {
        field.Name = "preferenceLocale";
        field.Type = TType.String;
        field.ID = 50;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PreferenceLocale);
        oprot.WriteFieldEnd();
      }
      if (CustomModes != null && __isset.customModes) {
        field.Name = "customModes";
        field.Type = TType.Map;
        field.ID = 60;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.String, CustomModes.Count));
          foreach (CustomMode _iter338 in CustomModes.Keys)
          {
            oprot.WriteI32((int)_iter338);
            oprot.WriteString(CustomModes[_iter338]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.e2eeEnable) {
        field.Name = "e2eeEnable";
        field.Type = TType.Bool;
        field.ID = 61;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(E2eeEnable);
        oprot.WriteFieldEnd();
      }
      if (__isset.hitokotoBackupRequested) {
        field.Name = "hitokotoBackupRequested";
        field.Type = TType.Bool;
        field.ID = 62;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HitokotoBackupRequested);
        oprot.WriteFieldEnd();
      }
      if (__isset.privacyProfileMusicPostToMyhome) {
        field.Name = "privacyProfileMusicPostToMyhome";
        field.Type = TType.Bool;
        field.ID = 63;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivacyProfileMusicPostToMyhome);
        oprot.WriteFieldEnd();
      }
      if (__isset.privacyAllowNearby) {
        field.Name = "privacyAllowNearby";
        field.Type = TType.Bool;
        field.ID = 65;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivacyAllowNearby);
        oprot.WriteFieldEnd();
      }
      if (__isset.agreementNearbyTime) {
        field.Name = "agreementNearbyTime";
        field.Type = TType.I64;
        field.ID = 66;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AgreementNearbyTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.agreementSquareTime) {
        field.Name = "agreementSquareTime";
        field.Type = TType.I64;
        field.ID = 67;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(AgreementSquareTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.notificationMention) {
        field.Name = "notificationMention";
        field.Type = TType.Bool;
        field.ID = 68;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NotificationMention);
        oprot.WriteFieldEnd();
      }
      if (__isset.botUseAgreementAcceptedAt) {
        field.Name = "botUseAgreementAcceptedAt";
        field.Type = TType.I64;
        field.ID = 69;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BotUseAgreementAcceptedAt);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Settings(");
    bool __first = true;
    if (__isset.notificationEnable) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationEnable: ");
      __sb.Append(NotificationEnable);
    }
    if (__isset.notificationMuteExpiration) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationMuteExpiration: ");
      __sb.Append(NotificationMuteExpiration);
    }
    if (__isset.notificationNewMessage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationNewMessage: ");
      __sb.Append(NotificationNewMessage);
    }
    if (__isset.notificationGroupInvitation) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationGroupInvitation: ");
      __sb.Append(NotificationGroupInvitation);
    }
    if (__isset.notificationShowMessage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationShowMessage: ");
      __sb.Append(NotificationShowMessage);
    }
    if (__isset.notificationIncomingCall) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationIncomingCall: ");
      __sb.Append(NotificationIncomingCall);
    }
    if (NotificationSoundMessage != null && __isset.notificationSoundMessage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationSoundMessage: ");
      __sb.Append(NotificationSoundMessage);
    }
    if (NotificationSoundGroup != null && __isset.notificationSoundGroup) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationSoundGroup: ");
      __sb.Append(NotificationSoundGroup);
    }
    if (__isset.notificationDisabledWithSub) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationDisabledWithSub: ");
      __sb.Append(NotificationDisabledWithSub);
    }
    if (__isset.privacySyncContacts) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivacySyncContacts: ");
      __sb.Append(PrivacySyncContacts);
    }
    if (__isset.privacySearchByPhoneNumber) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivacySearchByPhoneNumber: ");
      __sb.Append(PrivacySearchByPhoneNumber);
    }
    if (__isset.privacySearchByUserid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivacySearchByUserid: ");
      __sb.Append(PrivacySearchByUserid);
    }
    if (__isset.privacySearchByEmail) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivacySearchByEmail: ");
      __sb.Append(PrivacySearchByEmail);
    }
    if (__isset.privacyAllowSecondaryDeviceLogin) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivacyAllowSecondaryDeviceLogin: ");
      __sb.Append(PrivacyAllowSecondaryDeviceLogin);
    }
    if (__isset.privacyProfileImagePostToMyhome) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivacyProfileImagePostToMyhome: ");
      __sb.Append(PrivacyProfileImagePostToMyhome);
    }
    if (__isset.privacyReceiveMessagesFromNotFriend) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivacyReceiveMessagesFromNotFriend: ");
      __sb.Append(PrivacyReceiveMessagesFromNotFriend);
    }
    if (ContactMyTicket != null && __isset.contactMyTicket) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContactMyTicket: ");
      __sb.Append(ContactMyTicket);
    }
    if (__isset.identityProvider) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IdentityProvider: ");
      __sb.Append(IdentityProvider);
    }
    if (IdentityIdentifier != null && __isset.identityIdentifier) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IdentityIdentifier: ");
      __sb.Append(IdentityIdentifier);
    }
    if (SnsAccounts != null && __isset.snsAccounts) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SnsAccounts: ");
      __sb.Append(SnsAccounts);
    }
    if (__isset.phoneRegistration) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PhoneRegistration: ");
      __sb.Append(PhoneRegistration);
    }
    if (__isset.emailConfirmationStatus) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EmailConfirmationStatus: ");
      __sb.Append(EmailConfirmationStatus);
    }
    if (PreferenceLocale != null && __isset.preferenceLocale) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PreferenceLocale: ");
      __sb.Append(PreferenceLocale);
    }
    if (CustomModes != null && __isset.customModes) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CustomModes: ");
      __sb.Append(CustomModes);
    }
    if (__isset.e2eeEnable) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("E2eeEnable: ");
      __sb.Append(E2eeEnable);
    }
    if (__isset.hitokotoBackupRequested) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HitokotoBackupRequested: ");
      __sb.Append(HitokotoBackupRequested);
    }
    if (__isset.privacyProfileMusicPostToMyhome) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivacyProfileMusicPostToMyhome: ");
      __sb.Append(PrivacyProfileMusicPostToMyhome);
    }
    if (__isset.privacyAllowNearby) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivacyAllowNearby: ");
      __sb.Append(PrivacyAllowNearby);
    }
    if (__isset.agreementNearbyTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AgreementNearbyTime: ");
      __sb.Append(AgreementNearbyTime);
    }
    if (__isset.agreementSquareTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AgreementSquareTime: ");
      __sb.Append(AgreementSquareTime);
    }
    if (__isset.notificationMention) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NotificationMention: ");
      __sb.Append(NotificationMention);
    }
    if (__isset.botUseAgreementAcceptedAt) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BotUseAgreementAcceptedAt: ");
      __sb.Append(BotUseAgreementAcceptedAt);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

