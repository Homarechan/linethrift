/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ContactModification : TBase
{
  private ModificationType _type;
  private string _luid;
  private List<string> _phones;
  private List<string> _emails;
  private List<string> _userids;

  /// <summary>
  /// 
  /// <seealso cref="ModificationType"/>
  /// </summary>
  public ModificationType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public string Luid
  {
    get
    {
      return _luid;
    }
    set
    {
      __isset.luid = true;
      this._luid = value;
    }
  }

  public List<string> Phones
  {
    get
    {
      return _phones;
    }
    set
    {
      __isset.phones = true;
      this._phones = value;
    }
  }

  public List<string> Emails
  {
    get
    {
      return _emails;
    }
    set
    {
      __isset.emails = true;
      this._emails = value;
    }
  }

  public List<string> Userids
  {
    get
    {
      return _userids;
    }
    set
    {
      __isset.userids = true;
      this._userids = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool type;
    public bool luid;
    public bool phones;
    public bool emails;
    public bool userids;
  }

  public ContactModification() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Type = (ModificationType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Luid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                Phones = new List<string>();
                TList _list113 = iprot.ReadListBegin();
                for( int _i114 = 0; _i114 < _list113.Count; ++_i114)
                {
                  string _elem115;
                  _elem115 = iprot.ReadString();
                  Phones.Add(_elem115);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                Emails = new List<string>();
                TList _list116 = iprot.ReadListBegin();
                for( int _i117 = 0; _i117 < _list116.Count; ++_i117)
                {
                  string _elem118;
                  _elem118 = iprot.ReadString();
                  Emails.Add(_elem118);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                Userids = new List<string>();
                TList _list119 = iprot.ReadListBegin();
                for( int _i120 = 0; _i120 < _list119.Count; ++_i120)
                {
                  string _elem121;
                  _elem121 = iprot.ReadString();
                  Userids.Add(_elem121);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ContactModification");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (Luid != null && __isset.luid) {
        field.Name = "luid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Luid);
        oprot.WriteFieldEnd();
      }
      if (Phones != null && __isset.phones) {
        field.Name = "phones";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Phones.Count));
          foreach (string _iter122 in Phones)
          {
            oprot.WriteString(_iter122);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Emails != null && __isset.emails) {
        field.Name = "emails";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Emails.Count));
          foreach (string _iter123 in Emails)
          {
            oprot.WriteString(_iter123);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Userids != null && __isset.userids) {
        field.Name = "userids";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Userids.Count));
          foreach (string _iter124 in Userids)
          {
            oprot.WriteString(_iter124);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ContactModification(");
    bool __first = true;
    if (__isset.type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Type: ");
      __sb.Append(Type);
    }
    if (Luid != null && __isset.luid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Luid: ");
      __sb.Append(Luid);
    }
    if (Phones != null && __isset.phones) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Phones: ");
      __sb.Append(Phones);
    }
    if (Emails != null && __isset.emails) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Emails: ");
      __sb.Append(Emails);
    }
    if (Userids != null && __isset.userids) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Userids: ");
      __sb.Append(Userids);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

