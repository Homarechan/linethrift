/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class AgeCheckService {
  public interface ISync {
    UserAgeType checkUserAge(CarrierCode carrier, string sessionId, string verifier, int standardAge);
    AgeCheckDocomoResult checkUserAgeWithDocomo(string openIdRedirectUrl, int standardAge, string verifier);
    string retrieveOpenIdAuthUrlWithDocomo();
    AgeCheckRequestResult retrieveRequestToken(CarrierCode carrier);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_checkUserAge(AsyncCallback callback, object state, CarrierCode carrier, string sessionId, string verifier, int standardAge);
    UserAgeType End_checkUserAge(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_checkUserAgeWithDocomo(AsyncCallback callback, object state, string openIdRedirectUrl, int standardAge, string verifier);
    AgeCheckDocomoResult End_checkUserAgeWithDocomo(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_retrieveOpenIdAuthUrlWithDocomo(AsyncCallback callback, object state);
    string End_retrieveOpenIdAuthUrlWithDocomo(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_retrieveRequestToken(AsyncCallback callback, object state, CarrierCode carrier);
    AgeCheckRequestResult End_retrieveRequestToken(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_checkUserAge(AsyncCallback callback, object state, CarrierCode carrier, string sessionId, string verifier, int standardAge)
    {
      return send_checkUserAge(callback, state, carrier, sessionId, verifier, standardAge);
    }

    public UserAgeType End_checkUserAge(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_checkUserAge();
    }

    #endif

    public UserAgeType checkUserAge(CarrierCode carrier, string sessionId, string verifier, int standardAge)
    {
      #if !SILVERLIGHT
      send_checkUserAge(carrier, sessionId, verifier, standardAge);
      return recv_checkUserAge();

      #else
      var asyncResult = Begin_checkUserAge(null, null, carrier, sessionId, verifier, standardAge);
      return End_checkUserAge(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_checkUserAge(AsyncCallback callback, object state, CarrierCode carrier, string sessionId, string verifier, int standardAge)
    #else
    public void send_checkUserAge(CarrierCode carrier, string sessionId, string verifier, int standardAge)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("checkUserAge", TMessageType.Call, seqid_));
      checkUserAge_args args = new checkUserAge_args();
      args.Carrier = carrier;
      args.SessionId = sessionId;
      args.Verifier = verifier;
      args.StandardAge = standardAge;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public UserAgeType recv_checkUserAge()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      checkUserAge_result result = new checkUserAge_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkUserAge failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_checkUserAgeWithDocomo(AsyncCallback callback, object state, string openIdRedirectUrl, int standardAge, string verifier)
    {
      return send_checkUserAgeWithDocomo(callback, state, openIdRedirectUrl, standardAge, verifier);
    }

    public AgeCheckDocomoResult End_checkUserAgeWithDocomo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_checkUserAgeWithDocomo();
    }

    #endif

    public AgeCheckDocomoResult checkUserAgeWithDocomo(string openIdRedirectUrl, int standardAge, string verifier)
    {
      #if !SILVERLIGHT
      send_checkUserAgeWithDocomo(openIdRedirectUrl, standardAge, verifier);
      return recv_checkUserAgeWithDocomo();

      #else
      var asyncResult = Begin_checkUserAgeWithDocomo(null, null, openIdRedirectUrl, standardAge, verifier);
      return End_checkUserAgeWithDocomo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_checkUserAgeWithDocomo(AsyncCallback callback, object state, string openIdRedirectUrl, int standardAge, string verifier)
    #else
    public void send_checkUserAgeWithDocomo(string openIdRedirectUrl, int standardAge, string verifier)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.Call, seqid_));
      checkUserAgeWithDocomo_args args = new checkUserAgeWithDocomo_args();
      args.OpenIdRedirectUrl = openIdRedirectUrl;
      args.StandardAge = standardAge;
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public AgeCheckDocomoResult recv_checkUserAgeWithDocomo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkUserAgeWithDocomo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_retrieveOpenIdAuthUrlWithDocomo(AsyncCallback callback, object state)
    {
      return send_retrieveOpenIdAuthUrlWithDocomo(callback, state);
    }

    public string End_retrieveOpenIdAuthUrlWithDocomo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_retrieveOpenIdAuthUrlWithDocomo();
    }

    #endif

    public string retrieveOpenIdAuthUrlWithDocomo()
    {
      #if !SILVERLIGHT
      send_retrieveOpenIdAuthUrlWithDocomo();
      return recv_retrieveOpenIdAuthUrlWithDocomo();

      #else
      var asyncResult = Begin_retrieveOpenIdAuthUrlWithDocomo(null, null);
      return End_retrieveOpenIdAuthUrlWithDocomo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_retrieveOpenIdAuthUrlWithDocomo(AsyncCallback callback, object state)
    #else
    public void send_retrieveOpenIdAuthUrlWithDocomo()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.Call, seqid_));
      retrieveOpenIdAuthUrlWithDocomo_args args = new retrieveOpenIdAuthUrlWithDocomo_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_retrieveOpenIdAuthUrlWithDocomo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveOpenIdAuthUrlWithDocomo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_retrieveRequestToken(AsyncCallback callback, object state, CarrierCode carrier)
    {
      return send_retrieveRequestToken(callback, state, carrier);
    }

    public AgeCheckRequestResult End_retrieveRequestToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_retrieveRequestToken();
    }

    #endif

    public AgeCheckRequestResult retrieveRequestToken(CarrierCode carrier)
    {
      #if !SILVERLIGHT
      send_retrieveRequestToken(carrier);
      return recv_retrieveRequestToken();

      #else
      var asyncResult = Begin_retrieveRequestToken(null, null, carrier);
      return End_retrieveRequestToken(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_retrieveRequestToken(AsyncCallback callback, object state, CarrierCode carrier)
    #else
    public void send_retrieveRequestToken(CarrierCode carrier)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("retrieveRequestToken", TMessageType.Call, seqid_));
      retrieveRequestToken_args args = new retrieveRequestToken_args();
      args.Carrier = carrier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public AgeCheckRequestResult recv_retrieveRequestToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      retrieveRequestToken_result result = new retrieveRequestToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "retrieveRequestToken failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["checkUserAge"] = checkUserAge_Process;
      processMap_["checkUserAgeWithDocomo"] = checkUserAgeWithDocomo_Process;
      processMap_["retrieveOpenIdAuthUrlWithDocomo"] = retrieveOpenIdAuthUrlWithDocomo_Process;
      processMap_["retrieveRequestToken"] = retrieveRequestToken_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void checkUserAge_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      checkUserAge_args args = new checkUserAge_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      checkUserAge_result result = new checkUserAge_result();
      try
      {
        try
        {
          result.Success = iface_.checkUserAge(args.Carrier, args.SessionId, args.Verifier, args.StandardAge);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("checkUserAge", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("checkUserAge", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void checkUserAgeWithDocomo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      checkUserAgeWithDocomo_args args = new checkUserAgeWithDocomo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      checkUserAgeWithDocomo_result result = new checkUserAgeWithDocomo_result();
      try
      {
        try
        {
          result.Success = iface_.checkUserAgeWithDocomo(args.OpenIdRedirectUrl, args.StandardAge, args.Verifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("checkUserAgeWithDocomo", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void retrieveOpenIdAuthUrlWithDocomo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      retrieveOpenIdAuthUrlWithDocomo_args args = new retrieveOpenIdAuthUrlWithDocomo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      retrieveOpenIdAuthUrlWithDocomo_result result = new retrieveOpenIdAuthUrlWithDocomo_result();
      try
      {
        try
        {
          result.Success = iface_.retrieveOpenIdAuthUrlWithDocomo();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("retrieveOpenIdAuthUrlWithDocomo", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void retrieveRequestToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      retrieveRequestToken_args args = new retrieveRequestToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      retrieveRequestToken_result result = new retrieveRequestToken_result();
      try
      {
        try
        {
          result.Success = iface_.retrieveRequestToken(args.Carrier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("retrieveRequestToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("retrieveRequestToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class checkUserAge_args : TBase
  {
    private CarrierCode _carrier;
    private string _sessionId;
    private string _verifier;
    private int _standardAge;

    /// <summary>
    /// 
    /// <seealso cref="CarrierCode"/>
    /// </summary>
    public CarrierCode Carrier
    {
      get
      {
        return _carrier;
      }
      set
      {
        __isset.carrier = true;
        this._carrier = value;
      }
    }

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public int StandardAge
    {
      get
      {
        return _standardAge;
      }
      set
      {
        __isset.standardAge = true;
        this._standardAge = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool carrier;
      public bool sessionId;
      public bool verifier;
      public bool standardAge;
    }

    public checkUserAge_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Carrier = (CarrierCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                StandardAge = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("checkUserAge_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.carrier) {
          field.Name = "carrier";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Carrier);
          oprot.WriteFieldEnd();
        }
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.standardAge) {
          field.Name = "standardAge";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(StandardAge);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("checkUserAge_args(");
      bool __first = true;
      if (__isset.carrier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Carrier: ");
        __sb.Append(Carrier);
      }
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      if (__isset.standardAge) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StandardAge: ");
        __sb.Append(StandardAge);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class checkUserAge_result : TBase
  {
    private UserAgeType _success;
    private TalkException _e;

    /// <summary>
    /// 
    /// <seealso cref="UserAgeType"/>
    /// </summary>
    public UserAgeType Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public checkUserAge_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (UserAgeType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("checkUserAge_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("checkUserAge_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class checkUserAgeWithDocomo_args : TBase
  {
    private string _openIdRedirectUrl;
    private int _standardAge;
    private string _verifier;

    public string OpenIdRedirectUrl
    {
      get
      {
        return _openIdRedirectUrl;
      }
      set
      {
        __isset.openIdRedirectUrl = true;
        this._openIdRedirectUrl = value;
      }
    }

    public int StandardAge
    {
      get
      {
        return _standardAge;
      }
      set
      {
        __isset.standardAge = true;
        this._standardAge = value;
      }
    }

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool openIdRedirectUrl;
      public bool standardAge;
      public bool verifier;
    }

    public checkUserAgeWithDocomo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                OpenIdRedirectUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                StandardAge = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("checkUserAgeWithDocomo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (OpenIdRedirectUrl != null && __isset.openIdRedirectUrl) {
          field.Name = "openIdRedirectUrl";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OpenIdRedirectUrl);
          oprot.WriteFieldEnd();
        }
        if (__isset.standardAge) {
          field.Name = "standardAge";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(StandardAge);
          oprot.WriteFieldEnd();
        }
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("checkUserAgeWithDocomo_args(");
      bool __first = true;
      if (OpenIdRedirectUrl != null && __isset.openIdRedirectUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OpenIdRedirectUrl: ");
        __sb.Append(OpenIdRedirectUrl);
      }
      if (__isset.standardAge) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StandardAge: ");
        __sb.Append(StandardAge);
      }
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class checkUserAgeWithDocomo_result : TBase
  {
    private AgeCheckDocomoResult _success;
    private TalkException _e;

    public AgeCheckDocomoResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public checkUserAgeWithDocomo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AgeCheckDocomoResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("checkUserAgeWithDocomo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("checkUserAgeWithDocomo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveOpenIdAuthUrlWithDocomo_args : TBase
  {

    public retrieveOpenIdAuthUrlWithDocomo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveOpenIdAuthUrlWithDocomo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveOpenIdAuthUrlWithDocomo_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveOpenIdAuthUrlWithDocomo_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public retrieveOpenIdAuthUrlWithDocomo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveOpenIdAuthUrlWithDocomo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveOpenIdAuthUrlWithDocomo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveRequestToken_args : TBase
  {
    private CarrierCode _carrier;

    /// <summary>
    /// 
    /// <seealso cref="CarrierCode"/>
    /// </summary>
    public CarrierCode Carrier
    {
      get
      {
        return _carrier;
      }
      set
      {
        __isset.carrier = true;
        this._carrier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool carrier;
    }

    public retrieveRequestToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Carrier = (CarrierCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveRequestToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.carrier) {
          field.Name = "carrier";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Carrier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveRequestToken_args(");
      bool __first = true;
      if (__isset.carrier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Carrier: ");
        __sb.Append(Carrier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class retrieveRequestToken_result : TBase
  {
    private AgeCheckRequestResult _success;
    private TalkException _e;

    public AgeCheckRequestResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public retrieveRequestToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AgeCheckRequestResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("retrieveRequestToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("retrieveRequestToken_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
