/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CommitMessageResult : TBase
{
  private Message _message;
  private CommitMessageResultCode _code;
  private string _reason;
  private long _successCount;
  private long _failCount;
  private long _unregisterCount;
  private long _blockCount;

  public Message Message
  {
    get
    {
      return _message;
    }
    set
    {
      __isset.message = true;
      this._message = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="CommitMessageResultCode"/>
  /// </summary>
  public CommitMessageResultCode Code
  {
    get
    {
      return _code;
    }
    set
    {
      __isset.code = true;
      this._code = value;
    }
  }

  public string Reason
  {
    get
    {
      return _reason;
    }
    set
    {
      __isset.reason = true;
      this._reason = value;
    }
  }

  public long SuccessCount
  {
    get
    {
      return _successCount;
    }
    set
    {
      __isset.successCount = true;
      this._successCount = value;
    }
  }

  public long FailCount
  {
    get
    {
      return _failCount;
    }
    set
    {
      __isset.failCount = true;
      this._failCount = value;
    }
  }

  public long UnregisterCount
  {
    get
    {
      return _unregisterCount;
    }
    set
    {
      __isset.unregisterCount = true;
      this._unregisterCount = value;
    }
  }

  public long BlockCount
  {
    get
    {
      return _blockCount;
    }
    set
    {
      __isset.blockCount = true;
      this._blockCount = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool message;
    public bool code;
    public bool reason;
    public bool successCount;
    public bool failCount;
    public bool unregisterCount;
    public bool blockCount;
  }

  public CommitMessageResult() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Message = new Message();
              Message.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Code = (CommitMessageResultCode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Reason = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              SuccessCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              FailCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              UnregisterCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              BlockCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("CommitMessageResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Message != null && __isset.message) {
        field.Name = "message";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Message.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.code) {
        field.Name = "code";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Code);
        oprot.WriteFieldEnd();
      }
      if (Reason != null && __isset.reason) {
        field.Name = "reason";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Reason);
        oprot.WriteFieldEnd();
      }
      if (__isset.successCount) {
        field.Name = "successCount";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SuccessCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.failCount) {
        field.Name = "failCount";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FailCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.unregisterCount) {
        field.Name = "unregisterCount";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UnregisterCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.blockCount) {
        field.Name = "blockCount";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BlockCount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CommitMessageResult(");
    bool __first = true;
    if (Message != null && __isset.message) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Message: ");
      __sb.Append(Message);
    }
    if (__isset.code) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Code: ");
      __sb.Append(Code);
    }
    if (Reason != null && __isset.reason) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Reason: ");
      __sb.Append(Reason);
    }
    if (__isset.successCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SuccessCount: ");
      __sb.Append(SuccessCount);
    }
    if (__isset.failCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FailCount: ");
      __sb.Append(FailCount);
    }
    if (__isset.unregisterCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UnregisterCount: ");
      __sb.Append(UnregisterCount);
    }
    if (__isset.blockCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BlockCount: ");
      __sb.Append(BlockCount);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

