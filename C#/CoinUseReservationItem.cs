/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CoinUseReservationItem : TBase
{
  private string _itemId;
  private string _itemName;
  private int _amount;

  public string ItemId
  {
    get
    {
      return _itemId;
    }
    set
    {
      __isset.itemId = true;
      this._itemId = value;
    }
  }

  public string ItemName
  {
    get
    {
      return _itemName;
    }
    set
    {
      __isset.itemName = true;
      this._itemName = value;
    }
  }

  public int Amount
  {
    get
    {
      return _amount;
    }
    set
    {
      __isset.amount = true;
      this._amount = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool itemId;
    public bool itemName;
    public bool amount;
  }

  public CoinUseReservationItem() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ItemId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ItemName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Amount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("CoinUseReservationItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ItemId != null && __isset.itemId) {
        field.Name = "itemId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemId);
        oprot.WriteFieldEnd();
      }
      if (ItemName != null && __isset.itemName) {
        field.Name = "itemName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemName);
        oprot.WriteFieldEnd();
      }
      if (__isset.amount) {
        field.Name = "amount";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Amount);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CoinUseReservationItem(");
    bool __first = true;
    if (ItemId != null && __isset.itemId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ItemId: ");
      __sb.Append(ItemId);
    }
    if (ItemName != null && __isset.itemName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ItemName: ");
      __sb.Append(ItemName);
    }
    if (__isset.amount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Amount: ");
      __sb.Append(Amount);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

