/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class FriendRequestsInfo : TBase
{
  private int _totalIncomingCount;
  private int _totalOutgoingCount;
  private List<FriendRequest> _recentIncomings;
  private List<FriendRequest> _recentOutgoings;
  private int _totalIncomingLimit;
  private int _totalOutgoingLimit;

  public int TotalIncomingCount
  {
    get
    {
      return _totalIncomingCount;
    }
    set
    {
      __isset.totalIncomingCount = true;
      this._totalIncomingCount = value;
    }
  }

  public int TotalOutgoingCount
  {
    get
    {
      return _totalOutgoingCount;
    }
    set
    {
      __isset.totalOutgoingCount = true;
      this._totalOutgoingCount = value;
    }
  }

  public List<FriendRequest> RecentIncomings
  {
    get
    {
      return _recentIncomings;
    }
    set
    {
      __isset.recentIncomings = true;
      this._recentIncomings = value;
    }
  }

  public List<FriendRequest> RecentOutgoings
  {
    get
    {
      return _recentOutgoings;
    }
    set
    {
      __isset.recentOutgoings = true;
      this._recentOutgoings = value;
    }
  }

  public int TotalIncomingLimit
  {
    get
    {
      return _totalIncomingLimit;
    }
    set
    {
      __isset.totalIncomingLimit = true;
      this._totalIncomingLimit = value;
    }
  }

  public int TotalOutgoingLimit
  {
    get
    {
      return _totalOutgoingLimit;
    }
    set
    {
      __isset.totalOutgoingLimit = true;
      this._totalOutgoingLimit = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool totalIncomingCount;
    public bool totalOutgoingCount;
    public bool recentIncomings;
    public bool recentOutgoings;
    public bool totalIncomingLimit;
    public bool totalOutgoingLimit;
  }

  public FriendRequestsInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              TotalIncomingCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              TotalOutgoingCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                RecentIncomings = new List<FriendRequest>();
                TList _list129 = iprot.ReadListBegin();
                for( int _i130 = 0; _i130 < _list129.Count; ++_i130)
                {
                  FriendRequest _elem131;
                  _elem131 = new FriendRequest();
                  _elem131.Read(iprot);
                  RecentIncomings.Add(_elem131);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                RecentOutgoings = new List<FriendRequest>();
                TList _list132 = iprot.ReadListBegin();
                for( int _i133 = 0; _i133 < _list132.Count; ++_i133)
                {
                  FriendRequest _elem134;
                  _elem134 = new FriendRequest();
                  _elem134.Read(iprot);
                  RecentOutgoings.Add(_elem134);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              TotalIncomingLimit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              TotalOutgoingLimit = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("FriendRequestsInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.totalIncomingCount) {
        field.Name = "totalIncomingCount";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalIncomingCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalOutgoingCount) {
        field.Name = "totalOutgoingCount";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalOutgoingCount);
        oprot.WriteFieldEnd();
      }
      if (RecentIncomings != null && __isset.recentIncomings) {
        field.Name = "recentIncomings";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RecentIncomings.Count));
          foreach (FriendRequest _iter135 in RecentIncomings)
          {
            _iter135.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RecentOutgoings != null && __isset.recentOutgoings) {
        field.Name = "recentOutgoings";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RecentOutgoings.Count));
          foreach (FriendRequest _iter136 in RecentOutgoings)
          {
            _iter136.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.totalIncomingLimit) {
        field.Name = "totalIncomingLimit";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalIncomingLimit);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalOutgoingLimit) {
        field.Name = "totalOutgoingLimit";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalOutgoingLimit);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("FriendRequestsInfo(");
    bool __first = true;
    if (__isset.totalIncomingCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TotalIncomingCount: ");
      __sb.Append(TotalIncomingCount);
    }
    if (__isset.totalOutgoingCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TotalOutgoingCount: ");
      __sb.Append(TotalOutgoingCount);
    }
    if (RecentIncomings != null && __isset.recentIncomings) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RecentIncomings: ");
      __sb.Append(RecentIncomings);
    }
    if (RecentOutgoings != null && __isset.recentOutgoings) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RecentOutgoings: ");
      __sb.Append(RecentOutgoings);
    }
    if (__isset.totalIncomingLimit) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TotalIncomingLimit: ");
      __sb.Append(TotalIncomingLimit);
    }
    if (__isset.totalOutgoingLimit) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TotalOutgoingLimit: ");
      __sb.Append(TotalOutgoingLimit);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

