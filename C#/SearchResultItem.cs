/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SearchResultItem : TBase
{
  private string _id;
  private int _ItemType;
  private SearchItemUnion _item;
  private string _title;
  private string _sub1;
  private string _sub2;
  private string _iconUrl;
  private string _titleLink;
  private string _iconLink;
  private string _displayTemplate;
  private List<AdditionalInfoItem> _additionalInfo;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public int ItemType
  {
    get
    {
      return _ItemType;
    }
    set
    {
      __isset.ItemType = true;
      this._ItemType = value;
    }
  }

  public SearchItemUnion Item
  {
    get
    {
      return _item;
    }
    set
    {
      __isset.item = true;
      this._item = value;
    }
  }

  public string Title
  {
    get
    {
      return _title;
    }
    set
    {
      __isset.title = true;
      this._title = value;
    }
  }

  public string Sub1
  {
    get
    {
      return _sub1;
    }
    set
    {
      __isset.sub1 = true;
      this._sub1 = value;
    }
  }

  public string Sub2
  {
    get
    {
      return _sub2;
    }
    set
    {
      __isset.sub2 = true;
      this._sub2 = value;
    }
  }

  public string IconUrl
  {
    get
    {
      return _iconUrl;
    }
    set
    {
      __isset.iconUrl = true;
      this._iconUrl = value;
    }
  }

  public string TitleLink
  {
    get
    {
      return _titleLink;
    }
    set
    {
      __isset.titleLink = true;
      this._titleLink = value;
    }
  }

  public string IconLink
  {
    get
    {
      return _iconLink;
    }
    set
    {
      __isset.iconLink = true;
      this._iconLink = value;
    }
  }

  public string DisplayTemplate
  {
    get
    {
      return _displayTemplate;
    }
    set
    {
      __isset.displayTemplate = true;
      this._displayTemplate = value;
    }
  }

  public List<AdditionalInfoItem> AdditionalInfo
  {
    get
    {
      return _additionalInfo;
    }
    set
    {
      __isset.additionalInfo = true;
      this._additionalInfo = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool ItemType;
    public bool item;
    public bool title;
    public bool sub1;
    public bool sub2;
    public bool iconUrl;
    public bool titleLink;
    public bool iconLink;
    public bool displayTemplate;
    public bool additionalInfo;
  }

  public SearchResultItem() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ItemType = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Item = new SearchItemUnion();
              Item.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Title = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Sub1 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Sub2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              IconUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              TitleLink = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              IconLink = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              DisplayTemplate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                AdditionalInfo = new List<AdditionalInfoItem>();
                TList _list59 = iprot.ReadListBegin();
                for( int _i60 = 0; _i60 < _list59.Count; ++_i60)
                {
                  AdditionalInfoItem _elem61;
                  _elem61 = new AdditionalInfoItem();
                  _elem61.Read(iprot);
                  AdditionalInfo.Add(_elem61);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SearchResultItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.ItemType) {
        field.Name = "ItemType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ItemType);
        oprot.WriteFieldEnd();
      }
      if (Item != null && __isset.item) {
        field.Name = "item";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Item.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Title != null && __isset.title) {
        field.Name = "title";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Title);
        oprot.WriteFieldEnd();
      }
      if (Sub1 != null && __isset.sub1) {
        field.Name = "sub1";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sub1);
        oprot.WriteFieldEnd();
      }
      if (Sub2 != null && __isset.sub2) {
        field.Name = "sub2";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sub2);
        oprot.WriteFieldEnd();
      }
      if (IconUrl != null && __isset.iconUrl) {
        field.Name = "iconUrl";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IconUrl);
        oprot.WriteFieldEnd();
      }
      if (TitleLink != null && __isset.titleLink) {
        field.Name = "titleLink";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TitleLink);
        oprot.WriteFieldEnd();
      }
      if (IconLink != null && __isset.iconLink) {
        field.Name = "iconLink";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(IconLink);
        oprot.WriteFieldEnd();
      }
      if (DisplayTemplate != null && __isset.displayTemplate) {
        field.Name = "displayTemplate";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisplayTemplate);
        oprot.WriteFieldEnd();
      }
      if (AdditionalInfo != null && __isset.additionalInfo) {
        field.Name = "additionalInfo";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AdditionalInfo.Count));
          foreach (AdditionalInfoItem _iter62 in AdditionalInfo)
          {
            _iter62.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SearchResultItem(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.ItemType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ItemType: ");
      __sb.Append(ItemType);
    }
    if (Item != null && __isset.item) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Item: ");
      __sb.Append(Item== null ? "<null>" : Item.ToString());
    }
    if (Title != null && __isset.title) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Title: ");
      __sb.Append(Title);
    }
    if (Sub1 != null && __isset.sub1) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Sub1: ");
      __sb.Append(Sub1);
    }
    if (Sub2 != null && __isset.sub2) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Sub2: ");
      __sb.Append(Sub2);
    }
    if (IconUrl != null && __isset.iconUrl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IconUrl: ");
      __sb.Append(IconUrl);
    }
    if (TitleLink != null && __isset.titleLink) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TitleLink: ");
      __sb.Append(TitleLink);
    }
    if (IconLink != null && __isset.iconLink) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IconLink: ");
      __sb.Append(IconLink);
    }
    if (DisplayTemplate != null && __isset.displayTemplate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DisplayTemplate: ");
      __sb.Append(DisplayTemplate);
    }
    if (AdditionalInfo != null && __isset.additionalInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AdditionalInfo: ");
      __sb.Append(AdditionalInfo);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

