/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ProductProperty : TBase
{
  private StickerProperty _stickerProperty;
  private SticonProperty _sticonProperty;
  private ThemeProperty _themeProperty;

  public StickerProperty StickerProperty
  {
    get
    {
      return _stickerProperty;
    }
    set
    {
      __isset.stickerProperty = true;
      this._stickerProperty = value;
    }
  }

  public SticonProperty SticonProperty
  {
    get
    {
      return _sticonProperty;
    }
    set
    {
      __isset.sticonProperty = true;
      this._sticonProperty = value;
    }
  }

  public ThemeProperty ThemeProperty
  {
    get
    {
      return _themeProperty;
    }
    set
    {
      __isset.themeProperty = true;
      this._themeProperty = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool stickerProperty;
    public bool sticonProperty;
    public bool themeProperty;
  }

  public ProductProperty() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              StickerProperty = new StickerProperty();
              StickerProperty.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              SticonProperty = new SticonProperty();
              SticonProperty.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              ThemeProperty = new ThemeProperty();
              ThemeProperty.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ProductProperty");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (StickerProperty != null && __isset.stickerProperty) {
        field.Name = "stickerProperty";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        StickerProperty.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (ThemeProperty != null && __isset.themeProperty) {
        field.Name = "themeProperty";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        ThemeProperty.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (SticonProperty != null && __isset.sticonProperty) {
        field.Name = "sticonProperty";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        SticonProperty.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ProductProperty(");
    bool __first = true;
    if (StickerProperty != null && __isset.stickerProperty) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StickerProperty: ");
      __sb.Append(StickerProperty== null ? "<null>" : StickerProperty.ToString());
    }
    if (SticonProperty != null && __isset.sticonProperty) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SticonProperty: ");
      __sb.Append(SticonProperty== null ? "<null>" : SticonProperty.ToString());
    }
    if (ThemeProperty != null && __isset.themeProperty) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ThemeProperty: ");
      __sb.Append(ThemeProperty== null ? "<null>" : ThemeProperty.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

