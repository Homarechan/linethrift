/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ApproveSquareMembersResponse : TBase
{
  private List<SquareMember> _approvedMembers;
  private SquareStatus _status;

  public List<SquareMember> ApprovedMembers
  {
    get
    {
      return _approvedMembers;
    }
    set
    {
      __isset.approvedMembers = true;
      this._approvedMembers = value;
    }
  }

  public SquareStatus Status
  {
    get
    {
      return _status;
    }
    set
    {
      __isset.status = true;
      this._status = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool approvedMembers;
    public bool status;
  }

  public ApproveSquareMembersResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                ApprovedMembers = new List<SquareMember>();
                TList _list284 = iprot.ReadListBegin();
                for( int _i285 = 0; _i285 < _list284.Count; ++_i285)
                {
                  SquareMember _elem286;
                  _elem286 = new SquareMember();
                  _elem286.Read(iprot);
                  ApprovedMembers.Add(_elem286);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Status = new SquareStatus();
              Status.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ApproveSquareMembersResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ApprovedMembers != null && __isset.approvedMembers) {
        field.Name = "approvedMembers";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ApprovedMembers.Count));
          foreach (SquareMember _iter287 in ApprovedMembers)
          {
            _iter287.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Status != null && __isset.status) {
        field.Name = "status";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Status.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ApproveSquareMembersResponse(");
    bool __first = true;
    if (ApprovedMembers != null && __isset.approvedMembers) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ApprovedMembers: ");
      __sb.Append(ApprovedMembers);
    }
    if (Status != null && __isset.status) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Status: ");
      __sb.Append(Status== null ? "<null>" : Status.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

