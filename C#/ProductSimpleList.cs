/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ProductSimpleList : TBase
{
  private bool _hasNext;
  private int _reinvokeHour;
  private long _lastVersionSeq;
  private List<ProductSimple> _productList;
  private long _recentNewReleaseDate;
  private long _recentEventReleaseDate;

  public bool HasNext
  {
    get
    {
      return _hasNext;
    }
    set
    {
      __isset.hasNext = true;
      this._hasNext = value;
    }
  }

  public int ReinvokeHour
  {
    get
    {
      return _reinvokeHour;
    }
    set
    {
      __isset.reinvokeHour = true;
      this._reinvokeHour = value;
    }
  }

  public long LastVersionSeq
  {
    get
    {
      return _lastVersionSeq;
    }
    set
    {
      __isset.lastVersionSeq = true;
      this._lastVersionSeq = value;
    }
  }

  public List<ProductSimple> ProductList
  {
    get
    {
      return _productList;
    }
    set
    {
      __isset.productList = true;
      this._productList = value;
    }
  }

  public long RecentNewReleaseDate
  {
    get
    {
      return _recentNewReleaseDate;
    }
    set
    {
      __isset.recentNewReleaseDate = true;
      this._recentNewReleaseDate = value;
    }
  }

  public long RecentEventReleaseDate
  {
    get
    {
      return _recentEventReleaseDate;
    }
    set
    {
      __isset.recentEventReleaseDate = true;
      this._recentEventReleaseDate = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool hasNext;
    public bool reinvokeHour;
    public bool lastVersionSeq;
    public bool productList;
    public bool recentNewReleaseDate;
    public bool recentEventReleaseDate;
  }

  public ProductSimpleList() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              HasNext = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ReinvokeHour = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              LastVersionSeq = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                ProductList = new List<ProductSimple>();
                TList _list205 = iprot.ReadListBegin();
                for( int _i206 = 0; _i206 < _list205.Count; ++_i206)
                {
                  ProductSimple _elem207;
                  _elem207 = new ProductSimple();
                  _elem207.Read(iprot);
                  ProductList.Add(_elem207);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              RecentNewReleaseDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              RecentEventReleaseDate = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ProductSimpleList");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.hasNext) {
        field.Name = "hasNext";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasNext);
        oprot.WriteFieldEnd();
      }
      if (__isset.reinvokeHour) {
        field.Name = "reinvokeHour";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ReinvokeHour);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastVersionSeq) {
        field.Name = "lastVersionSeq";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastVersionSeq);
        oprot.WriteFieldEnd();
      }
      if (ProductList != null && __isset.productList) {
        field.Name = "productList";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ProductList.Count));
          foreach (ProductSimple _iter208 in ProductList)
          {
            _iter208.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.recentNewReleaseDate) {
        field.Name = "recentNewReleaseDate";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RecentNewReleaseDate);
        oprot.WriteFieldEnd();
      }
      if (__isset.recentEventReleaseDate) {
        field.Name = "recentEventReleaseDate";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RecentEventReleaseDate);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ProductSimpleList(");
    bool __first = true;
    if (__isset.hasNext) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HasNext: ");
      __sb.Append(HasNext);
    }
    if (__isset.reinvokeHour) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ReinvokeHour: ");
      __sb.Append(ReinvokeHour);
    }
    if (__isset.lastVersionSeq) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LastVersionSeq: ");
      __sb.Append(LastVersionSeq);
    }
    if (ProductList != null && __isset.productList) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ProductList: ");
      __sb.Append(ProductList);
    }
    if (__isset.recentNewReleaseDate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RecentNewReleaseDate: ");
      __sb.Append(RecentNewReleaseDate);
    }
    if (__isset.recentEventReleaseDate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RecentEventReleaseDate: ");
      __sb.Append(RecentEventReleaseDate);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

