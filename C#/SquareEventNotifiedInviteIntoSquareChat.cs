/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SquareEventNotifiedInviteIntoSquareChat : TBase
{
  private string _squareChatMid;
  private List<SquareMember> _invitees;
  private SquareMember _invitor;
  private SquareMemberRelation _invitorRelation;

  public string SquareChatMid
  {
    get
    {
      return _squareChatMid;
    }
    set
    {
      __isset.squareChatMid = true;
      this._squareChatMid = value;
    }
  }

  public List<SquareMember> Invitees
  {
    get
    {
      return _invitees;
    }
    set
    {
      __isset.invitees = true;
      this._invitees = value;
    }
  }

  public SquareMember Invitor
  {
    get
    {
      return _invitor;
    }
    set
    {
      __isset.invitor = true;
      this._invitor = value;
    }
  }

  public SquareMemberRelation InvitorRelation
  {
    get
    {
      return _invitorRelation;
    }
    set
    {
      __isset.invitorRelation = true;
      this._invitorRelation = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool squareChatMid;
    public bool invitees;
    public bool invitor;
    public bool invitorRelation;
  }

  public SquareEventNotifiedInviteIntoSquareChat() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SquareChatMid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Invitees = new List<SquareMember>();
                TList _list425 = iprot.ReadListBegin();
                for( int _i426 = 0; _i426 < _list425.Count; ++_i426)
                {
                  SquareMember _elem427;
                  _elem427 = new SquareMember();
                  _elem427.Read(iprot);
                  Invitees.Add(_elem427);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Struct) {
              Invitor = new SquareMember();
              Invitor.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Struct) {
              InvitorRelation = new SquareMemberRelation();
              InvitorRelation.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SquareEventNotifiedInviteIntoSquareChat");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SquareChatMid != null && __isset.squareChatMid) {
        field.Name = "squareChatMid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SquareChatMid);
        oprot.WriteFieldEnd();
      }
      if (Invitees != null && __isset.invitees) {
        field.Name = "invitees";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Invitees.Count));
          foreach (SquareMember _iter428 in Invitees)
          {
            _iter428.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Invitor != null && __isset.invitor) {
        field.Name = "invitor";
        field.Type = TType.Struct;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        Invitor.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (InvitorRelation != null && __isset.invitorRelation) {
        field.Name = "invitorRelation";
        field.Type = TType.Struct;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        InvitorRelation.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SquareEventNotifiedInviteIntoSquareChat(");
    bool __first = true;
    if (SquareChatMid != null && __isset.squareChatMid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SquareChatMid: ");
      __sb.Append(SquareChatMid);
    }
    if (Invitees != null && __isset.invitees) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Invitees: ");
      __sb.Append(Invitees);
    }
    if (Invitor != null && __isset.invitor) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Invitor: ");
      __sb.Append(Invitor== null ? "<null>" : Invitor.ToString());
    }
    if (InvitorRelation != null && __isset.invitorRelation) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InvitorRelation: ");
      __sb.Append(InvitorRelation== null ? "<null>" : InvitorRelation.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

