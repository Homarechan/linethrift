/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class IdentityCredentialResponse : TBase
{
  private Dictionary<string, string> _metaData;
  private IdentityResponseType _responseType;
  private string _confirmationVerifier;
  private long _timeoutInSeconds;

  public Dictionary<string, string> MetaData
  {
    get
    {
      return _metaData;
    }
    set
    {
      __isset.metaData = true;
      this._metaData = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="IdentityResponseType"/>
  /// </summary>
  public IdentityResponseType ResponseType
  {
    get
    {
      return _responseType;
    }
    set
    {
      __isset.responseType = true;
      this._responseType = value;
    }
  }

  public string ConfirmationVerifier
  {
    get
    {
      return _confirmationVerifier;
    }
    set
    {
      __isset.confirmationVerifier = true;
      this._confirmationVerifier = value;
    }
  }

  public long TimeoutInSeconds
  {
    get
    {
      return _timeoutInSeconds;
    }
    set
    {
      __isset.timeoutInSeconds = true;
      this._timeoutInSeconds = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool metaData;
    public bool responseType;
    public bool confirmationVerifier;
    public bool timeoutInSeconds;
  }

  public IdentityCredentialResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                MetaData = new Dictionary<string, string>();
                TMap _map18 = iprot.ReadMapBegin();
                for( int _i19 = 0; _i19 < _map18.Count; ++_i19)
                {
                  string _key20;
                  string _val21;
                  _key20 = iprot.ReadString();
                  _val21 = iprot.ReadString();
                  MetaData[_key20] = _val21;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              ResponseType = (IdentityResponseType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ConfirmationVerifier = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              TimeoutInSeconds = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("IdentityCredentialResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MetaData != null && __isset.metaData) {
        field.Name = "metaData";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, MetaData.Count));
          foreach (string _iter22 in MetaData.Keys)
          {
            oprot.WriteString(_iter22);
            oprot.WriteString(MetaData[_iter22]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.responseType) {
        field.Name = "responseType";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ResponseType);
        oprot.WriteFieldEnd();
      }
      if (ConfirmationVerifier != null && __isset.confirmationVerifier) {
        field.Name = "confirmationVerifier";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ConfirmationVerifier);
        oprot.WriteFieldEnd();
      }
      if (__isset.timeoutInSeconds) {
        field.Name = "timeoutInSeconds";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TimeoutInSeconds);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("IdentityCredentialResponse(");
    bool __first = true;
    if (MetaData != null && __isset.metaData) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MetaData: ");
      __sb.Append(MetaData);
    }
    if (__isset.responseType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ResponseType: ");
      __sb.Append(ResponseType);
    }
    if (ConfirmationVerifier != null && __isset.confirmationVerifier) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ConfirmationVerifier: ");
      __sb.Append(ConfirmationVerifier);
    }
    if (__isset.timeoutInSeconds) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TimeoutInSeconds: ");
      __sb.Append(TimeoutInSeconds);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

