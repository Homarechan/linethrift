/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class IdentityCredentialRequest : TBase
{
  private Dictionary<string, string> _metaData;
  private IdentityProvider _identityProvider;
  private string _cipherKeyId;
  private string _cipherText;
  private IdentifierConfirmationRequest _confirmationRequest;

  public Dictionary<string, string> MetaData
  {
    get
    {
      return _metaData;
    }
    set
    {
      __isset.metaData = true;
      this._metaData = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="IdentityProvider"/>
  /// </summary>
  public IdentityProvider IdentityProvider
  {
    get
    {
      return _identityProvider;
    }
    set
    {
      __isset.identityProvider = true;
      this._identityProvider = value;
    }
  }

  public string CipherKeyId
  {
    get
    {
      return _cipherKeyId;
    }
    set
    {
      __isset.cipherKeyId = true;
      this._cipherKeyId = value;
    }
  }

  public string CipherText
  {
    get
    {
      return _cipherText;
    }
    set
    {
      __isset.cipherText = true;
      this._cipherText = value;
    }
  }

  public IdentifierConfirmationRequest ConfirmationRequest
  {
    get
    {
      return _confirmationRequest;
    }
    set
    {
      __isset.confirmationRequest = true;
      this._confirmationRequest = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool metaData;
    public bool identityProvider;
    public bool cipherKeyId;
    public bool cipherText;
    public bool confirmationRequest;
  }

  public IdentityCredentialRequest() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                MetaData = new Dictionary<string, string>();
                TMap _map28 = iprot.ReadMapBegin();
                for( int _i29 = 0; _i29 < _map28.Count; ++_i29)
                {
                  string _key30;
                  string _val31;
                  _key30 = iprot.ReadString();
                  _val31 = iprot.ReadString();
                  MetaData[_key30] = _val31;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              IdentityProvider = (IdentityProvider)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              CipherKeyId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              CipherText = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              ConfirmationRequest = new IdentifierConfirmationRequest();
              ConfirmationRequest.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("IdentityCredentialRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MetaData != null && __isset.metaData) {
        field.Name = "metaData";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, MetaData.Count));
          foreach (string _iter32 in MetaData.Keys)
          {
            oprot.WriteString(_iter32);
            oprot.WriteString(MetaData[_iter32]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.identityProvider) {
        field.Name = "identityProvider";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)IdentityProvider);
        oprot.WriteFieldEnd();
      }
      if (CipherKeyId != null && __isset.cipherKeyId) {
        field.Name = "cipherKeyId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CipherKeyId);
        oprot.WriteFieldEnd();
      }
      if (CipherText != null && __isset.cipherText) {
        field.Name = "cipherText";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(CipherText);
        oprot.WriteFieldEnd();
      }
      if (ConfirmationRequest != null && __isset.confirmationRequest) {
        field.Name = "confirmationRequest";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        ConfirmationRequest.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("IdentityCredentialRequest(");
    bool __first = true;
    if (MetaData != null && __isset.metaData) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MetaData: ");
      __sb.Append(MetaData);
    }
    if (__isset.identityProvider) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IdentityProvider: ");
      __sb.Append(IdentityProvider);
    }
    if (CipherKeyId != null && __isset.cipherKeyId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CipherKeyId: ");
      __sb.Append(CipherKeyId);
    }
    if (CipherText != null && __isset.cipherText) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CipherText: ");
      __sb.Append(CipherText);
    }
    if (ConfirmationRequest != null && __isset.confirmationRequest) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ConfirmationRequest: ");
      __sb.Append(ConfirmationRequest== null ? "<null>" : ConfirmationRequest.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

