/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class MessageCommitResult : TBase
{
  private string _requestId;
  private BuddyResultState _state;
  private string _messageStoreRequestId;
  private List<string> _messageIds;
  private long _receiverCount;
  private long _successCount;
  private long _failCount;
  private long _blockCount;
  private long _unregisteredCount;
  private long _unrelatedCount;
  private string _errorDescription;

  public string RequestId
  {
    get
    {
      return _requestId;
    }
    set
    {
      __isset.requestId = true;
      this._requestId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="BuddyResultState"/>
  /// </summary>
  public BuddyResultState State
  {
    get
    {
      return _state;
    }
    set
    {
      __isset.state = true;
      this._state = value;
    }
  }

  public string MessageStoreRequestId
  {
    get
    {
      return _messageStoreRequestId;
    }
    set
    {
      __isset.messageStoreRequestId = true;
      this._messageStoreRequestId = value;
    }
  }

  public List<string> MessageIds
  {
    get
    {
      return _messageIds;
    }
    set
    {
      __isset.messageIds = true;
      this._messageIds = value;
    }
  }

  public long ReceiverCount
  {
    get
    {
      return _receiverCount;
    }
    set
    {
      __isset.receiverCount = true;
      this._receiverCount = value;
    }
  }

  public long SuccessCount
  {
    get
    {
      return _successCount;
    }
    set
    {
      __isset.successCount = true;
      this._successCount = value;
    }
  }

  public long FailCount
  {
    get
    {
      return _failCount;
    }
    set
    {
      __isset.failCount = true;
      this._failCount = value;
    }
  }

  public long BlockCount
  {
    get
    {
      return _blockCount;
    }
    set
    {
      __isset.blockCount = true;
      this._blockCount = value;
    }
  }

  public long UnregisteredCount
  {
    get
    {
      return _unregisteredCount;
    }
    set
    {
      __isset.unregisteredCount = true;
      this._unregisteredCount = value;
    }
  }

  public long UnrelatedCount
  {
    get
    {
      return _unrelatedCount;
    }
    set
    {
      __isset.unrelatedCount = true;
      this._unrelatedCount = value;
    }
  }

  public string ErrorDescription
  {
    get
    {
      return _errorDescription;
    }
    set
    {
      __isset.errorDescription = true;
      this._errorDescription = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool requestId;
    public bool state;
    public bool messageStoreRequestId;
    public bool messageIds;
    public bool receiverCount;
    public bool successCount;
    public bool failCount;
    public bool blockCount;
    public bool unregisteredCount;
    public bool unrelatedCount;
    public bool errorDescription;
  }

  public MessageCommitResult() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              RequestId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              State = (BuddyResultState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              MessageStoreRequestId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                MessageIds = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2;
                  _elem2 = iprot.ReadString();
                  MessageIds.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I64) {
              ReceiverCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              SuccessCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              FailCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.I64) {
              BlockCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I64) {
              UnregisteredCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.I64) {
              UnrelatedCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              ErrorDescription = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("MessageCommitResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (RequestId != null && __isset.requestId) {
        field.Name = "requestId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RequestId);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (MessageStoreRequestId != null && __isset.messageStoreRequestId) {
        field.Name = "messageStoreRequestId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MessageStoreRequestId);
        oprot.WriteFieldEnd();
      }
      if (MessageIds != null && __isset.messageIds) {
        field.Name = "messageIds";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, MessageIds.Count));
          foreach (string _iter3 in MessageIds)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.receiverCount) {
        field.Name = "receiverCount";
        field.Type = TType.I64;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ReceiverCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.successCount) {
        field.Name = "successCount";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SuccessCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.failCount) {
        field.Name = "failCount";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FailCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.blockCount) {
        field.Name = "blockCount";
        field.Type = TType.I64;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BlockCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.unregisteredCount) {
        field.Name = "unregisteredCount";
        field.Type = TType.I64;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UnregisteredCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.unrelatedCount) {
        field.Name = "unrelatedCount";
        field.Type = TType.I64;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(UnrelatedCount);
        oprot.WriteFieldEnd();
      }
      if (ErrorDescription != null && __isset.errorDescription) {
        field.Name = "errorDescription";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ErrorDescription);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("MessageCommitResult(");
    bool __first = true;
    if (RequestId != null && __isset.requestId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RequestId: ");
      __sb.Append(RequestId);
    }
    if (__isset.state) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("State: ");
      __sb.Append(State);
    }
    if (MessageStoreRequestId != null && __isset.messageStoreRequestId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MessageStoreRequestId: ");
      __sb.Append(MessageStoreRequestId);
    }
    if (MessageIds != null && __isset.messageIds) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MessageIds: ");
      __sb.Append(MessageIds);
    }
    if (__isset.receiverCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ReceiverCount: ");
      __sb.Append(ReceiverCount);
    }
    if (__isset.successCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SuccessCount: ");
      __sb.Append(SuccessCount);
    }
    if (__isset.failCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FailCount: ");
      __sb.Append(FailCount);
    }
    if (__isset.blockCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BlockCount: ");
      __sb.Append(BlockCount);
    }
    if (__isset.unregisteredCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UnregisteredCount: ");
      __sb.Append(UnregisteredCount);
    }
    if (__isset.unrelatedCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UnrelatedCount: ");
      __sb.Append(UnrelatedCount);
    }
    if (ErrorDescription != null && __isset.errorDescription) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ErrorDescription: ");
      __sb.Append(ErrorDescription);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

