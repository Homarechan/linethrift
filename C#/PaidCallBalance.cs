/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class PaidCallBalance : TBase
{
  private PaidCallProductType _productType;
  private string _productName;
  private string _unit;
  private int _limitedPaidBalance;
  private int _limitedFreeBalance;
  private int _unlimitedPaidBalance;
  private int _unlimitedFreeBalance;
  private long _startTime;
  private long _endTime;
  private bool _autopayEnabled;

  /// <summary>
  /// 
  /// <seealso cref="PaidCallProductType"/>
  /// </summary>
  public PaidCallProductType ProductType
  {
    get
    {
      return _productType;
    }
    set
    {
      __isset.productType = true;
      this._productType = value;
    }
  }

  public string ProductName
  {
    get
    {
      return _productName;
    }
    set
    {
      __isset.productName = true;
      this._productName = value;
    }
  }

  public string Unit
  {
    get
    {
      return _unit;
    }
    set
    {
      __isset.unit = true;
      this._unit = value;
    }
  }

  public int LimitedPaidBalance
  {
    get
    {
      return _limitedPaidBalance;
    }
    set
    {
      __isset.limitedPaidBalance = true;
      this._limitedPaidBalance = value;
    }
  }

  public int LimitedFreeBalance
  {
    get
    {
      return _limitedFreeBalance;
    }
    set
    {
      __isset.limitedFreeBalance = true;
      this._limitedFreeBalance = value;
    }
  }

  public int UnlimitedPaidBalance
  {
    get
    {
      return _unlimitedPaidBalance;
    }
    set
    {
      __isset.unlimitedPaidBalance = true;
      this._unlimitedPaidBalance = value;
    }
  }

  public int UnlimitedFreeBalance
  {
    get
    {
      return _unlimitedFreeBalance;
    }
    set
    {
      __isset.unlimitedFreeBalance = true;
      this._unlimitedFreeBalance = value;
    }
  }

  public long StartTime
  {
    get
    {
      return _startTime;
    }
    set
    {
      __isset.startTime = true;
      this._startTime = value;
    }
  }

  public long EndTime
  {
    get
    {
      return _endTime;
    }
    set
    {
      __isset.endTime = true;
      this._endTime = value;
    }
  }

  public bool AutopayEnabled
  {
    get
    {
      return _autopayEnabled;
    }
    set
    {
      __isset.autopayEnabled = true;
      this._autopayEnabled = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool productType;
    public bool productName;
    public bool unit;
    public bool limitedPaidBalance;
    public bool limitedFreeBalance;
    public bool unlimitedPaidBalance;
    public bool unlimitedFreeBalance;
    public bool startTime;
    public bool endTime;
    public bool autopayEnabled;
  }

  public PaidCallBalance() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              ProductType = (PaidCallProductType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ProductName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Unit = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              LimitedPaidBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              LimitedFreeBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              UnlimitedPaidBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              UnlimitedFreeBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Bool) {
              AutopayEnabled = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("PaidCallBalance");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.productType) {
        field.Name = "productType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ProductType);
        oprot.WriteFieldEnd();
      }
      if (ProductName != null && __isset.productName) {
        field.Name = "productName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProductName);
        oprot.WriteFieldEnd();
      }
      if (Unit != null && __isset.unit) {
        field.Name = "unit";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Unit);
        oprot.WriteFieldEnd();
      }
      if (__isset.limitedPaidBalance) {
        field.Name = "limitedPaidBalance";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LimitedPaidBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.limitedFreeBalance) {
        field.Name = "limitedFreeBalance";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LimitedFreeBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.unlimitedPaidBalance) {
        field.Name = "unlimitedPaidBalance";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UnlimitedPaidBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.unlimitedFreeBalance) {
        field.Name = "unlimitedFreeBalance";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UnlimitedFreeBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.autopayEnabled) {
        field.Name = "autopayEnabled";
        field.Type = TType.Bool;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AutopayEnabled);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("PaidCallBalance(");
    bool __first = true;
    if (__isset.productType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ProductType: ");
      __sb.Append(ProductType);
    }
    if (ProductName != null && __isset.productName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ProductName: ");
      __sb.Append(ProductName);
    }
    if (Unit != null && __isset.unit) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Unit: ");
      __sb.Append(Unit);
    }
    if (__isset.limitedPaidBalance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LimitedPaidBalance: ");
      __sb.Append(LimitedPaidBalance);
    }
    if (__isset.limitedFreeBalance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LimitedFreeBalance: ");
      __sb.Append(LimitedFreeBalance);
    }
    if (__isset.unlimitedPaidBalance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UnlimitedPaidBalance: ");
      __sb.Append(UnlimitedPaidBalance);
    }
    if (__isset.unlimitedFreeBalance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UnlimitedFreeBalance: ");
      __sb.Append(UnlimitedFreeBalance);
    }
    if (__isset.startTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartTime: ");
      __sb.Append(StartTime);
    }
    if (__isset.endTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EndTime: ");
      __sb.Append(EndTime);
    }
    if (__isset.autopayEnabled) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AutopayEnabled: ");
      __sb.Append(AutopayEnabled);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

