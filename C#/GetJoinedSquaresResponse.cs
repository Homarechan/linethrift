/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class GetJoinedSquaresResponse : TBase
{
  private List<Square> _squares;
  private Dictionary<string, SquareMember> _members;
  private Dictionary<string, SquareAuthority> _authorities;
  private Dictionary<string, SquareStatus> _statuses;
  private string _continuationToken;
  private Dictionary<string, NoteStatus> _noteStatuses;

  public List<Square> Squares
  {
    get
    {
      return _squares;
    }
    set
    {
      __isset.squares = true;
      this._squares = value;
    }
  }

  public Dictionary<string, SquareMember> Members
  {
    get
    {
      return _members;
    }
    set
    {
      __isset.members = true;
      this._members = value;
    }
  }

  public Dictionary<string, SquareAuthority> Authorities
  {
    get
    {
      return _authorities;
    }
    set
    {
      __isset.authorities = true;
      this._authorities = value;
    }
  }

  public Dictionary<string, SquareStatus> Statuses
  {
    get
    {
      return _statuses;
    }
    set
    {
      __isset.statuses = true;
      this._statuses = value;
    }
  }

  public string ContinuationToken
  {
    get
    {
      return _continuationToken;
    }
    set
    {
      __isset.continuationToken = true;
      this._continuationToken = value;
    }
  }

  public Dictionary<string, NoteStatus> NoteStatuses
  {
    get
    {
      return _noteStatuses;
    }
    set
    {
      __isset.noteStatuses = true;
      this._noteStatuses = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool squares;
    public bool members;
    public bool authorities;
    public bool statuses;
    public bool continuationToken;
    public bool noteStatuses;
  }

  public GetJoinedSquaresResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Squares = new List<Square>();
                TList _list384 = iprot.ReadListBegin();
                for( int _i385 = 0; _i385 < _list384.Count; ++_i385)
                {
                  Square _elem386;
                  _elem386 = new Square();
                  _elem386.Read(iprot);
                  Squares.Add(_elem386);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Members = new Dictionary<string, SquareMember>();
                TMap _map387 = iprot.ReadMapBegin();
                for( int _i388 = 0; _i388 < _map387.Count; ++_i388)
                {
                  string _key389;
                  SquareMember _val390;
                  _key389 = iprot.ReadString();
                  _val390 = new SquareMember();
                  _val390.Read(iprot);
                  Members[_key389] = _val390;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Authorities = new Dictionary<string, SquareAuthority>();
                TMap _map391 = iprot.ReadMapBegin();
                for( int _i392 = 0; _i392 < _map391.Count; ++_i392)
                {
                  string _key393;
                  SquareAuthority _val394;
                  _key393 = iprot.ReadString();
                  _val394 = new SquareAuthority();
                  _val394.Read(iprot);
                  Authorities[_key393] = _val394;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Statuses = new Dictionary<string, SquareStatus>();
                TMap _map395 = iprot.ReadMapBegin();
                for( int _i396 = 0; _i396 < _map395.Count; ++_i396)
                {
                  string _key397;
                  SquareStatus _val398;
                  _key397 = iprot.ReadString();
                  _val398 = new SquareStatus();
                  _val398.Read(iprot);
                  Statuses[_key397] = _val398;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              ContinuationToken = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                NoteStatuses = new Dictionary<string, NoteStatus>();
                TMap _map399 = iprot.ReadMapBegin();
                for( int _i400 = 0; _i400 < _map399.Count; ++_i400)
                {
                  string _key401;
                  NoteStatus _val402;
                  _key401 = iprot.ReadString();
                  _val402 = new NoteStatus();
                  _val402.Read(iprot);
                  NoteStatuses[_key401] = _val402;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("GetJoinedSquaresResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Squares != null && __isset.squares) {
        field.Name = "squares";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Squares.Count));
          foreach (Square _iter403 in Squares)
          {
            _iter403.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Members != null && __isset.members) {
        field.Name = "members";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Members.Count));
          foreach (string _iter404 in Members.Keys)
          {
            oprot.WriteString(_iter404);
            Members[_iter404].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Authorities != null && __isset.authorities) {
        field.Name = "authorities";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Authorities.Count));
          foreach (string _iter405 in Authorities.Keys)
          {
            oprot.WriteString(_iter405);
            Authorities[_iter405].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Statuses != null && __isset.statuses) {
        field.Name = "statuses";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Statuses.Count));
          foreach (string _iter406 in Statuses.Keys)
          {
            oprot.WriteString(_iter406);
            Statuses[_iter406].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ContinuationToken != null && __isset.continuationToken) {
        field.Name = "continuationToken";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContinuationToken);
        oprot.WriteFieldEnd();
      }
      if (NoteStatuses != null && __isset.noteStatuses) {
        field.Name = "noteStatuses";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, NoteStatuses.Count));
          foreach (string _iter407 in NoteStatuses.Keys)
          {
            oprot.WriteString(_iter407);
            NoteStatuses[_iter407].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("GetJoinedSquaresResponse(");
    bool __first = true;
    if (Squares != null && __isset.squares) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Squares: ");
      __sb.Append(Squares);
    }
    if (Members != null && __isset.members) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Members: ");
      __sb.Append(Members);
    }
    if (Authorities != null && __isset.authorities) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Authorities: ");
      __sb.Append(Authorities);
    }
    if (Statuses != null && __isset.statuses) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Statuses: ");
      __sb.Append(Statuses);
    }
    if (ContinuationToken != null && __isset.continuationToken) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContinuationToken: ");
      __sb.Append(ContinuationToken);
    }
    if (NoteStatuses != null && __isset.noteStatuses) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NoteStatuses: ");
      __sb.Append(NoteStatuses);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

