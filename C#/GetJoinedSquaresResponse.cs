/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class GetJoinedSquaresResponse : TBase
{
  private List<Square> _squares;
  private Dictionary<string, SquareMember> _members;
  private Dictionary<string, SquareAuthority> _authorities;
  private Dictionary<string, SquareStatus> _statuses;
  private string _continuationToken;
  private Dictionary<string, NoteStatus> _noteStatuses;

  public List<Square> Squares
  {
    get
    {
      return _squares;
    }
    set
    {
      __isset.squares = true;
      this._squares = value;
    }
  }

  public Dictionary<string, SquareMember> Members
  {
    get
    {
      return _members;
    }
    set
    {
      __isset.members = true;
      this._members = value;
    }
  }

  public Dictionary<string, SquareAuthority> Authorities
  {
    get
    {
      return _authorities;
    }
    set
    {
      __isset.authorities = true;
      this._authorities = value;
    }
  }

  public Dictionary<string, SquareStatus> Statuses
  {
    get
    {
      return _statuses;
    }
    set
    {
      __isset.statuses = true;
      this._statuses = value;
    }
  }

  public string ContinuationToken
  {
    get
    {
      return _continuationToken;
    }
    set
    {
      __isset.continuationToken = true;
      this._continuationToken = value;
    }
  }

  public Dictionary<string, NoteStatus> NoteStatuses
  {
    get
    {
      return _noteStatuses;
    }
    set
    {
      __isset.noteStatuses = true;
      this._noteStatuses = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool squares;
    public bool members;
    public bool authorities;
    public bool statuses;
    public bool continuationToken;
    public bool noteStatuses;
  }

  public GetJoinedSquaresResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Squares = new List<Square>();
                TList _list296 = iprot.ReadListBegin();
                for( int _i297 = 0; _i297 < _list296.Count; ++_i297)
                {
                  Square _elem298;
                  _elem298 = new Square();
                  _elem298.Read(iprot);
                  Squares.Add(_elem298);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Members = new Dictionary<string, SquareMember>();
                TMap _map299 = iprot.ReadMapBegin();
                for( int _i300 = 0; _i300 < _map299.Count; ++_i300)
                {
                  string _key301;
                  SquareMember _val302;
                  _key301 = iprot.ReadString();
                  _val302 = new SquareMember();
                  _val302.Read(iprot);
                  Members[_key301] = _val302;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Authorities = new Dictionary<string, SquareAuthority>();
                TMap _map303 = iprot.ReadMapBegin();
                for( int _i304 = 0; _i304 < _map303.Count; ++_i304)
                {
                  string _key305;
                  SquareAuthority _val306;
                  _key305 = iprot.ReadString();
                  _val306 = new SquareAuthority();
                  _val306.Read(iprot);
                  Authorities[_key305] = _val306;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Map) {
              {
                Statuses = new Dictionary<string, SquareStatus>();
                TMap _map307 = iprot.ReadMapBegin();
                for( int _i308 = 0; _i308 < _map307.Count; ++_i308)
                {
                  string _key309;
                  SquareStatus _val310;
                  _key309 = iprot.ReadString();
                  _val310 = new SquareStatus();
                  _val310.Read(iprot);
                  Statuses[_key309] = _val310;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              ContinuationToken = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Map) {
              {
                NoteStatuses = new Dictionary<string, NoteStatus>();
                TMap _map311 = iprot.ReadMapBegin();
                for( int _i312 = 0; _i312 < _map311.Count; ++_i312)
                {
                  string _key313;
                  NoteStatus _val314;
                  _key313 = iprot.ReadString();
                  _val314 = new NoteStatus();
                  _val314.Read(iprot);
                  NoteStatuses[_key313] = _val314;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("GetJoinedSquaresResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Squares != null && __isset.squares) {
        field.Name = "squares";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Squares.Count));
          foreach (Square _iter315 in Squares)
          {
            _iter315.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Members != null && __isset.members) {
        field.Name = "members";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Members.Count));
          foreach (string _iter316 in Members.Keys)
          {
            oprot.WriteString(_iter316);
            Members[_iter316].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Authorities != null && __isset.authorities) {
        field.Name = "authorities";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Authorities.Count));
          foreach (string _iter317 in Authorities.Keys)
          {
            oprot.WriteString(_iter317);
            Authorities[_iter317].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Statuses != null && __isset.statuses) {
        field.Name = "statuses";
        field.Type = TType.Map;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Statuses.Count));
          foreach (string _iter318 in Statuses.Keys)
          {
            oprot.WriteString(_iter318);
            Statuses[_iter318].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ContinuationToken != null && __isset.continuationToken) {
        field.Name = "continuationToken";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContinuationToken);
        oprot.WriteFieldEnd();
      }
      if (NoteStatuses != null && __isset.noteStatuses) {
        field.Name = "noteStatuses";
        field.Type = TType.Map;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, NoteStatuses.Count));
          foreach (string _iter319 in NoteStatuses.Keys)
          {
            oprot.WriteString(_iter319);
            NoteStatuses[_iter319].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("GetJoinedSquaresResponse(");
    bool __first = true;
    if (Squares != null && __isset.squares) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Squares: ");
      __sb.Append(Squares);
    }
    if (Members != null && __isset.members) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Members: ");
      __sb.Append(Members);
    }
    if (Authorities != null && __isset.authorities) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Authorities: ");
      __sb.Append(Authorities);
    }
    if (Statuses != null && __isset.statuses) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Statuses: ");
      __sb.Append(Statuses);
    }
    if (ContinuationToken != null && __isset.continuationToken) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContinuationToken: ");
      __sb.Append(ContinuationToken);
    }
    if (NoteStatuses != null && __isset.noteStatuses) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NoteStatuses: ");
      __sb.Append(NoteStatuses);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

