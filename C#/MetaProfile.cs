/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class MetaProfile : TBase
{
  private long _createTime;
  private string _regionCode;
  private Dictionary<RegistrationType, string> _identities;

  public long CreateTime
  {
    get
    {
      return _createTime;
    }
    set
    {
      __isset.createTime = true;
      this._createTime = value;
    }
  }

  public string RegionCode
  {
    get
    {
      return _regionCode;
    }
    set
    {
      __isset.regionCode = true;
      this._regionCode = value;
    }
  }

  public Dictionary<RegistrationType, string> Identities
  {
    get
    {
      return _identities;
    }
    set
    {
      __isset.identities = true;
      this._identities = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool createTime;
    public bool regionCode;
    public bool identities;
  }

  public MetaProfile() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              CreateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              RegionCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Identities = new Dictionary<RegistrationType, string>();
                TMap _map174 = iprot.ReadMapBegin();
                for( int _i175 = 0; _i175 < _map174.Count; ++_i175)
                {
                  RegistrationType _key176;
                  string _val177;
                  _key176 = (RegistrationType)iprot.ReadI32();
                  _val177 = iprot.ReadString();
                  Identities[_key176] = _val177;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("MetaProfile");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.createTime) {
        field.Name = "createTime";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTime);
        oprot.WriteFieldEnd();
      }
      if (RegionCode != null && __isset.regionCode) {
        field.Name = "regionCode";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RegionCode);
        oprot.WriteFieldEnd();
      }
      if (Identities != null && __isset.identities) {
        field.Name = "identities";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.String, Identities.Count));
          foreach (RegistrationType _iter178 in Identities.Keys)
          {
            oprot.WriteI32((int)_iter178);
            oprot.WriteString(Identities[_iter178]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("MetaProfile(");
    bool __first = true;
    if (__isset.createTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreateTime: ");
      __sb.Append(CreateTime);
    }
    if (RegionCode != null && __isset.regionCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RegionCode: ");
      __sb.Append(RegionCode);
    }
    if (Identities != null && __isset.identities) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Identities: ");
      __sb.Append(Identities);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

