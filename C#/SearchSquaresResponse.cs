/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SearchSquaresResponse : TBase
{
  private List<Square> _squares;
  private Dictionary<string, SquareStatus> _squareStatuses;
  private Dictionary<string, SquareMember> _myMemberships;
  private string _continuationToken;
  private Dictionary<string, NoteStatus> _noteStatuses;

  public List<Square> Squares
  {
    get
    {
      return _squares;
    }
    set
    {
      __isset.squares = true;
      this._squares = value;
    }
  }

  public Dictionary<string, SquareStatus> SquareStatuses
  {
    get
    {
      return _squareStatuses;
    }
    set
    {
      __isset.squareStatuses = true;
      this._squareStatuses = value;
    }
  }

  public Dictionary<string, SquareMember> MyMemberships
  {
    get
    {
      return _myMemberships;
    }
    set
    {
      __isset.myMemberships = true;
      this._myMemberships = value;
    }
  }

  public string ContinuationToken
  {
    get
    {
      return _continuationToken;
    }
    set
    {
      __isset.continuationToken = true;
      this._continuationToken = value;
    }
  }

  public Dictionary<string, NoteStatus> NoteStatuses
  {
    get
    {
      return _noteStatuses;
    }
    set
    {
      __isset.noteStatuses = true;
      this._noteStatuses = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool squares;
    public bool squareStatuses;
    public bool myMemberships;
    public bool continuationToken;
    public bool noteStatuses;
  }

  public SearchSquaresResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Squares = new List<Square>();
                TList _list390 = iprot.ReadListBegin();
                for( int _i391 = 0; _i391 < _list390.Count; ++_i391)
                {
                  Square _elem392;
                  _elem392 = new Square();
                  _elem392.Read(iprot);
                  Squares.Add(_elem392);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                SquareStatuses = new Dictionary<string, SquareStatus>();
                TMap _map393 = iprot.ReadMapBegin();
                for( int _i394 = 0; _i394 < _map393.Count; ++_i394)
                {
                  string _key395;
                  SquareStatus _val396;
                  _key395 = iprot.ReadString();
                  _val396 = new SquareStatus();
                  _val396.Read(iprot);
                  SquareStatuses[_key395] = _val396;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                MyMemberships = new Dictionary<string, SquareMember>();
                TMap _map397 = iprot.ReadMapBegin();
                for( int _i398 = 0; _i398 < _map397.Count; ++_i398)
                {
                  string _key399;
                  SquareMember _val400;
                  _key399 = iprot.ReadString();
                  _val400 = new SquareMember();
                  _val400.Read(iprot);
                  MyMemberships[_key399] = _val400;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              ContinuationToken = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Map) {
              {
                NoteStatuses = new Dictionary<string, NoteStatus>();
                TMap _map401 = iprot.ReadMapBegin();
                for( int _i402 = 0; _i402 < _map401.Count; ++_i402)
                {
                  string _key403;
                  NoteStatus _val404;
                  _key403 = iprot.ReadString();
                  _val404 = new NoteStatus();
                  _val404.Read(iprot);
                  NoteStatuses[_key403] = _val404;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SearchSquaresResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Squares != null && __isset.squares) {
        field.Name = "squares";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Squares.Count));
          foreach (Square _iter405 in Squares)
          {
            _iter405.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SquareStatuses != null && __isset.squareStatuses) {
        field.Name = "squareStatuses";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, SquareStatuses.Count));
          foreach (string _iter406 in SquareStatuses.Keys)
          {
            oprot.WriteString(_iter406);
            SquareStatuses[_iter406].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (MyMemberships != null && __isset.myMemberships) {
        field.Name = "myMemberships";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, MyMemberships.Count));
          foreach (string _iter407 in MyMemberships.Keys)
          {
            oprot.WriteString(_iter407);
            MyMemberships[_iter407].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ContinuationToken != null && __isset.continuationToken) {
        field.Name = "continuationToken";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContinuationToken);
        oprot.WriteFieldEnd();
      }
      if (NoteStatuses != null && __isset.noteStatuses) {
        field.Name = "noteStatuses";
        field.Type = TType.Map;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, NoteStatuses.Count));
          foreach (string _iter408 in NoteStatuses.Keys)
          {
            oprot.WriteString(_iter408);
            NoteStatuses[_iter408].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SearchSquaresResponse(");
    bool __first = true;
    if (Squares != null && __isset.squares) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Squares: ");
      __sb.Append(Squares);
    }
    if (SquareStatuses != null && __isset.squareStatuses) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SquareStatuses: ");
      __sb.Append(SquareStatuses);
    }
    if (MyMemberships != null && __isset.myMemberships) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MyMemberships: ");
      __sb.Append(MyMemberships);
    }
    if (ContinuationToken != null && __isset.continuationToken) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContinuationToken: ");
      __sb.Append(ContinuationToken);
    }
    if (NoteStatuses != null && __isset.noteStatuses) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NoteStatuses: ");
      __sb.Append(NoteStatuses);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

