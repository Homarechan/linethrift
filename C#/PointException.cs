/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class PointException : TException, TBase
{
  private PointErrorCode _code;
  private string _reason;
  private Dictionary<string, string> _extra;

  /// <summary>
  /// 
  /// <seealso cref="PointErrorCode"/>
  /// </summary>
  public PointErrorCode Code
  {
    get
    {
      return _code;
    }
    set
    {
      __isset.code = true;
      this._code = value;
    }
  }

  public string Reason
  {
    get
    {
      return _reason;
    }
    set
    {
      __isset.reason = true;
      this._reason = value;
    }
  }

  public Dictionary<string, string> Extra
  {
    get
    {
      return _extra;
    }
    set
    {
      __isset.extra = true;
      this._extra = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool code;
    public bool reason;
    public bool extra;
  }

  public PointException() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Code = (PointErrorCode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Reason = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                Extra = new Dictionary<string, string>();
                TMap _map610 = iprot.ReadMapBegin();
                for( int _i611 = 0; _i611 < _map610.Count; ++_i611)
                {
                  string _key612;
                  string _val613;
                  _key612 = iprot.ReadString();
                  _val613 = iprot.ReadString();
                  Extra[_key612] = _val613;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("PointException");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.code) {
        field.Name = "code";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Code);
        oprot.WriteFieldEnd();
      }
      if (Reason != null && __isset.reason) {
        field.Name = "reason";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Reason);
        oprot.WriteFieldEnd();
      }
      if (Extra != null && __isset.extra) {
        field.Name = "extra";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Extra.Count));
          foreach (string _iter614 in Extra.Keys)
          {
            oprot.WriteString(_iter614);
            oprot.WriteString(Extra[_iter614]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("PointException(");
    bool __first = true;
    if (__isset.code) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Code: ");
      __sb.Append(Code);
    }
    if (Reason != null && __isset.reason) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Reason: ");
      __sb.Append(Reason);
    }
    if (Extra != null && __isset.extra) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Extra: ");
      __sb.Append(Extra);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

