/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class SquareService {
  public interface ISync {
    GetSquareChatAnnouncementsResponse getSquareChatAnnouncements(GetSquareChatAnnouncementsRequest request);
    DeleteSquareChatAnnouncementResponse deleteSquareChatAnnouncement(DeleteSquareChatAnnouncementRequest request);
    CreateSquareChatAnnouncementResponse createSquareChatAnnouncement(CreateSquareChatAnnouncementRequest request);
    GetNoteStatusResponse getNoteStatus(GetNoteStatusRequest request);
    GetSquareStatusResponse getSquareStatus(GetSquareStatusRequest request);
    ReportSquareMemberResponse reportSquareMember(ReportSquareMemberRequest request);
    ReportSquareMessageResponse reportSquareMessage(ReportSquareMessageRequest request);
    ReportSquareChatResponse reportSquareChat(ReportSquareChatRequest request);
    ReportSquareResponse reportSquare(ReportSquareRequest request);
    UpdateSquareMemberRelationResponse updateSquareMemberRelation(UpdateSquareMemberRelationRequest request);
    UpdateSquareAuthorityResponse updateSquareAuthority(UpdateSquareAuthorityRequest request);
    UpdateSquareChatMemberResponse updateSquareChatMember(UpdateSquareChatMemberRequest request);
    UpdateSquareChatResponse updateSquareChat(UpdateSquareChatRequest request);
    RefreshSubscriptionsResponse refreshSubscriptions(RefreshSubscriptionsRequest request);
    RemoveSubscriptionsResponse removeSubscriptions(RemoveSubscriptionsRequest request);
    RejectSquareMembersResponse rejectSquareMembers(RejectSquareMembersRequest request);
    UpdateSquareMembersResponse updateSquareMembers(UpdateSquareMembersRequest request);
    UpdateSquareMemberResponse updateSquareMember(UpdateSquareMemberRequest request);
    UpdateSquareFeatureSetResponse updateSquareFeatureSet(UpdateSquareFeatureSetRequest request);
    GetSquareFeatureSetResponse getSquareFeatureSet(GetSquareFeatureSetRequest request);
    SearchSquaresResponse searchSquares(SearchSquaresRequest request);
    UpdateSquareResponse updateSquare(UpdateSquareRequest request);
    GetSquareCategoriesResponse getCategories(GetSquareCategoriesRequest request);
    SearchSquareMembersResponse searchSquareMembers(SearchSquareMembersRequest request);
    FetchSquareChatEventsResponse fetchSquareChatEvents(FetchSquareChatEventsRequest request);
    FetchMyEventsResponse fetchMyEvents(FetchMyEventsRequest request);
    MarkAsReadResponse markAsRead(MarkAsReadRequest request);
    GetSquareAuthorityResponse getSquareAuthority(GetSquareAuthorityRequest request);
    SendMessageResponse sendMessage(SendMessageRequest request);
    LeaveSquareResponse leaveSquare(LeaveSquareRequest request);
    LeaveSquareChatResponse leaveSquareChat(LeaveSquareChatRequest request);
    JoinSquareChatResponse joinSquareChat(JoinSquareChatRequest request);
    JoinSquareResponse joinSquare(JoinSquareRequest request);
    InviteToSquareResponse inviteToSquare(InviteToSquareRequest request);
    InviteToSquareChatResponse inviteToSquareChat(InviteToSquareChatRequest request);
    GetSquareMemberResponse getSquareMember(GetSquareMemberRequest request);
    GetSquareMembersResponse getSquareMembers(GetSquareMembersRequest request);
    GetSquareMemberRelationResponse getSquareMemberRelation(GetSquareMemberRelationRequest request);
    GetSquareMemberRelationsResponse getSquareMemberRelations(GetSquareMemberRelationsRequest request);
    GetSquareChatMembersResponse getSquareChatMembers(GetSquareChatMembersRequest request);
    GetSquareChatStatusResponse getSquareChatStatus(GetSquareChatStatusRequest request);
    GetSquareChatResponse getSquareChat(GetSquareChatRequest request);
    GetSquareResponse getSquare(GetSquareRequest request);
    GetJoinedSquaresResponse getJoinedSquares(GetJoinedSquaresRequest request);
    GetJoinedSquareChatsResponse getJoinedSquareChats(GetJoinedSquareChatsRequest request);
    ApproveSquareMembersResponse approveSquareMembers(ApproveSquareMembersRequest request);
    CreateSquareChatResponse createSquareChat(CreateSquareChatRequest request);
    CreateSquareResponse createSquare(CreateSquareRequest request);
    DeleteSquareChatResponse deleteSquareChat(DeleteSquareChatRequest request);
    DeleteSquareResponse deleteSquare(DeleteSquareRequest request);
    DestroyMessageResponse destroyMessage(DestroyMessageRequest request);
    GetJoinableSquareChatsResponse getJoinableSquareChats(GetJoinableSquareChatsRequest request);
    GetInvitationTicketUrlResponse getInvitationTicketUrl(GetInvitationTicketUrlRequest request);
    FindSquareByInvitationTicketResponse findSquareByInvitationTicket(FindSquareByInvitationTicketRequest request);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareChatAnnouncements(AsyncCallback callback, object state, GetSquareChatAnnouncementsRequest request);
    GetSquareChatAnnouncementsResponse End_getSquareChatAnnouncements(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deleteSquareChatAnnouncement(AsyncCallback callback, object state, DeleteSquareChatAnnouncementRequest request);
    DeleteSquareChatAnnouncementResponse End_deleteSquareChatAnnouncement(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createSquareChatAnnouncement(AsyncCallback callback, object state, CreateSquareChatAnnouncementRequest request);
    CreateSquareChatAnnouncementResponse End_createSquareChatAnnouncement(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getNoteStatus(AsyncCallback callback, object state, GetNoteStatusRequest request);
    GetNoteStatusResponse End_getNoteStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareStatus(AsyncCallback callback, object state, GetSquareStatusRequest request);
    GetSquareStatusResponse End_getSquareStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportSquareMember(AsyncCallback callback, object state, ReportSquareMemberRequest request);
    ReportSquareMemberResponse End_reportSquareMember(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportSquareMessage(AsyncCallback callback, object state, ReportSquareMessageRequest request);
    ReportSquareMessageResponse End_reportSquareMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportSquareChat(AsyncCallback callback, object state, ReportSquareChatRequest request);
    ReportSquareChatResponse End_reportSquareChat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportSquare(AsyncCallback callback, object state, ReportSquareRequest request);
    ReportSquareResponse End_reportSquare(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSquareMemberRelation(AsyncCallback callback, object state, UpdateSquareMemberRelationRequest request);
    UpdateSquareMemberRelationResponse End_updateSquareMemberRelation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSquareAuthority(AsyncCallback callback, object state, UpdateSquareAuthorityRequest request);
    UpdateSquareAuthorityResponse End_updateSquareAuthority(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSquareChatMember(AsyncCallback callback, object state, UpdateSquareChatMemberRequest request);
    UpdateSquareChatMemberResponse End_updateSquareChatMember(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSquareChat(AsyncCallback callback, object state, UpdateSquareChatRequest request);
    UpdateSquareChatResponse End_updateSquareChat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_refreshSubscriptions(AsyncCallback callback, object state, RefreshSubscriptionsRequest request);
    RefreshSubscriptionsResponse End_refreshSubscriptions(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeSubscriptions(AsyncCallback callback, object state, RemoveSubscriptionsRequest request);
    RemoveSubscriptionsResponse End_removeSubscriptions(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_rejectSquareMembers(AsyncCallback callback, object state, RejectSquareMembersRequest request);
    RejectSquareMembersResponse End_rejectSquareMembers(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSquareMembers(AsyncCallback callback, object state, UpdateSquareMembersRequest request);
    UpdateSquareMembersResponse End_updateSquareMembers(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSquareMember(AsyncCallback callback, object state, UpdateSquareMemberRequest request);
    UpdateSquareMemberResponse End_updateSquareMember(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSquareFeatureSet(AsyncCallback callback, object state, UpdateSquareFeatureSetRequest request);
    UpdateSquareFeatureSetResponse End_updateSquareFeatureSet(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareFeatureSet(AsyncCallback callback, object state, GetSquareFeatureSetRequest request);
    GetSquareFeatureSetResponse End_getSquareFeatureSet(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_searchSquares(AsyncCallback callback, object state, SearchSquaresRequest request);
    SearchSquaresResponse End_searchSquares(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSquare(AsyncCallback callback, object state, UpdateSquareRequest request);
    UpdateSquareResponse End_updateSquare(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCategories(AsyncCallback callback, object state, GetSquareCategoriesRequest request);
    GetSquareCategoriesResponse End_getCategories(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_searchSquareMembers(AsyncCallback callback, object state, SearchSquareMembersRequest request);
    SearchSquareMembersResponse End_searchSquareMembers(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fetchSquareChatEvents(AsyncCallback callback, object state, FetchSquareChatEventsRequest request);
    FetchSquareChatEventsResponse End_fetchSquareChatEvents(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fetchMyEvents(AsyncCallback callback, object state, FetchMyEventsRequest request);
    FetchMyEventsResponse End_fetchMyEvents(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_markAsRead(AsyncCallback callback, object state, MarkAsReadRequest request);
    MarkAsReadResponse End_markAsRead(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareAuthority(AsyncCallback callback, object state, GetSquareAuthorityRequest request);
    GetSquareAuthorityResponse End_getSquareAuthority(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, SendMessageRequest request);
    SendMessageResponse End_sendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_leaveSquare(AsyncCallback callback, object state, LeaveSquareRequest request);
    LeaveSquareResponse End_leaveSquare(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_leaveSquareChat(AsyncCallback callback, object state, LeaveSquareChatRequest request);
    LeaveSquareChatResponse End_leaveSquareChat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_joinSquareChat(AsyncCallback callback, object state, JoinSquareChatRequest request);
    JoinSquareChatResponse End_joinSquareChat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_joinSquare(AsyncCallback callback, object state, JoinSquareRequest request);
    JoinSquareResponse End_joinSquare(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_inviteToSquare(AsyncCallback callback, object state, InviteToSquareRequest request);
    InviteToSquareResponse End_inviteToSquare(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_inviteToSquareChat(AsyncCallback callback, object state, InviteToSquareChatRequest request);
    InviteToSquareChatResponse End_inviteToSquareChat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareMember(AsyncCallback callback, object state, GetSquareMemberRequest request);
    GetSquareMemberResponse End_getSquareMember(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareMembers(AsyncCallback callback, object state, GetSquareMembersRequest request);
    GetSquareMembersResponse End_getSquareMembers(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareMemberRelation(AsyncCallback callback, object state, GetSquareMemberRelationRequest request);
    GetSquareMemberRelationResponse End_getSquareMemberRelation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareMemberRelations(AsyncCallback callback, object state, GetSquareMemberRelationsRequest request);
    GetSquareMemberRelationsResponse End_getSquareMemberRelations(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareChatMembers(AsyncCallback callback, object state, GetSquareChatMembersRequest request);
    GetSquareChatMembersResponse End_getSquareChatMembers(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareChatStatus(AsyncCallback callback, object state, GetSquareChatStatusRequest request);
    GetSquareChatStatusResponse End_getSquareChatStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquareChat(AsyncCallback callback, object state, GetSquareChatRequest request);
    GetSquareChatResponse End_getSquareChat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSquare(AsyncCallback callback, object state, GetSquareRequest request);
    GetSquareResponse End_getSquare(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getJoinedSquares(AsyncCallback callback, object state, GetJoinedSquaresRequest request);
    GetJoinedSquaresResponse End_getJoinedSquares(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getJoinedSquareChats(AsyncCallback callback, object state, GetJoinedSquareChatsRequest request);
    GetJoinedSquareChatsResponse End_getJoinedSquareChats(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_approveSquareMembers(AsyncCallback callback, object state, ApproveSquareMembersRequest request);
    ApproveSquareMembersResponse End_approveSquareMembers(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createSquareChat(AsyncCallback callback, object state, CreateSquareChatRequest request);
    CreateSquareChatResponse End_createSquareChat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createSquare(AsyncCallback callback, object state, CreateSquareRequest request);
    CreateSquareResponse End_createSquare(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deleteSquareChat(AsyncCallback callback, object state, DeleteSquareChatRequest request);
    DeleteSquareChatResponse End_deleteSquareChat(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_deleteSquare(AsyncCallback callback, object state, DeleteSquareRequest request);
    DeleteSquareResponse End_deleteSquare(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_destroyMessage(AsyncCallback callback, object state, DestroyMessageRequest request);
    DestroyMessageResponse End_destroyMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getJoinableSquareChats(AsyncCallback callback, object state, GetJoinableSquareChatsRequest request);
    GetJoinableSquareChatsResponse End_getJoinableSquareChats(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getInvitationTicketUrl(AsyncCallback callback, object state, GetInvitationTicketUrlRequest request);
    GetInvitationTicketUrlResponse End_getInvitationTicketUrl(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findSquareByInvitationTicket(AsyncCallback callback, object state, FindSquareByInvitationTicketRequest request);
    FindSquareByInvitationTicketResponse End_findSquareByInvitationTicket(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareChatAnnouncements(AsyncCallback callback, object state, GetSquareChatAnnouncementsRequest request)
    {
      return send_getSquareChatAnnouncements(callback, state, request);
    }

    public GetSquareChatAnnouncementsResponse End_getSquareChatAnnouncements(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareChatAnnouncements();
    }

    #endif

    public GetSquareChatAnnouncementsResponse getSquareChatAnnouncements(GetSquareChatAnnouncementsRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareChatAnnouncements(null, null, request);
      return End_getSquareChatAnnouncements(asyncResult);

      #else
      send_getSquareChatAnnouncements(request);
      return recv_getSquareChatAnnouncements();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareChatAnnouncements(AsyncCallback callback, object state, GetSquareChatAnnouncementsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareChatAnnouncements", TMessageType.Call, seqid_));
      getSquareChatAnnouncements_args args = new getSquareChatAnnouncements_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareChatAnnouncements(GetSquareChatAnnouncementsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareChatAnnouncements", TMessageType.Call, seqid_));
      getSquareChatAnnouncements_args args = new getSquareChatAnnouncements_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareChatAnnouncementsResponse recv_getSquareChatAnnouncements()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareChatAnnouncements_result result = new getSquareChatAnnouncements_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareChatAnnouncements failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_deleteSquareChatAnnouncement(AsyncCallback callback, object state, DeleteSquareChatAnnouncementRequest request)
    {
      return send_deleteSquareChatAnnouncement(callback, state, request);
    }

    public DeleteSquareChatAnnouncementResponse End_deleteSquareChatAnnouncement(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteSquareChatAnnouncement();
    }

    #endif

    public DeleteSquareChatAnnouncementResponse deleteSquareChatAnnouncement(DeleteSquareChatAnnouncementRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_deleteSquareChatAnnouncement(null, null, request);
      return End_deleteSquareChatAnnouncement(asyncResult);

      #else
      send_deleteSquareChatAnnouncement(request);
      return recv_deleteSquareChatAnnouncement();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteSquareChatAnnouncement(AsyncCallback callback, object state, DeleteSquareChatAnnouncementRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteSquareChatAnnouncement", TMessageType.Call, seqid_));
      deleteSquareChatAnnouncement_args args = new deleteSquareChatAnnouncement_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_deleteSquareChatAnnouncement(DeleteSquareChatAnnouncementRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteSquareChatAnnouncement", TMessageType.Call, seqid_));
      deleteSquareChatAnnouncement_args args = new deleteSquareChatAnnouncement_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public DeleteSquareChatAnnouncementResponse recv_deleteSquareChatAnnouncement()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteSquareChatAnnouncement_result result = new deleteSquareChatAnnouncement_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteSquareChatAnnouncement failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createSquareChatAnnouncement(AsyncCallback callback, object state, CreateSquareChatAnnouncementRequest request)
    {
      return send_createSquareChatAnnouncement(callback, state, request);
    }

    public CreateSquareChatAnnouncementResponse End_createSquareChatAnnouncement(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createSquareChatAnnouncement();
    }

    #endif

    public CreateSquareChatAnnouncementResponse createSquareChatAnnouncement(CreateSquareChatAnnouncementRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createSquareChatAnnouncement(null, null, request);
      return End_createSquareChatAnnouncement(asyncResult);

      #else
      send_createSquareChatAnnouncement(request);
      return recv_createSquareChatAnnouncement();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createSquareChatAnnouncement(AsyncCallback callback, object state, CreateSquareChatAnnouncementRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("createSquareChatAnnouncement", TMessageType.Call, seqid_));
      createSquareChatAnnouncement_args args = new createSquareChatAnnouncement_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createSquareChatAnnouncement(CreateSquareChatAnnouncementRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("createSquareChatAnnouncement", TMessageType.Call, seqid_));
      createSquareChatAnnouncement_args args = new createSquareChatAnnouncement_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public CreateSquareChatAnnouncementResponse recv_createSquareChatAnnouncement()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createSquareChatAnnouncement_result result = new createSquareChatAnnouncement_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSquareChatAnnouncement failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getNoteStatus(AsyncCallback callback, object state, GetNoteStatusRequest request)
    {
      return send_getNoteStatus(callback, state, request);
    }

    public GetNoteStatusResponse End_getNoteStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getNoteStatus();
    }

    #endif

    public GetNoteStatusResponse getNoteStatus(GetNoteStatusRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getNoteStatus(null, null, request);
      return End_getNoteStatus(asyncResult);

      #else
      send_getNoteStatus(request);
      return recv_getNoteStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getNoteStatus(AsyncCallback callback, object state, GetNoteStatusRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getNoteStatus", TMessageType.Call, seqid_));
      getNoteStatus_args args = new getNoteStatus_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getNoteStatus(GetNoteStatusRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getNoteStatus", TMessageType.Call, seqid_));
      getNoteStatus_args args = new getNoteStatus_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetNoteStatusResponse recv_getNoteStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getNoteStatus_result result = new getNoteStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNoteStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareStatus(AsyncCallback callback, object state, GetSquareStatusRequest request)
    {
      return send_getSquareStatus(callback, state, request);
    }

    public GetSquareStatusResponse End_getSquareStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareStatus();
    }

    #endif

    public GetSquareStatusResponse getSquareStatus(GetSquareStatusRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareStatus(null, null, request);
      return End_getSquareStatus(asyncResult);

      #else
      send_getSquareStatus(request);
      return recv_getSquareStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareStatus(AsyncCallback callback, object state, GetSquareStatusRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareStatus", TMessageType.Call, seqid_));
      getSquareStatus_args args = new getSquareStatus_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareStatus(GetSquareStatusRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareStatus", TMessageType.Call, seqid_));
      getSquareStatus_args args = new getSquareStatus_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareStatusResponse recv_getSquareStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareStatus_result result = new getSquareStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportSquareMember(AsyncCallback callback, object state, ReportSquareMemberRequest request)
    {
      return send_reportSquareMember(callback, state, request);
    }

    public ReportSquareMemberResponse End_reportSquareMember(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reportSquareMember();
    }

    #endif

    public ReportSquareMemberResponse reportSquareMember(ReportSquareMemberRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportSquareMember(null, null, request);
      return End_reportSquareMember(asyncResult);

      #else
      send_reportSquareMember(request);
      return recv_reportSquareMember();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportSquareMember(AsyncCallback callback, object state, ReportSquareMemberRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSquareMember", TMessageType.Call, seqid_));
      reportSquareMember_args args = new reportSquareMember_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportSquareMember(ReportSquareMemberRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSquareMember", TMessageType.Call, seqid_));
      reportSquareMember_args args = new reportSquareMember_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ReportSquareMemberResponse recv_reportSquareMember()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportSquareMember_result result = new reportSquareMember_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reportSquareMember failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportSquareMessage(AsyncCallback callback, object state, ReportSquareMessageRequest request)
    {
      return send_reportSquareMessage(callback, state, request);
    }

    public ReportSquareMessageResponse End_reportSquareMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reportSquareMessage();
    }

    #endif

    public ReportSquareMessageResponse reportSquareMessage(ReportSquareMessageRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportSquareMessage(null, null, request);
      return End_reportSquareMessage(asyncResult);

      #else
      send_reportSquareMessage(request);
      return recv_reportSquareMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportSquareMessage(AsyncCallback callback, object state, ReportSquareMessageRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSquareMessage", TMessageType.Call, seqid_));
      reportSquareMessage_args args = new reportSquareMessage_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportSquareMessage(ReportSquareMessageRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSquareMessage", TMessageType.Call, seqid_));
      reportSquareMessage_args args = new reportSquareMessage_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ReportSquareMessageResponse recv_reportSquareMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportSquareMessage_result result = new reportSquareMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reportSquareMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportSquareChat(AsyncCallback callback, object state, ReportSquareChatRequest request)
    {
      return send_reportSquareChat(callback, state, request);
    }

    public ReportSquareChatResponse End_reportSquareChat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reportSquareChat();
    }

    #endif

    public ReportSquareChatResponse reportSquareChat(ReportSquareChatRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportSquareChat(null, null, request);
      return End_reportSquareChat(asyncResult);

      #else
      send_reportSquareChat(request);
      return recv_reportSquareChat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportSquareChat(AsyncCallback callback, object state, ReportSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSquareChat", TMessageType.Call, seqid_));
      reportSquareChat_args args = new reportSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportSquareChat(ReportSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSquareChat", TMessageType.Call, seqid_));
      reportSquareChat_args args = new reportSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ReportSquareChatResponse recv_reportSquareChat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportSquareChat_result result = new reportSquareChat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reportSquareChat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportSquare(AsyncCallback callback, object state, ReportSquareRequest request)
    {
      return send_reportSquare(callback, state, request);
    }

    public ReportSquareResponse End_reportSquare(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reportSquare();
    }

    #endif

    public ReportSquareResponse reportSquare(ReportSquareRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportSquare(null, null, request);
      return End_reportSquare(asyncResult);

      #else
      send_reportSquare(request);
      return recv_reportSquare();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportSquare(AsyncCallback callback, object state, ReportSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSquare", TMessageType.Call, seqid_));
      reportSquare_args args = new reportSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportSquare(ReportSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSquare", TMessageType.Call, seqid_));
      reportSquare_args args = new reportSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ReportSquareResponse recv_reportSquare()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportSquare_result result = new reportSquare_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reportSquare failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSquareMemberRelation(AsyncCallback callback, object state, UpdateSquareMemberRelationRequest request)
    {
      return send_updateSquareMemberRelation(callback, state, request);
    }

    public UpdateSquareMemberRelationResponse End_updateSquareMemberRelation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSquareMemberRelation();
    }

    #endif

    public UpdateSquareMemberRelationResponse updateSquareMemberRelation(UpdateSquareMemberRelationRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSquareMemberRelation(null, null, request);
      return End_updateSquareMemberRelation(asyncResult);

      #else
      send_updateSquareMemberRelation(request);
      return recv_updateSquareMemberRelation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSquareMemberRelation(AsyncCallback callback, object state, UpdateSquareMemberRelationRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareMemberRelation", TMessageType.Call, seqid_));
      updateSquareMemberRelation_args args = new updateSquareMemberRelation_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSquareMemberRelation(UpdateSquareMemberRelationRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareMemberRelation", TMessageType.Call, seqid_));
      updateSquareMemberRelation_args args = new updateSquareMemberRelation_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UpdateSquareMemberRelationResponse recv_updateSquareMemberRelation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSquareMemberRelation_result result = new updateSquareMemberRelation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSquareMemberRelation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSquareAuthority(AsyncCallback callback, object state, UpdateSquareAuthorityRequest request)
    {
      return send_updateSquareAuthority(callback, state, request);
    }

    public UpdateSquareAuthorityResponse End_updateSquareAuthority(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSquareAuthority();
    }

    #endif

    public UpdateSquareAuthorityResponse updateSquareAuthority(UpdateSquareAuthorityRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSquareAuthority(null, null, request);
      return End_updateSquareAuthority(asyncResult);

      #else
      send_updateSquareAuthority(request);
      return recv_updateSquareAuthority();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSquareAuthority(AsyncCallback callback, object state, UpdateSquareAuthorityRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareAuthority", TMessageType.Call, seqid_));
      updateSquareAuthority_args args = new updateSquareAuthority_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSquareAuthority(UpdateSquareAuthorityRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareAuthority", TMessageType.Call, seqid_));
      updateSquareAuthority_args args = new updateSquareAuthority_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UpdateSquareAuthorityResponse recv_updateSquareAuthority()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSquareAuthority_result result = new updateSquareAuthority_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSquareAuthority failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSquareChatMember(AsyncCallback callback, object state, UpdateSquareChatMemberRequest request)
    {
      return send_updateSquareChatMember(callback, state, request);
    }

    public UpdateSquareChatMemberResponse End_updateSquareChatMember(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSquareChatMember();
    }

    #endif

    public UpdateSquareChatMemberResponse updateSquareChatMember(UpdateSquareChatMemberRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSquareChatMember(null, null, request);
      return End_updateSquareChatMember(asyncResult);

      #else
      send_updateSquareChatMember(request);
      return recv_updateSquareChatMember();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSquareChatMember(AsyncCallback callback, object state, UpdateSquareChatMemberRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareChatMember", TMessageType.Call, seqid_));
      updateSquareChatMember_args args = new updateSquareChatMember_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSquareChatMember(UpdateSquareChatMemberRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareChatMember", TMessageType.Call, seqid_));
      updateSquareChatMember_args args = new updateSquareChatMember_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UpdateSquareChatMemberResponse recv_updateSquareChatMember()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSquareChatMember_result result = new updateSquareChatMember_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSquareChatMember failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSquareChat(AsyncCallback callback, object state, UpdateSquareChatRequest request)
    {
      return send_updateSquareChat(callback, state, request);
    }

    public UpdateSquareChatResponse End_updateSquareChat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSquareChat();
    }

    #endif

    public UpdateSquareChatResponse updateSquareChat(UpdateSquareChatRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSquareChat(null, null, request);
      return End_updateSquareChat(asyncResult);

      #else
      send_updateSquareChat(request);
      return recv_updateSquareChat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSquareChat(AsyncCallback callback, object state, UpdateSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareChat", TMessageType.Call, seqid_));
      updateSquareChat_args args = new updateSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSquareChat(UpdateSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareChat", TMessageType.Call, seqid_));
      updateSquareChat_args args = new updateSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UpdateSquareChatResponse recv_updateSquareChat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSquareChat_result result = new updateSquareChat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSquareChat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_refreshSubscriptions(AsyncCallback callback, object state, RefreshSubscriptionsRequest request)
    {
      return send_refreshSubscriptions(callback, state, request);
    }

    public RefreshSubscriptionsResponse End_refreshSubscriptions(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_refreshSubscriptions();
    }

    #endif

    public RefreshSubscriptionsResponse refreshSubscriptions(RefreshSubscriptionsRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_refreshSubscriptions(null, null, request);
      return End_refreshSubscriptions(asyncResult);

      #else
      send_refreshSubscriptions(request);
      return recv_refreshSubscriptions();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_refreshSubscriptions(AsyncCallback callback, object state, RefreshSubscriptionsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("refreshSubscriptions", TMessageType.Call, seqid_));
      refreshSubscriptions_args args = new refreshSubscriptions_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_refreshSubscriptions(RefreshSubscriptionsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("refreshSubscriptions", TMessageType.Call, seqid_));
      refreshSubscriptions_args args = new refreshSubscriptions_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RefreshSubscriptionsResponse recv_refreshSubscriptions()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      refreshSubscriptions_result result = new refreshSubscriptions_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "refreshSubscriptions failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeSubscriptions(AsyncCallback callback, object state, RemoveSubscriptionsRequest request)
    {
      return send_removeSubscriptions(callback, state, request);
    }

    public RemoveSubscriptionsResponse End_removeSubscriptions(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_removeSubscriptions();
    }

    #endif

    public RemoveSubscriptionsResponse removeSubscriptions(RemoveSubscriptionsRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeSubscriptions(null, null, request);
      return End_removeSubscriptions(asyncResult);

      #else
      send_removeSubscriptions(request);
      return recv_removeSubscriptions();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeSubscriptions(AsyncCallback callback, object state, RemoveSubscriptionsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("removeSubscriptions", TMessageType.Call, seqid_));
      removeSubscriptions_args args = new removeSubscriptions_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeSubscriptions(RemoveSubscriptionsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("removeSubscriptions", TMessageType.Call, seqid_));
      removeSubscriptions_args args = new removeSubscriptions_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RemoveSubscriptionsResponse recv_removeSubscriptions()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeSubscriptions_result result = new removeSubscriptions_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeSubscriptions failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_rejectSquareMembers(AsyncCallback callback, object state, RejectSquareMembersRequest request)
    {
      return send_rejectSquareMembers(callback, state, request);
    }

    public RejectSquareMembersResponse End_rejectSquareMembers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_rejectSquareMembers();
    }

    #endif

    public RejectSquareMembersResponse rejectSquareMembers(RejectSquareMembersRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_rejectSquareMembers(null, null, request);
      return End_rejectSquareMembers(asyncResult);

      #else
      send_rejectSquareMembers(request);
      return recv_rejectSquareMembers();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_rejectSquareMembers(AsyncCallback callback, object state, RejectSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("rejectSquareMembers", TMessageType.Call, seqid_));
      rejectSquareMembers_args args = new rejectSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_rejectSquareMembers(RejectSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("rejectSquareMembers", TMessageType.Call, seqid_));
      rejectSquareMembers_args args = new rejectSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RejectSquareMembersResponse recv_rejectSquareMembers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      rejectSquareMembers_result result = new rejectSquareMembers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rejectSquareMembers failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSquareMembers(AsyncCallback callback, object state, UpdateSquareMembersRequest request)
    {
      return send_updateSquareMembers(callback, state, request);
    }

    public UpdateSquareMembersResponse End_updateSquareMembers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSquareMembers();
    }

    #endif

    public UpdateSquareMembersResponse updateSquareMembers(UpdateSquareMembersRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSquareMembers(null, null, request);
      return End_updateSquareMembers(asyncResult);

      #else
      send_updateSquareMembers(request);
      return recv_updateSquareMembers();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSquareMembers(AsyncCallback callback, object state, UpdateSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareMembers", TMessageType.Call, seqid_));
      updateSquareMembers_args args = new updateSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSquareMembers(UpdateSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareMembers", TMessageType.Call, seqid_));
      updateSquareMembers_args args = new updateSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UpdateSquareMembersResponse recv_updateSquareMembers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSquareMembers_result result = new updateSquareMembers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSquareMembers failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSquareMember(AsyncCallback callback, object state, UpdateSquareMemberRequest request)
    {
      return send_updateSquareMember(callback, state, request);
    }

    public UpdateSquareMemberResponse End_updateSquareMember(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSquareMember();
    }

    #endif

    public UpdateSquareMemberResponse updateSquareMember(UpdateSquareMemberRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSquareMember(null, null, request);
      return End_updateSquareMember(asyncResult);

      #else
      send_updateSquareMember(request);
      return recv_updateSquareMember();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSquareMember(AsyncCallback callback, object state, UpdateSquareMemberRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareMember", TMessageType.Call, seqid_));
      updateSquareMember_args args = new updateSquareMember_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSquareMember(UpdateSquareMemberRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareMember", TMessageType.Call, seqid_));
      updateSquareMember_args args = new updateSquareMember_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UpdateSquareMemberResponse recv_updateSquareMember()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSquareMember_result result = new updateSquareMember_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSquareMember failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSquareFeatureSet(AsyncCallback callback, object state, UpdateSquareFeatureSetRequest request)
    {
      return send_updateSquareFeatureSet(callback, state, request);
    }

    public UpdateSquareFeatureSetResponse End_updateSquareFeatureSet(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSquareFeatureSet();
    }

    #endif

    public UpdateSquareFeatureSetResponse updateSquareFeatureSet(UpdateSquareFeatureSetRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSquareFeatureSet(null, null, request);
      return End_updateSquareFeatureSet(asyncResult);

      #else
      send_updateSquareFeatureSet(request);
      return recv_updateSquareFeatureSet();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSquareFeatureSet(AsyncCallback callback, object state, UpdateSquareFeatureSetRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareFeatureSet", TMessageType.Call, seqid_));
      updateSquareFeatureSet_args args = new updateSquareFeatureSet_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSquareFeatureSet(UpdateSquareFeatureSetRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquareFeatureSet", TMessageType.Call, seqid_));
      updateSquareFeatureSet_args args = new updateSquareFeatureSet_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UpdateSquareFeatureSetResponse recv_updateSquareFeatureSet()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSquareFeatureSet_result result = new updateSquareFeatureSet_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSquareFeatureSet failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareFeatureSet(AsyncCallback callback, object state, GetSquareFeatureSetRequest request)
    {
      return send_getSquareFeatureSet(callback, state, request);
    }

    public GetSquareFeatureSetResponse End_getSquareFeatureSet(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareFeatureSet();
    }

    #endif

    public GetSquareFeatureSetResponse getSquareFeatureSet(GetSquareFeatureSetRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareFeatureSet(null, null, request);
      return End_getSquareFeatureSet(asyncResult);

      #else
      send_getSquareFeatureSet(request);
      return recv_getSquareFeatureSet();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareFeatureSet(AsyncCallback callback, object state, GetSquareFeatureSetRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareFeatureSet", TMessageType.Call, seqid_));
      getSquareFeatureSet_args args = new getSquareFeatureSet_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareFeatureSet(GetSquareFeatureSetRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareFeatureSet", TMessageType.Call, seqid_));
      getSquareFeatureSet_args args = new getSquareFeatureSet_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareFeatureSetResponse recv_getSquareFeatureSet()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareFeatureSet_result result = new getSquareFeatureSet_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareFeatureSet failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_searchSquares(AsyncCallback callback, object state, SearchSquaresRequest request)
    {
      return send_searchSquares(callback, state, request);
    }

    public SearchSquaresResponse End_searchSquares(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_searchSquares();
    }

    #endif

    public SearchSquaresResponse searchSquares(SearchSquaresRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_searchSquares(null, null, request);
      return End_searchSquares(asyncResult);

      #else
      send_searchSquares(request);
      return recv_searchSquares();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_searchSquares(AsyncCallback callback, object state, SearchSquaresRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("searchSquares", TMessageType.Call, seqid_));
      searchSquares_args args = new searchSquares_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_searchSquares(SearchSquaresRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("searchSquares", TMessageType.Call, seqid_));
      searchSquares_args args = new searchSquares_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SearchSquaresResponse recv_searchSquares()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      searchSquares_result result = new searchSquares_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "searchSquares failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSquare(AsyncCallback callback, object state, UpdateSquareRequest request)
    {
      return send_updateSquare(callback, state, request);
    }

    public UpdateSquareResponse End_updateSquare(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSquare();
    }

    #endif

    public UpdateSquareResponse updateSquare(UpdateSquareRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSquare(null, null, request);
      return End_updateSquare(asyncResult);

      #else
      send_updateSquare(request);
      return recv_updateSquare();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSquare(AsyncCallback callback, object state, UpdateSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquare", TMessageType.Call, seqid_));
      updateSquare_args args = new updateSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSquare(UpdateSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSquare", TMessageType.Call, seqid_));
      updateSquare_args args = new updateSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UpdateSquareResponse recv_updateSquare()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSquare_result result = new updateSquare_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSquare failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCategories(AsyncCallback callback, object state, GetSquareCategoriesRequest request)
    {
      return send_getCategories(callback, state, request);
    }

    public GetSquareCategoriesResponse End_getCategories(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCategories();
    }

    #endif

    public GetSquareCategoriesResponse getCategories(GetSquareCategoriesRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCategories(null, null, request);
      return End_getCategories(asyncResult);

      #else
      send_getCategories(request);
      return recv_getCategories();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCategories(AsyncCallback callback, object state, GetSquareCategoriesRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getCategories", TMessageType.Call, seqid_));
      getCategories_args args = new getCategories_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCategories(GetSquareCategoriesRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getCategories", TMessageType.Call, seqid_));
      getCategories_args args = new getCategories_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareCategoriesResponse recv_getCategories()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCategories_result result = new getCategories_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCategories failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_searchSquareMembers(AsyncCallback callback, object state, SearchSquareMembersRequest request)
    {
      return send_searchSquareMembers(callback, state, request);
    }

    public SearchSquareMembersResponse End_searchSquareMembers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_searchSquareMembers();
    }

    #endif

    public SearchSquareMembersResponse searchSquareMembers(SearchSquareMembersRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_searchSquareMembers(null, null, request);
      return End_searchSquareMembers(asyncResult);

      #else
      send_searchSquareMembers(request);
      return recv_searchSquareMembers();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_searchSquareMembers(AsyncCallback callback, object state, SearchSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("searchSquareMembers", TMessageType.Call, seqid_));
      searchSquareMembers_args args = new searchSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_searchSquareMembers(SearchSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("searchSquareMembers", TMessageType.Call, seqid_));
      searchSquareMembers_args args = new searchSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SearchSquareMembersResponse recv_searchSquareMembers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      searchSquareMembers_result result = new searchSquareMembers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "searchSquareMembers failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fetchSquareChatEvents(AsyncCallback callback, object state, FetchSquareChatEventsRequest request)
    {
      return send_fetchSquareChatEvents(callback, state, request);
    }

    public FetchSquareChatEventsResponse End_fetchSquareChatEvents(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchSquareChatEvents();
    }

    #endif

    public FetchSquareChatEventsResponse fetchSquareChatEvents(FetchSquareChatEventsRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fetchSquareChatEvents(null, null, request);
      return End_fetchSquareChatEvents(asyncResult);

      #else
      send_fetchSquareChatEvents(request);
      return recv_fetchSquareChatEvents();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchSquareChatEvents(AsyncCallback callback, object state, FetchSquareChatEventsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchSquareChatEvents", TMessageType.Call, seqid_));
      fetchSquareChatEvents_args args = new fetchSquareChatEvents_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fetchSquareChatEvents(FetchSquareChatEventsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchSquareChatEvents", TMessageType.Call, seqid_));
      fetchSquareChatEvents_args args = new fetchSquareChatEvents_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public FetchSquareChatEventsResponse recv_fetchSquareChatEvents()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchSquareChatEvents_result result = new fetchSquareChatEvents_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchSquareChatEvents failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fetchMyEvents(AsyncCallback callback, object state, FetchMyEventsRequest request)
    {
      return send_fetchMyEvents(callback, state, request);
    }

    public FetchMyEventsResponse End_fetchMyEvents(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchMyEvents();
    }

    #endif

    public FetchMyEventsResponse fetchMyEvents(FetchMyEventsRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fetchMyEvents(null, null, request);
      return End_fetchMyEvents(asyncResult);

      #else
      send_fetchMyEvents(request);
      return recv_fetchMyEvents();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchMyEvents(AsyncCallback callback, object state, FetchMyEventsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchMyEvents", TMessageType.Call, seqid_));
      fetchMyEvents_args args = new fetchMyEvents_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fetchMyEvents(FetchMyEventsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchMyEvents", TMessageType.Call, seqid_));
      fetchMyEvents_args args = new fetchMyEvents_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public FetchMyEventsResponse recv_fetchMyEvents()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchMyEvents_result result = new fetchMyEvents_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchMyEvents failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_markAsRead(AsyncCallback callback, object state, MarkAsReadRequest request)
    {
      return send_markAsRead(callback, state, request);
    }

    public MarkAsReadResponse End_markAsRead(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_markAsRead();
    }

    #endif

    public MarkAsReadResponse markAsRead(MarkAsReadRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_markAsRead(null, null, request);
      return End_markAsRead(asyncResult);

      #else
      send_markAsRead(request);
      return recv_markAsRead();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_markAsRead(AsyncCallback callback, object state, MarkAsReadRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("markAsRead", TMessageType.Call, seqid_));
      markAsRead_args args = new markAsRead_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_markAsRead(MarkAsReadRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("markAsRead", TMessageType.Call, seqid_));
      markAsRead_args args = new markAsRead_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public MarkAsReadResponse recv_markAsRead()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      markAsRead_result result = new markAsRead_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "markAsRead failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareAuthority(AsyncCallback callback, object state, GetSquareAuthorityRequest request)
    {
      return send_getSquareAuthority(callback, state, request);
    }

    public GetSquareAuthorityResponse End_getSquareAuthority(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareAuthority();
    }

    #endif

    public GetSquareAuthorityResponse getSquareAuthority(GetSquareAuthorityRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareAuthority(null, null, request);
      return End_getSquareAuthority(asyncResult);

      #else
      send_getSquareAuthority(request);
      return recv_getSquareAuthority();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareAuthority(AsyncCallback callback, object state, GetSquareAuthorityRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareAuthority", TMessageType.Call, seqid_));
      getSquareAuthority_args args = new getSquareAuthority_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareAuthority(GetSquareAuthorityRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareAuthority", TMessageType.Call, seqid_));
      getSquareAuthority_args args = new getSquareAuthority_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareAuthorityResponse recv_getSquareAuthority()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareAuthority_result result = new getSquareAuthority_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareAuthority failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, SendMessageRequest request)
    {
      return send_sendMessage(callback, state, request);
    }

    public SendMessageResponse End_sendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendMessage();
    }

    #endif

    public SendMessageResponse sendMessage(SendMessageRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessage(null, null, request);
      return End_sendMessage(asyncResult);

      #else
      send_sendMessage(request);
      return recv_sendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessage(AsyncCallback callback, object state, SendMessageRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
      sendMessage_args args = new sendMessage_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessage(SendMessageRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
      sendMessage_args args = new sendMessage_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SendMessageResponse recv_sendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessage_result result = new sendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_leaveSquare(AsyncCallback callback, object state, LeaveSquareRequest request)
    {
      return send_leaveSquare(callback, state, request);
    }

    public LeaveSquareResponse End_leaveSquare(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_leaveSquare();
    }

    #endif

    public LeaveSquareResponse leaveSquare(LeaveSquareRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_leaveSquare(null, null, request);
      return End_leaveSquare(asyncResult);

      #else
      send_leaveSquare(request);
      return recv_leaveSquare();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_leaveSquare(AsyncCallback callback, object state, LeaveSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("leaveSquare", TMessageType.Call, seqid_));
      leaveSquare_args args = new leaveSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_leaveSquare(LeaveSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("leaveSquare", TMessageType.Call, seqid_));
      leaveSquare_args args = new leaveSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public LeaveSquareResponse recv_leaveSquare()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      leaveSquare_result result = new leaveSquare_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "leaveSquare failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_leaveSquareChat(AsyncCallback callback, object state, LeaveSquareChatRequest request)
    {
      return send_leaveSquareChat(callback, state, request);
    }

    public LeaveSquareChatResponse End_leaveSquareChat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_leaveSquareChat();
    }

    #endif

    public LeaveSquareChatResponse leaveSquareChat(LeaveSquareChatRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_leaveSquareChat(null, null, request);
      return End_leaveSquareChat(asyncResult);

      #else
      send_leaveSquareChat(request);
      return recv_leaveSquareChat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_leaveSquareChat(AsyncCallback callback, object state, LeaveSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("leaveSquareChat", TMessageType.Call, seqid_));
      leaveSquareChat_args args = new leaveSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_leaveSquareChat(LeaveSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("leaveSquareChat", TMessageType.Call, seqid_));
      leaveSquareChat_args args = new leaveSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public LeaveSquareChatResponse recv_leaveSquareChat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      leaveSquareChat_result result = new leaveSquareChat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "leaveSquareChat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_joinSquareChat(AsyncCallback callback, object state, JoinSquareChatRequest request)
    {
      return send_joinSquareChat(callback, state, request);
    }

    public JoinSquareChatResponse End_joinSquareChat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_joinSquareChat();
    }

    #endif

    public JoinSquareChatResponse joinSquareChat(JoinSquareChatRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_joinSquareChat(null, null, request);
      return End_joinSquareChat(asyncResult);

      #else
      send_joinSquareChat(request);
      return recv_joinSquareChat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_joinSquareChat(AsyncCallback callback, object state, JoinSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("joinSquareChat", TMessageType.Call, seqid_));
      joinSquareChat_args args = new joinSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_joinSquareChat(JoinSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("joinSquareChat", TMessageType.Call, seqid_));
      joinSquareChat_args args = new joinSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public JoinSquareChatResponse recv_joinSquareChat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      joinSquareChat_result result = new joinSquareChat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "joinSquareChat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_joinSquare(AsyncCallback callback, object state, JoinSquareRequest request)
    {
      return send_joinSquare(callback, state, request);
    }

    public JoinSquareResponse End_joinSquare(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_joinSquare();
    }

    #endif

    public JoinSquareResponse joinSquare(JoinSquareRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_joinSquare(null, null, request);
      return End_joinSquare(asyncResult);

      #else
      send_joinSquare(request);
      return recv_joinSquare();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_joinSquare(AsyncCallback callback, object state, JoinSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("joinSquare", TMessageType.Call, seqid_));
      joinSquare_args args = new joinSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_joinSquare(JoinSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("joinSquare", TMessageType.Call, seqid_));
      joinSquare_args args = new joinSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public JoinSquareResponse recv_joinSquare()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      joinSquare_result result = new joinSquare_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "joinSquare failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_inviteToSquare(AsyncCallback callback, object state, InviteToSquareRequest request)
    {
      return send_inviteToSquare(callback, state, request);
    }

    public InviteToSquareResponse End_inviteToSquare(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_inviteToSquare();
    }

    #endif

    public InviteToSquareResponse inviteToSquare(InviteToSquareRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_inviteToSquare(null, null, request);
      return End_inviteToSquare(asyncResult);

      #else
      send_inviteToSquare(request);
      return recv_inviteToSquare();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_inviteToSquare(AsyncCallback callback, object state, InviteToSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteToSquare", TMessageType.Call, seqid_));
      inviteToSquare_args args = new inviteToSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_inviteToSquare(InviteToSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteToSquare", TMessageType.Call, seqid_));
      inviteToSquare_args args = new inviteToSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public InviteToSquareResponse recv_inviteToSquare()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      inviteToSquare_result result = new inviteToSquare_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inviteToSquare failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_inviteToSquareChat(AsyncCallback callback, object state, InviteToSquareChatRequest request)
    {
      return send_inviteToSquareChat(callback, state, request);
    }

    public InviteToSquareChatResponse End_inviteToSquareChat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_inviteToSquareChat();
    }

    #endif

    public InviteToSquareChatResponse inviteToSquareChat(InviteToSquareChatRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_inviteToSquareChat(null, null, request);
      return End_inviteToSquareChat(asyncResult);

      #else
      send_inviteToSquareChat(request);
      return recv_inviteToSquareChat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_inviteToSquareChat(AsyncCallback callback, object state, InviteToSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteToSquareChat", TMessageType.Call, seqid_));
      inviteToSquareChat_args args = new inviteToSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_inviteToSquareChat(InviteToSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteToSquareChat", TMessageType.Call, seqid_));
      inviteToSquareChat_args args = new inviteToSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public InviteToSquareChatResponse recv_inviteToSquareChat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      inviteToSquareChat_result result = new inviteToSquareChat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "inviteToSquareChat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareMember(AsyncCallback callback, object state, GetSquareMemberRequest request)
    {
      return send_getSquareMember(callback, state, request);
    }

    public GetSquareMemberResponse End_getSquareMember(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareMember();
    }

    #endif

    public GetSquareMemberResponse getSquareMember(GetSquareMemberRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareMember(null, null, request);
      return End_getSquareMember(asyncResult);

      #else
      send_getSquareMember(request);
      return recv_getSquareMember();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareMember(AsyncCallback callback, object state, GetSquareMemberRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareMember", TMessageType.Call, seqid_));
      getSquareMember_args args = new getSquareMember_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareMember(GetSquareMemberRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareMember", TMessageType.Call, seqid_));
      getSquareMember_args args = new getSquareMember_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareMemberResponse recv_getSquareMember()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareMember_result result = new getSquareMember_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareMember failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareMembers(AsyncCallback callback, object state, GetSquareMembersRequest request)
    {
      return send_getSquareMembers(callback, state, request);
    }

    public GetSquareMembersResponse End_getSquareMembers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareMembers();
    }

    #endif

    public GetSquareMembersResponse getSquareMembers(GetSquareMembersRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareMembers(null, null, request);
      return End_getSquareMembers(asyncResult);

      #else
      send_getSquareMembers(request);
      return recv_getSquareMembers();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareMembers(AsyncCallback callback, object state, GetSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareMembers", TMessageType.Call, seqid_));
      getSquareMembers_args args = new getSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareMembers(GetSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareMembers", TMessageType.Call, seqid_));
      getSquareMembers_args args = new getSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareMembersResponse recv_getSquareMembers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareMembers_result result = new getSquareMembers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareMembers failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareMemberRelation(AsyncCallback callback, object state, GetSquareMemberRelationRequest request)
    {
      return send_getSquareMemberRelation(callback, state, request);
    }

    public GetSquareMemberRelationResponse End_getSquareMemberRelation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareMemberRelation();
    }

    #endif

    public GetSquareMemberRelationResponse getSquareMemberRelation(GetSquareMemberRelationRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareMemberRelation(null, null, request);
      return End_getSquareMemberRelation(asyncResult);

      #else
      send_getSquareMemberRelation(request);
      return recv_getSquareMemberRelation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareMemberRelation(AsyncCallback callback, object state, GetSquareMemberRelationRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareMemberRelation", TMessageType.Call, seqid_));
      getSquareMemberRelation_args args = new getSquareMemberRelation_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareMemberRelation(GetSquareMemberRelationRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareMemberRelation", TMessageType.Call, seqid_));
      getSquareMemberRelation_args args = new getSquareMemberRelation_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareMemberRelationResponse recv_getSquareMemberRelation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareMemberRelation_result result = new getSquareMemberRelation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareMemberRelation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareMemberRelations(AsyncCallback callback, object state, GetSquareMemberRelationsRequest request)
    {
      return send_getSquareMemberRelations(callback, state, request);
    }

    public GetSquareMemberRelationsResponse End_getSquareMemberRelations(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareMemberRelations();
    }

    #endif

    public GetSquareMemberRelationsResponse getSquareMemberRelations(GetSquareMemberRelationsRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareMemberRelations(null, null, request);
      return End_getSquareMemberRelations(asyncResult);

      #else
      send_getSquareMemberRelations(request);
      return recv_getSquareMemberRelations();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareMemberRelations(AsyncCallback callback, object state, GetSquareMemberRelationsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareMemberRelations", TMessageType.Call, seqid_));
      getSquareMemberRelations_args args = new getSquareMemberRelations_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareMemberRelations(GetSquareMemberRelationsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareMemberRelations", TMessageType.Call, seqid_));
      getSquareMemberRelations_args args = new getSquareMemberRelations_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareMemberRelationsResponse recv_getSquareMemberRelations()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareMemberRelations_result result = new getSquareMemberRelations_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareMemberRelations failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareChatMembers(AsyncCallback callback, object state, GetSquareChatMembersRequest request)
    {
      return send_getSquareChatMembers(callback, state, request);
    }

    public GetSquareChatMembersResponse End_getSquareChatMembers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareChatMembers();
    }

    #endif

    public GetSquareChatMembersResponse getSquareChatMembers(GetSquareChatMembersRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareChatMembers(null, null, request);
      return End_getSquareChatMembers(asyncResult);

      #else
      send_getSquareChatMembers(request);
      return recv_getSquareChatMembers();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareChatMembers(AsyncCallback callback, object state, GetSquareChatMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareChatMembers", TMessageType.Call, seqid_));
      getSquareChatMembers_args args = new getSquareChatMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareChatMembers(GetSquareChatMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareChatMembers", TMessageType.Call, seqid_));
      getSquareChatMembers_args args = new getSquareChatMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareChatMembersResponse recv_getSquareChatMembers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareChatMembers_result result = new getSquareChatMembers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareChatMembers failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareChatStatus(AsyncCallback callback, object state, GetSquareChatStatusRequest request)
    {
      return send_getSquareChatStatus(callback, state, request);
    }

    public GetSquareChatStatusResponse End_getSquareChatStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareChatStatus();
    }

    #endif

    public GetSquareChatStatusResponse getSquareChatStatus(GetSquareChatStatusRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareChatStatus(null, null, request);
      return End_getSquareChatStatus(asyncResult);

      #else
      send_getSquareChatStatus(request);
      return recv_getSquareChatStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareChatStatus(AsyncCallback callback, object state, GetSquareChatStatusRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareChatStatus", TMessageType.Call, seqid_));
      getSquareChatStatus_args args = new getSquareChatStatus_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareChatStatus(GetSquareChatStatusRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareChatStatus", TMessageType.Call, seqid_));
      getSquareChatStatus_args args = new getSquareChatStatus_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareChatStatusResponse recv_getSquareChatStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareChatStatus_result result = new getSquareChatStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareChatStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquareChat(AsyncCallback callback, object state, GetSquareChatRequest request)
    {
      return send_getSquareChat(callback, state, request);
    }

    public GetSquareChatResponse End_getSquareChat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquareChat();
    }

    #endif

    public GetSquareChatResponse getSquareChat(GetSquareChatRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquareChat(null, null, request);
      return End_getSquareChat(asyncResult);

      #else
      send_getSquareChat(request);
      return recv_getSquareChat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquareChat(AsyncCallback callback, object state, GetSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareChat", TMessageType.Call, seqid_));
      getSquareChat_args args = new getSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquareChat(GetSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquareChat", TMessageType.Call, seqid_));
      getSquareChat_args args = new getSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareChatResponse recv_getSquareChat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquareChat_result result = new getSquareChat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquareChat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSquare(AsyncCallback callback, object state, GetSquareRequest request)
    {
      return send_getSquare(callback, state, request);
    }

    public GetSquareResponse End_getSquare(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSquare();
    }

    #endif

    public GetSquareResponse getSquare(GetSquareRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSquare(null, null, request);
      return End_getSquare(asyncResult);

      #else
      send_getSquare(request);
      return recv_getSquare();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSquare(AsyncCallback callback, object state, GetSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquare", TMessageType.Call, seqid_));
      getSquare_args args = new getSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSquare(GetSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getSquare", TMessageType.Call, seqid_));
      getSquare_args args = new getSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetSquareResponse recv_getSquare()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSquare_result result = new getSquare_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSquare failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getJoinedSquares(AsyncCallback callback, object state, GetJoinedSquaresRequest request)
    {
      return send_getJoinedSquares(callback, state, request);
    }

    public GetJoinedSquaresResponse End_getJoinedSquares(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getJoinedSquares();
    }

    #endif

    public GetJoinedSquaresResponse getJoinedSquares(GetJoinedSquaresRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getJoinedSquares(null, null, request);
      return End_getJoinedSquares(asyncResult);

      #else
      send_getJoinedSquares(request);
      return recv_getJoinedSquares();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getJoinedSquares(AsyncCallback callback, object state, GetJoinedSquaresRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinedSquares", TMessageType.Call, seqid_));
      getJoinedSquares_args args = new getJoinedSquares_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getJoinedSquares(GetJoinedSquaresRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinedSquares", TMessageType.Call, seqid_));
      getJoinedSquares_args args = new getJoinedSquares_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetJoinedSquaresResponse recv_getJoinedSquares()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getJoinedSquares_result result = new getJoinedSquares_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getJoinedSquares failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getJoinedSquareChats(AsyncCallback callback, object state, GetJoinedSquareChatsRequest request)
    {
      return send_getJoinedSquareChats(callback, state, request);
    }

    public GetJoinedSquareChatsResponse End_getJoinedSquareChats(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getJoinedSquareChats();
    }

    #endif

    public GetJoinedSquareChatsResponse getJoinedSquareChats(GetJoinedSquareChatsRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getJoinedSquareChats(null, null, request);
      return End_getJoinedSquareChats(asyncResult);

      #else
      send_getJoinedSquareChats(request);
      return recv_getJoinedSquareChats();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getJoinedSquareChats(AsyncCallback callback, object state, GetJoinedSquareChatsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinedSquareChats", TMessageType.Call, seqid_));
      getJoinedSquareChats_args args = new getJoinedSquareChats_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getJoinedSquareChats(GetJoinedSquareChatsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinedSquareChats", TMessageType.Call, seqid_));
      getJoinedSquareChats_args args = new getJoinedSquareChats_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetJoinedSquareChatsResponse recv_getJoinedSquareChats()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getJoinedSquareChats_result result = new getJoinedSquareChats_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getJoinedSquareChats failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_approveSquareMembers(AsyncCallback callback, object state, ApproveSquareMembersRequest request)
    {
      return send_approveSquareMembers(callback, state, request);
    }

    public ApproveSquareMembersResponse End_approveSquareMembers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_approveSquareMembers();
    }

    #endif

    public ApproveSquareMembersResponse approveSquareMembers(ApproveSquareMembersRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_approveSquareMembers(null, null, request);
      return End_approveSquareMembers(asyncResult);

      #else
      send_approveSquareMembers(request);
      return recv_approveSquareMembers();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_approveSquareMembers(AsyncCallback callback, object state, ApproveSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("approveSquareMembers", TMessageType.Call, seqid_));
      approveSquareMembers_args args = new approveSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_approveSquareMembers(ApproveSquareMembersRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("approveSquareMembers", TMessageType.Call, seqid_));
      approveSquareMembers_args args = new approveSquareMembers_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ApproveSquareMembersResponse recv_approveSquareMembers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      approveSquareMembers_result result = new approveSquareMembers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "approveSquareMembers failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createSquareChat(AsyncCallback callback, object state, CreateSquareChatRequest request)
    {
      return send_createSquareChat(callback, state, request);
    }

    public CreateSquareChatResponse End_createSquareChat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createSquareChat();
    }

    #endif

    public CreateSquareChatResponse createSquareChat(CreateSquareChatRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createSquareChat(null, null, request);
      return End_createSquareChat(asyncResult);

      #else
      send_createSquareChat(request);
      return recv_createSquareChat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createSquareChat(AsyncCallback callback, object state, CreateSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("createSquareChat", TMessageType.Call, seqid_));
      createSquareChat_args args = new createSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createSquareChat(CreateSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("createSquareChat", TMessageType.Call, seqid_));
      createSquareChat_args args = new createSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public CreateSquareChatResponse recv_createSquareChat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createSquareChat_result result = new createSquareChat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSquareChat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createSquare(AsyncCallback callback, object state, CreateSquareRequest request)
    {
      return send_createSquare(callback, state, request);
    }

    public CreateSquareResponse End_createSquare(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createSquare();
    }

    #endif

    public CreateSquareResponse createSquare(CreateSquareRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createSquare(null, null, request);
      return End_createSquare(asyncResult);

      #else
      send_createSquare(request);
      return recv_createSquare();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createSquare(AsyncCallback callback, object state, CreateSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("createSquare", TMessageType.Call, seqid_));
      createSquare_args args = new createSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createSquare(CreateSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("createSquare", TMessageType.Call, seqid_));
      createSquare_args args = new createSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public CreateSquareResponse recv_createSquare()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createSquare_result result = new createSquare_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSquare failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_deleteSquareChat(AsyncCallback callback, object state, DeleteSquareChatRequest request)
    {
      return send_deleteSquareChat(callback, state, request);
    }

    public DeleteSquareChatResponse End_deleteSquareChat(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteSquareChat();
    }

    #endif

    public DeleteSquareChatResponse deleteSquareChat(DeleteSquareChatRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_deleteSquareChat(null, null, request);
      return End_deleteSquareChat(asyncResult);

      #else
      send_deleteSquareChat(request);
      return recv_deleteSquareChat();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteSquareChat(AsyncCallback callback, object state, DeleteSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteSquareChat", TMessageType.Call, seqid_));
      deleteSquareChat_args args = new deleteSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_deleteSquareChat(DeleteSquareChatRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteSquareChat", TMessageType.Call, seqid_));
      deleteSquareChat_args args = new deleteSquareChat_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public DeleteSquareChatResponse recv_deleteSquareChat()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteSquareChat_result result = new deleteSquareChat_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteSquareChat failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_deleteSquare(AsyncCallback callback, object state, DeleteSquareRequest request)
    {
      return send_deleteSquare(callback, state, request);
    }

    public DeleteSquareResponse End_deleteSquare(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteSquare();
    }

    #endif

    public DeleteSquareResponse deleteSquare(DeleteSquareRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_deleteSquare(null, null, request);
      return End_deleteSquare(asyncResult);

      #else
      send_deleteSquare(request);
      return recv_deleteSquare();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteSquare(AsyncCallback callback, object state, DeleteSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteSquare", TMessageType.Call, seqid_));
      deleteSquare_args args = new deleteSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_deleteSquare(DeleteSquareRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("deleteSquare", TMessageType.Call, seqid_));
      deleteSquare_args args = new deleteSquare_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public DeleteSquareResponse recv_deleteSquare()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteSquare_result result = new deleteSquare_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteSquare failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_destroyMessage(AsyncCallback callback, object state, DestroyMessageRequest request)
    {
      return send_destroyMessage(callback, state, request);
    }

    public DestroyMessageResponse End_destroyMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_destroyMessage();
    }

    #endif

    public DestroyMessageResponse destroyMessage(DestroyMessageRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_destroyMessage(null, null, request);
      return End_destroyMessage(asyncResult);

      #else
      send_destroyMessage(request);
      return recv_destroyMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_destroyMessage(AsyncCallback callback, object state, DestroyMessageRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("destroyMessage", TMessageType.Call, seqid_));
      destroyMessage_args args = new destroyMessage_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_destroyMessage(DestroyMessageRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("destroyMessage", TMessageType.Call, seqid_));
      destroyMessage_args args = new destroyMessage_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public DestroyMessageResponse recv_destroyMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      destroyMessage_result result = new destroyMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "destroyMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getJoinableSquareChats(AsyncCallback callback, object state, GetJoinableSquareChatsRequest request)
    {
      return send_getJoinableSquareChats(callback, state, request);
    }

    public GetJoinableSquareChatsResponse End_getJoinableSquareChats(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getJoinableSquareChats();
    }

    #endif

    public GetJoinableSquareChatsResponse getJoinableSquareChats(GetJoinableSquareChatsRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getJoinableSquareChats(null, null, request);
      return End_getJoinableSquareChats(asyncResult);

      #else
      send_getJoinableSquareChats(request);
      return recv_getJoinableSquareChats();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getJoinableSquareChats(AsyncCallback callback, object state, GetJoinableSquareChatsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinableSquareChats", TMessageType.Call, seqid_));
      getJoinableSquareChats_args args = new getJoinableSquareChats_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getJoinableSquareChats(GetJoinableSquareChatsRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinableSquareChats", TMessageType.Call, seqid_));
      getJoinableSquareChats_args args = new getJoinableSquareChats_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetJoinableSquareChatsResponse recv_getJoinableSquareChats()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getJoinableSquareChats_result result = new getJoinableSquareChats_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getJoinableSquareChats failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getInvitationTicketUrl(AsyncCallback callback, object state, GetInvitationTicketUrlRequest request)
    {
      return send_getInvitationTicketUrl(callback, state, request);
    }

    public GetInvitationTicketUrlResponse End_getInvitationTicketUrl(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getInvitationTicketUrl();
    }

    #endif

    public GetInvitationTicketUrlResponse getInvitationTicketUrl(GetInvitationTicketUrlRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getInvitationTicketUrl(null, null, request);
      return End_getInvitationTicketUrl(asyncResult);

      #else
      send_getInvitationTicketUrl(request);
      return recv_getInvitationTicketUrl();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getInvitationTicketUrl(AsyncCallback callback, object state, GetInvitationTicketUrlRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getInvitationTicketUrl", TMessageType.Call, seqid_));
      getInvitationTicketUrl_args args = new getInvitationTicketUrl_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getInvitationTicketUrl(GetInvitationTicketUrlRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("getInvitationTicketUrl", TMessageType.Call, seqid_));
      getInvitationTicketUrl_args args = new getInvitationTicketUrl_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GetInvitationTicketUrlResponse recv_getInvitationTicketUrl()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getInvitationTicketUrl_result result = new getInvitationTicketUrl_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInvitationTicketUrl failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findSquareByInvitationTicket(AsyncCallback callback, object state, FindSquareByInvitationTicketRequest request)
    {
      return send_findSquareByInvitationTicket(callback, state, request);
    }

    public FindSquareByInvitationTicketResponse End_findSquareByInvitationTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findSquareByInvitationTicket();
    }

    #endif

    public FindSquareByInvitationTicketResponse findSquareByInvitationTicket(FindSquareByInvitationTicketRequest request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findSquareByInvitationTicket(null, null, request);
      return End_findSquareByInvitationTicket(asyncResult);

      #else
      send_findSquareByInvitationTicket(request);
      return recv_findSquareByInvitationTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findSquareByInvitationTicket(AsyncCallback callback, object state, FindSquareByInvitationTicketRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("findSquareByInvitationTicket", TMessageType.Call, seqid_));
      findSquareByInvitationTicket_args args = new findSquareByInvitationTicket_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findSquareByInvitationTicket(FindSquareByInvitationTicketRequest request)
    {
      oprot_.WriteMessageBegin(new TMessage("findSquareByInvitationTicket", TMessageType.Call, seqid_));
      findSquareByInvitationTicket_args args = new findSquareByInvitationTicket_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public FindSquareByInvitationTicketResponse recv_findSquareByInvitationTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findSquareByInvitationTicket_result result = new findSquareByInvitationTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findSquareByInvitationTicket failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getSquareChatAnnouncements"] = getSquareChatAnnouncements_Process;
      processMap_["deleteSquareChatAnnouncement"] = deleteSquareChatAnnouncement_Process;
      processMap_["createSquareChatAnnouncement"] = createSquareChatAnnouncement_Process;
      processMap_["getNoteStatus"] = getNoteStatus_Process;
      processMap_["getSquareStatus"] = getSquareStatus_Process;
      processMap_["reportSquareMember"] = reportSquareMember_Process;
      processMap_["reportSquareMessage"] = reportSquareMessage_Process;
      processMap_["reportSquareChat"] = reportSquareChat_Process;
      processMap_["reportSquare"] = reportSquare_Process;
      processMap_["updateSquareMemberRelation"] = updateSquareMemberRelation_Process;
      processMap_["updateSquareAuthority"] = updateSquareAuthority_Process;
      processMap_["updateSquareChatMember"] = updateSquareChatMember_Process;
      processMap_["updateSquareChat"] = updateSquareChat_Process;
      processMap_["refreshSubscriptions"] = refreshSubscriptions_Process;
      processMap_["removeSubscriptions"] = removeSubscriptions_Process;
      processMap_["rejectSquareMembers"] = rejectSquareMembers_Process;
      processMap_["updateSquareMembers"] = updateSquareMembers_Process;
      processMap_["updateSquareMember"] = updateSquareMember_Process;
      processMap_["updateSquareFeatureSet"] = updateSquareFeatureSet_Process;
      processMap_["getSquareFeatureSet"] = getSquareFeatureSet_Process;
      processMap_["searchSquares"] = searchSquares_Process;
      processMap_["updateSquare"] = updateSquare_Process;
      processMap_["getCategories"] = getCategories_Process;
      processMap_["searchSquareMembers"] = searchSquareMembers_Process;
      processMap_["fetchSquareChatEvents"] = fetchSquareChatEvents_Process;
      processMap_["fetchMyEvents"] = fetchMyEvents_Process;
      processMap_["markAsRead"] = markAsRead_Process;
      processMap_["getSquareAuthority"] = getSquareAuthority_Process;
      processMap_["sendMessage"] = sendMessage_Process;
      processMap_["leaveSquare"] = leaveSquare_Process;
      processMap_["leaveSquareChat"] = leaveSquareChat_Process;
      processMap_["joinSquareChat"] = joinSquareChat_Process;
      processMap_["joinSquare"] = joinSquare_Process;
      processMap_["inviteToSquare"] = inviteToSquare_Process;
      processMap_["inviteToSquareChat"] = inviteToSquareChat_Process;
      processMap_["getSquareMember"] = getSquareMember_Process;
      processMap_["getSquareMembers"] = getSquareMembers_Process;
      processMap_["getSquareMemberRelation"] = getSquareMemberRelation_Process;
      processMap_["getSquareMemberRelations"] = getSquareMemberRelations_Process;
      processMap_["getSquareChatMembers"] = getSquareChatMembers_Process;
      processMap_["getSquareChatStatus"] = getSquareChatStatus_Process;
      processMap_["getSquareChat"] = getSquareChat_Process;
      processMap_["getSquare"] = getSquare_Process;
      processMap_["getJoinedSquares"] = getJoinedSquares_Process;
      processMap_["getJoinedSquareChats"] = getJoinedSquareChats_Process;
      processMap_["approveSquareMembers"] = approveSquareMembers_Process;
      processMap_["createSquareChat"] = createSquareChat_Process;
      processMap_["createSquare"] = createSquare_Process;
      processMap_["deleteSquareChat"] = deleteSquareChat_Process;
      processMap_["deleteSquare"] = deleteSquare_Process;
      processMap_["destroyMessage"] = destroyMessage_Process;
      processMap_["getJoinableSquareChats"] = getJoinableSquareChats_Process;
      processMap_["getInvitationTicketUrl"] = getInvitationTicketUrl_Process;
      processMap_["findSquareByInvitationTicket"] = findSquareByInvitationTicket_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getSquareChatAnnouncements_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareChatAnnouncements_args args = new getSquareChatAnnouncements_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareChatAnnouncements_result result = new getSquareChatAnnouncements_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareChatAnnouncements(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareChatAnnouncements", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareChatAnnouncements", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteSquareChatAnnouncement_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteSquareChatAnnouncement_args args = new deleteSquareChatAnnouncement_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteSquareChatAnnouncement_result result = new deleteSquareChatAnnouncement_result();
      try
      {
        try
        {
          result.Success = iface_.deleteSquareChatAnnouncement(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("deleteSquareChatAnnouncement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteSquareChatAnnouncement", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createSquareChatAnnouncement_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createSquareChatAnnouncement_args args = new createSquareChatAnnouncement_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createSquareChatAnnouncement_result result = new createSquareChatAnnouncement_result();
      try
      {
        try
        {
          result.Success = iface_.createSquareChatAnnouncement(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createSquareChatAnnouncement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createSquareChatAnnouncement", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getNoteStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getNoteStatus_args args = new getNoteStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getNoteStatus_result result = new getNoteStatus_result();
      try
      {
        try
        {
          result.Success = iface_.getNoteStatus(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getNoteStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getNoteStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareStatus_args args = new getSquareStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareStatus_result result = new getSquareStatus_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareStatus(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportSquareMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportSquareMember_args args = new reportSquareMember_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportSquareMember_result result = new reportSquareMember_result();
      try
      {
        try
        {
          result.Success = iface_.reportSquareMember(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportSquareMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportSquareMember", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportSquareMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportSquareMessage_args args = new reportSquareMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportSquareMessage_result result = new reportSquareMessage_result();
      try
      {
        try
        {
          result.Success = iface_.reportSquareMessage(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportSquareMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportSquareMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportSquareChat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportSquareChat_args args = new reportSquareChat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportSquareChat_result result = new reportSquareChat_result();
      try
      {
        try
        {
          result.Success = iface_.reportSquareChat(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportSquareChat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportSquareChat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportSquare_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportSquare_args args = new reportSquare_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportSquare_result result = new reportSquare_result();
      try
      {
        try
        {
          result.Success = iface_.reportSquare(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportSquare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportSquare", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSquareMemberRelation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSquareMemberRelation_args args = new updateSquareMemberRelation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSquareMemberRelation_result result = new updateSquareMemberRelation_result();
      try
      {
        try
        {
          result.Success = iface_.updateSquareMemberRelation(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSquareMemberRelation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSquareMemberRelation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSquareAuthority_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSquareAuthority_args args = new updateSquareAuthority_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSquareAuthority_result result = new updateSquareAuthority_result();
      try
      {
        try
        {
          result.Success = iface_.updateSquareAuthority(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSquareAuthority", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSquareAuthority", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSquareChatMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSquareChatMember_args args = new updateSquareChatMember_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSquareChatMember_result result = new updateSquareChatMember_result();
      try
      {
        try
        {
          result.Success = iface_.updateSquareChatMember(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSquareChatMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSquareChatMember", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSquareChat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSquareChat_args args = new updateSquareChat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSquareChat_result result = new updateSquareChat_result();
      try
      {
        try
        {
          result.Success = iface_.updateSquareChat(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSquareChat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSquareChat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void refreshSubscriptions_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      refreshSubscriptions_args args = new refreshSubscriptions_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      refreshSubscriptions_result result = new refreshSubscriptions_result();
      try
      {
        try
        {
          result.Success = iface_.refreshSubscriptions(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("refreshSubscriptions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("refreshSubscriptions", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeSubscriptions_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeSubscriptions_args args = new removeSubscriptions_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeSubscriptions_result result = new removeSubscriptions_result();
      try
      {
        try
        {
          result.Success = iface_.removeSubscriptions(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeSubscriptions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeSubscriptions", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void rejectSquareMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      rejectSquareMembers_args args = new rejectSquareMembers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      rejectSquareMembers_result result = new rejectSquareMembers_result();
      try
      {
        try
        {
          result.Success = iface_.rejectSquareMembers(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("rejectSquareMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("rejectSquareMembers", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSquareMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSquareMembers_args args = new updateSquareMembers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSquareMembers_result result = new updateSquareMembers_result();
      try
      {
        try
        {
          result.Success = iface_.updateSquareMembers(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSquareMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSquareMembers", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSquareMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSquareMember_args args = new updateSquareMember_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSquareMember_result result = new updateSquareMember_result();
      try
      {
        try
        {
          result.Success = iface_.updateSquareMember(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSquareMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSquareMember", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSquareFeatureSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSquareFeatureSet_args args = new updateSquareFeatureSet_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSquareFeatureSet_result result = new updateSquareFeatureSet_result();
      try
      {
        try
        {
          result.Success = iface_.updateSquareFeatureSet(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSquareFeatureSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSquareFeatureSet", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareFeatureSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareFeatureSet_args args = new getSquareFeatureSet_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareFeatureSet_result result = new getSquareFeatureSet_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareFeatureSet(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareFeatureSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareFeatureSet", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void searchSquares_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      searchSquares_args args = new searchSquares_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      searchSquares_result result = new searchSquares_result();
      try
      {
        try
        {
          result.Success = iface_.searchSquares(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("searchSquares", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("searchSquares", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSquare_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSquare_args args = new updateSquare_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSquare_result result = new updateSquare_result();
      try
      {
        try
        {
          result.Success = iface_.updateSquare(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSquare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSquare", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCategories_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCategories_args args = new getCategories_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCategories_result result = new getCategories_result();
      try
      {
        try
        {
          result.Success = iface_.getCategories(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCategories", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCategories", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void searchSquareMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      searchSquareMembers_args args = new searchSquareMembers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      searchSquareMembers_result result = new searchSquareMembers_result();
      try
      {
        try
        {
          result.Success = iface_.searchSquareMembers(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("searchSquareMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("searchSquareMembers", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fetchSquareChatEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchSquareChatEvents_args args = new fetchSquareChatEvents_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchSquareChatEvents_result result = new fetchSquareChatEvents_result();
      try
      {
        try
        {
          result.Success = iface_.fetchSquareChatEvents(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchSquareChatEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchSquareChatEvents", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fetchMyEvents_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchMyEvents_args args = new fetchMyEvents_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchMyEvents_result result = new fetchMyEvents_result();
      try
      {
        try
        {
          result.Success = iface_.fetchMyEvents(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchMyEvents", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchMyEvents", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void markAsRead_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      markAsRead_args args = new markAsRead_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      markAsRead_result result = new markAsRead_result();
      try
      {
        try
        {
          result.Success = iface_.markAsRead(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("markAsRead", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("markAsRead", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareAuthority_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareAuthority_args args = new getSquareAuthority_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareAuthority_result result = new getSquareAuthority_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareAuthority(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareAuthority", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareAuthority", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessage_args args = new sendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessage_result result = new sendMessage_result();
      try
      {
        try
        {
          result.Success = iface_.sendMessage(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void leaveSquare_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      leaveSquare_args args = new leaveSquare_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      leaveSquare_result result = new leaveSquare_result();
      try
      {
        try
        {
          result.Success = iface_.leaveSquare(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("leaveSquare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("leaveSquare", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void leaveSquareChat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      leaveSquareChat_args args = new leaveSquareChat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      leaveSquareChat_result result = new leaveSquareChat_result();
      try
      {
        try
        {
          result.Success = iface_.leaveSquareChat(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("leaveSquareChat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("leaveSquareChat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void joinSquareChat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      joinSquareChat_args args = new joinSquareChat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      joinSquareChat_result result = new joinSquareChat_result();
      try
      {
        try
        {
          result.Success = iface_.joinSquareChat(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("joinSquareChat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("joinSquareChat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void joinSquare_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      joinSquare_args args = new joinSquare_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      joinSquare_result result = new joinSquare_result();
      try
      {
        try
        {
          result.Success = iface_.joinSquare(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("joinSquare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("joinSquare", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void inviteToSquare_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      inviteToSquare_args args = new inviteToSquare_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      inviteToSquare_result result = new inviteToSquare_result();
      try
      {
        try
        {
          result.Success = iface_.inviteToSquare(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteToSquare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("inviteToSquare", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void inviteToSquareChat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      inviteToSquareChat_args args = new inviteToSquareChat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      inviteToSquareChat_result result = new inviteToSquareChat_result();
      try
      {
        try
        {
          result.Success = iface_.inviteToSquareChat(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteToSquareChat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("inviteToSquareChat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareMember_args args = new getSquareMember_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareMember_result result = new getSquareMember_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareMember(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareMember", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareMembers_args args = new getSquareMembers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareMembers_result result = new getSquareMembers_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareMembers(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareMembers", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareMemberRelation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareMemberRelation_args args = new getSquareMemberRelation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareMemberRelation_result result = new getSquareMemberRelation_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareMemberRelation(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareMemberRelation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareMemberRelation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareMemberRelations_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareMemberRelations_args args = new getSquareMemberRelations_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareMemberRelations_result result = new getSquareMemberRelations_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareMemberRelations(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareMemberRelations", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareMemberRelations", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareChatMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareChatMembers_args args = new getSquareChatMembers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareChatMembers_result result = new getSquareChatMembers_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareChatMembers(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareChatMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareChatMembers", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareChatStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareChatStatus_args args = new getSquareChatStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareChatStatus_result result = new getSquareChatStatus_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareChatStatus(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareChatStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareChatStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquareChat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquareChat_args args = new getSquareChat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquareChat_result result = new getSquareChat_result();
      try
      {
        try
        {
          result.Success = iface_.getSquareChat(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquareChat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquareChat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSquare_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSquare_args args = new getSquare_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSquare_result result = new getSquare_result();
      try
      {
        try
        {
          result.Success = iface_.getSquare(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSquare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSquare", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getJoinedSquares_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getJoinedSquares_args args = new getJoinedSquares_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getJoinedSquares_result result = new getJoinedSquares_result();
      try
      {
        try
        {
          result.Success = iface_.getJoinedSquares(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getJoinedSquares", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getJoinedSquares", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getJoinedSquareChats_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getJoinedSquareChats_args args = new getJoinedSquareChats_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getJoinedSquareChats_result result = new getJoinedSquareChats_result();
      try
      {
        try
        {
          result.Success = iface_.getJoinedSquareChats(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getJoinedSquareChats", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getJoinedSquareChats", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void approveSquareMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      approveSquareMembers_args args = new approveSquareMembers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      approveSquareMembers_result result = new approveSquareMembers_result();
      try
      {
        try
        {
          result.Success = iface_.approveSquareMembers(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("approveSquareMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("approveSquareMembers", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createSquareChat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createSquareChat_args args = new createSquareChat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createSquareChat_result result = new createSquareChat_result();
      try
      {
        try
        {
          result.Success = iface_.createSquareChat(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createSquareChat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createSquareChat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createSquare_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createSquare_args args = new createSquare_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createSquare_result result = new createSquare_result();
      try
      {
        try
        {
          result.Success = iface_.createSquare(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createSquare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createSquare", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteSquareChat_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteSquareChat_args args = new deleteSquareChat_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteSquareChat_result result = new deleteSquareChat_result();
      try
      {
        try
        {
          result.Success = iface_.deleteSquareChat(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("deleteSquareChat", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteSquareChat", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteSquare_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteSquare_args args = new deleteSquare_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteSquare_result result = new deleteSquare_result();
      try
      {
        try
        {
          result.Success = iface_.deleteSquare(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("deleteSquare", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteSquare", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void destroyMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      destroyMessage_args args = new destroyMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      destroyMessage_result result = new destroyMessage_result();
      try
      {
        try
        {
          result.Success = iface_.destroyMessage(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("destroyMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("destroyMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getJoinableSquareChats_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getJoinableSquareChats_args args = new getJoinableSquareChats_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getJoinableSquareChats_result result = new getJoinableSquareChats_result();
      try
      {
        try
        {
          result.Success = iface_.getJoinableSquareChats(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getJoinableSquareChats", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getJoinableSquareChats", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getInvitationTicketUrl_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getInvitationTicketUrl_args args = new getInvitationTicketUrl_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getInvitationTicketUrl_result result = new getInvitationTicketUrl_result();
      try
      {
        try
        {
          result.Success = iface_.getInvitationTicketUrl(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getInvitationTicketUrl", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getInvitationTicketUrl", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findSquareByInvitationTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findSquareByInvitationTicket_args args = new findSquareByInvitationTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findSquareByInvitationTicket_result result = new findSquareByInvitationTicket_result();
      try
      {
        try
        {
          result.Success = iface_.findSquareByInvitationTicket(args.Request);
        }
        catch (SquareException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findSquareByInvitationTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findSquareByInvitationTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareChatAnnouncements_args : TBase
  {
    private GetSquareChatAnnouncementsRequest _request;

    public GetSquareChatAnnouncementsRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareChatAnnouncements_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareChatAnnouncementsRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareChatAnnouncements_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareChatAnnouncements_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareChatAnnouncements_result : TBase
  {
    private GetSquareChatAnnouncementsResponse _success;
    private SquareException _e;

    public GetSquareChatAnnouncementsResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareChatAnnouncements_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareChatAnnouncementsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareChatAnnouncements_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareChatAnnouncements_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSquareChatAnnouncement_args : TBase
  {
    private DeleteSquareChatAnnouncementRequest _request;

    public DeleteSquareChatAnnouncementRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public deleteSquareChatAnnouncement_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new DeleteSquareChatAnnouncementRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteSquareChatAnnouncement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteSquareChatAnnouncement_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSquareChatAnnouncement_result : TBase
  {
    private DeleteSquareChatAnnouncementResponse _success;
    private SquareException _e;

    public DeleteSquareChatAnnouncementResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public deleteSquareChatAnnouncement_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DeleteSquareChatAnnouncementResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteSquareChatAnnouncement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteSquareChatAnnouncement_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSquareChatAnnouncement_args : TBase
  {
    private CreateSquareChatAnnouncementRequest _request;

    public CreateSquareChatAnnouncementRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public createSquareChatAnnouncement_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new CreateSquareChatAnnouncementRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSquareChatAnnouncement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSquareChatAnnouncement_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSquareChatAnnouncement_result : TBase
  {
    private CreateSquareChatAnnouncementResponse _success;
    private SquareException _e;

    public CreateSquareChatAnnouncementResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createSquareChatAnnouncement_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CreateSquareChatAnnouncementResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSquareChatAnnouncement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSquareChatAnnouncement_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNoteStatus_args : TBase
  {
    private GetNoteStatusRequest _request;

    public GetNoteStatusRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getNoteStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetNoteStatusRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNoteStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNoteStatus_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNoteStatus_result : TBase
  {
    private GetNoteStatusResponse _success;
    private SquareException _e;

    public GetNoteStatusResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getNoteStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetNoteStatusResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNoteStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNoteStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareStatus_args : TBase
  {
    private GetSquareStatusRequest _request;

    public GetSquareStatusRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareStatusRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareStatus_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareStatus_result : TBase
  {
    private GetSquareStatusResponse _success;
    private SquareException _e;

    public GetSquareStatusResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareStatusResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSquareMember_args : TBase
  {
    private ReportSquareMemberRequest _request;

    public ReportSquareMemberRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public reportSquareMember_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new ReportSquareMemberRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSquareMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSquareMember_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSquareMember_result : TBase
  {
    private ReportSquareMemberResponse _success;
    private SquareException _e;

    public ReportSquareMemberResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reportSquareMember_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReportSquareMemberResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSquareMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSquareMember_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSquareMessage_args : TBase
  {
    private ReportSquareMessageRequest _request;

    public ReportSquareMessageRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public reportSquareMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new ReportSquareMessageRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSquareMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSquareMessage_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSquareMessage_result : TBase
  {
    private ReportSquareMessageResponse _success;
    private SquareException _e;

    public ReportSquareMessageResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reportSquareMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReportSquareMessageResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSquareMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSquareMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSquareChat_args : TBase
  {
    private ReportSquareChatRequest _request;

    public ReportSquareChatRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public reportSquareChat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new ReportSquareChatRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSquareChat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSquareChat_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSquareChat_result : TBase
  {
    private ReportSquareChatResponse _success;
    private SquareException _e;

    public ReportSquareChatResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reportSquareChat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReportSquareChatResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSquareChat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSquareChat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSquare_args : TBase
  {
    private ReportSquareRequest _request;

    public ReportSquareRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public reportSquare_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new ReportSquareRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSquare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSquare_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSquare_result : TBase
  {
    private ReportSquareResponse _success;
    private SquareException _e;

    public ReportSquareResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reportSquare_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ReportSquareResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSquare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSquare_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareMemberRelation_args : TBase
  {
    private UpdateSquareMemberRelationRequest _request;

    public UpdateSquareMemberRelationRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public updateSquareMemberRelation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new UpdateSquareMemberRelationRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareMemberRelation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareMemberRelation_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareMemberRelation_result : TBase
  {
    private UpdateSquareMemberRelationResponse _success;
    private SquareException _e;

    public UpdateSquareMemberRelationResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSquareMemberRelation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpdateSquareMemberRelationResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareMemberRelation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareMemberRelation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareAuthority_args : TBase
  {
    private UpdateSquareAuthorityRequest _request;

    public UpdateSquareAuthorityRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public updateSquareAuthority_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new UpdateSquareAuthorityRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareAuthority_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareAuthority_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareAuthority_result : TBase
  {
    private UpdateSquareAuthorityResponse _success;
    private SquareException _e;

    public UpdateSquareAuthorityResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSquareAuthority_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpdateSquareAuthorityResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareAuthority_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareAuthority_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareChatMember_args : TBase
  {
    private UpdateSquareChatMemberRequest _request;

    public UpdateSquareChatMemberRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public updateSquareChatMember_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new UpdateSquareChatMemberRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareChatMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareChatMember_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareChatMember_result : TBase
  {
    private UpdateSquareChatMemberResponse _success;
    private SquareException _e;

    public UpdateSquareChatMemberResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSquareChatMember_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpdateSquareChatMemberResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareChatMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareChatMember_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareChat_args : TBase
  {
    private UpdateSquareChatRequest _request;

    public UpdateSquareChatRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public updateSquareChat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new UpdateSquareChatRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareChat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareChat_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareChat_result : TBase
  {
    private UpdateSquareChatResponse _success;
    private SquareException _e;

    public UpdateSquareChatResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSquareChat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpdateSquareChatResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareChat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareChat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class refreshSubscriptions_args : TBase
  {
    private RefreshSubscriptionsRequest _request;

    public RefreshSubscriptionsRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public refreshSubscriptions_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new RefreshSubscriptionsRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("refreshSubscriptions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("refreshSubscriptions_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class refreshSubscriptions_result : TBase
  {
    private RefreshSubscriptionsResponse _success;
    private SquareException _e;

    public RefreshSubscriptionsResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public refreshSubscriptions_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RefreshSubscriptionsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("refreshSubscriptions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("refreshSubscriptions_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeSubscriptions_args : TBase
  {
    private RemoveSubscriptionsRequest _request;

    public RemoveSubscriptionsRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public removeSubscriptions_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new RemoveSubscriptionsRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeSubscriptions_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeSubscriptions_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeSubscriptions_result : TBase
  {
    private RemoveSubscriptionsResponse _success;
    private SquareException _e;

    public RemoveSubscriptionsResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public removeSubscriptions_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RemoveSubscriptionsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeSubscriptions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeSubscriptions_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rejectSquareMembers_args : TBase
  {
    private RejectSquareMembersRequest _request;

    public RejectSquareMembersRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public rejectSquareMembers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new RejectSquareMembersRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rejectSquareMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rejectSquareMembers_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rejectSquareMembers_result : TBase
  {
    private RejectSquareMembersResponse _success;
    private SquareException _e;

    public RejectSquareMembersResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public rejectSquareMembers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RejectSquareMembersResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rejectSquareMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rejectSquareMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareMembers_args : TBase
  {
    private UpdateSquareMembersRequest _request;

    public UpdateSquareMembersRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public updateSquareMembers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new UpdateSquareMembersRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareMembers_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareMembers_result : TBase
  {
    private UpdateSquareMembersResponse _success;
    private SquareException _e;

    public UpdateSquareMembersResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSquareMembers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpdateSquareMembersResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareMember_args : TBase
  {
    private UpdateSquareMemberRequest _request;

    public UpdateSquareMemberRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public updateSquareMember_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new UpdateSquareMemberRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareMember_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareMember_result : TBase
  {
    private UpdateSquareMemberResponse _success;
    private SquareException _e;

    public UpdateSquareMemberResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSquareMember_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpdateSquareMemberResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareMember_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareFeatureSet_args : TBase
  {
    private UpdateSquareFeatureSetRequest _request;

    public UpdateSquareFeatureSetRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public updateSquareFeatureSet_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new UpdateSquareFeatureSetRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareFeatureSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareFeatureSet_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquareFeatureSet_result : TBase
  {
    private UpdateSquareFeatureSetResponse _success;
    private SquareException _e;

    public UpdateSquareFeatureSetResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSquareFeatureSet_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpdateSquareFeatureSetResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquareFeatureSet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquareFeatureSet_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareFeatureSet_args : TBase
  {
    private GetSquareFeatureSetRequest _request;

    public GetSquareFeatureSetRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareFeatureSet_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareFeatureSetRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareFeatureSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareFeatureSet_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareFeatureSet_result : TBase
  {
    private GetSquareFeatureSetResponse _success;
    private SquareException _e;

    public GetSquareFeatureSetResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareFeatureSet_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareFeatureSetResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareFeatureSet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareFeatureSet_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class searchSquares_args : TBase
  {
    private SearchSquaresRequest _request;

    public SearchSquaresRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public searchSquares_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new SearchSquaresRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("searchSquares_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("searchSquares_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class searchSquares_result : TBase
  {
    private SearchSquaresResponse _success;
    private SquareException _e;

    public SearchSquaresResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public searchSquares_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SearchSquaresResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("searchSquares_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("searchSquares_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquare_args : TBase
  {
    private UpdateSquareRequest _request;

    public UpdateSquareRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public updateSquare_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new UpdateSquareRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquare_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSquare_result : TBase
  {
    private UpdateSquareResponse _success;
    private SquareException _e;

    public UpdateSquareResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSquare_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UpdateSquareResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSquare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSquare_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCategories_args : TBase
  {
    private GetSquareCategoriesRequest _request;

    public GetSquareCategoriesRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getCategories_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareCategoriesRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCategories_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCategories_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCategories_result : TBase
  {
    private GetSquareCategoriesResponse _success;
    private SquareException _e;

    public GetSquareCategoriesResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCategories_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareCategoriesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCategories_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCategories_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class searchSquareMembers_args : TBase
  {
    private SearchSquareMembersRequest _request;

    public SearchSquareMembersRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public searchSquareMembers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new SearchSquareMembersRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("searchSquareMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("searchSquareMembers_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class searchSquareMembers_result : TBase
  {
    private SearchSquareMembersResponse _success;
    private SquareException _e;

    public SearchSquareMembersResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public searchSquareMembers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SearchSquareMembersResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("searchSquareMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("searchSquareMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchSquareChatEvents_args : TBase
  {
    private FetchSquareChatEventsRequest _request;

    public FetchSquareChatEventsRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public fetchSquareChatEvents_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new FetchSquareChatEventsRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchSquareChatEvents_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchSquareChatEvents_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchSquareChatEvents_result : TBase
  {
    private FetchSquareChatEventsResponse _success;
    private SquareException _e;

    public FetchSquareChatEventsResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public fetchSquareChatEvents_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FetchSquareChatEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchSquareChatEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchSquareChatEvents_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchMyEvents_args : TBase
  {
    private FetchMyEventsRequest _request;

    public FetchMyEventsRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public fetchMyEvents_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new FetchMyEventsRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchMyEvents_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchMyEvents_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchMyEvents_result : TBase
  {
    private FetchMyEventsResponse _success;
    private SquareException _e;

    public FetchMyEventsResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public fetchMyEvents_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FetchMyEventsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchMyEvents_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchMyEvents_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class markAsRead_args : TBase
  {
    private MarkAsReadRequest _request;

    public MarkAsReadRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public markAsRead_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new MarkAsReadRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("markAsRead_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("markAsRead_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class markAsRead_result : TBase
  {
    private MarkAsReadResponse _success;
    private SquareException _e;

    public MarkAsReadResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public markAsRead_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MarkAsReadResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("markAsRead_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("markAsRead_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareAuthority_args : TBase
  {
    private GetSquareAuthorityRequest _request;

    public GetSquareAuthorityRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareAuthority_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareAuthorityRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareAuthority_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareAuthority_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareAuthority_result : TBase
  {
    private GetSquareAuthorityResponse _success;
    private SquareException _e;

    public GetSquareAuthorityResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareAuthority_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareAuthorityResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareAuthority_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareAuthority_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessage_args : TBase
  {
    private SendMessageRequest _request;

    public SendMessageRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public sendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new SendMessageRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessage_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessage_result : TBase
  {
    private SendMessageResponse _success;
    private SquareException _e;

    public SendMessageResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SendMessageResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class leaveSquare_args : TBase
  {
    private LeaveSquareRequest _request;

    public LeaveSquareRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public leaveSquare_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new LeaveSquareRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("leaveSquare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("leaveSquare_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class leaveSquare_result : TBase
  {
    private LeaveSquareResponse _success;
    private SquareException _e;

    public LeaveSquareResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public leaveSquare_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LeaveSquareResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("leaveSquare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("leaveSquare_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class leaveSquareChat_args : TBase
  {
    private LeaveSquareChatRequest _request;

    public LeaveSquareChatRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public leaveSquareChat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new LeaveSquareChatRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("leaveSquareChat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("leaveSquareChat_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class leaveSquareChat_result : TBase
  {
    private LeaveSquareChatResponse _success;
    private SquareException _e;

    public LeaveSquareChatResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public leaveSquareChat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LeaveSquareChatResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("leaveSquareChat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("leaveSquareChat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class joinSquareChat_args : TBase
  {
    private JoinSquareChatRequest _request;

    public JoinSquareChatRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public joinSquareChat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new JoinSquareChatRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("joinSquareChat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("joinSquareChat_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class joinSquareChat_result : TBase
  {
    private JoinSquareChatResponse _success;
    private SquareException _e;

    public JoinSquareChatResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public joinSquareChat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new JoinSquareChatResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("joinSquareChat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("joinSquareChat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class joinSquare_args : TBase
  {
    private JoinSquareRequest _request;

    public JoinSquareRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public joinSquare_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new JoinSquareRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("joinSquare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("joinSquare_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class joinSquare_result : TBase
  {
    private JoinSquareResponse _success;
    private SquareException _e;

    public JoinSquareResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public joinSquare_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new JoinSquareResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("joinSquare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("joinSquare_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteToSquare_args : TBase
  {
    private InviteToSquareRequest _request;

    public InviteToSquareRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public inviteToSquare_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new InviteToSquareRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteToSquare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteToSquare_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteToSquare_result : TBase
  {
    private InviteToSquareResponse _success;
    private SquareException _e;

    public InviteToSquareResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public inviteToSquare_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new InviteToSquareResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteToSquare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteToSquare_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteToSquareChat_args : TBase
  {
    private InviteToSquareChatRequest _request;

    public InviteToSquareChatRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public inviteToSquareChat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new InviteToSquareChatRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteToSquareChat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteToSquareChat_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteToSquareChat_result : TBase
  {
    private InviteToSquareChatResponse _success;
    private SquareException _e;

    public InviteToSquareChatResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public inviteToSquareChat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new InviteToSquareChatResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteToSquareChat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteToSquareChat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareMember_args : TBase
  {
    private GetSquareMemberRequest _request;

    public GetSquareMemberRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareMember_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareMemberRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareMember_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareMember_result : TBase
  {
    private GetSquareMemberResponse _success;
    private SquareException _e;

    public GetSquareMemberResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareMember_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareMemberResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareMember_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareMembers_args : TBase
  {
    private GetSquareMembersRequest _request;

    public GetSquareMembersRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareMembers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareMembersRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareMembers_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareMembers_result : TBase
  {
    private GetSquareMembersResponse _success;
    private SquareException _e;

    public GetSquareMembersResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareMembers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareMembersResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareMemberRelation_args : TBase
  {
    private GetSquareMemberRelationRequest _request;

    public GetSquareMemberRelationRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareMemberRelation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareMemberRelationRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareMemberRelation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareMemberRelation_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareMemberRelation_result : TBase
  {
    private GetSquareMemberRelationResponse _success;
    private SquareException _e;

    public GetSquareMemberRelationResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareMemberRelation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareMemberRelationResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareMemberRelation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareMemberRelation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareMemberRelations_args : TBase
  {
    private GetSquareMemberRelationsRequest _request;

    public GetSquareMemberRelationsRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareMemberRelations_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareMemberRelationsRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareMemberRelations_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareMemberRelations_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareMemberRelations_result : TBase
  {
    private GetSquareMemberRelationsResponse _success;
    private SquareException _e;

    public GetSquareMemberRelationsResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareMemberRelations_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareMemberRelationsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareMemberRelations_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareMemberRelations_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareChatMembers_args : TBase
  {
    private GetSquareChatMembersRequest _request;

    public GetSquareChatMembersRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareChatMembers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareChatMembersRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareChatMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareChatMembers_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareChatMembers_result : TBase
  {
    private GetSquareChatMembersResponse _success;
    private SquareException _e;

    public GetSquareChatMembersResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareChatMembers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareChatMembersResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareChatMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareChatMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareChatStatus_args : TBase
  {
    private GetSquareChatStatusRequest _request;

    public GetSquareChatStatusRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareChatStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareChatStatusRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareChatStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareChatStatus_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareChatStatus_result : TBase
  {
    private GetSquareChatStatusResponse _success;
    private SquareException _e;

    public GetSquareChatStatusResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareChatStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareChatStatusResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareChatStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareChatStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareChat_args : TBase
  {
    private GetSquareChatRequest _request;

    public GetSquareChatRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquareChat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareChatRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareChat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareChat_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquareChat_result : TBase
  {
    private GetSquareChatResponse _success;
    private SquareException _e;

    public GetSquareChatResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquareChat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareChatResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquareChat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquareChat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquare_args : TBase
  {
    private GetSquareRequest _request;

    public GetSquareRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getSquare_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetSquareRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquare_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSquare_result : TBase
  {
    private GetSquareResponse _success;
    private SquareException _e;

    public GetSquareResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSquare_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetSquareResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSquare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSquare_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinedSquares_args : TBase
  {
    private GetJoinedSquaresRequest _request;

    public GetJoinedSquaresRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getJoinedSquares_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetJoinedSquaresRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinedSquares_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinedSquares_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinedSquares_result : TBase
  {
    private GetJoinedSquaresResponse _success;
    private SquareException _e;

    public GetJoinedSquaresResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getJoinedSquares_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetJoinedSquaresResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinedSquares_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinedSquares_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinedSquareChats_args : TBase
  {
    private GetJoinedSquareChatsRequest _request;

    public GetJoinedSquareChatsRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getJoinedSquareChats_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetJoinedSquareChatsRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinedSquareChats_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinedSquareChats_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinedSquareChats_result : TBase
  {
    private GetJoinedSquareChatsResponse _success;
    private SquareException _e;

    public GetJoinedSquareChatsResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getJoinedSquareChats_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetJoinedSquareChatsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinedSquareChats_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinedSquareChats_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class approveSquareMembers_args : TBase
  {
    private ApproveSquareMembersRequest _request;

    public ApproveSquareMembersRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public approveSquareMembers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new ApproveSquareMembersRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("approveSquareMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("approveSquareMembers_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class approveSquareMembers_result : TBase
  {
    private ApproveSquareMembersResponse _success;
    private SquareException _e;

    public ApproveSquareMembersResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public approveSquareMembers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ApproveSquareMembersResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("approveSquareMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("approveSquareMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSquareChat_args : TBase
  {
    private CreateSquareChatRequest _request;

    public CreateSquareChatRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public createSquareChat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new CreateSquareChatRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSquareChat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSquareChat_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSquareChat_result : TBase
  {
    private CreateSquareChatResponse _success;
    private SquareException _e;

    public CreateSquareChatResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createSquareChat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CreateSquareChatResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSquareChat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSquareChat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSquare_args : TBase
  {
    private CreateSquareRequest _request;

    public CreateSquareRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public createSquare_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new CreateSquareRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSquare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSquare_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSquare_result : TBase
  {
    private CreateSquareResponse _success;
    private SquareException _e;

    public CreateSquareResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createSquare_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CreateSquareResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSquare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSquare_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSquareChat_args : TBase
  {
    private DeleteSquareChatRequest _request;

    public DeleteSquareChatRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public deleteSquareChat_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new DeleteSquareChatRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteSquareChat_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteSquareChat_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSquareChat_result : TBase
  {
    private DeleteSquareChatResponse _success;
    private SquareException _e;

    public DeleteSquareChatResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public deleteSquareChat_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DeleteSquareChatResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteSquareChat_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteSquareChat_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSquare_args : TBase
  {
    private DeleteSquareRequest _request;

    public DeleteSquareRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public deleteSquare_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new DeleteSquareRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteSquare_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteSquare_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSquare_result : TBase
  {
    private DeleteSquareResponse _success;
    private SquareException _e;

    public DeleteSquareResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public deleteSquare_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DeleteSquareResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteSquare_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteSquare_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class destroyMessage_args : TBase
  {
    private DestroyMessageRequest _request;

    public DestroyMessageRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public destroyMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new DestroyMessageRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("destroyMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("destroyMessage_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class destroyMessage_result : TBase
  {
    private DestroyMessageResponse _success;
    private SquareException _e;

    public DestroyMessageResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public destroyMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new DestroyMessageResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("destroyMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("destroyMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinableSquareChats_args : TBase
  {
    private GetJoinableSquareChatsRequest _request;

    public GetJoinableSquareChatsRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getJoinableSquareChats_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetJoinableSquareChatsRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinableSquareChats_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinableSquareChats_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinableSquareChats_result : TBase
  {
    private GetJoinableSquareChatsResponse _success;
    private SquareException _e;

    public GetJoinableSquareChatsResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getJoinableSquareChats_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetJoinableSquareChatsResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinableSquareChats_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinableSquareChats_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getInvitationTicketUrl_args : TBase
  {
    private GetInvitationTicketUrlRequest _request;

    public GetInvitationTicketUrlRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getInvitationTicketUrl_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new GetInvitationTicketUrlRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getInvitationTicketUrl_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getInvitationTicketUrl_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getInvitationTicketUrl_result : TBase
  {
    private GetInvitationTicketUrlResponse _success;
    private SquareException _e;

    public GetInvitationTicketUrlResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getInvitationTicketUrl_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GetInvitationTicketUrlResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getInvitationTicketUrl_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getInvitationTicketUrl_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findSquareByInvitationTicket_args : TBase
  {
    private FindSquareByInvitationTicketRequest _request;

    public FindSquareByInvitationTicketRequest Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public findSquareByInvitationTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new FindSquareByInvitationTicketRequest();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findSquareByInvitationTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findSquareByInvitationTicket_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findSquareByInvitationTicket_result : TBase
  {
    private FindSquareByInvitationTicketResponse _success;
    private SquareException _e;

    public FindSquareByInvitationTicketResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public SquareException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findSquareByInvitationTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FindSquareByInvitationTicketResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new SquareException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findSquareByInvitationTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findSquareByInvitationTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
