/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class YellowpageItem : TBase
{
  private string _id;
  private string _mid;
  private string _name;
  private string _address;
  private double _latitude;
  private double _longitude;
  private double _distance;
  private bool _canFreeCall;
  private int _k;
  private string _phoneNumber;
  private int _cat;
  private int _categoryIcon;
  private List<AdditionalInfoItem> _additionalInfo;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Address
  {
    get
    {
      return _address;
    }
    set
    {
      __isset.address = true;
      this._address = value;
    }
  }

  public double Latitude
  {
    get
    {
      return _latitude;
    }
    set
    {
      __isset.latitude = true;
      this._latitude = value;
    }
  }

  public double Longitude
  {
    get
    {
      return _longitude;
    }
    set
    {
      __isset.longitude = true;
      this._longitude = value;
    }
  }

  public double Distance
  {
    get
    {
      return _distance;
    }
    set
    {
      __isset.distance = true;
      this._distance = value;
    }
  }

  public bool CanFreeCall
  {
    get
    {
      return _canFreeCall;
    }
    set
    {
      __isset.canFreeCall = true;
      this._canFreeCall = value;
    }
  }

  public int K
  {
    get
    {
      return _k;
    }
    set
    {
      __isset.k = true;
      this._k = value;
    }
  }

  public string PhoneNumber
  {
    get
    {
      return _phoneNumber;
    }
    set
    {
      __isset.phoneNumber = true;
      this._phoneNumber = value;
    }
  }

  public int Cat
  {
    get
    {
      return _cat;
    }
    set
    {
      __isset.cat = true;
      this._cat = value;
    }
  }

  public int CategoryIcon
  {
    get
    {
      return _categoryIcon;
    }
    set
    {
      __isset.categoryIcon = true;
      this._categoryIcon = value;
    }
  }

  public List<AdditionalInfoItem> AdditionalInfo
  {
    get
    {
      return _additionalInfo;
    }
    set
    {
      __isset.additionalInfo = true;
      this._additionalInfo = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool mid;
    public bool name;
    public bool address;
    public bool latitude;
    public bool longitude;
    public bool distance;
    public bool canFreeCall;
    public bool k;
    public bool phoneNumber;
    public bool cat;
    public bool categoryIcon;
    public bool additionalInfo;
  }

  public YellowpageItem() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Mid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Address = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Latitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Double) {
              Longitude = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Double) {
              Distance = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Bool) {
              CanFreeCall = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              K = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              PhoneNumber = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              Cat = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I32) {
              CategoryIcon = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                AdditionalInfo = new List<AdditionalInfoItem>();
                TList _list46 = iprot.ReadListBegin();
                for( int _i47 = 0; _i47 < _list46.Count; ++_i47)
                {
                  AdditionalInfoItem _elem48;
                  _elem48 = new AdditionalInfoItem();
                  _elem48.Read(iprot);
                  AdditionalInfo.Add(_elem48);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("YellowpageItem");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Mid != null && __isset.mid) {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mid);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Address != null && __isset.address) {
        field.Name = "address";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Address);
        oprot.WriteFieldEnd();
      }
      if (__isset.latitude) {
        field.Name = "latitude";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Latitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.longitude) {
        field.Name = "longitude";
        field.Type = TType.Double;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Longitude);
        oprot.WriteFieldEnd();
      }
      if (__isset.distance) {
        field.Name = "distance";
        field.Type = TType.Double;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Distance);
        oprot.WriteFieldEnd();
      }
      if (__isset.canFreeCall) {
        field.Name = "canFreeCall";
        field.Type = TType.Bool;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CanFreeCall);
        oprot.WriteFieldEnd();
      }
      if (__isset.k) {
        field.Name = "k";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(K);
        oprot.WriteFieldEnd();
      }
      if (PhoneNumber != null && __isset.phoneNumber) {
        field.Name = "phoneNumber";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PhoneNumber);
        oprot.WriteFieldEnd();
      }
      if (__isset.cat) {
        field.Name = "cat";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Cat);
        oprot.WriteFieldEnd();
      }
      if (__isset.categoryIcon) {
        field.Name = "categoryIcon";
        field.Type = TType.I32;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CategoryIcon);
        oprot.WriteFieldEnd();
      }
      if (AdditionalInfo != null && __isset.additionalInfo) {
        field.Name = "additionalInfo";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, AdditionalInfo.Count));
          foreach (AdditionalInfoItem _iter49 in AdditionalInfo)
          {
            _iter49.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("YellowpageItem(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (Mid != null && __isset.mid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Mid: ");
      __sb.Append(Mid);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (Address != null && __isset.address) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Address: ");
      __sb.Append(Address);
    }
    if (__isset.latitude) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Latitude: ");
      __sb.Append(Latitude);
    }
    if (__isset.longitude) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Longitude: ");
      __sb.Append(Longitude);
    }
    if (__isset.distance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Distance: ");
      __sb.Append(Distance);
    }
    if (__isset.canFreeCall) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CanFreeCall: ");
      __sb.Append(CanFreeCall);
    }
    if (__isset.k) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("K: ");
      __sb.Append(K);
    }
    if (PhoneNumber != null && __isset.phoneNumber) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PhoneNumber: ");
      __sb.Append(PhoneNumber);
    }
    if (__isset.cat) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Cat: ");
      __sb.Append(Cat);
    }
    if (__isset.categoryIcon) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CategoryIcon: ");
      __sb.Append(CategoryIcon);
    }
    if (AdditionalInfo != null && __isset.additionalInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AdditionalInfo: ");
      __sb.Append(AdditionalInfo);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

