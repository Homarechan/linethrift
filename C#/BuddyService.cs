/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class BuddyService {
  public interface ISync {
    List<BuddySearchResult> findBuddyContactsByQuery(string language, string country, string query, int fromIndex, int count, BuddySearchRequestSource requestSource);
    List<Contact> getBuddyContacts(string language, string country, string classification, int fromIndex, int count);
    BuddyDetail getBuddyDetail(string buddyMid);
    BuddyOnAir getBuddyOnAir(string buddyMid);
    List<string> getCountriesHavingBuddy();
    Dictionary<string, long> getNewlyReleasedBuddyIds(string country);
    BuddyBanner getPopularBuddyBanner(string language, string country, ApplicationType applicationType, string resourceSpecification);
    List<BuddyList> getPopularBuddyLists(string language, string country);
    List<Contact> getPromotedBuddyContacts(string language, string country);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_findBuddyContactsByQuery(AsyncCallback callback, object state, string language, string country, string query, int fromIndex, int count, BuddySearchRequestSource requestSource);
    List<BuddySearchResult> End_findBuddyContactsByQuery(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getBuddyContacts(AsyncCallback callback, object state, string language, string country, string classification, int fromIndex, int count);
    List<Contact> End_getBuddyContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getBuddyDetail(AsyncCallback callback, object state, string buddyMid);
    BuddyDetail End_getBuddyDetail(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getBuddyOnAir(AsyncCallback callback, object state, string buddyMid);
    BuddyOnAir End_getBuddyOnAir(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCountriesHavingBuddy(AsyncCallback callback, object state);
    List<string> End_getCountriesHavingBuddy(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getNewlyReleasedBuddyIds(AsyncCallback callback, object state, string country);
    Dictionary<string, long> End_getNewlyReleasedBuddyIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPopularBuddyBanner(AsyncCallback callback, object state, string language, string country, ApplicationType applicationType, string resourceSpecification);
    BuddyBanner End_getPopularBuddyBanner(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPopularBuddyLists(AsyncCallback callback, object state, string language, string country);
    List<BuddyList> End_getPopularBuddyLists(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPromotedBuddyContacts(AsyncCallback callback, object state, string language, string country);
    List<Contact> End_getPromotedBuddyContacts(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_findBuddyContactsByQuery(AsyncCallback callback, object state, string language, string country, string query, int fromIndex, int count, BuddySearchRequestSource requestSource)
    {
      return send_findBuddyContactsByQuery(callback, state, language, country, query, fromIndex, count, requestSource);
    }

    public List<BuddySearchResult> End_findBuddyContactsByQuery(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findBuddyContactsByQuery();
    }

    #endif

    public List<BuddySearchResult> findBuddyContactsByQuery(string language, string country, string query, int fromIndex, int count, BuddySearchRequestSource requestSource)
    {
      #if !SILVERLIGHT
      send_findBuddyContactsByQuery(language, country, query, fromIndex, count, requestSource);
      return recv_findBuddyContactsByQuery();

      #else
      var asyncResult = Begin_findBuddyContactsByQuery(null, null, language, country, query, fromIndex, count, requestSource);
      return End_findBuddyContactsByQuery(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findBuddyContactsByQuery(AsyncCallback callback, object state, string language, string country, string query, int fromIndex, int count, BuddySearchRequestSource requestSource)
    #else
    public void send_findBuddyContactsByQuery(string language, string country, string query, int fromIndex, int count, BuddySearchRequestSource requestSource)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("findBuddyContactsByQuery", TMessageType.Call, seqid_));
      findBuddyContactsByQuery_args args = new findBuddyContactsByQuery_args();
      args.Language = language;
      args.Country = country;
      args.Query = query;
      args.FromIndex = fromIndex;
      args.Count = count;
      args.RequestSource = requestSource;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<BuddySearchResult> recv_findBuddyContactsByQuery()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findBuddyContactsByQuery_result result = new findBuddyContactsByQuery_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findBuddyContactsByQuery failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getBuddyContacts(AsyncCallback callback, object state, string language, string country, string classification, int fromIndex, int count)
    {
      return send_getBuddyContacts(callback, state, language, country, classification, fromIndex, count);
    }

    public List<Contact> End_getBuddyContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getBuddyContacts();
    }

    #endif

    public List<Contact> getBuddyContacts(string language, string country, string classification, int fromIndex, int count)
    {
      #if !SILVERLIGHT
      send_getBuddyContacts(language, country, classification, fromIndex, count);
      return recv_getBuddyContacts();

      #else
      var asyncResult = Begin_getBuddyContacts(null, null, language, country, classification, fromIndex, count);
      return End_getBuddyContacts(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getBuddyContacts(AsyncCallback callback, object state, string language, string country, string classification, int fromIndex, int count)
    #else
    public void send_getBuddyContacts(string language, string country, string classification, int fromIndex, int count)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getBuddyContacts", TMessageType.Call, seqid_));
      getBuddyContacts_args args = new getBuddyContacts_args();
      args.Language = language;
      args.Country = country;
      args.Classification = classification;
      args.FromIndex = fromIndex;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<Contact> recv_getBuddyContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBuddyContacts_result result = new getBuddyContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getBuddyDetail(AsyncCallback callback, object state, string buddyMid)
    {
      return send_getBuddyDetail(callback, state, buddyMid);
    }

    public BuddyDetail End_getBuddyDetail(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getBuddyDetail();
    }

    #endif

    public BuddyDetail getBuddyDetail(string buddyMid)
    {
      #if !SILVERLIGHT
      send_getBuddyDetail(buddyMid);
      return recv_getBuddyDetail();

      #else
      var asyncResult = Begin_getBuddyDetail(null, null, buddyMid);
      return End_getBuddyDetail(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getBuddyDetail(AsyncCallback callback, object state, string buddyMid)
    #else
    public void send_getBuddyDetail(string buddyMid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getBuddyDetail", TMessageType.Call, seqid_));
      getBuddyDetail_args args = new getBuddyDetail_args();
      args.BuddyMid = buddyMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public BuddyDetail recv_getBuddyDetail()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBuddyDetail_result result = new getBuddyDetail_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyDetail failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getBuddyOnAir(AsyncCallback callback, object state, string buddyMid)
    {
      return send_getBuddyOnAir(callback, state, buddyMid);
    }

    public BuddyOnAir End_getBuddyOnAir(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getBuddyOnAir();
    }

    #endif

    public BuddyOnAir getBuddyOnAir(string buddyMid)
    {
      #if !SILVERLIGHT
      send_getBuddyOnAir(buddyMid);
      return recv_getBuddyOnAir();

      #else
      var asyncResult = Begin_getBuddyOnAir(null, null, buddyMid);
      return End_getBuddyOnAir(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getBuddyOnAir(AsyncCallback callback, object state, string buddyMid)
    #else
    public void send_getBuddyOnAir(string buddyMid)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getBuddyOnAir", TMessageType.Call, seqid_));
      getBuddyOnAir_args args = new getBuddyOnAir_args();
      args.BuddyMid = buddyMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public BuddyOnAir recv_getBuddyOnAir()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBuddyOnAir_result result = new getBuddyOnAir_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyOnAir failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getCountriesHavingBuddy(AsyncCallback callback, object state)
    {
      return send_getCountriesHavingBuddy(callback, state);
    }

    public List<string> End_getCountriesHavingBuddy(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCountriesHavingBuddy();
    }

    #endif

    public List<string> getCountriesHavingBuddy()
    {
      #if !SILVERLIGHT
      send_getCountriesHavingBuddy();
      return recv_getCountriesHavingBuddy();

      #else
      var asyncResult = Begin_getCountriesHavingBuddy(null, null);
      return End_getCountriesHavingBuddy(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCountriesHavingBuddy(AsyncCallback callback, object state)
    #else
    public void send_getCountriesHavingBuddy()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getCountriesHavingBuddy", TMessageType.Call, seqid_));
      getCountriesHavingBuddy_args args = new getCountriesHavingBuddy_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_getCountriesHavingBuddy()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCountriesHavingBuddy_result result = new getCountriesHavingBuddy_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCountriesHavingBuddy failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getNewlyReleasedBuddyIds(AsyncCallback callback, object state, string country)
    {
      return send_getNewlyReleasedBuddyIds(callback, state, country);
    }

    public Dictionary<string, long> End_getNewlyReleasedBuddyIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getNewlyReleasedBuddyIds();
    }

    #endif

    public Dictionary<string, long> getNewlyReleasedBuddyIds(string country)
    {
      #if !SILVERLIGHT
      send_getNewlyReleasedBuddyIds(country);
      return recv_getNewlyReleasedBuddyIds();

      #else
      var asyncResult = Begin_getNewlyReleasedBuddyIds(null, null, country);
      return End_getNewlyReleasedBuddyIds(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getNewlyReleasedBuddyIds(AsyncCallback callback, object state, string country)
    #else
    public void send_getNewlyReleasedBuddyIds(string country)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getNewlyReleasedBuddyIds", TMessageType.Call, seqid_));
      getNewlyReleasedBuddyIds_args args = new getNewlyReleasedBuddyIds_args();
      args.Country = country;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public Dictionary<string, long> recv_getNewlyReleasedBuddyIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getNewlyReleasedBuddyIds_result result = new getNewlyReleasedBuddyIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNewlyReleasedBuddyIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getPopularBuddyBanner(AsyncCallback callback, object state, string language, string country, ApplicationType applicationType, string resourceSpecification)
    {
      return send_getPopularBuddyBanner(callback, state, language, country, applicationType, resourceSpecification);
    }

    public BuddyBanner End_getPopularBuddyBanner(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPopularBuddyBanner();
    }

    #endif

    public BuddyBanner getPopularBuddyBanner(string language, string country, ApplicationType applicationType, string resourceSpecification)
    {
      #if !SILVERLIGHT
      send_getPopularBuddyBanner(language, country, applicationType, resourceSpecification);
      return recv_getPopularBuddyBanner();

      #else
      var asyncResult = Begin_getPopularBuddyBanner(null, null, language, country, applicationType, resourceSpecification);
      return End_getPopularBuddyBanner(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPopularBuddyBanner(AsyncCallback callback, object state, string language, string country, ApplicationType applicationType, string resourceSpecification)
    #else
    public void send_getPopularBuddyBanner(string language, string country, ApplicationType applicationType, string resourceSpecification)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getPopularBuddyBanner", TMessageType.Call, seqid_));
      getPopularBuddyBanner_args args = new getPopularBuddyBanner_args();
      args.Language = language;
      args.Country = country;
      args.ApplicationType = applicationType;
      args.ResourceSpecification = resourceSpecification;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public BuddyBanner recv_getPopularBuddyBanner()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPopularBuddyBanner_result result = new getPopularBuddyBanner_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPopularBuddyBanner failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getPopularBuddyLists(AsyncCallback callback, object state, string language, string country)
    {
      return send_getPopularBuddyLists(callback, state, language, country);
    }

    public List<BuddyList> End_getPopularBuddyLists(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPopularBuddyLists();
    }

    #endif

    public List<BuddyList> getPopularBuddyLists(string language, string country)
    {
      #if !SILVERLIGHT
      send_getPopularBuddyLists(language, country);
      return recv_getPopularBuddyLists();

      #else
      var asyncResult = Begin_getPopularBuddyLists(null, null, language, country);
      return End_getPopularBuddyLists(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPopularBuddyLists(AsyncCallback callback, object state, string language, string country)
    #else
    public void send_getPopularBuddyLists(string language, string country)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getPopularBuddyLists", TMessageType.Call, seqid_));
      getPopularBuddyLists_args args = new getPopularBuddyLists_args();
      args.Language = language;
      args.Country = country;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<BuddyList> recv_getPopularBuddyLists()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPopularBuddyLists_result result = new getPopularBuddyLists_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPopularBuddyLists failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getPromotedBuddyContacts(AsyncCallback callback, object state, string language, string country)
    {
      return send_getPromotedBuddyContacts(callback, state, language, country);
    }

    public List<Contact> End_getPromotedBuddyContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPromotedBuddyContacts();
    }

    #endif

    public List<Contact> getPromotedBuddyContacts(string language, string country)
    {
      #if !SILVERLIGHT
      send_getPromotedBuddyContacts(language, country);
      return recv_getPromotedBuddyContacts();

      #else
      var asyncResult = Begin_getPromotedBuddyContacts(null, null, language, country);
      return End_getPromotedBuddyContacts(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPromotedBuddyContacts(AsyncCallback callback, object state, string language, string country)
    #else
    public void send_getPromotedBuddyContacts(string language, string country)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getPromotedBuddyContacts", TMessageType.Call, seqid_));
      getPromotedBuddyContacts_args args = new getPromotedBuddyContacts_args();
      args.Language = language;
      args.Country = country;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<Contact> recv_getPromotedBuddyContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPromotedBuddyContacts_result result = new getPromotedBuddyContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPromotedBuddyContacts failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["findBuddyContactsByQuery"] = findBuddyContactsByQuery_Process;
      processMap_["getBuddyContacts"] = getBuddyContacts_Process;
      processMap_["getBuddyDetail"] = getBuddyDetail_Process;
      processMap_["getBuddyOnAir"] = getBuddyOnAir_Process;
      processMap_["getCountriesHavingBuddy"] = getCountriesHavingBuddy_Process;
      processMap_["getNewlyReleasedBuddyIds"] = getNewlyReleasedBuddyIds_Process;
      processMap_["getPopularBuddyBanner"] = getPopularBuddyBanner_Process;
      processMap_["getPopularBuddyLists"] = getPopularBuddyLists_Process;
      processMap_["getPromotedBuddyContacts"] = getPromotedBuddyContacts_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void findBuddyContactsByQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findBuddyContactsByQuery_args args = new findBuddyContactsByQuery_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findBuddyContactsByQuery_result result = new findBuddyContactsByQuery_result();
      try
      {
        try
        {
          result.Success = iface_.findBuddyContactsByQuery(args.Language, args.Country, args.Query, args.FromIndex, args.Count, args.RequestSource);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findBuddyContactsByQuery", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findBuddyContactsByQuery", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getBuddyContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBuddyContacts_args args = new getBuddyContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBuddyContacts_result result = new getBuddyContacts_result();
      try
      {
        try
        {
          result.Success = iface_.getBuddyContacts(args.Language, args.Country, args.Classification, args.FromIndex, args.Count);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBuddyContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getBuddyContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getBuddyDetail_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBuddyDetail_args args = new getBuddyDetail_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBuddyDetail_result result = new getBuddyDetail_result();
      try
      {
        try
        {
          result.Success = iface_.getBuddyDetail(args.BuddyMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBuddyDetail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getBuddyDetail", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getBuddyOnAir_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBuddyOnAir_args args = new getBuddyOnAir_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBuddyOnAir_result result = new getBuddyOnAir_result();
      try
      {
        try
        {
          result.Success = iface_.getBuddyOnAir(args.BuddyMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBuddyOnAir", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getBuddyOnAir", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCountriesHavingBuddy_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCountriesHavingBuddy_args args = new getCountriesHavingBuddy_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCountriesHavingBuddy_result result = new getCountriesHavingBuddy_result();
      try
      {
        try
        {
          result.Success = iface_.getCountriesHavingBuddy();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCountriesHavingBuddy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCountriesHavingBuddy", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getNewlyReleasedBuddyIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getNewlyReleasedBuddyIds_args args = new getNewlyReleasedBuddyIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getNewlyReleasedBuddyIds_result result = new getNewlyReleasedBuddyIds_result();
      try
      {
        try
        {
          result.Success = iface_.getNewlyReleasedBuddyIds(args.Country);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getNewlyReleasedBuddyIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getNewlyReleasedBuddyIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPopularBuddyBanner_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPopularBuddyBanner_args args = new getPopularBuddyBanner_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPopularBuddyBanner_result result = new getPopularBuddyBanner_result();
      try
      {
        try
        {
          result.Success = iface_.getPopularBuddyBanner(args.Language, args.Country, args.ApplicationType, args.ResourceSpecification);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPopularBuddyBanner", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPopularBuddyBanner", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPopularBuddyLists_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPopularBuddyLists_args args = new getPopularBuddyLists_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPopularBuddyLists_result result = new getPopularBuddyLists_result();
      try
      {
        try
        {
          result.Success = iface_.getPopularBuddyLists(args.Language, args.Country);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPopularBuddyLists", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPopularBuddyLists", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPromotedBuddyContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPromotedBuddyContacts_args args = new getPromotedBuddyContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPromotedBuddyContacts_result result = new getPromotedBuddyContacts_result();
      try
      {
        try
        {
          result.Success = iface_.getPromotedBuddyContacts(args.Language, args.Country);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPromotedBuddyContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPromotedBuddyContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findBuddyContactsByQuery_args : TBase
  {
    private string _language;
    private string _country;
    private string _query;
    private int _fromIndex;
    private int _count;
    private BuddySearchRequestSource _requestSource;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Query
    {
      get
      {
        return _query;
      }
      set
      {
        __isset.query = true;
        this._query = value;
      }
    }

    public int FromIndex
    {
      get
      {
        return _fromIndex;
      }
      set
      {
        __isset.fromIndex = true;
        this._fromIndex = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="BuddySearchRequestSource"/>
    /// </summary>
    public BuddySearchRequestSource RequestSource
    {
      get
      {
        return _requestSource;
      }
      set
      {
        __isset.requestSource = true;
        this._requestSource = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool language;
      public bool country;
      public bool query;
      public bool fromIndex;
      public bool count;
      public bool requestSource;
    }

    public findBuddyContactsByQuery_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Query = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                FromIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                RequestSource = (BuddySearchRequestSource)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findBuddyContactsByQuery_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (Query != null && __isset.query) {
          field.Name = "query";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Query);
          oprot.WriteFieldEnd();
        }
        if (__isset.fromIndex) {
          field.Name = "fromIndex";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FromIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        if (__isset.requestSource) {
          field.Name = "requestSource";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)RequestSource);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findBuddyContactsByQuery_args(");
      bool __first = true;
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (Query != null && __isset.query) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Query: ");
        __sb.Append(Query);
      }
      if (__isset.fromIndex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FromIndex: ");
        __sb.Append(FromIndex);
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      if (__isset.requestSource) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequestSource: ");
        __sb.Append(RequestSource);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findBuddyContactsByQuery_result : TBase
  {
    private List<BuddySearchResult> _success;
    private TalkException _e;

    public List<BuddySearchResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findBuddyContactsByQuery_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<BuddySearchResult>();
                  TList _list723 = iprot.ReadListBegin();
                  for( int _i724 = 0; _i724 < _list723.Count; ++_i724)
                  {
                    BuddySearchResult _elem725;
                    _elem725 = new BuddySearchResult();
                    _elem725.Read(iprot);
                    Success.Add(_elem725);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findBuddyContactsByQuery_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (BuddySearchResult _iter726 in Success)
              {
                _iter726.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findBuddyContactsByQuery_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyContacts_args : TBase
  {
    private string _language;
    private string _country;
    private string _classification;
    private int _fromIndex;
    private int _count;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Classification
    {
      get
      {
        return _classification;
      }
      set
      {
        __isset.classification = true;
        this._classification = value;
      }
    }

    public int FromIndex
    {
      get
      {
        return _fromIndex;
      }
      set
      {
        __isset.fromIndex = true;
        this._fromIndex = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool language;
      public bool country;
      public bool classification;
      public bool fromIndex;
      public bool count;
    }

    public getBuddyContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Classification = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                FromIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (Classification != null && __isset.classification) {
          field.Name = "classification";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Classification);
          oprot.WriteFieldEnd();
        }
        if (__isset.fromIndex) {
          field.Name = "fromIndex";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(FromIndex);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyContacts_args(");
      bool __first = true;
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (Classification != null && __isset.classification) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Classification: ");
        __sb.Append(Classification);
      }
      if (__isset.fromIndex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FromIndex: ");
        __sb.Append(FromIndex);
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyContacts_result : TBase
  {
    private List<Contact> _success;
    private TalkException _e;

    public List<Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getBuddyContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Contact>();
                  TList _list727 = iprot.ReadListBegin();
                  for( int _i728 = 0; _i728 < _list727.Count; ++_i728)
                  {
                    Contact _elem729;
                    _elem729 = new Contact();
                    _elem729.Read(iprot);
                    Success.Add(_elem729);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Contact _iter730 in Success)
              {
                _iter730.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyDetail_args : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool buddyMid;
    }

    public getBuddyDetail_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 4:
              if (field.Type == TType.String) {
                BuddyMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyDetail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BuddyMid != null && __isset.buddyMid) {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BuddyMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyDetail_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BuddyMid: ");
        __sb.Append(BuddyMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyDetail_result : TBase
  {
    private BuddyDetail _success;
    private TalkException _e;

    public BuddyDetail Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getBuddyDetail_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BuddyDetail();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyDetail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyDetail_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyOnAir_args : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool buddyMid;
    }

    public getBuddyOnAir_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 4:
              if (field.Type == TType.String) {
                BuddyMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyOnAir_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BuddyMid != null && __isset.buddyMid) {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BuddyMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyOnAir_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BuddyMid: ");
        __sb.Append(BuddyMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyOnAir_result : TBase
  {
    private BuddyOnAir _success;
    private TalkException _e;

    public BuddyOnAir Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getBuddyOnAir_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BuddyOnAir();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyOnAir_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyOnAir_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCountriesHavingBuddy_args : TBase
  {

    public getCountriesHavingBuddy_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCountriesHavingBuddy_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCountriesHavingBuddy_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCountriesHavingBuddy_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCountriesHavingBuddy_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list731 = iprot.ReadListBegin();
                  for( int _i732 = 0; _i732 < _list731.Count; ++_i732)
                  {
                    string _elem733;
                    _elem733 = iprot.ReadString();
                    Success.Add(_elem733);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCountriesHavingBuddy_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter734 in Success)
              {
                oprot.WriteString(_iter734);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCountriesHavingBuddy_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNewlyReleasedBuddyIds_args : TBase
  {
    private string _country;

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool country;
    }

    public getNewlyReleasedBuddyIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNewlyReleasedBuddyIds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNewlyReleasedBuddyIds_args(");
      bool __first = true;
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNewlyReleasedBuddyIds_result : TBase
  {
    private Dictionary<string, long> _success;
    private TalkException _e;

    public Dictionary<string, long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getNewlyReleasedBuddyIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, long>();
                  TMap _map735 = iprot.ReadMapBegin();
                  for( int _i736 = 0; _i736 < _map735.Count; ++_i736)
                  {
                    string _key737;
                    long _val738;
                    _key737 = iprot.ReadString();
                    _val738 = iprot.ReadI64();
                    Success[_key737] = _val738;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNewlyReleasedBuddyIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
              foreach (string _iter739 in Success.Keys)
              {
                oprot.WriteString(_iter739);
                oprot.WriteI64(Success[_iter739]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNewlyReleasedBuddyIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPopularBuddyBanner_args : TBase
  {
    private string _language;
    private string _country;
    private ApplicationType _applicationType;
    private string _resourceSpecification;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ApplicationType"/>
    /// </summary>
    public ApplicationType ApplicationType
    {
      get
      {
        return _applicationType;
      }
      set
      {
        __isset.applicationType = true;
        this._applicationType = value;
      }
    }

    public string ResourceSpecification
    {
      get
      {
        return _resourceSpecification;
      }
      set
      {
        __isset.resourceSpecification = true;
        this._resourceSpecification = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool language;
      public bool country;
      public bool applicationType;
      public bool resourceSpecification;
    }

    public getPopularBuddyBanner_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                ApplicationType = (ApplicationType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                ResourceSpecification = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPopularBuddyBanner_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (__isset.applicationType) {
          field.Name = "applicationType";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ApplicationType);
          oprot.WriteFieldEnd();
        }
        if (ResourceSpecification != null && __isset.resourceSpecification) {
          field.Name = "resourceSpecification";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ResourceSpecification);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPopularBuddyBanner_args(");
      bool __first = true;
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (__isset.applicationType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplicationType: ");
        __sb.Append(ApplicationType);
      }
      if (ResourceSpecification != null && __isset.resourceSpecification) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ResourceSpecification: ");
        __sb.Append(ResourceSpecification);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPopularBuddyBanner_result : TBase
  {
    private BuddyBanner _success;
    private TalkException _e;

    public BuddyBanner Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPopularBuddyBanner_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new BuddyBanner();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPopularBuddyBanner_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPopularBuddyBanner_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPopularBuddyLists_args : TBase
  {
    private string _language;
    private string _country;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool language;
      public bool country;
    }

    public getPopularBuddyLists_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPopularBuddyLists_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPopularBuddyLists_args(");
      bool __first = true;
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPopularBuddyLists_result : TBase
  {
    private List<BuddyList> _success;
    private TalkException _e;

    public List<BuddyList> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPopularBuddyLists_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<BuddyList>();
                  TList _list740 = iprot.ReadListBegin();
                  for( int _i741 = 0; _i741 < _list740.Count; ++_i741)
                  {
                    BuddyList _elem742;
                    _elem742 = new BuddyList();
                    _elem742.Read(iprot);
                    Success.Add(_elem742);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPopularBuddyLists_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (BuddyList _iter743 in Success)
              {
                _iter743.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPopularBuddyLists_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPromotedBuddyContacts_args : TBase
  {
    private string _language;
    private string _country;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool language;
      public bool country;
    }

    public getPromotedBuddyContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPromotedBuddyContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPromotedBuddyContacts_args(");
      bool __first = true;
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPromotedBuddyContacts_result : TBase
  {
    private List<Contact> _success;
    private TalkException _e;

    public List<Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPromotedBuddyContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Contact>();
                  TList _list744 = iprot.ReadListBegin();
                  for( int _i745 = 0; _i745 < _list744.Count; ++_i745)
                  {
                    Contact _elem746;
                    _elem746 = new Contact();
                    _elem746.Read(iprot);
                    Success.Add(_elem746);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPromotedBuddyContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Contact _iter747 in Success)
              {
                _iter747.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPromotedBuddyContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
