/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Message : TBase
{
  private string __from;
  private string _displayName;
  private string _picturePath;
  private string _type;
  private string _person;
  private string _person2;
  private string _personName;
  private string _personName2;
  private string _to;
  private MIDType _toType;
  private string _id;
  private long _createdTime;
  private long _deliveredTime;
  private string _text;
  private Location _location;
  private bool _hasContent;
  private ContentType _contentType;
  private byte[] _contentPreview;
  private Dictionary<string, string> _contentMetadata;
  private sbyte _sessionId;
  private List<byte[]> _chunks;
  private string _relatedMessageId;
  private MessageRelationType _messageRelationType;
  private int _readCount;
  private ServiceCode _relatedMessageServiceCode;

  public string _from
  {
    get
    {
      return __from;
    }
    set
    {
      __isset._from = true;
      this.__from = value;
    }
  }

  public string DisplayName
  {
    get
    {
      return _displayName;
    }
    set
    {
      __isset.displayName = true;
      this._displayName = value;
    }
  }

  public string PicturePath
  {
    get
    {
      return _picturePath;
    }
    set
    {
      __isset.picturePath = true;
      this._picturePath = value;
    }
  }

  public string Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public string Person
  {
    get
    {
      return _person;
    }
    set
    {
      __isset.person = true;
      this._person = value;
    }
  }

  public string Person2
  {
    get
    {
      return _person2;
    }
    set
    {
      __isset.person2 = true;
      this._person2 = value;
    }
  }

  public string PersonName
  {
    get
    {
      return _personName;
    }
    set
    {
      __isset.personName = true;
      this._personName = value;
    }
  }

  public string PersonName2
  {
    get
    {
      return _personName2;
    }
    set
    {
      __isset.personName2 = true;
      this._personName2 = value;
    }
  }

  public string To
  {
    get
    {
      return _to;
    }
    set
    {
      __isset.to = true;
      this._to = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="MIDType"/>
  /// </summary>
  public MIDType ToType
  {
    get
    {
      return _toType;
    }
    set
    {
      __isset.toType = true;
      this._toType = value;
    }
  }

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public long CreatedTime
  {
    get
    {
      return _createdTime;
    }
    set
    {
      __isset.createdTime = true;
      this._createdTime = value;
    }
  }

  public long DeliveredTime
  {
    get
    {
      return _deliveredTime;
    }
    set
    {
      __isset.deliveredTime = true;
      this._deliveredTime = value;
    }
  }

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public Location Location
  {
    get
    {
      return _location;
    }
    set
    {
      __isset.location = true;
      this._location = value;
    }
  }

  public bool HasContent
  {
    get
    {
      return _hasContent;
    }
    set
    {
      __isset.hasContent = true;
      this._hasContent = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ContentType"/>
  /// </summary>
  public ContentType ContentType
  {
    get
    {
      return _contentType;
    }
    set
    {
      __isset.contentType = true;
      this._contentType = value;
    }
  }

  public byte[] ContentPreview
  {
    get
    {
      return _contentPreview;
    }
    set
    {
      __isset.contentPreview = true;
      this._contentPreview = value;
    }
  }

  public Dictionary<string, string> ContentMetadata
  {
    get
    {
      return _contentMetadata;
    }
    set
    {
      __isset.contentMetadata = true;
      this._contentMetadata = value;
    }
  }

  public sbyte SessionId
  {
    get
    {
      return _sessionId;
    }
    set
    {
      __isset.sessionId = true;
      this._sessionId = value;
    }
  }

  public List<byte[]> Chunks
  {
    get
    {
      return _chunks;
    }
    set
    {
      __isset.chunks = true;
      this._chunks = value;
    }
  }

  public string RelatedMessageId
  {
    get
    {
      return _relatedMessageId;
    }
    set
    {
      __isset.relatedMessageId = true;
      this._relatedMessageId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="MessageRelationType"/>
  /// </summary>
  public MessageRelationType MessageRelationType
  {
    get
    {
      return _messageRelationType;
    }
    set
    {
      __isset.messageRelationType = true;
      this._messageRelationType = value;
    }
  }

  public int ReadCount
  {
    get
    {
      return _readCount;
    }
    set
    {
      __isset.readCount = true;
      this._readCount = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ServiceCode"/>
  /// </summary>
  public ServiceCode RelatedMessageServiceCode
  {
    get
    {
      return _relatedMessageServiceCode;
    }
    set
    {
      __isset.relatedMessageServiceCode = true;
      this._relatedMessageServiceCode = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool _from;
    public bool displayName;
    public bool picturePath;
    public bool type;
    public bool person;
    public bool person2;
    public bool personName;
    public bool personName2;
    public bool to;
    public bool toType;
    public bool id;
    public bool createdTime;
    public bool deliveredTime;
    public bool text;
    public bool location;
    public bool hasContent;
    public bool contentType;
    public bool contentPreview;
    public bool contentMetadata;
    public bool sessionId;
    public bool chunks;
    public bool relatedMessageId;
    public bool messageRelationType;
    public bool readCount;
    public bool relatedMessageServiceCode;
  }

  public Message() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              _from = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 99:
            if (field.Type == TType.String) {
              DisplayName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 98:
            if (field.Type == TType.String) {
              PicturePath = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 97:
            if (field.Type == TType.String) {
              Type = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 96:
            if (field.Type == TType.String) {
              Person = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 95:
            if (field.Type == TType.String) {
              Person2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 94:
            if (field.Type == TType.String) {
              PersonName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 93:
            if (field.Type == TType.String) {
              PersonName2 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              To = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              ToType = (MIDType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              CreatedTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              DeliveredTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              Location = new Location();
              Location.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Bool) {
              HasContent = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              ContentType = (ContentType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.String) {
              ContentPreview = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 18:
            if (field.Type == TType.Map) {
              {
                ContentMetadata = new Dictionary<string, string>();
                TMap _map245 = iprot.ReadMapBegin();
                for( int _i246 = 0; _i246 < _map245.Count; ++_i246)
                {
                  string _key247;
                  string _val248;
                  _key247 = iprot.ReadString();
                  _val248 = iprot.ReadString();
                  ContentMetadata[_key247] = _val248;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 19:
            if (field.Type == TType.Byte) {
              SessionId = iprot.ReadByte();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 20:
            if (field.Type == TType.List) {
              {
                Chunks = new List<byte[]>();
                TList _list249 = iprot.ReadListBegin();
                for( int _i250 = 0; _i250 < _list249.Count; ++_i250)
                {
                  byte[] _elem251;
                  _elem251 = iprot.ReadBinary();
                  Chunks.Add(_elem251);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 21:
            if (field.Type == TType.String) {
              RelatedMessageId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 22:
            if (field.Type == TType.I32) {
              MessageRelationType = (MessageRelationType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 23:
            if (field.Type == TType.I32) {
              ReadCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 24:
            if (field.Type == TType.I32) {
              RelatedMessageServiceCode = (ServiceCode)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Message");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (_from != null && __isset._from) {
        field.Name = "_from";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(_from);
        oprot.WriteFieldEnd();
      }
      if (To != null && __isset.to) {
        field.Name = "to";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(To);
        oprot.WriteFieldEnd();
      }
      if (__isset.toType) {
        field.Name = "toType";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ToType);
        oprot.WriteFieldEnd();
      }
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.createdTime) {
        field.Name = "createdTime";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreatedTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.deliveredTime) {
        field.Name = "deliveredTime";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DeliveredTime);
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      if (Location != null && __isset.location) {
        field.Name = "location";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        Location.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasContent) {
        field.Name = "hasContent";
        field.Type = TType.Bool;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasContent);
        oprot.WriteFieldEnd();
      }
      if (__isset.contentType) {
        field.Name = "contentType";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)ContentType);
        oprot.WriteFieldEnd();
      }
      if (ContentPreview != null && __isset.contentPreview) {
        field.Name = "contentPreview";
        field.Type = TType.String;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(ContentPreview);
        oprot.WriteFieldEnd();
      }
      if (ContentMetadata != null && __isset.contentMetadata) {
        field.Name = "contentMetadata";
        field.Type = TType.Map;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ContentMetadata.Count));
          foreach (string _iter252 in ContentMetadata.Keys)
          {
            oprot.WriteString(_iter252);
            oprot.WriteString(ContentMetadata[_iter252]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.sessionId) {
        field.Name = "sessionId";
        field.Type = TType.Byte;
        field.ID = 19;
        oprot.WriteFieldBegin(field);
        oprot.WriteByte(SessionId);
        oprot.WriteFieldEnd();
      }
      if (Chunks != null && __isset.chunks) {
        field.Name = "chunks";
        field.Type = TType.List;
        field.ID = 20;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Chunks.Count));
          foreach (byte[] _iter253 in Chunks)
          {
            oprot.WriteBinary(_iter253);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RelatedMessageId != null && __isset.relatedMessageId) {
        field.Name = "relatedMessageId";
        field.Type = TType.String;
        field.ID = 21;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RelatedMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.messageRelationType) {
        field.Name = "messageRelationType";
        field.Type = TType.I32;
        field.ID = 22;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)MessageRelationType);
        oprot.WriteFieldEnd();
      }
      if (__isset.readCount) {
        field.Name = "readCount";
        field.Type = TType.I32;
        field.ID = 23;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ReadCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.relatedMessageServiceCode) {
        field.Name = "relatedMessageServiceCode";
        field.Type = TType.I32;
        field.ID = 24;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)RelatedMessageServiceCode);
        oprot.WriteFieldEnd();
      }
      if (PersonName2 != null && __isset.personName2) {
        field.Name = "personName2";
        field.Type = TType.String;
        field.ID = 93;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PersonName2);
        oprot.WriteFieldEnd();
      }
      if (PersonName != null && __isset.personName) {
        field.Name = "personName";
        field.Type = TType.String;
        field.ID = 94;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PersonName);
        oprot.WriteFieldEnd();
      }
      if (Person2 != null && __isset.person2) {
        field.Name = "person2";
        field.Type = TType.String;
        field.ID = 95;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Person2);
        oprot.WriteFieldEnd();
      }
      if (Person != null && __isset.person) {
        field.Name = "person";
        field.Type = TType.String;
        field.ID = 96;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Person);
        oprot.WriteFieldEnd();
      }
      if (Type != null && __isset.type) {
        field.Name = "type";
        field.Type = TType.String;
        field.ID = 97;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Type);
        oprot.WriteFieldEnd();
      }
      if (PicturePath != null && __isset.picturePath) {
        field.Name = "picturePath";
        field.Type = TType.String;
        field.ID = 98;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PicturePath);
        oprot.WriteFieldEnd();
      }
      if (DisplayName != null && __isset.displayName) {
        field.Name = "displayName";
        field.Type = TType.String;
        field.ID = 99;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisplayName);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Message(");
    bool __first = true;
    if (_from != null && __isset._from) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("_from: ");
      __sb.Append(_from);
    }
    if (DisplayName != null && __isset.displayName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DisplayName: ");
      __sb.Append(DisplayName);
    }
    if (PicturePath != null && __isset.picturePath) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PicturePath: ");
      __sb.Append(PicturePath);
    }
    if (Type != null && __isset.type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Type: ");
      __sb.Append(Type);
    }
    if (Person != null && __isset.person) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Person: ");
      __sb.Append(Person);
    }
    if (Person2 != null && __isset.person2) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Person2: ");
      __sb.Append(Person2);
    }
    if (PersonName != null && __isset.personName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PersonName: ");
      __sb.Append(PersonName);
    }
    if (PersonName2 != null && __isset.personName2) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PersonName2: ");
      __sb.Append(PersonName2);
    }
    if (To != null && __isset.to) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("To: ");
      __sb.Append(To);
    }
    if (__isset.toType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ToType: ");
      __sb.Append(ToType);
    }
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.createdTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreatedTime: ");
      __sb.Append(CreatedTime);
    }
    if (__isset.deliveredTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DeliveredTime: ");
      __sb.Append(DeliveredTime);
    }
    if (Text != null && __isset.text) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Text: ");
      __sb.Append(Text);
    }
    if (Location != null && __isset.location) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Location: ");
      __sb.Append(Location== null ? "<null>" : Location.ToString());
    }
    if (__isset.hasContent) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HasContent: ");
      __sb.Append(HasContent);
    }
    if (__isset.contentType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContentType: ");
      __sb.Append(ContentType);
    }
    if (ContentPreview != null && __isset.contentPreview) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContentPreview: ");
      __sb.Append(ContentPreview);
    }
    if (ContentMetadata != null && __isset.contentMetadata) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContentMetadata: ");
      __sb.Append(ContentMetadata);
    }
    if (__isset.sessionId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionId: ");
      __sb.Append(SessionId);
    }
    if (Chunks != null && __isset.chunks) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Chunks: ");
      __sb.Append(Chunks);
    }
    if (RelatedMessageId != null && __isset.relatedMessageId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RelatedMessageId: ");
      __sb.Append(RelatedMessageId);
    }
    if (__isset.messageRelationType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MessageRelationType: ");
      __sb.Append(MessageRelationType);
    }
    if (__isset.readCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ReadCount: ");
      __sb.Append(ReadCount);
    }
    if (__isset.relatedMessageServiceCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RelatedMessageServiceCode: ");
      __sb.Append(RelatedMessageServiceCode);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

