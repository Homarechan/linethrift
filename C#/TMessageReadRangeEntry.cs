/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TMessageReadRangeEntry : TBase
{
  private long _startMessageId;
  private long _endMessageId;
  private long _startTime;
  private long _endTime;

  public long StartMessageId
  {
    get
    {
      return _startMessageId;
    }
    set
    {
      __isset.startMessageId = true;
      this._startMessageId = value;
    }
  }

  public long EndMessageId
  {
    get
    {
      return _endMessageId;
    }
    set
    {
      __isset.endMessageId = true;
      this._endMessageId = value;
    }
  }

  public long StartTime
  {
    get
    {
      return _startTime;
    }
    set
    {
      __isset.startTime = true;
      this._startTime = value;
    }
  }

  public long EndTime
  {
    get
    {
      return _endTime;
    }
    set
    {
      __isset.endTime = true;
      this._endTime = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool startMessageId;
    public bool endMessageId;
    public bool startTime;
    public bool endTime;
  }

  public TMessageReadRangeEntry() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              StartMessageId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              EndMessageId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              EndTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TMessageReadRangeEntry");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.startMessageId) {
        field.Name = "startMessageId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.endMessageId) {
        field.Name = "endMessageId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndMessageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.endTime) {
        field.Name = "endTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndTime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TMessageReadRangeEntry(");
    bool __first = true;
    if (__isset.startMessageId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartMessageId: ");
      __sb.Append(StartMessageId);
    }
    if (__isset.endMessageId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EndMessageId: ");
      __sb.Append(EndMessageId);
    }
    if (__isset.startTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartTime: ");
      __sb.Append(StartTime);
    }
    if (__isset.endTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("EndTime: ");
      __sb.Append(EndTime);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

