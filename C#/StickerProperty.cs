/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class StickerProperty : TBase
{
  private bool _hasAnimation;
  private bool _hasSound;
  private bool _hasPopup;
  private SRType _stickerResourceType;
  private string _stickerOptions;
  private int _compactStickerOptions;
  private string _stickerHash;
  private THashSet<string> _stickerIds;

  public bool HasAnimation
  {
    get
    {
      return _hasAnimation;
    }
    set
    {
      __isset.hasAnimation = true;
      this._hasAnimation = value;
    }
  }

  public bool HasSound
  {
    get
    {
      return _hasSound;
    }
    set
    {
      __isset.hasSound = true;
      this._hasSound = value;
    }
  }

  public bool HasPopup
  {
    get
    {
      return _hasPopup;
    }
    set
    {
      __isset.hasPopup = true;
      this._hasPopup = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SRType"/>
  /// </summary>
  public SRType StickerResourceType
  {
    get
    {
      return _stickerResourceType;
    }
    set
    {
      __isset.stickerResourceType = true;
      this._stickerResourceType = value;
    }
  }

  public string StickerOptions
  {
    get
    {
      return _stickerOptions;
    }
    set
    {
      __isset.stickerOptions = true;
      this._stickerOptions = value;
    }
  }

  public int CompactStickerOptions
  {
    get
    {
      return _compactStickerOptions;
    }
    set
    {
      __isset.compactStickerOptions = true;
      this._compactStickerOptions = value;
    }
  }

  public string StickerHash
  {
    get
    {
      return _stickerHash;
    }
    set
    {
      __isset.stickerHash = true;
      this._stickerHash = value;
    }
  }

  public THashSet<string> StickerIds
  {
    get
    {
      return _stickerIds;
    }
    set
    {
      __isset.stickerIds = true;
      this._stickerIds = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool hasAnimation;
    public bool hasSound;
    public bool hasPopup;
    public bool stickerResourceType;
    public bool stickerOptions;
    public bool compactStickerOptions;
    public bool stickerHash;
    public bool stickerIds;
  }

  public StickerProperty() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              HasAnimation = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              HasSound = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              HasPopup = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              StickerResourceType = (SRType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              StickerOptions = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              CompactStickerOptions = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              StickerHash = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Set) {
              {
                StickerIds = new THashSet<string>();
                TSet _set38 = iprot.ReadSetBegin();
                for( int _i39 = 0; _i39 < _set38.Count; ++_i39)
                {
                  string _elem40;
                  _elem40 = iprot.ReadString();
                  StickerIds.Add(_elem40);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("StickerProperty");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.hasAnimation) {
        field.Name = "hasAnimation";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasAnimation);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasSound) {
        field.Name = "hasSound";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasSound);
        oprot.WriteFieldEnd();
      }
      if (__isset.hasPopup) {
        field.Name = "hasPopup";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(HasPopup);
        oprot.WriteFieldEnd();
      }
      if (__isset.stickerResourceType) {
        field.Name = "stickerResourceType";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)StickerResourceType);
        oprot.WriteFieldEnd();
      }
      if (StickerOptions != null && __isset.stickerOptions) {
        field.Name = "stickerOptions";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StickerOptions);
        oprot.WriteFieldEnd();
      }
      if (__isset.compactStickerOptions) {
        field.Name = "compactStickerOptions";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(CompactStickerOptions);
        oprot.WriteFieldEnd();
      }
      if (StickerHash != null && __isset.stickerHash) {
        field.Name = "stickerHash";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StickerHash);
        oprot.WriteFieldEnd();
      }
      if (StickerIds != null && __isset.stickerIds) {
        field.Name = "stickerIds";
        field.Type = TType.Set;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, StickerIds.Count));
          foreach (string _iter41 in StickerIds)
          {
            oprot.WriteString(_iter41);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("StickerProperty(");
    bool __first = true;
    if (__isset.hasAnimation) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HasAnimation: ");
      __sb.Append(HasAnimation);
    }
    if (__isset.hasSound) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HasSound: ");
      __sb.Append(HasSound);
    }
    if (__isset.hasPopup) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("HasPopup: ");
      __sb.Append(HasPopup);
    }
    if (__isset.stickerResourceType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StickerResourceType: ");
      __sb.Append(StickerResourceType);
    }
    if (StickerOptions != null && __isset.stickerOptions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StickerOptions: ");
      __sb.Append(StickerOptions);
    }
    if (__isset.compactStickerOptions) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CompactStickerOptions: ");
      __sb.Append(CompactStickerOptions);
    }
    if (StickerHash != null && __isset.stickerHash) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StickerHash: ");
      __sb.Append(StickerHash);
    }
    if (StickerIds != null && __isset.stickerIds) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StickerIds: ");
      __sb.Append(StickerIds);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

