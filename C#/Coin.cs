/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Coin : TBase
{
  private int _freeCoinBalance;
  private int _payedCoinBalance;
  private int _totalCoinBalance;
  private int _rewardCoinBalance;

  public int FreeCoinBalance
  {
    get
    {
      return _freeCoinBalance;
    }
    set
    {
      __isset.freeCoinBalance = true;
      this._freeCoinBalance = value;
    }
  }

  public int PayedCoinBalance
  {
    get
    {
      return _payedCoinBalance;
    }
    set
    {
      __isset.payedCoinBalance = true;
      this._payedCoinBalance = value;
    }
  }

  public int TotalCoinBalance
  {
    get
    {
      return _totalCoinBalance;
    }
    set
    {
      __isset.totalCoinBalance = true;
      this._totalCoinBalance = value;
    }
  }

  public int RewardCoinBalance
  {
    get
    {
      return _rewardCoinBalance;
    }
    set
    {
      __isset.rewardCoinBalance = true;
      this._rewardCoinBalance = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool freeCoinBalance;
    public bool payedCoinBalance;
    public bool totalCoinBalance;
    public bool rewardCoinBalance;
  }

  public Coin() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              FreeCoinBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              PayedCoinBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TotalCoinBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RewardCoinBalance = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Coin");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.freeCoinBalance) {
        field.Name = "freeCoinBalance";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FreeCoinBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.payedCoinBalance) {
        field.Name = "payedCoinBalance";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PayedCoinBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalCoinBalance) {
        field.Name = "totalCoinBalance";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalCoinBalance);
        oprot.WriteFieldEnd();
      }
      if (__isset.rewardCoinBalance) {
        field.Name = "rewardCoinBalance";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RewardCoinBalance);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Coin(");
    bool __first = true;
    if (__isset.freeCoinBalance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FreeCoinBalance: ");
      __sb.Append(FreeCoinBalance);
    }
    if (__isset.payedCoinBalance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PayedCoinBalance: ");
      __sb.Append(PayedCoinBalance);
    }
    if (__isset.totalCoinBalance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TotalCoinBalance: ");
      __sb.Append(TotalCoinBalance);
    }
    if (__isset.rewardCoinBalance) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RewardCoinBalance: ");
      __sb.Append(RewardCoinBalance);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

