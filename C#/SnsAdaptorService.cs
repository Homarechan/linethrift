/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class SnsAdaptorService {
  public interface ISync {
    SnsFriends getSnsFriends(SnsIdType snsIdType, string snsAccessToken, int startIdx, int limit);
    SnsProfile getSnsMyProfile(SnsIdType snsIdType, string snsAccessToken);
    void postSnsInvitationMessage(SnsIdType snsIdType, string snsAccessToken, string toSnsUserId);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_getSnsFriends(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, int startIdx, int limit);
    SnsFriends End_getSnsFriends(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSnsMyProfile(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken);
    SnsProfile End_getSnsMyProfile(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_postSnsInvitationMessage(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string toSnsUserId);
    void End_postSnsInvitationMessage(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_getSnsFriends(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, int startIdx, int limit)
    {
      return send_getSnsFriends(callback, state, snsIdType, snsAccessToken, startIdx, limit);
    }

    public SnsFriends End_getSnsFriends(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSnsFriends();
    }

    #endif

    public SnsFriends getSnsFriends(SnsIdType snsIdType, string snsAccessToken, int startIdx, int limit)
    {
      #if !SILVERLIGHT
      send_getSnsFriends(snsIdType, snsAccessToken, startIdx, limit);
      return recv_getSnsFriends();

      #else
      var asyncResult = Begin_getSnsFriends(null, null, snsIdType, snsAccessToken, startIdx, limit);
      return End_getSnsFriends(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSnsFriends(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, int startIdx, int limit)
    #else
    public void send_getSnsFriends(SnsIdType snsIdType, string snsAccessToken, int startIdx, int limit)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getSnsFriends", TMessageType.Call, seqid_));
      getSnsFriends_args args = new getSnsFriends_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.StartIdx = startIdx;
      args.Limit = limit;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public SnsFriends recv_getSnsFriends()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSnsFriends_result result = new getSnsFriends_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSnsFriends failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getSnsMyProfile(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken)
    {
      return send_getSnsMyProfile(callback, state, snsIdType, snsAccessToken);
    }

    public SnsProfile End_getSnsMyProfile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSnsMyProfile();
    }

    #endif

    public SnsProfile getSnsMyProfile(SnsIdType snsIdType, string snsAccessToken)
    {
      #if !SILVERLIGHT
      send_getSnsMyProfile(snsIdType, snsAccessToken);
      return recv_getSnsMyProfile();

      #else
      var asyncResult = Begin_getSnsMyProfile(null, null, snsIdType, snsAccessToken);
      return End_getSnsMyProfile(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSnsMyProfile(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken)
    #else
    public void send_getSnsMyProfile(SnsIdType snsIdType, string snsAccessToken)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getSnsMyProfile", TMessageType.Call, seqid_));
      getSnsMyProfile_args args = new getSnsMyProfile_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public SnsProfile recv_getSnsMyProfile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSnsMyProfile_result result = new getSnsMyProfile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSnsMyProfile failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_postSnsInvitationMessage(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string toSnsUserId)
    {
      return send_postSnsInvitationMessage(callback, state, snsIdType, snsAccessToken, toSnsUserId);
    }

    public void End_postSnsInvitationMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_postSnsInvitationMessage();
    }

    #endif

    public void postSnsInvitationMessage(SnsIdType snsIdType, string snsAccessToken, string toSnsUserId)
    {
      #if !SILVERLIGHT
      send_postSnsInvitationMessage(snsIdType, snsAccessToken, toSnsUserId);
      recv_postSnsInvitationMessage();

      #else
      var asyncResult = Begin_postSnsInvitationMessage(null, null, snsIdType, snsAccessToken, toSnsUserId);
      End_postSnsInvitationMessage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_postSnsInvitationMessage(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string toSnsUserId)
    #else
    public void send_postSnsInvitationMessage(SnsIdType snsIdType, string snsAccessToken, string toSnsUserId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.Call, seqid_));
      postSnsInvitationMessage_args args = new postSnsInvitationMessage_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.ToSnsUserId = toSnsUserId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_postSnsInvitationMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getSnsFriends"] = getSnsFriends_Process;
      processMap_["getSnsMyProfile"] = getSnsMyProfile_Process;
      processMap_["postSnsInvitationMessage"] = postSnsInvitationMessage_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getSnsFriends_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSnsFriends_args args = new getSnsFriends_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSnsFriends_result result = new getSnsFriends_result();
      try
      {
        try
        {
          result.Success = iface_.getSnsFriends(args.SnsIdType, args.SnsAccessToken, args.StartIdx, args.Limit);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSnsFriends", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSnsFriends", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSnsMyProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSnsMyProfile_args args = new getSnsMyProfile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSnsMyProfile_result result = new getSnsMyProfile_result();
      try
      {
        try
        {
          result.Success = iface_.getSnsMyProfile(args.SnsIdType, args.SnsAccessToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSnsMyProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSnsMyProfile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void postSnsInvitationMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      postSnsInvitationMessage_args args = new postSnsInvitationMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      postSnsInvitationMessage_result result = new postSnsInvitationMessage_result();
      try
      {
        try
        {
          iface_.postSnsInvitationMessage(args.SnsIdType, args.SnsAccessToken, args.ToSnsUserId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("postSnsInvitationMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSnsFriends_args : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;
    private int _startIdx;
    private int _limit;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }

    public int StartIdx
    {
      get
      {
        return _startIdx;
      }
      set
      {
        __isset.startIdx = true;
        this._startIdx = value;
      }
    }

    public int Limit
    {
      get
      {
        return _limit;
      }
      set
      {
        __isset.limit = true;
        this._limit = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snsIdType;
      public bool snsAccessToken;
      public bool startIdx;
      public bool limit;
    }

    public getSnsFriends_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                StartIdx = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Limit = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSnsFriends_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        if (__isset.startIdx) {
          field.Name = "startIdx";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(StartIdx);
          oprot.WriteFieldEnd();
        }
        if (__isset.limit) {
          field.Name = "limit";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Limit);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSnsFriends_args(");
      bool __first = true;
      if (__isset.snsIdType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsIdType: ");
        __sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsAccessToken: ");
        __sb.Append(SnsAccessToken);
      }
      if (__isset.startIdx) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StartIdx: ");
        __sb.Append(StartIdx);
      }
      if (__isset.limit) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Limit: ");
        __sb.Append(Limit);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSnsFriends_result : TBase
  {
    private SnsFriends _success;
    private TalkException _e;

    public SnsFriends Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSnsFriends_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SnsFriends();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSnsFriends_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSnsFriends_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSnsMyProfile_args : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snsIdType;
      public bool snsAccessToken;
    }

    public getSnsMyProfile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSnsMyProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSnsMyProfile_args(");
      bool __first = true;
      if (__isset.snsIdType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsIdType: ");
        __sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsAccessToken: ");
        __sb.Append(SnsAccessToken);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSnsMyProfile_result : TBase
  {
    private SnsProfile _success;
    private TalkException _e;

    public SnsProfile Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSnsMyProfile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SnsProfile();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSnsMyProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSnsMyProfile_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class postSnsInvitationMessage_args : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;
    private string _toSnsUserId;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }

    public string ToSnsUserId
    {
      get
      {
        return _toSnsUserId;
      }
      set
      {
        __isset.toSnsUserId = true;
        this._toSnsUserId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snsIdType;
      public bool snsAccessToken;
      public bool toSnsUserId;
    }

    public postSnsInvitationMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ToSnsUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("postSnsInvitationMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        if (ToSnsUserId != null && __isset.toSnsUserId) {
          field.Name = "toSnsUserId";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ToSnsUserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("postSnsInvitationMessage_args(");
      bool __first = true;
      if (__isset.snsIdType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsIdType: ");
        __sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsAccessToken: ");
        __sb.Append(SnsAccessToken);
      }
      if (ToSnsUserId != null && __isset.toSnsUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ToSnsUserId: ");
        __sb.Append(ToSnsUserId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class postSnsInvitationMessage_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public postSnsInvitationMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("postSnsInvitationMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("postSnsInvitationMessage_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
