/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SyncScope : TBase
{
  private bool _syncProfile;
  private bool _syncSettings;
  private bool _syncSticker;
  private bool _syncThemeShop;
  private SyncRelations _contact;
  private SyncRelations _group;
  private SyncRelations _room;
  private SyncRelations _chat;

  public bool SyncProfile
  {
    get
    {
      return _syncProfile;
    }
    set
    {
      __isset.syncProfile = true;
      this._syncProfile = value;
    }
  }

  public bool SyncSettings
  {
    get
    {
      return _syncSettings;
    }
    set
    {
      __isset.syncSettings = true;
      this._syncSettings = value;
    }
  }

  public bool SyncSticker
  {
    get
    {
      return _syncSticker;
    }
    set
    {
      __isset.syncSticker = true;
      this._syncSticker = value;
    }
  }

  public bool SyncThemeShop
  {
    get
    {
      return _syncThemeShop;
    }
    set
    {
      __isset.syncThemeShop = true;
      this._syncThemeShop = value;
    }
  }

  public SyncRelations Contact
  {
    get
    {
      return _contact;
    }
    set
    {
      __isset.contact = true;
      this._contact = value;
    }
  }

  public SyncRelations Group
  {
    get
    {
      return _group;
    }
    set
    {
      __isset.@group = true;
      this._group = value;
    }
  }

  public SyncRelations Room
  {
    get
    {
      return _room;
    }
    set
    {
      __isset.room = true;
      this._room = value;
    }
  }

  public SyncRelations Chat
  {
    get
    {
      return _chat;
    }
    set
    {
      __isset.chat = true;
      this._chat = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool syncProfile;
    public bool syncSettings;
    public bool syncSticker;
    public bool syncThemeShop;
    public bool contact;
    public bool @group;
    public bool room;
    public bool chat;
  }

  public SyncScope() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              SyncProfile = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              SyncSettings = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              SyncSticker = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              SyncThemeShop = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              Contact = new SyncRelations();
              Contact.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.Struct) {
              Group = new SyncRelations();
              Group.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Struct) {
              Room = new SyncRelations();
              Room.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Struct) {
              Chat = new SyncRelations();
              Chat.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SyncScope");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.syncProfile) {
        field.Name = "syncProfile";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SyncProfile);
        oprot.WriteFieldEnd();
      }
      if (__isset.syncSettings) {
        field.Name = "syncSettings";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SyncSettings);
        oprot.WriteFieldEnd();
      }
      if (__isset.syncSticker) {
        field.Name = "syncSticker";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SyncSticker);
        oprot.WriteFieldEnd();
      }
      if (__isset.syncThemeShop) {
        field.Name = "syncThemeShop";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SyncThemeShop);
        oprot.WriteFieldEnd();
      }
      if (Contact != null && __isset.contact) {
        field.Name = "contact";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        Contact.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Group != null && __isset.@group) {
        field.Name = "group";
        field.Type = TType.Struct;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        Group.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Room != null && __isset.room) {
        field.Name = "room";
        field.Type = TType.Struct;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        Room.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Chat != null && __isset.chat) {
        field.Name = "chat";
        field.Type = TType.Struct;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        Chat.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SyncScope(");
    bool __first = true;
    if (__isset.syncProfile) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncProfile: ");
      __sb.Append(SyncProfile);
    }
    if (__isset.syncSettings) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncSettings: ");
      __sb.Append(SyncSettings);
    }
    if (__isset.syncSticker) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncSticker: ");
      __sb.Append(SyncSticker);
    }
    if (__isset.syncThemeShop) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncThemeShop: ");
      __sb.Append(SyncThemeShop);
    }
    if (Contact != null && __isset.contact) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Contact: ");
      __sb.Append(Contact== null ? "<null>" : Contact.ToString());
    }
    if (Group != null && __isset.@group) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Group: ");
      __sb.Append(Group== null ? "<null>" : Group.ToString());
    }
    if (Room != null && __isset.room) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Room: ");
      __sb.Append(Room== null ? "<null>" : Room.ToString());
    }
    if (Chat != null && __isset.chat) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Chat: ");
      __sb.Append(Chat== null ? "<null>" : Chat.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

