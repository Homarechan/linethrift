/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class Chatapp : TBase
{
  private string _chatappId;
  private string _name;
  private string _icon;
  private string _url;
  private List<AvailableChatTypes> _availableChatTypes;

  public string ChatappId
  {
    get
    {
      return _chatappId;
    }
    set
    {
      __isset.chatappId = true;
      this._chatappId = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Icon
  {
    get
    {
      return _icon;
    }
    set
    {
      __isset.icon = true;
      this._icon = value;
    }
  }

  public string Url
  {
    get
    {
      return _url;
    }
    set
    {
      __isset.url = true;
      this._url = value;
    }
  }

  public List<AvailableChatTypes> AvailableChatTypes
  {
    get
    {
      return _availableChatTypes;
    }
    set
    {
      __isset.availableChatTypes = true;
      this._availableChatTypes = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool chatappId;
    public bool name;
    public bool icon;
    public bool url;
    public bool availableChatTypes;
  }

  public Chatapp() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ChatappId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Icon = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Url = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                AvailableChatTypes = new List<AvailableChatTypes>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  AvailableChatTypes _elem2;
                  _elem2 = (AvailableChatTypes)iprot.ReadI32();
                  AvailableChatTypes.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("Chatapp");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ChatappId != null && __isset.chatappId) {
        field.Name = "chatappId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChatappId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Icon != null && __isset.icon) {
        field.Name = "icon";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Icon);
        oprot.WriteFieldEnd();
      }
      if (Url != null && __isset.url) {
        field.Name = "url";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Url);
        oprot.WriteFieldEnd();
      }
      if (AvailableChatTypes != null && __isset.availableChatTypes) {
        field.Name = "availableChatTypes";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.I32, AvailableChatTypes.Count));
          foreach (AvailableChatTypes _iter3 in AvailableChatTypes)
          {
            oprot.WriteI32((int)_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("Chatapp(");
    bool __first = true;
    if (ChatappId != null && __isset.chatappId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChatappId: ");
      __sb.Append(ChatappId);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (Icon != null && __isset.icon) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Icon: ");
      __sb.Append(Icon);
    }
    if (Url != null && __isset.url) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Url: ");
      __sb.Append(Url);
    }
    if (AvailableChatTypes != null && __isset.availableChatTypes) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AvailableChatTypes: ");
      __sb.Append(AvailableChatTypes);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

