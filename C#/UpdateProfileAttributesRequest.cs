/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class UpdateProfileAttributesRequest : TBase
{
  private Dictionary<ProfileAttribute, ProfileContent> _profileAttributes;

  public Dictionary<ProfileAttribute, ProfileContent> ProfileAttributes
  {
    get
    {
      return _profileAttributes;
    }
    set
    {
      __isset.profileAttributes = true;
      this._profileAttributes = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool profileAttributes;
  }

  public UpdateProfileAttributesRequest() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                ProfileAttributes = new Dictionary<ProfileAttribute, ProfileContent>();
                TMap _map13 = iprot.ReadMapBegin();
                for( int _i14 = 0; _i14 < _map13.Count; ++_i14)
                {
                  ProfileAttribute _key15;
                  ProfileContent _val16;
                  _key15 = (ProfileAttribute)iprot.ReadI32();
                  _val16 = new ProfileContent();
                  _val16.Read(iprot);
                  ProfileAttributes[_key15] = _val16;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("UpdateProfileAttributesRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ProfileAttributes != null && __isset.profileAttributes) {
        field.Name = "profileAttributes";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I32, TType.Struct, ProfileAttributes.Count));
          foreach (ProfileAttribute _iter17 in ProfileAttributes.Keys)
          {
            oprot.WriteI32((int)_iter17);
            ProfileAttributes[_iter17].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("UpdateProfileAttributesRequest(");
    bool __first = true;
    if (ProfileAttributes != null && __isset.profileAttributes) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ProfileAttributes: ");
      __sb.Append(ProfileAttributes);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

