/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ChannelSyncDatas : TBase
{
  private List<ChannelInfo> _channelInfos;
  private List<ChannelDomain> _channelDomains;
  private long _revision;
  private long _expires;

  public List<ChannelInfo> ChannelInfos
  {
    get
    {
      return _channelInfos;
    }
    set
    {
      __isset.channelInfos = true;
      this._channelInfos = value;
    }
  }

  public List<ChannelDomain> ChannelDomains
  {
    get
    {
      return _channelDomains;
    }
    set
    {
      __isset.channelDomains = true;
      this._channelDomains = value;
    }
  }

  public long Revision
  {
    get
    {
      return _revision;
    }
    set
    {
      __isset.revision = true;
      this._revision = value;
    }
  }

  public long Expires
  {
    get
    {
      return _expires;
    }
    set
    {
      __isset.expires = true;
      this._expires = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool channelInfos;
    public bool channelDomains;
    public bool revision;
    public bool expires;
  }

  public ChannelSyncDatas() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                ChannelInfos = new List<ChannelInfo>();
                TList _list167 = iprot.ReadListBegin();
                for( int _i168 = 0; _i168 < _list167.Count; ++_i168)
                {
                  ChannelInfo _elem169;
                  _elem169 = new ChannelInfo();
                  _elem169.Read(iprot);
                  ChannelInfos.Add(_elem169);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ChannelDomains = new List<ChannelDomain>();
                TList _list170 = iprot.ReadListBegin();
                for( int _i171 = 0; _i171 < _list170.Count; ++_i171)
                {
                  ChannelDomain _elem172;
                  _elem172 = new ChannelDomain();
                  _elem172.Read(iprot);
                  ChannelDomains.Add(_elem172);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              Revision = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              Expires = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ChannelSyncDatas");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ChannelInfos != null && __isset.channelInfos) {
        field.Name = "channelInfos";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ChannelInfos.Count));
          foreach (ChannelInfo _iter173 in ChannelInfos)
          {
            _iter173.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ChannelDomains != null && __isset.channelDomains) {
        field.Name = "channelDomains";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ChannelDomains.Count));
          foreach (ChannelDomain _iter174 in ChannelDomains)
          {
            _iter174.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.revision) {
        field.Name = "revision";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Revision);
        oprot.WriteFieldEnd();
      }
      if (__isset.expires) {
        field.Name = "expires";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Expires);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ChannelSyncDatas(");
    bool __first = true;
    if (ChannelInfos != null && __isset.channelInfos) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChannelInfos: ");
      __sb.Append(ChannelInfos);
    }
    if (ChannelDomains != null && __isset.channelDomains) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChannelDomains: ");
      __sb.Append(ChannelDomains);
    }
    if (__isset.revision) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Revision: ");
      __sb.Append(Revision);
    }
    if (__isset.expires) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Expires: ");
      __sb.Append(Expires);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

