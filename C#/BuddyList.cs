/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class BuddyList : TBase
{
  private string _classification;
  private string _displayName;
  private int _totalBuddyCount;
  private List<Contact> _popularContacts;

  public string Classification
  {
    get
    {
      return _classification;
    }
    set
    {
      __isset.classification = true;
      this._classification = value;
    }
  }

  public string DisplayName
  {
    get
    {
      return _displayName;
    }
    set
    {
      __isset.displayName = true;
      this._displayName = value;
    }
  }

  public int TotalBuddyCount
  {
    get
    {
      return _totalBuddyCount;
    }
    set
    {
      __isset.totalBuddyCount = true;
      this._totalBuddyCount = value;
    }
  }

  public List<Contact> PopularContacts
  {
    get
    {
      return _popularContacts;
    }
    set
    {
      __isset.popularContacts = true;
      this._popularContacts = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool classification;
    public bool displayName;
    public bool totalBuddyCount;
    public bool popularContacts;
  }

  public BuddyList() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Classification = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              DisplayName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              TotalBuddyCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                PopularContacts = new List<Contact>();
                TList _list140 = iprot.ReadListBegin();
                for( int _i141 = 0; _i141 < _list140.Count; ++_i141)
                {
                  Contact _elem142;
                  _elem142 = new Contact();
                  _elem142.Read(iprot);
                  PopularContacts.Add(_elem142);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("BuddyList");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Classification != null && __isset.classification) {
        field.Name = "classification";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Classification);
        oprot.WriteFieldEnd();
      }
      if (DisplayName != null && __isset.displayName) {
        field.Name = "displayName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisplayName);
        oprot.WriteFieldEnd();
      }
      if (__isset.totalBuddyCount) {
        field.Name = "totalBuddyCount";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(TotalBuddyCount);
        oprot.WriteFieldEnd();
      }
      if (PopularContacts != null && __isset.popularContacts) {
        field.Name = "popularContacts";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, PopularContacts.Count));
          foreach (Contact _iter143 in PopularContacts)
          {
            _iter143.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("BuddyList(");
    bool __first = true;
    if (Classification != null && __isset.classification) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Classification: ");
      __sb.Append(Classification);
    }
    if (DisplayName != null && __isset.displayName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DisplayName: ");
      __sb.Append(DisplayName);
    }
    if (__isset.totalBuddyCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TotalBuddyCount: ");
      __sb.Append(TotalBuddyCount);
    }
    if (PopularContacts != null && __isset.popularContacts) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PopularContacts: ");
      __sb.Append(PopularContacts);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

