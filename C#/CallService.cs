/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class CallService {
  public interface ISync {
    UserStatus getUserStatus(string mid);
    void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string @value);
    void updateExtendedProfileAttribute(ExtendedProfileAttribute attr, ExtendedProfile extendedProfile);
    List<SimpleChannelContact> getAllSimpleChannelContacts(bool statusSticonFallbackDisabled);
    Dictionary<RegistrationType, string> getUserIdentities();
    PaidCallDialing markPaidCallAd(string dialedNumber, string language, bool disableCallerId);
    bool isGroupMember(string groupId);
    PhoneInfoForChannel getPhoneInfoFromPhoneNumber(string region, string phoneNumber);
    PaidCallRedeemResult redeemPaidCallVoucher(string serial, string language);
    Dictionary<string, string> getPreferredDisplayName(List<string> mids);
    List<Contact> getContactsForChannel(List<string> ids);
    List<CoinProductItem> getCallCreditProducts(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language);
    List<CompactContact> getCompactContacts(long lastModifiedTimestamp);
    void notifyNotiCenterEvent(NotiCenterEventData @event);
    bool isInContact(string mid);
    List<SimpleChannelContact> lookupGroupMembers(string groupId, List<string> mids);
    Room getRoomInformation(string roomMid);
    GroupCall getGroupCall(string chatMid);
    bool isAllowSecondaryDeviceLogin();
    SimpleChannelClient getPrimaryClientForChannel();
    Room createRoomWithBuddy(int reqSeq, string buddyMid, List<string> contactIds);
    string getDisplayName(string mid);
    PaidCallMetadataResult getPaidCallMetadata(string language);
    string getMid();
    string getUserCountryForBilling(string country, string remoteIp);
    List<string> getFavoriteGroupIdsForChannel();
    PaidCallHistoryResult getPaidCallHistory(long start, int size, string language);
    void sendPinCodeOperation(string verifier);
    void inviteIntoGroupCall(string chatMid, List<string> memberMids, GroupCallMediaType mediaType);
    List<string> getFriendMids();
    MetaProfile getMetaProfile();
    Message sendMessageForChannel(Message message);
    long activeBuddySubscriberCount();
    CoinHistoryResult getCallCreditPurchaseHistory(CoinHistoryCondition request);
    bool isRoomMember(string roomId);
    Message sendSystemOAMessage(Message message);
    PaidCallResponse acquirePaidCallRoute(PaidCallType paidCallType, string dialedNumber, string language, string networkCode, bool disableCallerId, string referer, string adSessionId);
    List<@Group> getGroupsForChannel(List<string> groupIds);
    long getUserCreateTime();
    string registerChannelCP(string cpId, string registerPassword);
    PaymentReservationResult reserveCallCreditPurchase(CoinPurchaseReservation request);
    List<PaidCallCurrencyExchangeRate> acquirePaidCallCurrencyExchangeRate(string language);
    List<string> getRoomMemberMidsForAppPlatform(string roomId);
    List<PaidCallBalance> getPaidCallBalanceList(string language);
    Dictionary<PersonalInfo, string> getPersonalInfos(THashSet<PersonalInfo> requiredPersonalInfos);
    List<SimpleChannelClient> getPrimaryClientsForChannel(List<string> userMids);
    ContactTransition addBuddyToContact(string buddyMid);
    List<string> getGroupMemberMidsForAppPlatform(string groupId);
    string getUserLanguage();
    PaidCallResponse lookupPaidCall(string dialedNumber, string language, string referer);
    ExtendedProfile getExtendedProfile();
    Dictionary<string, CompactContact> getReverseCompactContacts(List<string> ids);
    PaidCallAdResult getPaidCallAdStatus();
    Contact findContactByUseridWithoutAbuseBlockForChannel(string userid);
    List<string> getGroupMemberMids(string groupId);
    Message sendMessageWithoutRelationship(Message message);
    Dictionary<string, long> displayBuddySubscriberCountInBulk(List<string> mids);
    List<SimpleChannelContact> lookupRoomMembers(string roomId, List<string> mids);
    List<string> getFavoriteMidsForChannel();
    List<string> getAllContactIdsForChannel();
    long displayBuddySubscriberCount();
    Profile getProfileForChannel();
    List<UserTicketResponse> getUserTickets(List<string> userMids);
    List<string> getOAFriendMids();
    List<PaidCallUserRate> searchPaidCallUserRate(string countryCode, string language);
    List<string> getJoinedGroupIdsForChannel();
    GroupCallRoute acquireGroupCallRoute(string chatMid, GroupCallMediaType mediaType);
    List<string> getUserMidsWhoAddedMe();
    IdentityCredential getIdentityCredential();
    void addOperationForChannel(OpType opType, string param1, string param2, string param3);
    List<SimpleChannelContact> getSimpleChannelContacts(List<string> ids, bool statusSticonFallbackDisabled);
    long getUserLastSentMessageTimeStamp(string mid);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_getUserStatus(AsyncCallback callback, object state, string mid);
    UserStatus End_getUserStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateProfileAttributeForChannel(AsyncCallback callback, object state, ProfileAttribute profileAttribute, string @value);
    void End_updateProfileAttributeForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateExtendedProfileAttribute(AsyncCallback callback, object state, ExtendedProfileAttribute attr, ExtendedProfile extendedProfile);
    void End_updateExtendedProfileAttribute(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAllSimpleChannelContacts(AsyncCallback callback, object state, bool statusSticonFallbackDisabled);
    List<SimpleChannelContact> End_getAllSimpleChannelContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserIdentities(AsyncCallback callback, object state);
    Dictionary<RegistrationType, string> End_getUserIdentities(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_markPaidCallAd(AsyncCallback callback, object state, string dialedNumber, string language, bool disableCallerId);
    PaidCallDialing End_markPaidCallAd(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_isGroupMember(AsyncCallback callback, object state, string groupId);
    bool End_isGroupMember(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPhoneInfoFromPhoneNumber(AsyncCallback callback, object state, string region, string phoneNumber);
    PhoneInfoForChannel End_getPhoneInfoFromPhoneNumber(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_redeemPaidCallVoucher(AsyncCallback callback, object state, string serial, string language);
    PaidCallRedeemResult End_redeemPaidCallVoucher(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPreferredDisplayName(AsyncCallback callback, object state, List<string> mids);
    Dictionary<string, string> End_getPreferredDisplayName(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getContactsForChannel(AsyncCallback callback, object state, List<string> ids);
    List<Contact> End_getContactsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCallCreditProducts(AsyncCallback callback, object state, PaymentType appStoreCode, PaymentPgType pgCode, string country, string language);
    List<CoinProductItem> End_getCallCreditProducts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCompactContacts(AsyncCallback callback, object state, long lastModifiedTimestamp);
    List<CompactContact> End_getCompactContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_notifyNotiCenterEvent(AsyncCallback callback, object state, NotiCenterEventData @event);
    void End_notifyNotiCenterEvent(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_isInContact(AsyncCallback callback, object state, string mid);
    bool End_isInContact(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_lookupGroupMembers(AsyncCallback callback, object state, string groupId, List<string> mids);
    List<SimpleChannelContact> End_lookupGroupMembers(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRoomInformation(AsyncCallback callback, object state, string roomMid);
    Room End_getRoomInformation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupCall(AsyncCallback callback, object state, string chatMid);
    GroupCall End_getGroupCall(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_isAllowSecondaryDeviceLogin(AsyncCallback callback, object state);
    bool End_isAllowSecondaryDeviceLogin(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPrimaryClientForChannel(AsyncCallback callback, object state);
    SimpleChannelClient End_getPrimaryClientForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createRoomWithBuddy(AsyncCallback callback, object state, int reqSeq, string buddyMid, List<string> contactIds);
    Room End_createRoomWithBuddy(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getDisplayName(AsyncCallback callback, object state, string mid);
    string End_getDisplayName(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPaidCallMetadata(AsyncCallback callback, object state, string language);
    PaidCallMetadataResult End_getPaidCallMetadata(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMid(AsyncCallback callback, object state);
    string End_getMid(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserCountryForBilling(AsyncCallback callback, object state, string country, string remoteIp);
    string End_getUserCountryForBilling(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getFavoriteGroupIdsForChannel(AsyncCallback callback, object state);
    List<string> End_getFavoriteGroupIdsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPaidCallHistory(AsyncCallback callback, object state, long start, int size, string language);
    PaidCallHistoryResult End_getPaidCallHistory(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendPinCodeOperation(AsyncCallback callback, object state, string verifier);
    void End_sendPinCodeOperation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_inviteIntoGroupCall(AsyncCallback callback, object state, string chatMid, List<string> memberMids, GroupCallMediaType mediaType);
    void End_inviteIntoGroupCall(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getFriendMids(AsyncCallback callback, object state);
    List<string> End_getFriendMids(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMetaProfile(AsyncCallback callback, object state);
    MetaProfile End_getMetaProfile(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessageForChannel(AsyncCallback callback, object state, Message message);
    Message End_sendMessageForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_activeBuddySubscriberCount(AsyncCallback callback, object state);
    long End_activeBuddySubscriberCount(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCallCreditPurchaseHistory(AsyncCallback callback, object state, CoinHistoryCondition request);
    CoinHistoryResult End_getCallCreditPurchaseHistory(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_isRoomMember(AsyncCallback callback, object state, string roomId);
    bool End_isRoomMember(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendSystemOAMessage(AsyncCallback callback, object state, Message message);
    Message End_sendSystemOAMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_acquirePaidCallRoute(AsyncCallback callback, object state, PaidCallType paidCallType, string dialedNumber, string language, string networkCode, bool disableCallerId, string referer, string adSessionId);
    PaidCallResponse End_acquirePaidCallRoute(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupsForChannel(AsyncCallback callback, object state, List<string> groupIds);
    List<@Group> End_getGroupsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserCreateTime(AsyncCallback callback, object state);
    long End_getUserCreateTime(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerChannelCP(AsyncCallback callback, object state, string cpId, string registerPassword);
    string End_registerChannelCP(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reserveCallCreditPurchase(AsyncCallback callback, object state, CoinPurchaseReservation request);
    PaymentReservationResult End_reserveCallCreditPurchase(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_acquirePaidCallCurrencyExchangeRate(AsyncCallback callback, object state, string language);
    List<PaidCallCurrencyExchangeRate> End_acquirePaidCallCurrencyExchangeRate(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRoomMemberMidsForAppPlatform(AsyncCallback callback, object state, string roomId);
    List<string> End_getRoomMemberMidsForAppPlatform(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPaidCallBalanceList(AsyncCallback callback, object state, string language);
    List<PaidCallBalance> End_getPaidCallBalanceList(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPersonalInfos(AsyncCallback callback, object state, THashSet<PersonalInfo> requiredPersonalInfos);
    Dictionary<PersonalInfo, string> End_getPersonalInfos(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPrimaryClientsForChannel(AsyncCallback callback, object state, List<string> userMids);
    List<SimpleChannelClient> End_getPrimaryClientsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_addBuddyToContact(AsyncCallback callback, object state, string buddyMid);
    ContactTransition End_addBuddyToContact(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupMemberMidsForAppPlatform(AsyncCallback callback, object state, string groupId);
    List<string> End_getGroupMemberMidsForAppPlatform(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserLanguage(AsyncCallback callback, object state);
    string End_getUserLanguage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_lookupPaidCall(AsyncCallback callback, object state, string dialedNumber, string language, string referer);
    PaidCallResponse End_lookupPaidCall(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getExtendedProfile(AsyncCallback callback, object state);
    ExtendedProfile End_getExtendedProfile(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getReverseCompactContacts(AsyncCallback callback, object state, List<string> ids);
    Dictionary<string, CompactContact> End_getReverseCompactContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPaidCallAdStatus(AsyncCallback callback, object state);
    PaidCallAdResult End_getPaidCallAdStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findContactByUseridWithoutAbuseBlockForChannel(AsyncCallback callback, object state, string userid);
    Contact End_findContactByUseridWithoutAbuseBlockForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupMemberMids(AsyncCallback callback, object state, string groupId);
    List<string> End_getGroupMemberMids(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessageWithoutRelationship(AsyncCallback callback, object state, Message message);
    Message End_sendMessageWithoutRelationship(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_displayBuddySubscriberCountInBulk(AsyncCallback callback, object state, List<string> mids);
    Dictionary<string, long> End_displayBuddySubscriberCountInBulk(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_lookupRoomMembers(AsyncCallback callback, object state, string roomId, List<string> mids);
    List<SimpleChannelContact> End_lookupRoomMembers(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getFavoriteMidsForChannel(AsyncCallback callback, object state);
    List<string> End_getFavoriteMidsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAllContactIdsForChannel(AsyncCallback callback, object state);
    List<string> End_getAllContactIdsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_displayBuddySubscriberCount(AsyncCallback callback, object state);
    long End_displayBuddySubscriberCount(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getProfileForChannel(AsyncCallback callback, object state);
    Profile End_getProfileForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserTickets(AsyncCallback callback, object state, List<string> userMids);
    List<UserTicketResponse> End_getUserTickets(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getOAFriendMids(AsyncCallback callback, object state);
    List<string> End_getOAFriendMids(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_searchPaidCallUserRate(AsyncCallback callback, object state, string countryCode, string language);
    List<PaidCallUserRate> End_searchPaidCallUserRate(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getJoinedGroupIdsForChannel(AsyncCallback callback, object state);
    List<string> End_getJoinedGroupIdsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_acquireGroupCallRoute(AsyncCallback callback, object state, string chatMid, GroupCallMediaType mediaType);
    GroupCallRoute End_acquireGroupCallRoute(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserMidsWhoAddedMe(AsyncCallback callback, object state);
    List<string> End_getUserMidsWhoAddedMe(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getIdentityCredential(AsyncCallback callback, object state);
    IdentityCredential End_getIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_addOperationForChannel(AsyncCallback callback, object state, OpType opType, string param1, string param2, string param3);
    void End_addOperationForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSimpleChannelContacts(AsyncCallback callback, object state, List<string> ids, bool statusSticonFallbackDisabled);
    List<SimpleChannelContact> End_getSimpleChannelContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserLastSentMessageTimeStamp(AsyncCallback callback, object state, string mid);
    long End_getUserLastSentMessageTimeStamp(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserStatus(AsyncCallback callback, object state, string mid)
    {
      return send_getUserStatus(callback, state, mid);
    }

    public UserStatus End_getUserStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserStatus();
    }

    #endif

    public UserStatus getUserStatus(string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserStatus(null, null, mid);
      return End_getUserStatus(asyncResult);

      #else
      send_getUserStatus(mid);
      return recv_getUserStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserStatus(AsyncCallback callback, object state, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserStatus", TMessageType.Call, seqid_));
      getUserStatus_args args = new getUserStatus_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserStatus(string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserStatus", TMessageType.Call, seqid_));
      getUserStatus_args args = new getUserStatus_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UserStatus recv_getUserStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserStatus_result result = new getUserStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateProfileAttributeForChannel(AsyncCallback callback, object state, ProfileAttribute profileAttribute, string @value)
    {
      return send_updateProfileAttributeForChannel(callback, state, profileAttribute, @value);
    }

    public void End_updateProfileAttributeForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateProfileAttributeForChannel();
    }

    #endif

    public void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateProfileAttributeForChannel(null, null, profileAttribute, @value);
      End_updateProfileAttributeForChannel(asyncResult);

      #else
      send_updateProfileAttributeForChannel(profileAttribute, @value);
      recv_updateProfileAttributeForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateProfileAttributeForChannel(AsyncCallback callback, object state, ProfileAttribute profileAttribute, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.Call, seqid_));
      updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
      args.ProfileAttribute = profileAttribute;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.Call, seqid_));
      updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
      args.ProfileAttribute = profileAttribute;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateProfileAttributeForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateProfileAttributeForChannel_result result = new updateProfileAttributeForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateExtendedProfileAttribute(AsyncCallback callback, object state, ExtendedProfileAttribute attr, ExtendedProfile extendedProfile)
    {
      return send_updateExtendedProfileAttribute(callback, state, attr, extendedProfile);
    }

    public void End_updateExtendedProfileAttribute(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateExtendedProfileAttribute();
    }

    #endif

    public void updateExtendedProfileAttribute(ExtendedProfileAttribute attr, ExtendedProfile extendedProfile)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateExtendedProfileAttribute(null, null, attr, extendedProfile);
      End_updateExtendedProfileAttribute(asyncResult);

      #else
      send_updateExtendedProfileAttribute(attr, extendedProfile);
      recv_updateExtendedProfileAttribute();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateExtendedProfileAttribute(AsyncCallback callback, object state, ExtendedProfileAttribute attr, ExtendedProfile extendedProfile)
    {
      oprot_.WriteMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.Call, seqid_));
      updateExtendedProfileAttribute_args args = new updateExtendedProfileAttribute_args();
      args.Attr = attr;
      args.ExtendedProfile = extendedProfile;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateExtendedProfileAttribute(ExtendedProfileAttribute attr, ExtendedProfile extendedProfile)
    {
      oprot_.WriteMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.Call, seqid_));
      updateExtendedProfileAttribute_args args = new updateExtendedProfileAttribute_args();
      args.Attr = attr;
      args.ExtendedProfile = extendedProfile;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateExtendedProfileAttribute()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateExtendedProfileAttribute_result result = new updateExtendedProfileAttribute_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAllSimpleChannelContacts(AsyncCallback callback, object state, bool statusSticonFallbackDisabled)
    {
      return send_getAllSimpleChannelContacts(callback, state, statusSticonFallbackDisabled);
    }

    public List<SimpleChannelContact> End_getAllSimpleChannelContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllSimpleChannelContacts();
    }

    #endif

    public List<SimpleChannelContact> getAllSimpleChannelContacts(bool statusSticonFallbackDisabled)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAllSimpleChannelContacts(null, null, statusSticonFallbackDisabled);
      return End_getAllSimpleChannelContacts(asyncResult);

      #else
      send_getAllSimpleChannelContacts(statusSticonFallbackDisabled);
      return recv_getAllSimpleChannelContacts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllSimpleChannelContacts(AsyncCallback callback, object state, bool statusSticonFallbackDisabled)
    {
      oprot_.WriteMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.Call, seqid_));
      getAllSimpleChannelContacts_args args = new getAllSimpleChannelContacts_args();
      args.StatusSticonFallbackDisabled = statusSticonFallbackDisabled;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAllSimpleChannelContacts(bool statusSticonFallbackDisabled)
    {
      oprot_.WriteMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.Call, seqid_));
      getAllSimpleChannelContacts_args args = new getAllSimpleChannelContacts_args();
      args.StatusSticonFallbackDisabled = statusSticonFallbackDisabled;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<SimpleChannelContact> recv_getAllSimpleChannelContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllSimpleChannelContacts_result result = new getAllSimpleChannelContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllSimpleChannelContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserIdentities(AsyncCallback callback, object state)
    {
      return send_getUserIdentities(callback, state);
    }

    public Dictionary<RegistrationType, string> End_getUserIdentities(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserIdentities();
    }

    #endif

    public Dictionary<RegistrationType, string> getUserIdentities()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserIdentities(null, null);
      return End_getUserIdentities(asyncResult);

      #else
      send_getUserIdentities();
      return recv_getUserIdentities();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserIdentities(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserIdentities", TMessageType.Call, seqid_));
      getUserIdentities_args args = new getUserIdentities_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserIdentities()
    {
      oprot_.WriteMessageBegin(new TMessage("getUserIdentities", TMessageType.Call, seqid_));
      getUserIdentities_args args = new getUserIdentities_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<RegistrationType, string> recv_getUserIdentities()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserIdentities_result result = new getUserIdentities_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserIdentities failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_markPaidCallAd(AsyncCallback callback, object state, string dialedNumber, string language, bool disableCallerId)
    {
      return send_markPaidCallAd(callback, state, dialedNumber, language, disableCallerId);
    }

    public PaidCallDialing End_markPaidCallAd(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_markPaidCallAd();
    }

    #endif

    public PaidCallDialing markPaidCallAd(string dialedNumber, string language, bool disableCallerId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_markPaidCallAd(null, null, dialedNumber, language, disableCallerId);
      return End_markPaidCallAd(asyncResult);

      #else
      send_markPaidCallAd(dialedNumber, language, disableCallerId);
      return recv_markPaidCallAd();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_markPaidCallAd(AsyncCallback callback, object state, string dialedNumber, string language, bool disableCallerId)
    {
      oprot_.WriteMessageBegin(new TMessage("markPaidCallAd", TMessageType.Call, seqid_));
      markPaidCallAd_args args = new markPaidCallAd_args();
      args.DialedNumber = dialedNumber;
      args.Language = language;
      args.DisableCallerId = disableCallerId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_markPaidCallAd(string dialedNumber, string language, bool disableCallerId)
    {
      oprot_.WriteMessageBegin(new TMessage("markPaidCallAd", TMessageType.Call, seqid_));
      markPaidCallAd_args args = new markPaidCallAd_args();
      args.DialedNumber = dialedNumber;
      args.Language = language;
      args.DisableCallerId = disableCallerId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PaidCallDialing recv_markPaidCallAd()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      markPaidCallAd_result result = new markPaidCallAd_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "markPaidCallAd failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_isGroupMember(AsyncCallback callback, object state, string groupId)
    {
      return send_isGroupMember(callback, state, groupId);
    }

    public bool End_isGroupMember(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isGroupMember();
    }

    #endif

    public bool isGroupMember(string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_isGroupMember(null, null, groupId);
      return End_isGroupMember(asyncResult);

      #else
      send_isGroupMember(groupId);
      return recv_isGroupMember();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_isGroupMember(AsyncCallback callback, object state, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("isGroupMember", TMessageType.Call, seqid_));
      isGroupMember_args args = new isGroupMember_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_isGroupMember(string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("isGroupMember", TMessageType.Call, seqid_));
      isGroupMember_args args = new isGroupMember_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_isGroupMember()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isGroupMember_result result = new isGroupMember_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isGroupMember failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPhoneInfoFromPhoneNumber(AsyncCallback callback, object state, string region, string phoneNumber)
    {
      return send_getPhoneInfoFromPhoneNumber(callback, state, region, phoneNumber);
    }

    public PhoneInfoForChannel End_getPhoneInfoFromPhoneNumber(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPhoneInfoFromPhoneNumber();
    }

    #endif

    public PhoneInfoForChannel getPhoneInfoFromPhoneNumber(string region, string phoneNumber)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPhoneInfoFromPhoneNumber(null, null, region, phoneNumber);
      return End_getPhoneInfoFromPhoneNumber(asyncResult);

      #else
      send_getPhoneInfoFromPhoneNumber(region, phoneNumber);
      return recv_getPhoneInfoFromPhoneNumber();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPhoneInfoFromPhoneNumber(AsyncCallback callback, object state, string region, string phoneNumber)
    {
      oprot_.WriteMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.Call, seqid_));
      getPhoneInfoFromPhoneNumber_args args = new getPhoneInfoFromPhoneNumber_args();
      args.Region = region;
      args.PhoneNumber = phoneNumber;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPhoneInfoFromPhoneNumber(string region, string phoneNumber)
    {
      oprot_.WriteMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.Call, seqid_));
      getPhoneInfoFromPhoneNumber_args args = new getPhoneInfoFromPhoneNumber_args();
      args.Region = region;
      args.PhoneNumber = phoneNumber;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PhoneInfoForChannel recv_getPhoneInfoFromPhoneNumber()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPhoneInfoFromPhoneNumber_result result = new getPhoneInfoFromPhoneNumber_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPhoneInfoFromPhoneNumber failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_redeemPaidCallVoucher(AsyncCallback callback, object state, string serial, string language)
    {
      return send_redeemPaidCallVoucher(callback, state, serial, language);
    }

    public PaidCallRedeemResult End_redeemPaidCallVoucher(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_redeemPaidCallVoucher();
    }

    #endif

    public PaidCallRedeemResult redeemPaidCallVoucher(string serial, string language)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_redeemPaidCallVoucher(null, null, serial, language);
      return End_redeemPaidCallVoucher(asyncResult);

      #else
      send_redeemPaidCallVoucher(serial, language);
      return recv_redeemPaidCallVoucher();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_redeemPaidCallVoucher(AsyncCallback callback, object state, string serial, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.Call, seqid_));
      redeemPaidCallVoucher_args args = new redeemPaidCallVoucher_args();
      args.Serial = serial;
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_redeemPaidCallVoucher(string serial, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.Call, seqid_));
      redeemPaidCallVoucher_args args = new redeemPaidCallVoucher_args();
      args.Serial = serial;
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PaidCallRedeemResult recv_redeemPaidCallVoucher()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      redeemPaidCallVoucher_result result = new redeemPaidCallVoucher_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "redeemPaidCallVoucher failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPreferredDisplayName(AsyncCallback callback, object state, List<string> mids)
    {
      return send_getPreferredDisplayName(callback, state, mids);
    }

    public Dictionary<string, string> End_getPreferredDisplayName(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPreferredDisplayName();
    }

    #endif

    public Dictionary<string, string> getPreferredDisplayName(List<string> mids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPreferredDisplayName(null, null, mids);
      return End_getPreferredDisplayName(asyncResult);

      #else
      send_getPreferredDisplayName(mids);
      return recv_getPreferredDisplayName();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPreferredDisplayName(AsyncCallback callback, object state, List<string> mids)
    {
      oprot_.WriteMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.Call, seqid_));
      getPreferredDisplayName_args args = new getPreferredDisplayName_args();
      args.Mids = mids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPreferredDisplayName(List<string> mids)
    {
      oprot_.WriteMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.Call, seqid_));
      getPreferredDisplayName_args args = new getPreferredDisplayName_args();
      args.Mids = mids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, string> recv_getPreferredDisplayName()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPreferredDisplayName_result result = new getPreferredDisplayName_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPreferredDisplayName failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getContactsForChannel(AsyncCallback callback, object state, List<string> ids)
    {
      return send_getContactsForChannel(callback, state, ids);
    }

    public List<Contact> End_getContactsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getContactsForChannel();
    }

    #endif

    public List<Contact> getContactsForChannel(List<string> ids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getContactsForChannel(null, null, ids);
      return End_getContactsForChannel(asyncResult);

      #else
      send_getContactsForChannel(ids);
      return recv_getContactsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getContactsForChannel(AsyncCallback callback, object state, List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getContactsForChannel", TMessageType.Call, seqid_));
      getContactsForChannel_args args = new getContactsForChannel_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getContactsForChannel(List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getContactsForChannel", TMessageType.Call, seqid_));
      getContactsForChannel_args args = new getContactsForChannel_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Contact> recv_getContactsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getContactsForChannel_result result = new getContactsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContactsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCallCreditProducts(AsyncCallback callback, object state, PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)
    {
      return send_getCallCreditProducts(callback, state, appStoreCode, pgCode, country, language);
    }

    public List<CoinProductItem> End_getCallCreditProducts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCallCreditProducts();
    }

    #endif

    public List<CoinProductItem> getCallCreditProducts(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCallCreditProducts(null, null, appStoreCode, pgCode, country, language);
      return End_getCallCreditProducts(asyncResult);

      #else
      send_getCallCreditProducts(appStoreCode, pgCode, country, language);
      return recv_getCallCreditProducts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCallCreditProducts(AsyncCallback callback, object state, PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("getCallCreditProducts", TMessageType.Call, seqid_));
      getCallCreditProducts_args args = new getCallCreditProducts_args();
      args.AppStoreCode = appStoreCode;
      args.PgCode = pgCode;
      args.Country = country;
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCallCreditProducts(PaymentType appStoreCode, PaymentPgType pgCode, string country, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("getCallCreditProducts", TMessageType.Call, seqid_));
      getCallCreditProducts_args args = new getCallCreditProducts_args();
      args.AppStoreCode = appStoreCode;
      args.PgCode = pgCode;
      args.Country = country;
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<CoinProductItem> recv_getCallCreditProducts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCallCreditProducts_result result = new getCallCreditProducts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCallCreditProducts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCompactContacts(AsyncCallback callback, object state, long lastModifiedTimestamp)
    {
      return send_getCompactContacts(callback, state, lastModifiedTimestamp);
    }

    public List<CompactContact> End_getCompactContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCompactContacts();
    }

    #endif

    public List<CompactContact> getCompactContacts(long lastModifiedTimestamp)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCompactContacts(null, null, lastModifiedTimestamp);
      return End_getCompactContacts(asyncResult);

      #else
      send_getCompactContacts(lastModifiedTimestamp);
      return recv_getCompactContacts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCompactContacts(AsyncCallback callback, object state, long lastModifiedTimestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactContacts", TMessageType.Call, seqid_));
      getCompactContacts_args args = new getCompactContacts_args();
      args.LastModifiedTimestamp = lastModifiedTimestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCompactContacts(long lastModifiedTimestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactContacts", TMessageType.Call, seqid_));
      getCompactContacts_args args = new getCompactContacts_args();
      args.LastModifiedTimestamp = lastModifiedTimestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<CompactContact> recv_getCompactContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCompactContacts_result result = new getCompactContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompactContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_notifyNotiCenterEvent(AsyncCallback callback, object state, NotiCenterEventData @event)
    {
      return send_notifyNotiCenterEvent(callback, state, @event);
    }

    public void End_notifyNotiCenterEvent(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_notifyNotiCenterEvent();
    }

    #endif

    public void notifyNotiCenterEvent(NotiCenterEventData @event)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_notifyNotiCenterEvent(null, null, @event);
      End_notifyNotiCenterEvent(asyncResult);

      #else
      send_notifyNotiCenterEvent(@event);
      recv_notifyNotiCenterEvent();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_notifyNotiCenterEvent(AsyncCallback callback, object state, NotiCenterEventData @event)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.Call, seqid_));
      notifyNotiCenterEvent_args args = new notifyNotiCenterEvent_args();
      args.Event = @event;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_notifyNotiCenterEvent(NotiCenterEventData @event)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.Call, seqid_));
      notifyNotiCenterEvent_args args = new notifyNotiCenterEvent_args();
      args.Event = @event;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_notifyNotiCenterEvent()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      notifyNotiCenterEvent_result result = new notifyNotiCenterEvent_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_isInContact(AsyncCallback callback, object state, string mid)
    {
      return send_isInContact(callback, state, mid);
    }

    public bool End_isInContact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isInContact();
    }

    #endif

    public bool isInContact(string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_isInContact(null, null, mid);
      return End_isInContact(asyncResult);

      #else
      send_isInContact(mid);
      return recv_isInContact();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_isInContact(AsyncCallback callback, object state, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("isInContact", TMessageType.Call, seqid_));
      isInContact_args args = new isInContact_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_isInContact(string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("isInContact", TMessageType.Call, seqid_));
      isInContact_args args = new isInContact_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_isInContact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isInContact_result result = new isInContact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isInContact failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_lookupGroupMembers(AsyncCallback callback, object state, string groupId, List<string> mids)
    {
      return send_lookupGroupMembers(callback, state, groupId, mids);
    }

    public List<SimpleChannelContact> End_lookupGroupMembers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_lookupGroupMembers();
    }

    #endif

    public List<SimpleChannelContact> lookupGroupMembers(string groupId, List<string> mids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_lookupGroupMembers(null, null, groupId, mids);
      return End_lookupGroupMembers(asyncResult);

      #else
      send_lookupGroupMembers(groupId, mids);
      return recv_lookupGroupMembers();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_lookupGroupMembers(AsyncCallback callback, object state, string groupId, List<string> mids)
    {
      oprot_.WriteMessageBegin(new TMessage("lookupGroupMembers", TMessageType.Call, seqid_));
      lookupGroupMembers_args args = new lookupGroupMembers_args();
      args.GroupId = groupId;
      args.Mids = mids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_lookupGroupMembers(string groupId, List<string> mids)
    {
      oprot_.WriteMessageBegin(new TMessage("lookupGroupMembers", TMessageType.Call, seqid_));
      lookupGroupMembers_args args = new lookupGroupMembers_args();
      args.GroupId = groupId;
      args.Mids = mids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<SimpleChannelContact> recv_lookupGroupMembers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      lookupGroupMembers_result result = new lookupGroupMembers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lookupGroupMembers failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRoomInformation(AsyncCallback callback, object state, string roomMid)
    {
      return send_getRoomInformation(callback, state, roomMid);
    }

    public Room End_getRoomInformation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRoomInformation();
    }

    #endif

    public Room getRoomInformation(string roomMid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRoomInformation(null, null, roomMid);
      return End_getRoomInformation(asyncResult);

      #else
      send_getRoomInformation(roomMid);
      return recv_getRoomInformation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRoomInformation(AsyncCallback callback, object state, string roomMid)
    {
      oprot_.WriteMessageBegin(new TMessage("getRoomInformation", TMessageType.Call, seqid_));
      getRoomInformation_args args = new getRoomInformation_args();
      args.RoomMid = roomMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRoomInformation(string roomMid)
    {
      oprot_.WriteMessageBegin(new TMessage("getRoomInformation", TMessageType.Call, seqid_));
      getRoomInformation_args args = new getRoomInformation_args();
      args.RoomMid = roomMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Room recv_getRoomInformation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRoomInformation_result result = new getRoomInformation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRoomInformation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupCall(AsyncCallback callback, object state, string chatMid)
    {
      return send_getGroupCall(callback, state, chatMid);
    }

    public GroupCall End_getGroupCall(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupCall();
    }

    #endif

    public GroupCall getGroupCall(string chatMid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupCall(null, null, chatMid);
      return End_getGroupCall(asyncResult);

      #else
      send_getGroupCall(chatMid);
      return recv_getGroupCall();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupCall(AsyncCallback callback, object state, string chatMid)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupCall", TMessageType.Call, seqid_));
      getGroupCall_args args = new getGroupCall_args();
      args.ChatMid = chatMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupCall(string chatMid)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupCall", TMessageType.Call, seqid_));
      getGroupCall_args args = new getGroupCall_args();
      args.ChatMid = chatMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GroupCall recv_getGroupCall()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupCall_result result = new getGroupCall_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupCall failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_isAllowSecondaryDeviceLogin(AsyncCallback callback, object state)
    {
      return send_isAllowSecondaryDeviceLogin(callback, state);
    }

    public bool End_isAllowSecondaryDeviceLogin(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isAllowSecondaryDeviceLogin();
    }

    #endif

    public bool isAllowSecondaryDeviceLogin()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_isAllowSecondaryDeviceLogin(null, null);
      return End_isAllowSecondaryDeviceLogin(asyncResult);

      #else
      send_isAllowSecondaryDeviceLogin();
      return recv_isAllowSecondaryDeviceLogin();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_isAllowSecondaryDeviceLogin(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.Call, seqid_));
      isAllowSecondaryDeviceLogin_args args = new isAllowSecondaryDeviceLogin_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_isAllowSecondaryDeviceLogin()
    {
      oprot_.WriteMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.Call, seqid_));
      isAllowSecondaryDeviceLogin_args args = new isAllowSecondaryDeviceLogin_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_isAllowSecondaryDeviceLogin()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isAllowSecondaryDeviceLogin_result result = new isAllowSecondaryDeviceLogin_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isAllowSecondaryDeviceLogin failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPrimaryClientForChannel(AsyncCallback callback, object state)
    {
      return send_getPrimaryClientForChannel(callback, state);
    }

    public SimpleChannelClient End_getPrimaryClientForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPrimaryClientForChannel();
    }

    #endif

    public SimpleChannelClient getPrimaryClientForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPrimaryClientForChannel(null, null);
      return End_getPrimaryClientForChannel(asyncResult);

      #else
      send_getPrimaryClientForChannel();
      return recv_getPrimaryClientForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPrimaryClientForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.Call, seqid_));
      getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPrimaryClientForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.Call, seqid_));
      getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SimpleChannelClient recv_getPrimaryClientForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPrimaryClientForChannel_result result = new getPrimaryClientForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPrimaryClientForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createRoomWithBuddy(AsyncCallback callback, object state, int reqSeq, string buddyMid, List<string> contactIds)
    {
      return send_createRoomWithBuddy(callback, state, reqSeq, buddyMid, contactIds);
    }

    public Room End_createRoomWithBuddy(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createRoomWithBuddy();
    }

    #endif

    public Room createRoomWithBuddy(int reqSeq, string buddyMid, List<string> contactIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createRoomWithBuddy(null, null, reqSeq, buddyMid, contactIds);
      return End_createRoomWithBuddy(asyncResult);

      #else
      send_createRoomWithBuddy(reqSeq, buddyMid, contactIds);
      return recv_createRoomWithBuddy();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createRoomWithBuddy(AsyncCallback callback, object state, int reqSeq, string buddyMid, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.Call, seqid_));
      createRoomWithBuddy_args args = new createRoomWithBuddy_args();
      args.ReqSeq = reqSeq;
      args.BuddyMid = buddyMid;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createRoomWithBuddy(int reqSeq, string buddyMid, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.Call, seqid_));
      createRoomWithBuddy_args args = new createRoomWithBuddy_args();
      args.ReqSeq = reqSeq;
      args.BuddyMid = buddyMid;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Room recv_createRoomWithBuddy()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createRoomWithBuddy_result result = new createRoomWithBuddy_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createRoomWithBuddy failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getDisplayName(AsyncCallback callback, object state, string mid)
    {
      return send_getDisplayName(callback, state, mid);
    }

    public string End_getDisplayName(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDisplayName();
    }

    #endif

    public string getDisplayName(string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getDisplayName(null, null, mid);
      return End_getDisplayName(asyncResult);

      #else
      send_getDisplayName(mid);
      return recv_getDisplayName();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getDisplayName(AsyncCallback callback, object state, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Call, seqid_));
      getDisplayName_args args = new getDisplayName_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getDisplayName(string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Call, seqid_));
      getDisplayName_args args = new getDisplayName_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getDisplayName()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDisplayName_result result = new getDisplayName_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDisplayName failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPaidCallMetadata(AsyncCallback callback, object state, string language)
    {
      return send_getPaidCallMetadata(callback, state, language);
    }

    public PaidCallMetadataResult End_getPaidCallMetadata(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPaidCallMetadata();
    }

    #endif

    public PaidCallMetadataResult getPaidCallMetadata(string language)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPaidCallMetadata(null, null, language);
      return End_getPaidCallMetadata(asyncResult);

      #else
      send_getPaidCallMetadata(language);
      return recv_getPaidCallMetadata();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPaidCallMetadata(AsyncCallback callback, object state, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.Call, seqid_));
      getPaidCallMetadata_args args = new getPaidCallMetadata_args();
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPaidCallMetadata(string language)
    {
      oprot_.WriteMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.Call, seqid_));
      getPaidCallMetadata_args args = new getPaidCallMetadata_args();
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PaidCallMetadataResult recv_getPaidCallMetadata()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPaidCallMetadata_result result = new getPaidCallMetadata_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPaidCallMetadata failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMid(AsyncCallback callback, object state)
    {
      return send_getMid(callback, state);
    }

    public string End_getMid(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMid();
    }

    #endif

    public string getMid()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMid(null, null);
      return End_getMid(asyncResult);

      #else
      send_getMid();
      return recv_getMid();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMid(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getMid", TMessageType.Call, seqid_));
      getMid_args args = new getMid_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMid()
    {
      oprot_.WriteMessageBegin(new TMessage("getMid", TMessageType.Call, seqid_));
      getMid_args args = new getMid_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getMid()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMid_result result = new getMid_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMid failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserCountryForBilling(AsyncCallback callback, object state, string country, string remoteIp)
    {
      return send_getUserCountryForBilling(callback, state, country, remoteIp);
    }

    public string End_getUserCountryForBilling(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserCountryForBilling();
    }

    #endif

    public string getUserCountryForBilling(string country, string remoteIp)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserCountryForBilling(null, null, country, remoteIp);
      return End_getUserCountryForBilling(asyncResult);

      #else
      send_getUserCountryForBilling(country, remoteIp);
      return recv_getUserCountryForBilling();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserCountryForBilling(AsyncCallback callback, object state, string country, string remoteIp)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.Call, seqid_));
      getUserCountryForBilling_args args = new getUserCountryForBilling_args();
      args.Country = country;
      args.RemoteIp = remoteIp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserCountryForBilling(string country, string remoteIp)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.Call, seqid_));
      getUserCountryForBilling_args args = new getUserCountryForBilling_args();
      args.Country = country;
      args.RemoteIp = remoteIp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getUserCountryForBilling()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserCountryForBilling_result result = new getUserCountryForBilling_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserCountryForBilling failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getFavoriteGroupIdsForChannel(AsyncCallback callback, object state)
    {
      return send_getFavoriteGroupIdsForChannel(callback, state);
    }

    public List<string> End_getFavoriteGroupIdsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFavoriteGroupIdsForChannel();
    }

    #endif

    public List<string> getFavoriteGroupIdsForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getFavoriteGroupIdsForChannel(null, null);
      return End_getFavoriteGroupIdsForChannel(asyncResult);

      #else
      send_getFavoriteGroupIdsForChannel();
      return recv_getFavoriteGroupIdsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFavoriteGroupIdsForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.Call, seqid_));
      getFavoriteGroupIdsForChannel_args args = new getFavoriteGroupIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getFavoriteGroupIdsForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.Call, seqid_));
      getFavoriteGroupIdsForChannel_args args = new getFavoriteGroupIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getFavoriteGroupIdsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFavoriteGroupIdsForChannel_result result = new getFavoriteGroupIdsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFavoriteGroupIdsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPaidCallHistory(AsyncCallback callback, object state, long start, int size, string language)
    {
      return send_getPaidCallHistory(callback, state, start, size, language);
    }

    public PaidCallHistoryResult End_getPaidCallHistory(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPaidCallHistory();
    }

    #endif

    public PaidCallHistoryResult getPaidCallHistory(long start, int size, string language)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPaidCallHistory(null, null, start, size, language);
      return End_getPaidCallHistory(asyncResult);

      #else
      send_getPaidCallHistory(start, size, language);
      return recv_getPaidCallHistory();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPaidCallHistory(AsyncCallback callback, object state, long start, int size, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("getPaidCallHistory", TMessageType.Call, seqid_));
      getPaidCallHistory_args args = new getPaidCallHistory_args();
      args.Start = start;
      args.Size = size;
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPaidCallHistory(long start, int size, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("getPaidCallHistory", TMessageType.Call, seqid_));
      getPaidCallHistory_args args = new getPaidCallHistory_args();
      args.Start = start;
      args.Size = size;
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PaidCallHistoryResult recv_getPaidCallHistory()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPaidCallHistory_result result = new getPaidCallHistory_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPaidCallHistory failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendPinCodeOperation(AsyncCallback callback, object state, string verifier)
    {
      return send_sendPinCodeOperation(callback, state, verifier);
    }

    public void End_sendPinCodeOperation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendPinCodeOperation();
    }

    #endif

    public void sendPinCodeOperation(string verifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendPinCodeOperation(null, null, verifier);
      End_sendPinCodeOperation(asyncResult);

      #else
      send_sendPinCodeOperation(verifier);
      recv_sendPinCodeOperation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendPinCodeOperation(AsyncCallback callback, object state, string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.Call, seqid_));
      sendPinCodeOperation_args args = new sendPinCodeOperation_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendPinCodeOperation(string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.Call, seqid_));
      sendPinCodeOperation_args args = new sendPinCodeOperation_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendPinCodeOperation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendPinCodeOperation_result result = new sendPinCodeOperation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_inviteIntoGroupCall(AsyncCallback callback, object state, string chatMid, List<string> memberMids, GroupCallMediaType mediaType)
    {
      return send_inviteIntoGroupCall(callback, state, chatMid, memberMids, mediaType);
    }

    public void End_inviteIntoGroupCall(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_inviteIntoGroupCall();
    }

    #endif

    public void inviteIntoGroupCall(string chatMid, List<string> memberMids, GroupCallMediaType mediaType)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_inviteIntoGroupCall(null, null, chatMid, memberMids, mediaType);
      End_inviteIntoGroupCall(asyncResult);

      #else
      send_inviteIntoGroupCall(chatMid, memberMids, mediaType);
      recv_inviteIntoGroupCall();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_inviteIntoGroupCall(AsyncCallback callback, object state, string chatMid, List<string> memberMids, GroupCallMediaType mediaType)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.Call, seqid_));
      inviteIntoGroupCall_args args = new inviteIntoGroupCall_args();
      args.ChatMid = chatMid;
      args.MemberMids = memberMids;
      args.MediaType = mediaType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_inviteIntoGroupCall(string chatMid, List<string> memberMids, GroupCallMediaType mediaType)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.Call, seqid_));
      inviteIntoGroupCall_args args = new inviteIntoGroupCall_args();
      args.ChatMid = chatMid;
      args.MemberMids = memberMids;
      args.MediaType = mediaType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_inviteIntoGroupCall()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      inviteIntoGroupCall_result result = new inviteIntoGroupCall_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getFriendMids(AsyncCallback callback, object state)
    {
      return send_getFriendMids(callback, state);
    }

    public List<string> End_getFriendMids(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFriendMids();
    }

    #endif

    public List<string> getFriendMids()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getFriendMids(null, null);
      return End_getFriendMids(asyncResult);

      #else
      send_getFriendMids();
      return recv_getFriendMids();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFriendMids(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getFriendMids", TMessageType.Call, seqid_));
      getFriendMids_args args = new getFriendMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getFriendMids()
    {
      oprot_.WriteMessageBegin(new TMessage("getFriendMids", TMessageType.Call, seqid_));
      getFriendMids_args args = new getFriendMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getFriendMids()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFriendMids_result result = new getFriendMids_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriendMids failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMetaProfile(AsyncCallback callback, object state)
    {
      return send_getMetaProfile(callback, state);
    }

    public MetaProfile End_getMetaProfile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMetaProfile();
    }

    #endif

    public MetaProfile getMetaProfile()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMetaProfile(null, null);
      return End_getMetaProfile(asyncResult);

      #else
      send_getMetaProfile();
      return recv_getMetaProfile();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMetaProfile(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getMetaProfile", TMessageType.Call, seqid_));
      getMetaProfile_args args = new getMetaProfile_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMetaProfile()
    {
      oprot_.WriteMessageBegin(new TMessage("getMetaProfile", TMessageType.Call, seqid_));
      getMetaProfile_args args = new getMetaProfile_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public MetaProfile recv_getMetaProfile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMetaProfile_result result = new getMetaProfile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMetaProfile failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessageForChannel(AsyncCallback callback, object state, Message message)
    {
      return send_sendMessageForChannel(callback, state, message);
    }

    public Message End_sendMessageForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendMessageForChannel();
    }

    #endif

    public Message sendMessageForChannel(Message message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessageForChannel(null, null, message);
      return End_sendMessageForChannel(asyncResult);

      #else
      send_sendMessageForChannel(message);
      return recv_sendMessageForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessageForChannel(AsyncCallback callback, object state, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageForChannel", TMessageType.Call, seqid_));
      sendMessageForChannel_args args = new sendMessageForChannel_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessageForChannel(Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageForChannel", TMessageType.Call, seqid_));
      sendMessageForChannel_args args = new sendMessageForChannel_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Message recv_sendMessageForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessageForChannel_result result = new sendMessageForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessageForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_activeBuddySubscriberCount(AsyncCallback callback, object state)
    {
      return send_activeBuddySubscriberCount(callback, state);
    }

    public long End_activeBuddySubscriberCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_activeBuddySubscriberCount();
    }

    #endif

    public long activeBuddySubscriberCount()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_activeBuddySubscriberCount(null, null);
      return End_activeBuddySubscriberCount(asyncResult);

      #else
      send_activeBuddySubscriberCount();
      return recv_activeBuddySubscriberCount();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_activeBuddySubscriberCount(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.Call, seqid_));
      activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_activeBuddySubscriberCount()
    {
      oprot_.WriteMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.Call, seqid_));
      activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_activeBuddySubscriberCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      activeBuddySubscriberCount_result result = new activeBuddySubscriberCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activeBuddySubscriberCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCallCreditPurchaseHistory(AsyncCallback callback, object state, CoinHistoryCondition request)
    {
      return send_getCallCreditPurchaseHistory(callback, state, request);
    }

    public CoinHistoryResult End_getCallCreditPurchaseHistory(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCallCreditPurchaseHistory();
    }

    #endif

    public CoinHistoryResult getCallCreditPurchaseHistory(CoinHistoryCondition request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCallCreditPurchaseHistory(null, null, request);
      return End_getCallCreditPurchaseHistory(asyncResult);

      #else
      send_getCallCreditPurchaseHistory(request);
      return recv_getCallCreditPurchaseHistory();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCallCreditPurchaseHistory(AsyncCallback callback, object state, CoinHistoryCondition request)
    {
      oprot_.WriteMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.Call, seqid_));
      getCallCreditPurchaseHistory_args args = new getCallCreditPurchaseHistory_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCallCreditPurchaseHistory(CoinHistoryCondition request)
    {
      oprot_.WriteMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.Call, seqid_));
      getCallCreditPurchaseHistory_args args = new getCallCreditPurchaseHistory_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public CoinHistoryResult recv_getCallCreditPurchaseHistory()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCallCreditPurchaseHistory_result result = new getCallCreditPurchaseHistory_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCallCreditPurchaseHistory failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_isRoomMember(AsyncCallback callback, object state, string roomId)
    {
      return send_isRoomMember(callback, state, roomId);
    }

    public bool End_isRoomMember(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isRoomMember();
    }

    #endif

    public bool isRoomMember(string roomId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_isRoomMember(null, null, roomId);
      return End_isRoomMember(asyncResult);

      #else
      send_isRoomMember(roomId);
      return recv_isRoomMember();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_isRoomMember(AsyncCallback callback, object state, string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("isRoomMember", TMessageType.Call, seqid_));
      isRoomMember_args args = new isRoomMember_args();
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_isRoomMember(string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("isRoomMember", TMessageType.Call, seqid_));
      isRoomMember_args args = new isRoomMember_args();
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_isRoomMember()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isRoomMember_result result = new isRoomMember_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isRoomMember failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendSystemOAMessage(AsyncCallback callback, object state, Message message)
    {
      return send_sendSystemOAMessage(callback, state, message);
    }

    public Message End_sendSystemOAMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendSystemOAMessage();
    }

    #endif

    public Message sendSystemOAMessage(Message message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendSystemOAMessage(null, null, message);
      return End_sendSystemOAMessage(asyncResult);

      #else
      send_sendSystemOAMessage(message);
      return recv_sendSystemOAMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendSystemOAMessage(AsyncCallback callback, object state, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.Call, seqid_));
      sendSystemOAMessage_args args = new sendSystemOAMessage_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendSystemOAMessage(Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.Call, seqid_));
      sendSystemOAMessage_args args = new sendSystemOAMessage_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Message recv_sendSystemOAMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendSystemOAMessage_result result = new sendSystemOAMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendSystemOAMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_acquirePaidCallRoute(AsyncCallback callback, object state, PaidCallType paidCallType, string dialedNumber, string language, string networkCode, bool disableCallerId, string referer, string adSessionId)
    {
      return send_acquirePaidCallRoute(callback, state, paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId);
    }

    public PaidCallResponse End_acquirePaidCallRoute(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_acquirePaidCallRoute();
    }

    #endif

    public PaidCallResponse acquirePaidCallRoute(PaidCallType paidCallType, string dialedNumber, string language, string networkCode, bool disableCallerId, string referer, string adSessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_acquirePaidCallRoute(null, null, paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId);
      return End_acquirePaidCallRoute(asyncResult);

      #else
      send_acquirePaidCallRoute(paidCallType, dialedNumber, language, networkCode, disableCallerId, referer, adSessionId);
      return recv_acquirePaidCallRoute();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_acquirePaidCallRoute(AsyncCallback callback, object state, PaidCallType paidCallType, string dialedNumber, string language, string networkCode, bool disableCallerId, string referer, string adSessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.Call, seqid_));
      acquirePaidCallRoute_args args = new acquirePaidCallRoute_args();
      args.PaidCallType = paidCallType;
      args.DialedNumber = dialedNumber;
      args.Language = language;
      args.NetworkCode = networkCode;
      args.DisableCallerId = disableCallerId;
      args.Referer = referer;
      args.AdSessionId = adSessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_acquirePaidCallRoute(PaidCallType paidCallType, string dialedNumber, string language, string networkCode, bool disableCallerId, string referer, string adSessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.Call, seqid_));
      acquirePaidCallRoute_args args = new acquirePaidCallRoute_args();
      args.PaidCallType = paidCallType;
      args.DialedNumber = dialedNumber;
      args.Language = language;
      args.NetworkCode = networkCode;
      args.DisableCallerId = disableCallerId;
      args.Referer = referer;
      args.AdSessionId = adSessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PaidCallResponse recv_acquirePaidCallRoute()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      acquirePaidCallRoute_result result = new acquirePaidCallRoute_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquirePaidCallRoute failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupsForChannel(AsyncCallback callback, object state, List<string> groupIds)
    {
      return send_getGroupsForChannel(callback, state, groupIds);
    }

    public List<@Group> End_getGroupsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupsForChannel();
    }

    #endif

    public List<@Group> getGroupsForChannel(List<string> groupIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupsForChannel(null, null, groupIds);
      return End_getGroupsForChannel(asyncResult);

      #else
      send_getGroupsForChannel(groupIds);
      return recv_getGroupsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupsForChannel(AsyncCallback callback, object state, List<string> groupIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupsForChannel", TMessageType.Call, seqid_));
      getGroupsForChannel_args args = new getGroupsForChannel_args();
      args.GroupIds = groupIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupsForChannel(List<string> groupIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupsForChannel", TMessageType.Call, seqid_));
      getGroupsForChannel_args args = new getGroupsForChannel_args();
      args.GroupIds = groupIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<@Group> recv_getGroupsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupsForChannel_result result = new getGroupsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserCreateTime(AsyncCallback callback, object state)
    {
      return send_getUserCreateTime(callback, state);
    }

    public long End_getUserCreateTime(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserCreateTime();
    }

    #endif

    public long getUserCreateTime()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserCreateTime(null, null);
      return End_getUserCreateTime(asyncResult);

      #else
      send_getUserCreateTime();
      return recv_getUserCreateTime();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserCreateTime(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserCreateTime", TMessageType.Call, seqid_));
      getUserCreateTime_args args = new getUserCreateTime_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserCreateTime()
    {
      oprot_.WriteMessageBegin(new TMessage("getUserCreateTime", TMessageType.Call, seqid_));
      getUserCreateTime_args args = new getUserCreateTime_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_getUserCreateTime()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserCreateTime_result result = new getUserCreateTime_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserCreateTime failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerChannelCP(AsyncCallback callback, object state, string cpId, string registerPassword)
    {
      return send_registerChannelCP(callback, state, cpId, registerPassword);
    }

    public string End_registerChannelCP(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerChannelCP();
    }

    #endif

    public string registerChannelCP(string cpId, string registerPassword)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerChannelCP(null, null, cpId, registerPassword);
      return End_registerChannelCP(asyncResult);

      #else
      send_registerChannelCP(cpId, registerPassword);
      return recv_registerChannelCP();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerChannelCP(AsyncCallback callback, object state, string cpId, string registerPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("registerChannelCP", TMessageType.Call, seqid_));
      registerChannelCP_args args = new registerChannelCP_args();
      args.CpId = cpId;
      args.RegisterPassword = registerPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerChannelCP(string cpId, string registerPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("registerChannelCP", TMessageType.Call, seqid_));
      registerChannelCP_args args = new registerChannelCP_args();
      args.CpId = cpId;
      args.RegisterPassword = registerPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerChannelCP()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerChannelCP_result result = new registerChannelCP_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerChannelCP failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reserveCallCreditPurchase(AsyncCallback callback, object state, CoinPurchaseReservation request)
    {
      return send_reserveCallCreditPurchase(callback, state, request);
    }

    public PaymentReservationResult End_reserveCallCreditPurchase(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reserveCallCreditPurchase();
    }

    #endif

    public PaymentReservationResult reserveCallCreditPurchase(CoinPurchaseReservation request)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reserveCallCreditPurchase(null, null, request);
      return End_reserveCallCreditPurchase(asyncResult);

      #else
      send_reserveCallCreditPurchase(request);
      return recv_reserveCallCreditPurchase();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reserveCallCreditPurchase(AsyncCallback callback, object state, CoinPurchaseReservation request)
    {
      oprot_.WriteMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.Call, seqid_));
      reserveCallCreditPurchase_args args = new reserveCallCreditPurchase_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reserveCallCreditPurchase(CoinPurchaseReservation request)
    {
      oprot_.WriteMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.Call, seqid_));
      reserveCallCreditPurchase_args args = new reserveCallCreditPurchase_args();
      args.Request = request;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PaymentReservationResult recv_reserveCallCreditPurchase()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reserveCallCreditPurchase_result result = new reserveCallCreditPurchase_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reserveCallCreditPurchase failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_acquirePaidCallCurrencyExchangeRate(AsyncCallback callback, object state, string language)
    {
      return send_acquirePaidCallCurrencyExchangeRate(callback, state, language);
    }

    public List<PaidCallCurrencyExchangeRate> End_acquirePaidCallCurrencyExchangeRate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_acquirePaidCallCurrencyExchangeRate();
    }

    #endif

    public List<PaidCallCurrencyExchangeRate> acquirePaidCallCurrencyExchangeRate(string language)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_acquirePaidCallCurrencyExchangeRate(null, null, language);
      return End_acquirePaidCallCurrencyExchangeRate(asyncResult);

      #else
      send_acquirePaidCallCurrencyExchangeRate(language);
      return recv_acquirePaidCallCurrencyExchangeRate();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_acquirePaidCallCurrencyExchangeRate(AsyncCallback callback, object state, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.Call, seqid_));
      acquirePaidCallCurrencyExchangeRate_args args = new acquirePaidCallCurrencyExchangeRate_args();
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_acquirePaidCallCurrencyExchangeRate(string language)
    {
      oprot_.WriteMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.Call, seqid_));
      acquirePaidCallCurrencyExchangeRate_args args = new acquirePaidCallCurrencyExchangeRate_args();
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<PaidCallCurrencyExchangeRate> recv_acquirePaidCallCurrencyExchangeRate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      acquirePaidCallCurrencyExchangeRate_result result = new acquirePaidCallCurrencyExchangeRate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquirePaidCallCurrencyExchangeRate failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRoomMemberMidsForAppPlatform(AsyncCallback callback, object state, string roomId)
    {
      return send_getRoomMemberMidsForAppPlatform(callback, state, roomId);
    }

    public List<string> End_getRoomMemberMidsForAppPlatform(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRoomMemberMidsForAppPlatform();
    }

    #endif

    public List<string> getRoomMemberMidsForAppPlatform(string roomId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRoomMemberMidsForAppPlatform(null, null, roomId);
      return End_getRoomMemberMidsForAppPlatform(asyncResult);

      #else
      send_getRoomMemberMidsForAppPlatform(roomId);
      return recv_getRoomMemberMidsForAppPlatform();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRoomMemberMidsForAppPlatform(AsyncCallback callback, object state, string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.Call, seqid_));
      getRoomMemberMidsForAppPlatform_args args = new getRoomMemberMidsForAppPlatform_args();
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRoomMemberMidsForAppPlatform(string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.Call, seqid_));
      getRoomMemberMidsForAppPlatform_args args = new getRoomMemberMidsForAppPlatform_args();
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getRoomMemberMidsForAppPlatform()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRoomMemberMidsForAppPlatform_result result = new getRoomMemberMidsForAppPlatform_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRoomMemberMidsForAppPlatform failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPaidCallBalanceList(AsyncCallback callback, object state, string language)
    {
      return send_getPaidCallBalanceList(callback, state, language);
    }

    public List<PaidCallBalance> End_getPaidCallBalanceList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPaidCallBalanceList();
    }

    #endif

    public List<PaidCallBalance> getPaidCallBalanceList(string language)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPaidCallBalanceList(null, null, language);
      return End_getPaidCallBalanceList(asyncResult);

      #else
      send_getPaidCallBalanceList(language);
      return recv_getPaidCallBalanceList();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPaidCallBalanceList(AsyncCallback callback, object state, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.Call, seqid_));
      getPaidCallBalanceList_args args = new getPaidCallBalanceList_args();
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPaidCallBalanceList(string language)
    {
      oprot_.WriteMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.Call, seqid_));
      getPaidCallBalanceList_args args = new getPaidCallBalanceList_args();
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<PaidCallBalance> recv_getPaidCallBalanceList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPaidCallBalanceList_result result = new getPaidCallBalanceList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPaidCallBalanceList failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPersonalInfos(AsyncCallback callback, object state, THashSet<PersonalInfo> requiredPersonalInfos)
    {
      return send_getPersonalInfos(callback, state, requiredPersonalInfos);
    }

    public Dictionary<PersonalInfo, string> End_getPersonalInfos(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPersonalInfos();
    }

    #endif

    public Dictionary<PersonalInfo, string> getPersonalInfos(THashSet<PersonalInfo> requiredPersonalInfos)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPersonalInfos(null, null, requiredPersonalInfos);
      return End_getPersonalInfos(asyncResult);

      #else
      send_getPersonalInfos(requiredPersonalInfos);
      return recv_getPersonalInfos();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPersonalInfos(AsyncCallback callback, object state, THashSet<PersonalInfo> requiredPersonalInfos)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonalInfos", TMessageType.Call, seqid_));
      getPersonalInfos_args args = new getPersonalInfos_args();
      args.RequiredPersonalInfos = requiredPersonalInfos;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPersonalInfos(THashSet<PersonalInfo> requiredPersonalInfos)
    {
      oprot_.WriteMessageBegin(new TMessage("getPersonalInfos", TMessageType.Call, seqid_));
      getPersonalInfos_args args = new getPersonalInfos_args();
      args.RequiredPersonalInfos = requiredPersonalInfos;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<PersonalInfo, string> recv_getPersonalInfos()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPersonalInfos_result result = new getPersonalInfos_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPersonalInfos failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPrimaryClientsForChannel(AsyncCallback callback, object state, List<string> userMids)
    {
      return send_getPrimaryClientsForChannel(callback, state, userMids);
    }

    public List<SimpleChannelClient> End_getPrimaryClientsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPrimaryClientsForChannel();
    }

    #endif

    public List<SimpleChannelClient> getPrimaryClientsForChannel(List<string> userMids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPrimaryClientsForChannel(null, null, userMids);
      return End_getPrimaryClientsForChannel(asyncResult);

      #else
      send_getPrimaryClientsForChannel(userMids);
      return recv_getPrimaryClientsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPrimaryClientsForChannel(AsyncCallback callback, object state, List<string> userMids)
    {
      oprot_.WriteMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.Call, seqid_));
      getPrimaryClientsForChannel_args args = new getPrimaryClientsForChannel_args();
      args.UserMids = userMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPrimaryClientsForChannel(List<string> userMids)
    {
      oprot_.WriteMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.Call, seqid_));
      getPrimaryClientsForChannel_args args = new getPrimaryClientsForChannel_args();
      args.UserMids = userMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<SimpleChannelClient> recv_getPrimaryClientsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPrimaryClientsForChannel_result result = new getPrimaryClientsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPrimaryClientsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_addBuddyToContact(AsyncCallback callback, object state, string buddyMid)
    {
      return send_addBuddyToContact(callback, state, buddyMid);
    }

    public ContactTransition End_addBuddyToContact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addBuddyToContact();
    }

    #endif

    public ContactTransition addBuddyToContact(string buddyMid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_addBuddyToContact(null, null, buddyMid);
      return End_addBuddyToContact(asyncResult);

      #else
      send_addBuddyToContact(buddyMid);
      return recv_addBuddyToContact();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addBuddyToContact(AsyncCallback callback, object state, string buddyMid)
    {
      oprot_.WriteMessageBegin(new TMessage("addBuddyToContact", TMessageType.Call, seqid_));
      addBuddyToContact_args args = new addBuddyToContact_args();
      args.BuddyMid = buddyMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_addBuddyToContact(string buddyMid)
    {
      oprot_.WriteMessageBegin(new TMessage("addBuddyToContact", TMessageType.Call, seqid_));
      addBuddyToContact_args args = new addBuddyToContact_args();
      args.BuddyMid = buddyMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ContactTransition recv_addBuddyToContact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addBuddyToContact_result result = new addBuddyToContact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addBuddyToContact failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupMemberMidsForAppPlatform(AsyncCallback callback, object state, string groupId)
    {
      return send_getGroupMemberMidsForAppPlatform(callback, state, groupId);
    }

    public List<string> End_getGroupMemberMidsForAppPlatform(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupMemberMidsForAppPlatform();
    }

    #endif

    public List<string> getGroupMemberMidsForAppPlatform(string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupMemberMidsForAppPlatform(null, null, groupId);
      return End_getGroupMemberMidsForAppPlatform(asyncResult);

      #else
      send_getGroupMemberMidsForAppPlatform(groupId);
      return recv_getGroupMemberMidsForAppPlatform();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupMemberMidsForAppPlatform(AsyncCallback callback, object state, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.Call, seqid_));
      getGroupMemberMidsForAppPlatform_args args = new getGroupMemberMidsForAppPlatform_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupMemberMidsForAppPlatform(string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.Call, seqid_));
      getGroupMemberMidsForAppPlatform_args args = new getGroupMemberMidsForAppPlatform_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getGroupMemberMidsForAppPlatform()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupMemberMidsForAppPlatform_result result = new getGroupMemberMidsForAppPlatform_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupMemberMidsForAppPlatform failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserLanguage(AsyncCallback callback, object state)
    {
      return send_getUserLanguage(callback, state);
    }

    public string End_getUserLanguage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserLanguage();
    }

    #endif

    public string getUserLanguage()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserLanguage(null, null);
      return End_getUserLanguage(asyncResult);

      #else
      send_getUserLanguage();
      return recv_getUserLanguage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserLanguage(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserLanguage", TMessageType.Call, seqid_));
      getUserLanguage_args args = new getUserLanguage_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserLanguage()
    {
      oprot_.WriteMessageBegin(new TMessage("getUserLanguage", TMessageType.Call, seqid_));
      getUserLanguage_args args = new getUserLanguage_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getUserLanguage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserLanguage_result result = new getUserLanguage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserLanguage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_lookupPaidCall(AsyncCallback callback, object state, string dialedNumber, string language, string referer)
    {
      return send_lookupPaidCall(callback, state, dialedNumber, language, referer);
    }

    public PaidCallResponse End_lookupPaidCall(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_lookupPaidCall();
    }

    #endif

    public PaidCallResponse lookupPaidCall(string dialedNumber, string language, string referer)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_lookupPaidCall(null, null, dialedNumber, language, referer);
      return End_lookupPaidCall(asyncResult);

      #else
      send_lookupPaidCall(dialedNumber, language, referer);
      return recv_lookupPaidCall();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_lookupPaidCall(AsyncCallback callback, object state, string dialedNumber, string language, string referer)
    {
      oprot_.WriteMessageBegin(new TMessage("lookupPaidCall", TMessageType.Call, seqid_));
      lookupPaidCall_args args = new lookupPaidCall_args();
      args.DialedNumber = dialedNumber;
      args.Language = language;
      args.Referer = referer;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_lookupPaidCall(string dialedNumber, string language, string referer)
    {
      oprot_.WriteMessageBegin(new TMessage("lookupPaidCall", TMessageType.Call, seqid_));
      lookupPaidCall_args args = new lookupPaidCall_args();
      args.DialedNumber = dialedNumber;
      args.Language = language;
      args.Referer = referer;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PaidCallResponse recv_lookupPaidCall()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      lookupPaidCall_result result = new lookupPaidCall_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lookupPaidCall failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getExtendedProfile(AsyncCallback callback, object state)
    {
      return send_getExtendedProfile(callback, state);
    }

    public ExtendedProfile End_getExtendedProfile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getExtendedProfile();
    }

    #endif

    public ExtendedProfile getExtendedProfile()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getExtendedProfile(null, null);
      return End_getExtendedProfile(asyncResult);

      #else
      send_getExtendedProfile();
      return recv_getExtendedProfile();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getExtendedProfile(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getExtendedProfile", TMessageType.Call, seqid_));
      getExtendedProfile_args args = new getExtendedProfile_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getExtendedProfile()
    {
      oprot_.WriteMessageBegin(new TMessage("getExtendedProfile", TMessageType.Call, seqid_));
      getExtendedProfile_args args = new getExtendedProfile_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ExtendedProfile recv_getExtendedProfile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getExtendedProfile_result result = new getExtendedProfile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getExtendedProfile failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getReverseCompactContacts(AsyncCallback callback, object state, List<string> ids)
    {
      return send_getReverseCompactContacts(callback, state, ids);
    }

    public Dictionary<string, CompactContact> End_getReverseCompactContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getReverseCompactContacts();
    }

    #endif

    public Dictionary<string, CompactContact> getReverseCompactContacts(List<string> ids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getReverseCompactContacts(null, null, ids);
      return End_getReverseCompactContacts(asyncResult);

      #else
      send_getReverseCompactContacts(ids);
      return recv_getReverseCompactContacts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getReverseCompactContacts(AsyncCallback callback, object state, List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.Call, seqid_));
      getReverseCompactContacts_args args = new getReverseCompactContacts_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getReverseCompactContacts(List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.Call, seqid_));
      getReverseCompactContacts_args args = new getReverseCompactContacts_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, CompactContact> recv_getReverseCompactContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getReverseCompactContacts_result result = new getReverseCompactContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReverseCompactContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPaidCallAdStatus(AsyncCallback callback, object state)
    {
      return send_getPaidCallAdStatus(callback, state);
    }

    public PaidCallAdResult End_getPaidCallAdStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPaidCallAdStatus();
    }

    #endif

    public PaidCallAdResult getPaidCallAdStatus()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPaidCallAdStatus(null, null);
      return End_getPaidCallAdStatus(asyncResult);

      #else
      send_getPaidCallAdStatus();
      return recv_getPaidCallAdStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPaidCallAdStatus(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.Call, seqid_));
      getPaidCallAdStatus_args args = new getPaidCallAdStatus_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPaidCallAdStatus()
    {
      oprot_.WriteMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.Call, seqid_));
      getPaidCallAdStatus_args args = new getPaidCallAdStatus_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PaidCallAdResult recv_getPaidCallAdStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPaidCallAdStatus_result result = new getPaidCallAdStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPaidCallAdStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findContactByUseridWithoutAbuseBlockForChannel(AsyncCallback callback, object state, string userid)
    {
      return send_findContactByUseridWithoutAbuseBlockForChannel(callback, state, userid);
    }

    public Contact End_findContactByUseridWithoutAbuseBlockForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findContactByUseridWithoutAbuseBlockForChannel();
    }

    #endif

    public Contact findContactByUseridWithoutAbuseBlockForChannel(string userid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findContactByUseridWithoutAbuseBlockForChannel(null, null, userid);
      return End_findContactByUseridWithoutAbuseBlockForChannel(asyncResult);

      #else
      send_findContactByUseridWithoutAbuseBlockForChannel(userid);
      return recv_findContactByUseridWithoutAbuseBlockForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findContactByUseridWithoutAbuseBlockForChannel(AsyncCallback callback, object state, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.Call, seqid_));
      findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findContactByUseridWithoutAbuseBlockForChannel(string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.Call, seqid_));
      findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Contact recv_findContactByUseridWithoutAbuseBlockForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findContactByUseridWithoutAbuseBlockForChannel_result result = new findContactByUseridWithoutAbuseBlockForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupMemberMids(AsyncCallback callback, object state, string groupId)
    {
      return send_getGroupMemberMids(callback, state, groupId);
    }

    public List<string> End_getGroupMemberMids(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupMemberMids();
    }

    #endif

    public List<string> getGroupMemberMids(string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupMemberMids(null, null, groupId);
      return End_getGroupMemberMids(asyncResult);

      #else
      send_getGroupMemberMids(groupId);
      return recv_getGroupMemberMids();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupMemberMids(AsyncCallback callback, object state, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupMemberMids", TMessageType.Call, seqid_));
      getGroupMemberMids_args args = new getGroupMemberMids_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupMemberMids(string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupMemberMids", TMessageType.Call, seqid_));
      getGroupMemberMids_args args = new getGroupMemberMids_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getGroupMemberMids()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupMemberMids_result result = new getGroupMemberMids_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupMemberMids failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessageWithoutRelationship(AsyncCallback callback, object state, Message message)
    {
      return send_sendMessageWithoutRelationship(callback, state, message);
    }

    public Message End_sendMessageWithoutRelationship(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendMessageWithoutRelationship();
    }

    #endif

    public Message sendMessageWithoutRelationship(Message message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessageWithoutRelationship(null, null, message);
      return End_sendMessageWithoutRelationship(asyncResult);

      #else
      send_sendMessageWithoutRelationship(message);
      return recv_sendMessageWithoutRelationship();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessageWithoutRelationship(AsyncCallback callback, object state, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.Call, seqid_));
      sendMessageWithoutRelationship_args args = new sendMessageWithoutRelationship_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessageWithoutRelationship(Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.Call, seqid_));
      sendMessageWithoutRelationship_args args = new sendMessageWithoutRelationship_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Message recv_sendMessageWithoutRelationship()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessageWithoutRelationship_result result = new sendMessageWithoutRelationship_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessageWithoutRelationship failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_displayBuddySubscriberCountInBulk(AsyncCallback callback, object state, List<string> mids)
    {
      return send_displayBuddySubscriberCountInBulk(callback, state, mids);
    }

    public Dictionary<string, long> End_displayBuddySubscriberCountInBulk(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_displayBuddySubscriberCountInBulk();
    }

    #endif

    public Dictionary<string, long> displayBuddySubscriberCountInBulk(List<string> mids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_displayBuddySubscriberCountInBulk(null, null, mids);
      return End_displayBuddySubscriberCountInBulk(asyncResult);

      #else
      send_displayBuddySubscriberCountInBulk(mids);
      return recv_displayBuddySubscriberCountInBulk();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_displayBuddySubscriberCountInBulk(AsyncCallback callback, object state, List<string> mids)
    {
      oprot_.WriteMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.Call, seqid_));
      displayBuddySubscriberCountInBulk_args args = new displayBuddySubscriberCountInBulk_args();
      args.Mids = mids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_displayBuddySubscriberCountInBulk(List<string> mids)
    {
      oprot_.WriteMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.Call, seqid_));
      displayBuddySubscriberCountInBulk_args args = new displayBuddySubscriberCountInBulk_args();
      args.Mids = mids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, long> recv_displayBuddySubscriberCountInBulk()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      displayBuddySubscriberCountInBulk_result result = new displayBuddySubscriberCountInBulk_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "displayBuddySubscriberCountInBulk failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_lookupRoomMembers(AsyncCallback callback, object state, string roomId, List<string> mids)
    {
      return send_lookupRoomMembers(callback, state, roomId, mids);
    }

    public List<SimpleChannelContact> End_lookupRoomMembers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_lookupRoomMembers();
    }

    #endif

    public List<SimpleChannelContact> lookupRoomMembers(string roomId, List<string> mids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_lookupRoomMembers(null, null, roomId, mids);
      return End_lookupRoomMembers(asyncResult);

      #else
      send_lookupRoomMembers(roomId, mids);
      return recv_lookupRoomMembers();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_lookupRoomMembers(AsyncCallback callback, object state, string roomId, List<string> mids)
    {
      oprot_.WriteMessageBegin(new TMessage("lookupRoomMembers", TMessageType.Call, seqid_));
      lookupRoomMembers_args args = new lookupRoomMembers_args();
      args.RoomId = roomId;
      args.Mids = mids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_lookupRoomMembers(string roomId, List<string> mids)
    {
      oprot_.WriteMessageBegin(new TMessage("lookupRoomMembers", TMessageType.Call, seqid_));
      lookupRoomMembers_args args = new lookupRoomMembers_args();
      args.RoomId = roomId;
      args.Mids = mids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<SimpleChannelContact> recv_lookupRoomMembers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      lookupRoomMembers_result result = new lookupRoomMembers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "lookupRoomMembers failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getFavoriteMidsForChannel(AsyncCallback callback, object state)
    {
      return send_getFavoriteMidsForChannel(callback, state);
    }

    public List<string> End_getFavoriteMidsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFavoriteMidsForChannel();
    }

    #endif

    public List<string> getFavoriteMidsForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getFavoriteMidsForChannel(null, null);
      return End_getFavoriteMidsForChannel(asyncResult);

      #else
      send_getFavoriteMidsForChannel();
      return recv_getFavoriteMidsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFavoriteMidsForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.Call, seqid_));
      getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getFavoriteMidsForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.Call, seqid_));
      getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getFavoriteMidsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFavoriteMidsForChannel_result result = new getFavoriteMidsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFavoriteMidsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAllContactIdsForChannel(AsyncCallback callback, object state)
    {
      return send_getAllContactIdsForChannel(callback, state);
    }

    public List<string> End_getAllContactIdsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllContactIdsForChannel();
    }

    #endif

    public List<string> getAllContactIdsForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAllContactIdsForChannel(null, null);
      return End_getAllContactIdsForChannel(asyncResult);

      #else
      send_getAllContactIdsForChannel();
      return recv_getAllContactIdsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllContactIdsForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.Call, seqid_));
      getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAllContactIdsForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.Call, seqid_));
      getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getAllContactIdsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllContactIdsForChannel_result result = new getAllContactIdsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllContactIdsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_displayBuddySubscriberCount(AsyncCallback callback, object state)
    {
      return send_displayBuddySubscriberCount(callback, state);
    }

    public long End_displayBuddySubscriberCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_displayBuddySubscriberCount();
    }

    #endif

    public long displayBuddySubscriberCount()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_displayBuddySubscriberCount(null, null);
      return End_displayBuddySubscriberCount(asyncResult);

      #else
      send_displayBuddySubscriberCount();
      return recv_displayBuddySubscriberCount();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_displayBuddySubscriberCount(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.Call, seqid_));
      displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_displayBuddySubscriberCount()
    {
      oprot_.WriteMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.Call, seqid_));
      displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_displayBuddySubscriberCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      displayBuddySubscriberCount_result result = new displayBuddySubscriberCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "displayBuddySubscriberCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getProfileForChannel(AsyncCallback callback, object state)
    {
      return send_getProfileForChannel(callback, state);
    }

    public Profile End_getProfileForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProfileForChannel();
    }

    #endif

    public Profile getProfileForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getProfileForChannel(null, null);
      return End_getProfileForChannel(asyncResult);

      #else
      send_getProfileForChannel();
      return recv_getProfileForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProfileForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getProfileForChannel", TMessageType.Call, seqid_));
      getProfileForChannel_args args = new getProfileForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getProfileForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getProfileForChannel", TMessageType.Call, seqid_));
      getProfileForChannel_args args = new getProfileForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Profile recv_getProfileForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProfileForChannel_result result = new getProfileForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProfileForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserTickets(AsyncCallback callback, object state, List<string> userMids)
    {
      return send_getUserTickets(callback, state, userMids);
    }

    public List<UserTicketResponse> End_getUserTickets(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserTickets();
    }

    #endif

    public List<UserTicketResponse> getUserTickets(List<string> userMids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserTickets(null, null, userMids);
      return End_getUserTickets(asyncResult);

      #else
      send_getUserTickets(userMids);
      return recv_getUserTickets();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserTickets(AsyncCallback callback, object state, List<string> userMids)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserTickets", TMessageType.Call, seqid_));
      getUserTickets_args args = new getUserTickets_args();
      args.UserMids = userMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserTickets(List<string> userMids)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserTickets", TMessageType.Call, seqid_));
      getUserTickets_args args = new getUserTickets_args();
      args.UserMids = userMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<UserTicketResponse> recv_getUserTickets()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserTickets_result result = new getUserTickets_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserTickets failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getOAFriendMids(AsyncCallback callback, object state)
    {
      return send_getOAFriendMids(callback, state);
    }

    public List<string> End_getOAFriendMids(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getOAFriendMids();
    }

    #endif

    public List<string> getOAFriendMids()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getOAFriendMids(null, null);
      return End_getOAFriendMids(asyncResult);

      #else
      send_getOAFriendMids();
      return recv_getOAFriendMids();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getOAFriendMids(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getOAFriendMids", TMessageType.Call, seqid_));
      getOAFriendMids_args args = new getOAFriendMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getOAFriendMids()
    {
      oprot_.WriteMessageBegin(new TMessage("getOAFriendMids", TMessageType.Call, seqid_));
      getOAFriendMids_args args = new getOAFriendMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getOAFriendMids()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getOAFriendMids_result result = new getOAFriendMids_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getOAFriendMids failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_searchPaidCallUserRate(AsyncCallback callback, object state, string countryCode, string language)
    {
      return send_searchPaidCallUserRate(callback, state, countryCode, language);
    }

    public List<PaidCallUserRate> End_searchPaidCallUserRate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_searchPaidCallUserRate();
    }

    #endif

    public List<PaidCallUserRate> searchPaidCallUserRate(string countryCode, string language)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_searchPaidCallUserRate(null, null, countryCode, language);
      return End_searchPaidCallUserRate(asyncResult);

      #else
      send_searchPaidCallUserRate(countryCode, language);
      return recv_searchPaidCallUserRate();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_searchPaidCallUserRate(AsyncCallback callback, object state, string countryCode, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.Call, seqid_));
      searchPaidCallUserRate_args args = new searchPaidCallUserRate_args();
      args.CountryCode = countryCode;
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_searchPaidCallUserRate(string countryCode, string language)
    {
      oprot_.WriteMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.Call, seqid_));
      searchPaidCallUserRate_args args = new searchPaidCallUserRate_args();
      args.CountryCode = countryCode;
      args.Language = language;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<PaidCallUserRate> recv_searchPaidCallUserRate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      searchPaidCallUserRate_result result = new searchPaidCallUserRate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "searchPaidCallUserRate failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getJoinedGroupIdsForChannel(AsyncCallback callback, object state)
    {
      return send_getJoinedGroupIdsForChannel(callback, state);
    }

    public List<string> End_getJoinedGroupIdsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getJoinedGroupIdsForChannel();
    }

    #endif

    public List<string> getJoinedGroupIdsForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getJoinedGroupIdsForChannel(null, null);
      return End_getJoinedGroupIdsForChannel(asyncResult);

      #else
      send_getJoinedGroupIdsForChannel();
      return recv_getJoinedGroupIdsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getJoinedGroupIdsForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.Call, seqid_));
      getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getJoinedGroupIdsForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.Call, seqid_));
      getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getJoinedGroupIdsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getJoinedGroupIdsForChannel_result result = new getJoinedGroupIdsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getJoinedGroupIdsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_acquireGroupCallRoute(AsyncCallback callback, object state, string chatMid, GroupCallMediaType mediaType)
    {
      return send_acquireGroupCallRoute(callback, state, chatMid, mediaType);
    }

    public GroupCallRoute End_acquireGroupCallRoute(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_acquireGroupCallRoute();
    }

    #endif

    public GroupCallRoute acquireGroupCallRoute(string chatMid, GroupCallMediaType mediaType)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_acquireGroupCallRoute(null, null, chatMid, mediaType);
      return End_acquireGroupCallRoute(asyncResult);

      #else
      send_acquireGroupCallRoute(chatMid, mediaType);
      return recv_acquireGroupCallRoute();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_acquireGroupCallRoute(AsyncCallback callback, object state, string chatMid, GroupCallMediaType mediaType)
    {
      oprot_.WriteMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.Call, seqid_));
      acquireGroupCallRoute_args args = new acquireGroupCallRoute_args();
      args.ChatMid = chatMid;
      args.MediaType = mediaType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_acquireGroupCallRoute(string chatMid, GroupCallMediaType mediaType)
    {
      oprot_.WriteMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.Call, seqid_));
      acquireGroupCallRoute_args args = new acquireGroupCallRoute_args();
      args.ChatMid = chatMid;
      args.MediaType = mediaType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public GroupCallRoute recv_acquireGroupCallRoute()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      acquireGroupCallRoute_result result = new acquireGroupCallRoute_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquireGroupCallRoute failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserMidsWhoAddedMe(AsyncCallback callback, object state)
    {
      return send_getUserMidsWhoAddedMe(callback, state);
    }

    public List<string> End_getUserMidsWhoAddedMe(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserMidsWhoAddedMe();
    }

    #endif

    public List<string> getUserMidsWhoAddedMe()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserMidsWhoAddedMe(null, null);
      return End_getUserMidsWhoAddedMe(asyncResult);

      #else
      send_getUserMidsWhoAddedMe();
      return recv_getUserMidsWhoAddedMe();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserMidsWhoAddedMe(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.Call, seqid_));
      getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserMidsWhoAddedMe()
    {
      oprot_.WriteMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.Call, seqid_));
      getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getUserMidsWhoAddedMe()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserMidsWhoAddedMe_result result = new getUserMidsWhoAddedMe_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserMidsWhoAddedMe failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getIdentityCredential(AsyncCallback callback, object state)
    {
      return send_getIdentityCredential(callback, state);
    }

    public IdentityCredential End_getIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getIdentityCredential();
    }

    #endif

    public IdentityCredential getIdentityCredential()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getIdentityCredential(null, null);
      return End_getIdentityCredential(asyncResult);

      #else
      send_getIdentityCredential();
      return recv_getIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getIdentityCredential(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getIdentityCredential", TMessageType.Call, seqid_));
      getIdentityCredential_args args = new getIdentityCredential_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getIdentityCredential()
    {
      oprot_.WriteMessageBegin(new TMessage("getIdentityCredential", TMessageType.Call, seqid_));
      getIdentityCredential_args args = new getIdentityCredential_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public IdentityCredential recv_getIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getIdentityCredential_result result = new getIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getIdentityCredential failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_addOperationForChannel(AsyncCallback callback, object state, OpType opType, string param1, string param2, string param3)
    {
      return send_addOperationForChannel(callback, state, opType, param1, param2, param3);
    }

    public void End_addOperationForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addOperationForChannel();
    }

    #endif

    public void addOperationForChannel(OpType opType, string param1, string param2, string param3)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_addOperationForChannel(null, null, opType, param1, param2, param3);
      End_addOperationForChannel(asyncResult);

      #else
      send_addOperationForChannel(opType, param1, param2, param3);
      recv_addOperationForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addOperationForChannel(AsyncCallback callback, object state, OpType opType, string param1, string param2, string param3)
    {
      oprot_.WriteMessageBegin(new TMessage("addOperationForChannel", TMessageType.Call, seqid_));
      addOperationForChannel_args args = new addOperationForChannel_args();
      args.OpType = opType;
      args.Param1 = param1;
      args.Param2 = param2;
      args.Param3 = param3;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_addOperationForChannel(OpType opType, string param1, string param2, string param3)
    {
      oprot_.WriteMessageBegin(new TMessage("addOperationForChannel", TMessageType.Call, seqid_));
      addOperationForChannel_args args = new addOperationForChannel_args();
      args.OpType = opType;
      args.Param1 = param1;
      args.Param2 = param2;
      args.Param3 = param3;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_addOperationForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addOperationForChannel_result result = new addOperationForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSimpleChannelContacts(AsyncCallback callback, object state, List<string> ids, bool statusSticonFallbackDisabled)
    {
      return send_getSimpleChannelContacts(callback, state, ids, statusSticonFallbackDisabled);
    }

    public List<SimpleChannelContact> End_getSimpleChannelContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSimpleChannelContacts();
    }

    #endif

    public List<SimpleChannelContact> getSimpleChannelContacts(List<string> ids, bool statusSticonFallbackDisabled)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSimpleChannelContacts(null, null, ids, statusSticonFallbackDisabled);
      return End_getSimpleChannelContacts(asyncResult);

      #else
      send_getSimpleChannelContacts(ids, statusSticonFallbackDisabled);
      return recv_getSimpleChannelContacts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSimpleChannelContacts(AsyncCallback callback, object state, List<string> ids, bool statusSticonFallbackDisabled)
    {
      oprot_.WriteMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.Call, seqid_));
      getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
      args.Ids = ids;
      args.StatusSticonFallbackDisabled = statusSticonFallbackDisabled;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSimpleChannelContacts(List<string> ids, bool statusSticonFallbackDisabled)
    {
      oprot_.WriteMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.Call, seqid_));
      getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
      args.Ids = ids;
      args.StatusSticonFallbackDisabled = statusSticonFallbackDisabled;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<SimpleChannelContact> recv_getSimpleChannelContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSimpleChannelContacts_result result = new getSimpleChannelContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSimpleChannelContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserLastSentMessageTimeStamp(AsyncCallback callback, object state, string mid)
    {
      return send_getUserLastSentMessageTimeStamp(callback, state, mid);
    }

    public long End_getUserLastSentMessageTimeStamp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserLastSentMessageTimeStamp();
    }

    #endif

    public long getUserLastSentMessageTimeStamp(string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserLastSentMessageTimeStamp(null, null, mid);
      return End_getUserLastSentMessageTimeStamp(asyncResult);

      #else
      send_getUserLastSentMessageTimeStamp(mid);
      return recv_getUserLastSentMessageTimeStamp();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserLastSentMessageTimeStamp(AsyncCallback callback, object state, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.Call, seqid_));
      getUserLastSentMessageTimeStamp_args args = new getUserLastSentMessageTimeStamp_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserLastSentMessageTimeStamp(string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.Call, seqid_));
      getUserLastSentMessageTimeStamp_args args = new getUserLastSentMessageTimeStamp_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_getUserLastSentMessageTimeStamp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserLastSentMessageTimeStamp_result result = new getUserLastSentMessageTimeStamp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserLastSentMessageTimeStamp failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getUserStatus"] = getUserStatus_Process;
      processMap_["updateProfileAttributeForChannel"] = updateProfileAttributeForChannel_Process;
      processMap_["updateExtendedProfileAttribute"] = updateExtendedProfileAttribute_Process;
      processMap_["getAllSimpleChannelContacts"] = getAllSimpleChannelContacts_Process;
      processMap_["getUserIdentities"] = getUserIdentities_Process;
      processMap_["markPaidCallAd"] = markPaidCallAd_Process;
      processMap_["isGroupMember"] = isGroupMember_Process;
      processMap_["getPhoneInfoFromPhoneNumber"] = getPhoneInfoFromPhoneNumber_Process;
      processMap_["redeemPaidCallVoucher"] = redeemPaidCallVoucher_Process;
      processMap_["getPreferredDisplayName"] = getPreferredDisplayName_Process;
      processMap_["getContactsForChannel"] = getContactsForChannel_Process;
      processMap_["getCallCreditProducts"] = getCallCreditProducts_Process;
      processMap_["getCompactContacts"] = getCompactContacts_Process;
      processMap_["notifyNotiCenterEvent"] = notifyNotiCenterEvent_Process;
      processMap_["isInContact"] = isInContact_Process;
      processMap_["lookupGroupMembers"] = lookupGroupMembers_Process;
      processMap_["getRoomInformation"] = getRoomInformation_Process;
      processMap_["getGroupCall"] = getGroupCall_Process;
      processMap_["isAllowSecondaryDeviceLogin"] = isAllowSecondaryDeviceLogin_Process;
      processMap_["getPrimaryClientForChannel"] = getPrimaryClientForChannel_Process;
      processMap_["createRoomWithBuddy"] = createRoomWithBuddy_Process;
      processMap_["getDisplayName"] = getDisplayName_Process;
      processMap_["getPaidCallMetadata"] = getPaidCallMetadata_Process;
      processMap_["getMid"] = getMid_Process;
      processMap_["getUserCountryForBilling"] = getUserCountryForBilling_Process;
      processMap_["getFavoriteGroupIdsForChannel"] = getFavoriteGroupIdsForChannel_Process;
      processMap_["getPaidCallHistory"] = getPaidCallHistory_Process;
      processMap_["sendPinCodeOperation"] = sendPinCodeOperation_Process;
      processMap_["inviteIntoGroupCall"] = inviteIntoGroupCall_Process;
      processMap_["getFriendMids"] = getFriendMids_Process;
      processMap_["getMetaProfile"] = getMetaProfile_Process;
      processMap_["sendMessageForChannel"] = sendMessageForChannel_Process;
      processMap_["activeBuddySubscriberCount"] = activeBuddySubscriberCount_Process;
      processMap_["getCallCreditPurchaseHistory"] = getCallCreditPurchaseHistory_Process;
      processMap_["isRoomMember"] = isRoomMember_Process;
      processMap_["sendSystemOAMessage"] = sendSystemOAMessage_Process;
      processMap_["acquirePaidCallRoute"] = acquirePaidCallRoute_Process;
      processMap_["getGroupsForChannel"] = getGroupsForChannel_Process;
      processMap_["getUserCreateTime"] = getUserCreateTime_Process;
      processMap_["registerChannelCP"] = registerChannelCP_Process;
      processMap_["reserveCallCreditPurchase"] = reserveCallCreditPurchase_Process;
      processMap_["acquirePaidCallCurrencyExchangeRate"] = acquirePaidCallCurrencyExchangeRate_Process;
      processMap_["getRoomMemberMidsForAppPlatform"] = getRoomMemberMidsForAppPlatform_Process;
      processMap_["getPaidCallBalanceList"] = getPaidCallBalanceList_Process;
      processMap_["getPersonalInfos"] = getPersonalInfos_Process;
      processMap_["getPrimaryClientsForChannel"] = getPrimaryClientsForChannel_Process;
      processMap_["addBuddyToContact"] = addBuddyToContact_Process;
      processMap_["getGroupMemberMidsForAppPlatform"] = getGroupMemberMidsForAppPlatform_Process;
      processMap_["getUserLanguage"] = getUserLanguage_Process;
      processMap_["lookupPaidCall"] = lookupPaidCall_Process;
      processMap_["getExtendedProfile"] = getExtendedProfile_Process;
      processMap_["getReverseCompactContacts"] = getReverseCompactContacts_Process;
      processMap_["getPaidCallAdStatus"] = getPaidCallAdStatus_Process;
      processMap_["findContactByUseridWithoutAbuseBlockForChannel"] = findContactByUseridWithoutAbuseBlockForChannel_Process;
      processMap_["getGroupMemberMids"] = getGroupMemberMids_Process;
      processMap_["sendMessageWithoutRelationship"] = sendMessageWithoutRelationship_Process;
      processMap_["displayBuddySubscriberCountInBulk"] = displayBuddySubscriberCountInBulk_Process;
      processMap_["lookupRoomMembers"] = lookupRoomMembers_Process;
      processMap_["getFavoriteMidsForChannel"] = getFavoriteMidsForChannel_Process;
      processMap_["getAllContactIdsForChannel"] = getAllContactIdsForChannel_Process;
      processMap_["displayBuddySubscriberCount"] = displayBuddySubscriberCount_Process;
      processMap_["getProfileForChannel"] = getProfileForChannel_Process;
      processMap_["getUserTickets"] = getUserTickets_Process;
      processMap_["getOAFriendMids"] = getOAFriendMids_Process;
      processMap_["searchPaidCallUserRate"] = searchPaidCallUserRate_Process;
      processMap_["getJoinedGroupIdsForChannel"] = getJoinedGroupIdsForChannel_Process;
      processMap_["acquireGroupCallRoute"] = acquireGroupCallRoute_Process;
      processMap_["getUserMidsWhoAddedMe"] = getUserMidsWhoAddedMe_Process;
      processMap_["getIdentityCredential"] = getIdentityCredential_Process;
      processMap_["addOperationForChannel"] = addOperationForChannel_Process;
      processMap_["getSimpleChannelContacts"] = getSimpleChannelContacts_Process;
      processMap_["getUserLastSentMessageTimeStamp"] = getUserLastSentMessageTimeStamp_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getUserStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserStatus_args args = new getUserStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserStatus_result result = new getUserStatus_result();
      try
      {
        try
        {
          result.Success = iface_.getUserStatus(args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateProfileAttributeForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateProfileAttributeForChannel_result result = new updateProfileAttributeForChannel_result();
      try
      {
        try
        {
          iface_.updateProfileAttributeForChannel(args.ProfileAttribute, args.Value);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateExtendedProfileAttribute_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateExtendedProfileAttribute_args args = new updateExtendedProfileAttribute_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateExtendedProfileAttribute_result result = new updateExtendedProfileAttribute_result();
      try
      {
        try
        {
          iface_.updateExtendedProfileAttribute(args.Attr, args.ExtendedProfile);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateExtendedProfileAttribute", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAllSimpleChannelContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllSimpleChannelContacts_args args = new getAllSimpleChannelContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllSimpleChannelContacts_result result = new getAllSimpleChannelContacts_result();
      try
      {
        try
        {
          result.Success = iface_.getAllSimpleChannelContacts(args.StatusSticonFallbackDisabled);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAllSimpleChannelContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserIdentities_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserIdentities_args args = new getUserIdentities_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserIdentities_result result = new getUserIdentities_result();
      try
      {
        try
        {
          result.Success = iface_.getUserIdentities();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserIdentities", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserIdentities", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void markPaidCallAd_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      markPaidCallAd_args args = new markPaidCallAd_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      markPaidCallAd_result result = new markPaidCallAd_result();
      try
      {
        try
        {
          result.Success = iface_.markPaidCallAd(args.DialedNumber, args.Language, args.DisableCallerId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("markPaidCallAd", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("markPaidCallAd", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isGroupMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isGroupMember_args args = new isGroupMember_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isGroupMember_result result = new isGroupMember_result();
      try
      {
        try
        {
          result.Success = iface_.isGroupMember(args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isGroupMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isGroupMember", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPhoneInfoFromPhoneNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPhoneInfoFromPhoneNumber_args args = new getPhoneInfoFromPhoneNumber_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPhoneInfoFromPhoneNumber_result result = new getPhoneInfoFromPhoneNumber_result();
      try
      {
        try
        {
          result.Success = iface_.getPhoneInfoFromPhoneNumber(args.Region, args.PhoneNumber);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPhoneInfoFromPhoneNumber", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void redeemPaidCallVoucher_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      redeemPaidCallVoucher_args args = new redeemPaidCallVoucher_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      redeemPaidCallVoucher_result result = new redeemPaidCallVoucher_result();
      try
      {
        try
        {
          result.Success = iface_.redeemPaidCallVoucher(args.Serial, args.Language);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("redeemPaidCallVoucher", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPreferredDisplayName_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPreferredDisplayName_args args = new getPreferredDisplayName_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPreferredDisplayName_result result = new getPreferredDisplayName_result();
      try
      {
        try
        {
          result.Success = iface_.getPreferredDisplayName(args.Mids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPreferredDisplayName", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getContactsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getContactsForChannel_args args = new getContactsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getContactsForChannel_result result = new getContactsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getContactsForChannel(args.Ids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getContactsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getContactsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCallCreditProducts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCallCreditProducts_args args = new getCallCreditProducts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCallCreditProducts_result result = new getCallCreditProducts_result();
      try
      {
        try
        {
          result.Success = iface_.getCallCreditProducts(args.AppStoreCode, args.PgCode, args.Country, args.Language);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCallCreditProducts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCallCreditProducts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCompactContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCompactContacts_args args = new getCompactContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCompactContacts_result result = new getCompactContacts_result();
      try
      {
        try
        {
          result.Success = iface_.getCompactContacts(args.LastModifiedTimestamp);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCompactContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCompactContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void notifyNotiCenterEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      notifyNotiCenterEvent_args args = new notifyNotiCenterEvent_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      notifyNotiCenterEvent_result result = new notifyNotiCenterEvent_result();
      try
      {
        try
        {
          iface_.notifyNotiCenterEvent(args.Event);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("notifyNotiCenterEvent", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isInContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isInContact_args args = new isInContact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isInContact_result result = new isInContact_result();
      try
      {
        try
        {
          result.Success = iface_.isInContact(args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isInContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isInContact", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void lookupGroupMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      lookupGroupMembers_args args = new lookupGroupMembers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      lookupGroupMembers_result result = new lookupGroupMembers_result();
      try
      {
        try
        {
          result.Success = iface_.lookupGroupMembers(args.GroupId, args.Mids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("lookupGroupMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("lookupGroupMembers", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRoomInformation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRoomInformation_args args = new getRoomInformation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRoomInformation_result result = new getRoomInformation_result();
      try
      {
        try
        {
          result.Success = iface_.getRoomInformation(args.RoomMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRoomInformation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRoomInformation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupCall_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupCall_args args = new getGroupCall_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupCall_result result = new getGroupCall_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupCall(args.ChatMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupCall", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupCall", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isAllowSecondaryDeviceLogin_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isAllowSecondaryDeviceLogin_args args = new isAllowSecondaryDeviceLogin_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isAllowSecondaryDeviceLogin_result result = new isAllowSecondaryDeviceLogin_result();
      try
      {
        try
        {
          result.Success = iface_.isAllowSecondaryDeviceLogin();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isAllowSecondaryDeviceLogin", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPrimaryClientForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPrimaryClientForChannel_result result = new getPrimaryClientForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getPrimaryClientForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createRoomWithBuddy_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createRoomWithBuddy_args args = new createRoomWithBuddy_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createRoomWithBuddy_result result = new createRoomWithBuddy_result();
      try
      {
        try
        {
          result.Success = iface_.createRoomWithBuddy(args.ReqSeq, args.BuddyMid, args.ContactIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createRoomWithBuddy", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDisplayName_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDisplayName_args args = new getDisplayName_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDisplayName_result result = new getDisplayName_result();
      try
      {
        try
        {
          result.Success = iface_.getDisplayName(args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPaidCallMetadata_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPaidCallMetadata_args args = new getPaidCallMetadata_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPaidCallMetadata_result result = new getPaidCallMetadata_result();
      try
      {
        try
        {
          result.Success = iface_.getPaidCallMetadata(args.Language);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPaidCallMetadata", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMid_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMid_args args = new getMid_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMid_result result = new getMid_result();
      try
      {
        try
        {
          result.Success = iface_.getMid();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMid", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserCountryForBilling_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserCountryForBilling_args args = new getUserCountryForBilling_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserCountryForBilling_result result = new getUserCountryForBilling_result();
      try
      {
        try
        {
          result.Success = iface_.getUserCountryForBilling(args.Country, args.RemoteIp);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFavoriteGroupIdsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFavoriteGroupIdsForChannel_args args = new getFavoriteGroupIdsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFavoriteGroupIdsForChannel_result result = new getFavoriteGroupIdsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getFavoriteGroupIdsForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFavoriteGroupIdsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPaidCallHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPaidCallHistory_args args = new getPaidCallHistory_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPaidCallHistory_result result = new getPaidCallHistory_result();
      try
      {
        try
        {
          result.Success = iface_.getPaidCallHistory(args.Start, args.Size, args.Language);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPaidCallHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPaidCallHistory", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendPinCodeOperation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendPinCodeOperation_args args = new sendPinCodeOperation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendPinCodeOperation_result result = new sendPinCodeOperation_result();
      try
      {
        try
        {
          iface_.sendPinCodeOperation(args.Verifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void inviteIntoGroupCall_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      inviteIntoGroupCall_args args = new inviteIntoGroupCall_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      inviteIntoGroupCall_result result = new inviteIntoGroupCall_result();
      try
      {
        try
        {
          iface_.inviteIntoGroupCall(args.ChatMid, args.MemberMids, args.MediaType);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("inviteIntoGroupCall", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFriendMids_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFriendMids_args args = new getFriendMids_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFriendMids_result result = new getFriendMids_result();
      try
      {
        try
        {
          result.Success = iface_.getFriendMids();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getFriendMids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFriendMids", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMetaProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMetaProfile_args args = new getMetaProfile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMetaProfile_result result = new getMetaProfile_result();
      try
      {
        try
        {
          result.Success = iface_.getMetaProfile();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMetaProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMetaProfile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessageForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessageForChannel_args args = new sendMessageForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessageForChannel_result result = new sendMessageForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.sendMessageForChannel(args.Message);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessageForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void activeBuddySubscriberCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      activeBuddySubscriberCount_result result = new activeBuddySubscriberCount_result();
      try
      {
        try
        {
          result.Success = iface_.activeBuddySubscriberCount();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCallCreditPurchaseHistory_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCallCreditPurchaseHistory_args args = new getCallCreditPurchaseHistory_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCallCreditPurchaseHistory_result result = new getCallCreditPurchaseHistory_result();
      try
      {
        try
        {
          result.Success = iface_.getCallCreditPurchaseHistory(args.Request);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCallCreditPurchaseHistory", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isRoomMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isRoomMember_args args = new isRoomMember_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isRoomMember_result result = new isRoomMember_result();
      try
      {
        try
        {
          result.Success = iface_.isRoomMember(args.RoomId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isRoomMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isRoomMember", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendSystemOAMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendSystemOAMessage_args args = new sendSystemOAMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendSystemOAMessage_result result = new sendSystemOAMessage_result();
      try
      {
        try
        {
          result.Success = iface_.sendSystemOAMessage(args.Message);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendSystemOAMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void acquirePaidCallRoute_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      acquirePaidCallRoute_args args = new acquirePaidCallRoute_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      acquirePaidCallRoute_result result = new acquirePaidCallRoute_result();
      try
      {
        try
        {
          result.Success = iface_.acquirePaidCallRoute(args.PaidCallType, args.DialedNumber, args.Language, args.NetworkCode, args.DisableCallerId, args.Referer, args.AdSessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("acquirePaidCallRoute", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupsForChannel_args args = new getGroupsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupsForChannel_result result = new getGroupsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupsForChannel(args.GroupIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserCreateTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserCreateTime_args args = new getUserCreateTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserCreateTime_result result = new getUserCreateTime_result();
      try
      {
        try
        {
          result.Success = iface_.getUserCreateTime();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserCreateTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserCreateTime", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerChannelCP_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerChannelCP_args args = new registerChannelCP_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerChannelCP_result result = new registerChannelCP_result();
      try
      {
        try
        {
          result.Success = iface_.registerChannelCP(args.CpId, args.RegisterPassword);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerChannelCP", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerChannelCP", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reserveCallCreditPurchase_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reserveCallCreditPurchase_args args = new reserveCallCreditPurchase_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reserveCallCreditPurchase_result result = new reserveCallCreditPurchase_result();
      try
      {
        try
        {
          result.Success = iface_.reserveCallCreditPurchase(args.Request);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reserveCallCreditPurchase", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void acquirePaidCallCurrencyExchangeRate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      acquirePaidCallCurrencyExchangeRate_args args = new acquirePaidCallCurrencyExchangeRate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      acquirePaidCallCurrencyExchangeRate_result result = new acquirePaidCallCurrencyExchangeRate_result();
      try
      {
        try
        {
          result.Success = iface_.acquirePaidCallCurrencyExchangeRate(args.Language);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("acquirePaidCallCurrencyExchangeRate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRoomMemberMidsForAppPlatform_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRoomMemberMidsForAppPlatform_args args = new getRoomMemberMidsForAppPlatform_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRoomMemberMidsForAppPlatform_result result = new getRoomMemberMidsForAppPlatform_result();
      try
      {
        try
        {
          result.Success = iface_.getRoomMemberMidsForAppPlatform(args.RoomId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRoomMemberMidsForAppPlatform", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPaidCallBalanceList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPaidCallBalanceList_args args = new getPaidCallBalanceList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPaidCallBalanceList_result result = new getPaidCallBalanceList_result();
      try
      {
        try
        {
          result.Success = iface_.getPaidCallBalanceList(args.Language);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPaidCallBalanceList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPersonalInfos_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPersonalInfos_args args = new getPersonalInfos_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPersonalInfos_result result = new getPersonalInfos_result();
      try
      {
        try
        {
          result.Success = iface_.getPersonalInfos(args.RequiredPersonalInfos);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPersonalInfos", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPersonalInfos", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPrimaryClientsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPrimaryClientsForChannel_args args = new getPrimaryClientsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPrimaryClientsForChannel_result result = new getPrimaryClientsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getPrimaryClientsForChannel(args.UserMids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPrimaryClientsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addBuddyToContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addBuddyToContact_args args = new addBuddyToContact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addBuddyToContact_result result = new addBuddyToContact_result();
      try
      {
        try
        {
          result.Success = iface_.addBuddyToContact(args.BuddyMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("addBuddyToContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addBuddyToContact", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupMemberMidsForAppPlatform_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupMemberMidsForAppPlatform_args args = new getGroupMemberMidsForAppPlatform_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupMemberMidsForAppPlatform_result result = new getGroupMemberMidsForAppPlatform_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupMemberMidsForAppPlatform(args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupMemberMidsForAppPlatform", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserLanguage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserLanguage_args args = new getUserLanguage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserLanguage_result result = new getUserLanguage_result();
      try
      {
        try
        {
          result.Success = iface_.getUserLanguage();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserLanguage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserLanguage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void lookupPaidCall_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      lookupPaidCall_args args = new lookupPaidCall_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      lookupPaidCall_result result = new lookupPaidCall_result();
      try
      {
        try
        {
          result.Success = iface_.lookupPaidCall(args.DialedNumber, args.Language, args.Referer);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("lookupPaidCall", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("lookupPaidCall", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getExtendedProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getExtendedProfile_args args = new getExtendedProfile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getExtendedProfile_result result = new getExtendedProfile_result();
      try
      {
        try
        {
          result.Success = iface_.getExtendedProfile();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getExtendedProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getExtendedProfile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getReverseCompactContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getReverseCompactContacts_args args = new getReverseCompactContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getReverseCompactContacts_result result = new getReverseCompactContacts_result();
      try
      {
        try
        {
          result.Success = iface_.getReverseCompactContacts(args.Ids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getReverseCompactContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPaidCallAdStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPaidCallAdStatus_args args = new getPaidCallAdStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPaidCallAdStatus_result result = new getPaidCallAdStatus_result();
      try
      {
        try
        {
          result.Success = iface_.getPaidCallAdStatus();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPaidCallAdStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findContactByUseridWithoutAbuseBlockForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findContactByUseridWithoutAbuseBlockForChannel_result result = new findContactByUseridWithoutAbuseBlockForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.findContactByUseridWithoutAbuseBlockForChannel(args.Userid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupMemberMids_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupMemberMids_args args = new getGroupMemberMids_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupMemberMids_result result = new getGroupMemberMids_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupMemberMids(args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupMemberMids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupMemberMids", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessageWithoutRelationship_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessageWithoutRelationship_args args = new sendMessageWithoutRelationship_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessageWithoutRelationship_result result = new sendMessageWithoutRelationship_result();
      try
      {
        try
        {
          result.Success = iface_.sendMessageWithoutRelationship(args.Message);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessageWithoutRelationship", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void displayBuddySubscriberCountInBulk_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      displayBuddySubscriberCountInBulk_args args = new displayBuddySubscriberCountInBulk_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      displayBuddySubscriberCountInBulk_result result = new displayBuddySubscriberCountInBulk_result();
      try
      {
        try
        {
          result.Success = iface_.displayBuddySubscriberCountInBulk(args.Mids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("displayBuddySubscriberCountInBulk", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void lookupRoomMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      lookupRoomMembers_args args = new lookupRoomMembers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      lookupRoomMembers_result result = new lookupRoomMembers_result();
      try
      {
        try
        {
          result.Success = iface_.lookupRoomMembers(args.RoomId, args.Mids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("lookupRoomMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("lookupRoomMembers", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFavoriteMidsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFavoriteMidsForChannel_result result = new getFavoriteMidsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getFavoriteMidsForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAllContactIdsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllContactIdsForChannel_result result = new getAllContactIdsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getAllContactIdsForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void displayBuddySubscriberCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      displayBuddySubscriberCount_result result = new displayBuddySubscriberCount_result();
      try
      {
        try
        {
          result.Success = iface_.displayBuddySubscriberCount();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProfileForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProfileForChannel_args args = new getProfileForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProfileForChannel_result result = new getProfileForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getProfileForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProfileForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProfileForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserTickets_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserTickets_args args = new getUserTickets_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserTickets_result result = new getUserTickets_result();
      try
      {
        try
        {
          result.Success = iface_.getUserTickets(args.UserMids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserTickets", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserTickets", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getOAFriendMids_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getOAFriendMids_args args = new getOAFriendMids_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getOAFriendMids_result result = new getOAFriendMids_result();
      try
      {
        try
        {
          result.Success = iface_.getOAFriendMids();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getOAFriendMids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getOAFriendMids", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void searchPaidCallUserRate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      searchPaidCallUserRate_args args = new searchPaidCallUserRate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      searchPaidCallUserRate_result result = new searchPaidCallUserRate_result();
      try
      {
        try
        {
          result.Success = iface_.searchPaidCallUserRate(args.CountryCode, args.Language);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("searchPaidCallUserRate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getJoinedGroupIdsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getJoinedGroupIdsForChannel_result result = new getJoinedGroupIdsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getJoinedGroupIdsForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void acquireGroupCallRoute_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      acquireGroupCallRoute_args args = new acquireGroupCallRoute_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      acquireGroupCallRoute_result result = new acquireGroupCallRoute_result();
      try
      {
        try
        {
          result.Success = iface_.acquireGroupCallRoute(args.ChatMid, args.MediaType);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("acquireGroupCallRoute", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserMidsWhoAddedMe_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserMidsWhoAddedMe_result result = new getUserMidsWhoAddedMe_result();
      try
      {
        try
        {
          result.Success = iface_.getUserMidsWhoAddedMe();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getIdentityCredential_args args = new getIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getIdentityCredential_result result = new getIdentityCredential_result();
      try
      {
        try
        {
          result.Success = iface_.getIdentityCredential();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addOperationForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addOperationForChannel_args args = new addOperationForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addOperationForChannel_result result = new addOperationForChannel_result();
      try
      {
        try
        {
          iface_.addOperationForChannel(args.OpType, args.Param1, args.Param2, args.Param3);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("addOperationForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addOperationForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSimpleChannelContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSimpleChannelContacts_result result = new getSimpleChannelContacts_result();
      try
      {
        try
        {
          result.Success = iface_.getSimpleChannelContacts(args.Ids, args.StatusSticonFallbackDisabled);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserLastSentMessageTimeStamp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserLastSentMessageTimeStamp_args args = new getUserLastSentMessageTimeStamp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserLastSentMessageTimeStamp_result result = new getUserLastSentMessageTimeStamp_result();
      try
      {
        try
        {
          result.Success = iface_.getUserLastSentMessageTimeStamp(args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserLastSentMessageTimeStamp", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserStatus_args : TBase
  {
    private string _mid;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
    }

    public getUserStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserStatus_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserStatus_result : TBase
  {
    private UserStatus _success;
    private TalkException _e;

    /// <summary>
    /// 
    /// <seealso cref="UserStatus"/>
    /// </summary>
    public UserStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (UserStatus)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserStatus_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProfileAttributeForChannel_args : TBase
  {
    private ProfileAttribute _profileAttribute;
    private string _value;

    /// <summary>
    /// 
    /// <seealso cref="ProfileAttribute"/>
    /// </summary>
    public ProfileAttribute ProfileAttribute
    {
      get
      {
        return _profileAttribute;
      }
      set
      {
        __isset.profileAttribute = true;
        this._profileAttribute = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool profileAttribute;
      public bool @value;
    }

    public updateProfileAttributeForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                ProfileAttribute = (ProfileAttribute)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProfileAttributeForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.profileAttribute) {
          field.Name = "profileAttribute";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ProfileAttribute);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProfileAttributeForChannel_args(");
      bool __first = true;
      if (__isset.profileAttribute) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProfileAttribute: ");
        __sb.Append(ProfileAttribute);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProfileAttributeForChannel_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateProfileAttributeForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProfileAttributeForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProfileAttributeForChannel_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateExtendedProfileAttribute_args : TBase
  {
    private ExtendedProfileAttribute _attr;
    private ExtendedProfile _extendedProfile;

    /// <summary>
    /// 
    /// <seealso cref="ExtendedProfileAttribute"/>
    /// </summary>
    public ExtendedProfileAttribute Attr
    {
      get
      {
        return _attr;
      }
      set
      {
        __isset.attr = true;
        this._attr = value;
      }
    }

    public ExtendedProfile ExtendedProfile
    {
      get
      {
        return _extendedProfile;
      }
      set
      {
        __isset.extendedProfile = true;
        this._extendedProfile = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool attr;
      public bool extendedProfile;
    }

    public updateExtendedProfileAttribute_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Attr = (ExtendedProfileAttribute)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                ExtendedProfile = new ExtendedProfile();
                ExtendedProfile.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateExtendedProfileAttribute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.attr) {
          field.Name = "attr";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Attr);
          oprot.WriteFieldEnd();
        }
        if (ExtendedProfile != null && __isset.extendedProfile) {
          field.Name = "extendedProfile";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          ExtendedProfile.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateExtendedProfileAttribute_args(");
      bool __first = true;
      if (__isset.attr) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attr: ");
        __sb.Append(Attr);
      }
      if (ExtendedProfile != null && __isset.extendedProfile) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExtendedProfile: ");
        __sb.Append(ExtendedProfile== null ? "<null>" : ExtendedProfile.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateExtendedProfileAttribute_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateExtendedProfileAttribute_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateExtendedProfileAttribute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateExtendedProfileAttribute_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllSimpleChannelContacts_args : TBase
  {
    private bool _statusSticonFallbackDisabled;

    public bool StatusSticonFallbackDisabled
    {
      get
      {
        return _statusSticonFallbackDisabled;
      }
      set
      {
        __isset.statusSticonFallbackDisabled = true;
        this._statusSticonFallbackDisabled = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool statusSticonFallbackDisabled;
    }

    public getAllSimpleChannelContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                StatusSticonFallbackDisabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllSimpleChannelContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.statusSticonFallbackDisabled) {
          field.Name = "statusSticonFallbackDisabled";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(StatusSticonFallbackDisabled);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllSimpleChannelContacts_args(");
      bool __first = true;
      if (__isset.statusSticonFallbackDisabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusSticonFallbackDisabled: ");
        __sb.Append(StatusSticonFallbackDisabled);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllSimpleChannelContacts_result : TBase
  {
    private List<SimpleChannelContact> _success;
    private TalkException _e;

    public List<SimpleChannelContact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getAllSimpleChannelContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SimpleChannelContact>();
                  TList _list1191 = iprot.ReadListBegin();
                  for( int _i1192 = 0; _i1192 < _list1191.Count; ++_i1192)
                  {
                    SimpleChannelContact _elem1193;
                    _elem1193 = new SimpleChannelContact();
                    _elem1193.Read(iprot);
                    Success.Add(_elem1193);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllSimpleChannelContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SimpleChannelContact _iter1194 in Success)
              {
                _iter1194.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllSimpleChannelContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserIdentities_args : TBase
  {

    public getUserIdentities_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserIdentities_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserIdentities_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserIdentities_result : TBase
  {
    private Dictionary<RegistrationType, string> _success;
    private TalkException _e;

    public Dictionary<RegistrationType, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserIdentities_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<RegistrationType, string>();
                  TMap _map1195 = iprot.ReadMapBegin();
                  for( int _i1196 = 0; _i1196 < _map1195.Count; ++_i1196)
                  {
                    RegistrationType _key1197;
                    string _val1198;
                    _key1197 = (RegistrationType)iprot.ReadI32();
                    _val1198 = iprot.ReadString();
                    Success[_key1197] = _val1198;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserIdentities_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.String, Success.Count));
              foreach (RegistrationType _iter1199 in Success.Keys)
              {
                oprot.WriteI32((int)_iter1199);
                oprot.WriteString(Success[_iter1199]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserIdentities_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class markPaidCallAd_args : TBase
  {
    private string _dialedNumber;
    private string _language;
    private bool _disableCallerId;

    public string DialedNumber
    {
      get
      {
        return _dialedNumber;
      }
      set
      {
        __isset.dialedNumber = true;
        this._dialedNumber = value;
      }
    }

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public bool DisableCallerId
    {
      get
      {
        return _disableCallerId;
      }
      set
      {
        __isset.disableCallerId = true;
        this._disableCallerId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dialedNumber;
      public bool language;
      public bool disableCallerId;
    }

    public markPaidCallAd_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                DialedNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                DisableCallerId = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("markPaidCallAd_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DialedNumber != null && __isset.dialedNumber) {
          field.Name = "dialedNumber";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DialedNumber);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (__isset.disableCallerId) {
          field.Name = "disableCallerId";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DisableCallerId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("markPaidCallAd_args(");
      bool __first = true;
      if (DialedNumber != null && __isset.dialedNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DialedNumber: ");
        __sb.Append(DialedNumber);
      }
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      if (__isset.disableCallerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisableCallerId: ");
        __sb.Append(DisableCallerId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class markPaidCallAd_result : TBase
  {
    private PaidCallDialing _success;
    private TalkException _e;

    public PaidCallDialing Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public markPaidCallAd_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaidCallDialing();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("markPaidCallAd_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("markPaidCallAd_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isGroupMember_args : TBase
  {
    private string _groupId;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
    }

    public isGroupMember_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isGroupMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isGroupMember_args(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isGroupMember_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public isGroupMember_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isGroupMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isGroupMember_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPhoneInfoFromPhoneNumber_args : TBase
  {
    private string _region;
    private string _phoneNumber;

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    public string PhoneNumber
    {
      get
      {
        return _phoneNumber;
      }
      set
      {
        __isset.phoneNumber = true;
        this._phoneNumber = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool region;
      public bool phoneNumber;
    }

    public getPhoneInfoFromPhoneNumber_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                PhoneNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPhoneInfoFromPhoneNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (PhoneNumber != null && __isset.phoneNumber) {
          field.Name = "phoneNumber";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PhoneNumber);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPhoneInfoFromPhoneNumber_args(");
      bool __first = true;
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      if (PhoneNumber != null && __isset.phoneNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PhoneNumber: ");
        __sb.Append(PhoneNumber);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPhoneInfoFromPhoneNumber_result : TBase
  {
    private PhoneInfoForChannel _success;
    private TalkException _e;

    public PhoneInfoForChannel Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPhoneInfoFromPhoneNumber_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PhoneInfoForChannel();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPhoneInfoFromPhoneNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPhoneInfoFromPhoneNumber_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class redeemPaidCallVoucher_args : TBase
  {
    private string _serial;
    private string _language;

    public string Serial
    {
      get
      {
        return _serial;
      }
      set
      {
        __isset.serial = true;
        this._serial = value;
      }
    }

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool serial;
      public bool language;
    }

    public redeemPaidCallVoucher_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Serial = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("redeemPaidCallVoucher_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Serial != null && __isset.serial) {
          field.Name = "serial";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Serial);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("redeemPaidCallVoucher_args(");
      bool __first = true;
      if (Serial != null && __isset.serial) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Serial: ");
        __sb.Append(Serial);
      }
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class redeemPaidCallVoucher_result : TBase
  {
    private PaidCallRedeemResult _success;
    private TalkException _e;

    public PaidCallRedeemResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public redeemPaidCallVoucher_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaidCallRedeemResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("redeemPaidCallVoucher_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("redeemPaidCallVoucher_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPreferredDisplayName_args : TBase
  {
    private List<string> _mids;

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mids;
    }

    public getPreferredDisplayName_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Mids = new List<string>();
                  TList _list1200 = iprot.ReadListBegin();
                  for( int _i1201 = 0; _i1201 < _list1200.Count; ++_i1201)
                  {
                    string _elem1202;
                    _elem1202 = iprot.ReadString();
                    Mids.Add(_elem1202);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPreferredDisplayName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mids != null && __isset.mids) {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Mids.Count));
            foreach (string _iter1203 in Mids)
            {
              oprot.WriteString(_iter1203);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPreferredDisplayName_args(");
      bool __first = true;
      if (Mids != null && __isset.mids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mids: ");
        __sb.Append(Mids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPreferredDisplayName_result : TBase
  {
    private Dictionary<string, string> _success;
    private TalkException _e;

    public Dictionary<string, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPreferredDisplayName_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map1204 = iprot.ReadMapBegin();
                  for( int _i1205 = 0; _i1205 < _map1204.Count; ++_i1205)
                  {
                    string _key1206;
                    string _val1207;
                    _key1206 = iprot.ReadString();
                    _val1207 = iprot.ReadString();
                    Success[_key1206] = _val1207;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPreferredDisplayName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter1208 in Success.Keys)
              {
                oprot.WriteString(_iter1208);
                oprot.WriteString(Success[_iter1208]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPreferredDisplayName_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContactsForChannel_args : TBase
  {
    private List<string> _ids;

    public List<string> Ids
    {
      get
      {
        return _ids;
      }
      set
      {
        __isset.ids = true;
        this._ids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ids;
    }

    public getContactsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  Ids = new List<string>();
                  TList _list1209 = iprot.ReadListBegin();
                  for( int _i1210 = 0; _i1210 < _list1209.Count; ++_i1210)
                  {
                    string _elem1211;
                    _elem1211 = iprot.ReadString();
                    Ids.Add(_elem1211);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContactsForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ids != null && __isset.ids) {
          field.Name = "ids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Ids.Count));
            foreach (string _iter1212 in Ids)
            {
              oprot.WriteString(_iter1212);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContactsForChannel_args(");
      bool __first = true;
      if (Ids != null && __isset.ids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ids: ");
        __sb.Append(Ids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContactsForChannel_result : TBase
  {
    private List<Contact> _success;
    private TalkException _e;

    public List<Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getContactsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Contact>();
                  TList _list1213 = iprot.ReadListBegin();
                  for( int _i1214 = 0; _i1214 < _list1213.Count; ++_i1214)
                  {
                    Contact _elem1215;
                    _elem1215 = new Contact();
                    _elem1215.Read(iprot);
                    Success.Add(_elem1215);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContactsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Contact _iter1216 in Success)
              {
                _iter1216.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContactsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCallCreditProducts_args : TBase
  {
    private PaymentType _appStoreCode;
    private PaymentPgType _pgCode;
    private string _country;
    private string _language;

    /// <summary>
    /// 
    /// <seealso cref="PaymentType"/>
    /// </summary>
    public PaymentType AppStoreCode
    {
      get
      {
        return _appStoreCode;
      }
      set
      {
        __isset.appStoreCode = true;
        this._appStoreCode = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="PaymentPgType"/>
    /// </summary>
    public PaymentPgType PgCode
    {
      get
      {
        return _pgCode;
      }
      set
      {
        __isset.pgCode = true;
        this._pgCode = value;
      }
    }

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool appStoreCode;
      public bool pgCode;
      public bool country;
      public bool language;
    }

    public getCallCreditProducts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                AppStoreCode = (PaymentType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                PgCode = (PaymentPgType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCallCreditProducts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.appStoreCode) {
          field.Name = "appStoreCode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)AppStoreCode);
          oprot.WriteFieldEnd();
        }
        if (__isset.pgCode) {
          field.Name = "pgCode";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)PgCode);
          oprot.WriteFieldEnd();
        }
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCallCreditProducts_args(");
      bool __first = true;
      if (__isset.appStoreCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AppStoreCode: ");
        __sb.Append(AppStoreCode);
      }
      if (__isset.pgCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PgCode: ");
        __sb.Append(PgCode);
      }
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCallCreditProducts_result : TBase
  {
    private List<CoinProductItem> _success;
    private TalkException _e;

    public List<CoinProductItem> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCallCreditProducts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CoinProductItem>();
                  TList _list1217 = iprot.ReadListBegin();
                  for( int _i1218 = 0; _i1218 < _list1217.Count; ++_i1218)
                  {
                    CoinProductItem _elem1219;
                    _elem1219 = new CoinProductItem();
                    _elem1219.Read(iprot);
                    Success.Add(_elem1219);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCallCreditProducts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CoinProductItem _iter1220 in Success)
              {
                _iter1220.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCallCreditProducts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactContacts_args : TBase
  {
    private long _lastModifiedTimestamp;

    public long LastModifiedTimestamp
    {
      get
      {
        return _lastModifiedTimestamp;
      }
      set
      {
        __isset.lastModifiedTimestamp = true;
        this._lastModifiedTimestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastModifiedTimestamp;
    }

    public getCompactContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastModifiedTimestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastModifiedTimestamp) {
          field.Name = "lastModifiedTimestamp";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastModifiedTimestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactContacts_args(");
      bool __first = true;
      if (__isset.lastModifiedTimestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastModifiedTimestamp: ");
        __sb.Append(LastModifiedTimestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactContacts_result : TBase
  {
    private List<CompactContact> _success;
    private TalkException _e;

    public List<CompactContact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCompactContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompactContact>();
                  TList _list1221 = iprot.ReadListBegin();
                  for( int _i1222 = 0; _i1222 < _list1221.Count; ++_i1222)
                  {
                    CompactContact _elem1223;
                    _elem1223 = new CompactContact();
                    _elem1223.Read(iprot);
                    Success.Add(_elem1223);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompactContact _iter1224 in Success)
              {
                _iter1224.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyNotiCenterEvent_args : TBase
  {
    private NotiCenterEventData _event;

    public NotiCenterEventData Event
    {
      get
      {
        return _event;
      }
      set
      {
        __isset.@event = true;
        this._event = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool @event;
    }

    public notifyNotiCenterEvent_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Event = new NotiCenterEventData();
                Event.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyNotiCenterEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Event != null && __isset.@event) {
          field.Name = "event";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Event.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyNotiCenterEvent_args(");
      bool __first = true;
      if (Event != null && __isset.@event) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Event: ");
        __sb.Append(Event== null ? "<null>" : Event.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyNotiCenterEvent_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public notifyNotiCenterEvent_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyNotiCenterEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyNotiCenterEvent_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isInContact_args : TBase
  {
    private string _mid;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
    }

    public isInContact_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isInContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isInContact_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isInContact_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public isInContact_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isInContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isInContact_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class lookupGroupMembers_args : TBase
  {
    private string _groupId;
    private List<string> _mids;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
      public bool mids;
    }

    public lookupGroupMembers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Mids = new List<string>();
                  TList _list1225 = iprot.ReadListBegin();
                  for( int _i1226 = 0; _i1226 < _list1225.Count; ++_i1226)
                  {
                    string _elem1227;
                    _elem1227 = iprot.ReadString();
                    Mids.Add(_elem1227);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("lookupGroupMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (Mids != null && __isset.mids) {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Mids.Count));
            foreach (string _iter1228 in Mids)
            {
              oprot.WriteString(_iter1228);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("lookupGroupMembers_args(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      if (Mids != null && __isset.mids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mids: ");
        __sb.Append(Mids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class lookupGroupMembers_result : TBase
  {
    private List<SimpleChannelContact> _success;
    private TalkException _e;

    public List<SimpleChannelContact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public lookupGroupMembers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SimpleChannelContact>();
                  TList _list1229 = iprot.ReadListBegin();
                  for( int _i1230 = 0; _i1230 < _list1229.Count; ++_i1230)
                  {
                    SimpleChannelContact _elem1231;
                    _elem1231 = new SimpleChannelContact();
                    _elem1231.Read(iprot);
                    Success.Add(_elem1231);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("lookupGroupMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SimpleChannelContact _iter1232 in Success)
              {
                _iter1232.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("lookupGroupMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRoomInformation_args : TBase
  {
    private string _roomMid;

    public string RoomMid
    {
      get
      {
        return _roomMid;
      }
      set
      {
        __isset.roomMid = true;
        this._roomMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool roomMid;
    }

    public getRoomInformation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                RoomMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRoomInformation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RoomMid != null && __isset.roomMid) {
          field.Name = "roomMid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRoomInformation_args(");
      bool __first = true;
      if (RoomMid != null && __isset.roomMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoomMid: ");
        __sb.Append(RoomMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRoomInformation_result : TBase
  {
    private Room _success;
    private TalkException _e;

    public Room Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getRoomInformation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Room();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRoomInformation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRoomInformation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupCall_args : TBase
  {
    private string _chatMid;

    public string ChatMid
    {
      get
      {
        return _chatMid;
      }
      set
      {
        __isset.chatMid = true;
        this._chatMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatMid;
    }

    public getGroupCall_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChatMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupCall_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatMid != null && __isset.chatMid) {
          field.Name = "chatMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupCall_args(");
      bool __first = true;
      if (ChatMid != null && __isset.chatMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatMid: ");
        __sb.Append(ChatMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupCall_result : TBase
  {
    private GroupCall _success;
    private TalkException _e;

    public GroupCall Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupCall_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GroupCall();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupCall_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupCall_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isAllowSecondaryDeviceLogin_args : TBase
  {

    public isAllowSecondaryDeviceLogin_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isAllowSecondaryDeviceLogin_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isAllowSecondaryDeviceLogin_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isAllowSecondaryDeviceLogin_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public isAllowSecondaryDeviceLogin_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isAllowSecondaryDeviceLogin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isAllowSecondaryDeviceLogin_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrimaryClientForChannel_args : TBase
  {

    public getPrimaryClientForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrimaryClientForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrimaryClientForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrimaryClientForChannel_result : TBase
  {
    private SimpleChannelClient _success;
    private TalkException _e;

    public SimpleChannelClient Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPrimaryClientForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SimpleChannelClient();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrimaryClientForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrimaryClientForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createRoomWithBuddy_args : TBase
  {
    private int _reqSeq;
    private string _buddyMid;
    private List<string> _contactIds;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }

    public List<string> ContactIds
    {
      get
      {
        return _contactIds;
      }
      set
      {
        __isset.contactIds = true;
        this._contactIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool buddyMid;
      public bool contactIds;
    }

    public createRoomWithBuddy_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                BuddyMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list1233 = iprot.ReadListBegin();
                  for( int _i1234 = 0; _i1234 < _list1233.Count; ++_i1234)
                  {
                    string _elem1235;
                    _elem1235 = iprot.ReadString();
                    ContactIds.Add(_elem1235);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createRoomWithBuddy_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (BuddyMid != null && __isset.buddyMid) {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BuddyMid);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter1236 in ContactIds)
            {
              oprot.WriteString(_iter1236);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createRoomWithBuddy_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (BuddyMid != null && __isset.buddyMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BuddyMid: ");
        __sb.Append(BuddyMid);
      }
      if (ContactIds != null && __isset.contactIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactIds: ");
        __sb.Append(ContactIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createRoomWithBuddy_result : TBase
  {
    private Room _success;
    private TalkException _e;

    public Room Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createRoomWithBuddy_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Room();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createRoomWithBuddy_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createRoomWithBuddy_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDisplayName_args : TBase
  {
    private string _mid;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
    }

    public getDisplayName_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDisplayName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDisplayName_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDisplayName_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getDisplayName_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDisplayName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDisplayName_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPaidCallMetadata_args : TBase
  {
    private string _language;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool language;
    }

    public getPaidCallMetadata_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPaidCallMetadata_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPaidCallMetadata_args(");
      bool __first = true;
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPaidCallMetadata_result : TBase
  {
    private PaidCallMetadataResult _success;
    private TalkException _e;

    public PaidCallMetadataResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPaidCallMetadata_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaidCallMetadataResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPaidCallMetadata_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPaidCallMetadata_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMid_args : TBase
  {

    public getMid_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMid_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMid_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMid_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMid_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMid_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserCountryForBilling_args : TBase
  {
    private string _country;
    private string _remoteIp;

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string RemoteIp
    {
      get
      {
        return _remoteIp;
      }
      set
      {
        __isset.remoteIp = true;
        this._remoteIp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool country;
      public bool remoteIp;
    }

    public getUserCountryForBilling_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                RemoteIp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserCountryForBilling_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (RemoteIp != null && __isset.remoteIp) {
          field.Name = "remoteIp";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RemoteIp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserCountryForBilling_args(");
      bool __first = true;
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (RemoteIp != null && __isset.remoteIp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RemoteIp: ");
        __sb.Append(RemoteIp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserCountryForBilling_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserCountryForBilling_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserCountryForBilling_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserCountryForBilling_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFavoriteGroupIdsForChannel_args : TBase
  {

    public getFavoriteGroupIdsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFavoriteGroupIdsForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFavoriteGroupIdsForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFavoriteGroupIdsForChannel_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getFavoriteGroupIdsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1237 = iprot.ReadListBegin();
                  for( int _i1238 = 0; _i1238 < _list1237.Count; ++_i1238)
                  {
                    string _elem1239;
                    _elem1239 = iprot.ReadString();
                    Success.Add(_elem1239);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFavoriteGroupIdsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1240 in Success)
              {
                oprot.WriteString(_iter1240);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFavoriteGroupIdsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPaidCallHistory_args : TBase
  {
    private long _start;
    private int _size;
    private string _language;

    public long Start
    {
      get
      {
        return _start;
      }
      set
      {
        __isset.start = true;
        this._start = value;
      }
    }

    public int Size
    {
      get
      {
        return _size;
      }
      set
      {
        __isset.size = true;
        this._size = value;
      }
    }

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool start;
      public bool size;
      public bool language;
    }

    public getPaidCallHistory_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Start = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPaidCallHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.size) {
          field.Name = "size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Size);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPaidCallHistory_args(");
      bool __first = true;
      if (__isset.start) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Start: ");
        __sb.Append(Start);
      }
      if (__isset.size) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Size: ");
        __sb.Append(Size);
      }
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPaidCallHistory_result : TBase
  {
    private PaidCallHistoryResult _success;
    private TalkException _e;

    public PaidCallHistoryResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPaidCallHistory_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaidCallHistoryResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPaidCallHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPaidCallHistory_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendPinCodeOperation_args : TBase
  {
    private string _verifier;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
    }

    public sendPinCodeOperation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendPinCodeOperation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendPinCodeOperation_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendPinCodeOperation_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public sendPinCodeOperation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendPinCodeOperation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendPinCodeOperation_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteIntoGroupCall_args : TBase
  {
    private string _chatMid;
    private List<string> _memberMids;
    private GroupCallMediaType _mediaType;

    public string ChatMid
    {
      get
      {
        return _chatMid;
      }
      set
      {
        __isset.chatMid = true;
        this._chatMid = value;
      }
    }

    public List<string> MemberMids
    {
      get
      {
        return _memberMids;
      }
      set
      {
        __isset.memberMids = true;
        this._memberMids = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="GroupCallMediaType"/>
    /// </summary>
    public GroupCallMediaType MediaType
    {
      get
      {
        return _mediaType;
      }
      set
      {
        __isset.mediaType = true;
        this._mediaType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatMid;
      public bool memberMids;
      public bool mediaType;
    }

    public inviteIntoGroupCall_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChatMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  MemberMids = new List<string>();
                  TList _list1241 = iprot.ReadListBegin();
                  for( int _i1242 = 0; _i1242 < _list1241.Count; ++_i1242)
                  {
                    string _elem1243;
                    _elem1243 = iprot.ReadString();
                    MemberMids.Add(_elem1243);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MediaType = (GroupCallMediaType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteIntoGroupCall_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatMid != null && __isset.chatMid) {
          field.Name = "chatMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatMid);
          oprot.WriteFieldEnd();
        }
        if (MemberMids != null && __isset.memberMids) {
          field.Name = "memberMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MemberMids.Count));
            foreach (string _iter1244 in MemberMids)
            {
              oprot.WriteString(_iter1244);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.mediaType) {
          field.Name = "mediaType";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)MediaType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteIntoGroupCall_args(");
      bool __first = true;
      if (ChatMid != null && __isset.chatMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatMid: ");
        __sb.Append(ChatMid);
      }
      if (MemberMids != null && __isset.memberMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MemberMids: ");
        __sb.Append(MemberMids);
      }
      if (__isset.mediaType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MediaType: ");
        __sb.Append(MediaType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteIntoGroupCall_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public inviteIntoGroupCall_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteIntoGroupCall_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteIntoGroupCall_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFriendMids_args : TBase
  {

    public getFriendMids_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFriendMids_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFriendMids_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFriendMids_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getFriendMids_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1245 = iprot.ReadListBegin();
                  for( int _i1246 = 0; _i1246 < _list1245.Count; ++_i1246)
                  {
                    string _elem1247;
                    _elem1247 = iprot.ReadString();
                    Success.Add(_elem1247);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFriendMids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1248 in Success)
              {
                oprot.WriteString(_iter1248);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFriendMids_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMetaProfile_args : TBase
  {

    public getMetaProfile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMetaProfile_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMetaProfile_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMetaProfile_result : TBase
  {
    private MetaProfile _success;
    private TalkException _e;

    public MetaProfile Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMetaProfile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MetaProfile();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMetaProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMetaProfile_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageForChannel_args : TBase
  {
    private Message _message;

    public Message Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool message;
    }

    public sendMessageForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageForChannel_args(");
      bool __first = true;
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageForChannel_result : TBase
  {
    private Message _success;
    private TalkException _e;

    public Message Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendMessageForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class activeBuddySubscriberCount_args : TBase
  {

    public activeBuddySubscriberCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("activeBuddySubscriberCount_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("activeBuddySubscriberCount_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class activeBuddySubscriberCount_result : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public activeBuddySubscriberCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("activeBuddySubscriberCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("activeBuddySubscriberCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCallCreditPurchaseHistory_args : TBase
  {
    private CoinHistoryCondition _request;

    public CoinHistoryCondition Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public getCallCreditPurchaseHistory_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Request = new CoinHistoryCondition();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCallCreditPurchaseHistory_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCallCreditPurchaseHistory_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCallCreditPurchaseHistory_result : TBase
  {
    private CoinHistoryResult _success;
    private TalkException _e;

    public CoinHistoryResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCallCreditPurchaseHistory_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CoinHistoryResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCallCreditPurchaseHistory_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCallCreditPurchaseHistory_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isRoomMember_args : TBase
  {
    private string _roomId;

    public string RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool roomId;
    }

    public isRoomMember_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isRoomMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isRoomMember_args(");
      bool __first = true;
      if (RoomId != null && __isset.roomId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoomId: ");
        __sb.Append(RoomId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isRoomMember_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public isRoomMember_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isRoomMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isRoomMember_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendSystemOAMessage_args : TBase
  {
    private Message _message;

    public Message Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool message;
    }

    public sendSystemOAMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendSystemOAMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendSystemOAMessage_args(");
      bool __first = true;
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendSystemOAMessage_result : TBase
  {
    private Message _success;
    private TalkException _e;

    public Message Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendSystemOAMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendSystemOAMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendSystemOAMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquirePaidCallRoute_args : TBase
  {
    private PaidCallType _paidCallType;
    private string _dialedNumber;
    private string _language;
    private string _networkCode;
    private bool _disableCallerId;
    private string _referer;
    private string _adSessionId;

    /// <summary>
    /// 
    /// <seealso cref="PaidCallType"/>
    /// </summary>
    public PaidCallType PaidCallType
    {
      get
      {
        return _paidCallType;
      }
      set
      {
        __isset.paidCallType = true;
        this._paidCallType = value;
      }
    }

    public string DialedNumber
    {
      get
      {
        return _dialedNumber;
      }
      set
      {
        __isset.dialedNumber = true;
        this._dialedNumber = value;
      }
    }

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string NetworkCode
    {
      get
      {
        return _networkCode;
      }
      set
      {
        __isset.networkCode = true;
        this._networkCode = value;
      }
    }

    public bool DisableCallerId
    {
      get
      {
        return _disableCallerId;
      }
      set
      {
        __isset.disableCallerId = true;
        this._disableCallerId = value;
      }
    }

    public string Referer
    {
      get
      {
        return _referer;
      }
      set
      {
        __isset.referer = true;
        this._referer = value;
      }
    }

    public string AdSessionId
    {
      get
      {
        return _adSessionId;
      }
      set
      {
        __isset.adSessionId = true;
        this._adSessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool paidCallType;
      public bool dialedNumber;
      public bool language;
      public bool networkCode;
      public bool disableCallerId;
      public bool referer;
      public bool adSessionId;
    }

    public acquirePaidCallRoute_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                PaidCallType = (PaidCallType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                DialedNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                NetworkCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Bool) {
                DisableCallerId = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Referer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                AdSessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquirePaidCallRoute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.paidCallType) {
          field.Name = "paidCallType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)PaidCallType);
          oprot.WriteFieldEnd();
        }
        if (DialedNumber != null && __isset.dialedNumber) {
          field.Name = "dialedNumber";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DialedNumber);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (NetworkCode != null && __isset.networkCode) {
          field.Name = "networkCode";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NetworkCode);
          oprot.WriteFieldEnd();
        }
        if (__isset.disableCallerId) {
          field.Name = "disableCallerId";
          field.Type = TType.Bool;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(DisableCallerId);
          oprot.WriteFieldEnd();
        }
        if (Referer != null && __isset.referer) {
          field.Name = "referer";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Referer);
          oprot.WriteFieldEnd();
        }
        if (AdSessionId != null && __isset.adSessionId) {
          field.Name = "adSessionId";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AdSessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquirePaidCallRoute_args(");
      bool __first = true;
      if (__isset.paidCallType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PaidCallType: ");
        __sb.Append(PaidCallType);
      }
      if (DialedNumber != null && __isset.dialedNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DialedNumber: ");
        __sb.Append(DialedNumber);
      }
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      if (NetworkCode != null && __isset.networkCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NetworkCode: ");
        __sb.Append(NetworkCode);
      }
      if (__isset.disableCallerId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DisableCallerId: ");
        __sb.Append(DisableCallerId);
      }
      if (Referer != null && __isset.referer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Referer: ");
        __sb.Append(Referer);
      }
      if (AdSessionId != null && __isset.adSessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AdSessionId: ");
        __sb.Append(AdSessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquirePaidCallRoute_result : TBase
  {
    private PaidCallResponse _success;
    private TalkException _e;

    public PaidCallResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public acquirePaidCallRoute_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaidCallResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquirePaidCallRoute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquirePaidCallRoute_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupsForChannel_args : TBase
  {
    private List<string> _groupIds;

    public List<string> GroupIds
    {
      get
      {
        return _groupIds;
      }
      set
      {
        __isset.groupIds = true;
        this._groupIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupIds;
    }

    public getGroupsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  GroupIds = new List<string>();
                  TList _list1249 = iprot.ReadListBegin();
                  for( int _i1250 = 0; _i1250 < _list1249.Count; ++_i1250)
                  {
                    string _elem1251;
                    _elem1251 = iprot.ReadString();
                    GroupIds.Add(_elem1251);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupsForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupIds != null && __isset.groupIds) {
          field.Name = "groupIds";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, GroupIds.Count));
            foreach (string _iter1252 in GroupIds)
            {
              oprot.WriteString(_iter1252);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupsForChannel_args(");
      bool __first = true;
      if (GroupIds != null && __isset.groupIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupIds: ");
        __sb.Append(GroupIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupsForChannel_result : TBase
  {
    private List<@Group> _success;
    private TalkException _e;

    public List<@Group> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<@Group>();
                  TList _list1253 = iprot.ReadListBegin();
                  for( int _i1254 = 0; _i1254 < _list1253.Count; ++_i1254)
                  {
                    @Group _elem1255;
                    _elem1255 = new @Group();
                    _elem1255.Read(iprot);
                    Success.Add(_elem1255);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (@Group _iter1256 in Success)
              {
                _iter1256.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserCreateTime_args : TBase
  {

    public getUserCreateTime_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserCreateTime_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserCreateTime_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserCreateTime_result : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserCreateTime_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserCreateTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserCreateTime_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerChannelCP_args : TBase
  {
    private string _cpId;
    private string _registerPassword;

    public string CpId
    {
      get
      {
        return _cpId;
      }
      set
      {
        __isset.cpId = true;
        this._cpId = value;
      }
    }

    public string RegisterPassword
    {
      get
      {
        return _registerPassword;
      }
      set
      {
        __isset.registerPassword = true;
        this._registerPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cpId;
      public bool registerPassword;
    }

    public registerChannelCP_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                CpId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                RegisterPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerChannelCP_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CpId != null && __isset.cpId) {
          field.Name = "cpId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CpId);
          oprot.WriteFieldEnd();
        }
        if (RegisterPassword != null && __isset.registerPassword) {
          field.Name = "registerPassword";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegisterPassword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerChannelCP_args(");
      bool __first = true;
      if (CpId != null && __isset.cpId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CpId: ");
        __sb.Append(CpId);
      }
      if (RegisterPassword != null && __isset.registerPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegisterPassword: ");
        __sb.Append(RegisterPassword);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerChannelCP_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerChannelCP_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerChannelCP_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerChannelCP_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reserveCallCreditPurchase_args : TBase
  {
    private CoinPurchaseReservation _request;

    public CoinPurchaseReservation Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
    }

    public reserveCallCreditPurchase_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Request = new CoinPurchaseReservation();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reserveCallCreditPurchase_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reserveCallCreditPurchase_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reserveCallCreditPurchase_result : TBase
  {
    private PaymentReservationResult _success;
    private TalkException _e;

    public PaymentReservationResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reserveCallCreditPurchase_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaymentReservationResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reserveCallCreditPurchase_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reserveCallCreditPurchase_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquirePaidCallCurrencyExchangeRate_args : TBase
  {
    private string _language;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool language;
    }

    public acquirePaidCallCurrencyExchangeRate_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquirePaidCallCurrencyExchangeRate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquirePaidCallCurrencyExchangeRate_args(");
      bool __first = true;
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquirePaidCallCurrencyExchangeRate_result : TBase
  {
    private List<PaidCallCurrencyExchangeRate> _success;
    private TalkException _e;

    public List<PaidCallCurrencyExchangeRate> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public acquirePaidCallCurrencyExchangeRate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PaidCallCurrencyExchangeRate>();
                  TList _list1257 = iprot.ReadListBegin();
                  for( int _i1258 = 0; _i1258 < _list1257.Count; ++_i1258)
                  {
                    PaidCallCurrencyExchangeRate _elem1259;
                    _elem1259 = new PaidCallCurrencyExchangeRate();
                    _elem1259.Read(iprot);
                    Success.Add(_elem1259);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquirePaidCallCurrencyExchangeRate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (PaidCallCurrencyExchangeRate _iter1260 in Success)
              {
                _iter1260.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquirePaidCallCurrencyExchangeRate_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRoomMemberMidsForAppPlatform_args : TBase
  {
    private string _roomId;

    public string RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool roomId;
    }

    public getRoomMemberMidsForAppPlatform_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRoomMemberMidsForAppPlatform_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRoomMemberMidsForAppPlatform_args(");
      bool __first = true;
      if (RoomId != null && __isset.roomId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoomId: ");
        __sb.Append(RoomId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRoomMemberMidsForAppPlatform_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getRoomMemberMidsForAppPlatform_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1261 = iprot.ReadListBegin();
                  for( int _i1262 = 0; _i1262 < _list1261.Count; ++_i1262)
                  {
                    string _elem1263;
                    _elem1263 = iprot.ReadString();
                    Success.Add(_elem1263);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRoomMemberMidsForAppPlatform_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1264 in Success)
              {
                oprot.WriteString(_iter1264);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRoomMemberMidsForAppPlatform_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPaidCallBalanceList_args : TBase
  {
    private string _language;

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool language;
    }

    public getPaidCallBalanceList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPaidCallBalanceList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPaidCallBalanceList_args(");
      bool __first = true;
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPaidCallBalanceList_result : TBase
  {
    private List<PaidCallBalance> _success;
    private TalkException _e;

    public List<PaidCallBalance> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPaidCallBalanceList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PaidCallBalance>();
                  TList _list1265 = iprot.ReadListBegin();
                  for( int _i1266 = 0; _i1266 < _list1265.Count; ++_i1266)
                  {
                    PaidCallBalance _elem1267;
                    _elem1267 = new PaidCallBalance();
                    _elem1267.Read(iprot);
                    Success.Add(_elem1267);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPaidCallBalanceList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (PaidCallBalance _iter1268 in Success)
              {
                _iter1268.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPaidCallBalanceList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonalInfos_args : TBase
  {
    private THashSet<PersonalInfo> _requiredPersonalInfos;

    public THashSet<PersonalInfo> RequiredPersonalInfos
    {
      get
      {
        return _requiredPersonalInfos;
      }
      set
      {
        __isset.requiredPersonalInfos = true;
        this._requiredPersonalInfos = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool requiredPersonalInfos;
    }

    public getPersonalInfos_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Set) {
                {
                  RequiredPersonalInfos = new THashSet<PersonalInfo>();
                  TSet _set1269 = iprot.ReadSetBegin();
                  for( int _i1270 = 0; _i1270 < _set1269.Count; ++_i1270)
                  {
                    PersonalInfo _elem1271;
                    _elem1271 = (PersonalInfo)iprot.ReadI32();
                    RequiredPersonalInfos.Add(_elem1271);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonalInfos_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RequiredPersonalInfos != null && __isset.requiredPersonalInfos) {
          field.Name = "requiredPersonalInfos";
          field.Type = TType.Set;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.I32, RequiredPersonalInfos.Count));
            foreach (PersonalInfo _iter1272 in RequiredPersonalInfos)
            {
              oprot.WriteI32((int)_iter1272);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonalInfos_args(");
      bool __first = true;
      if (RequiredPersonalInfos != null && __isset.requiredPersonalInfos) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RequiredPersonalInfos: ");
        __sb.Append(RequiredPersonalInfos);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPersonalInfos_result : TBase
  {
    private Dictionary<PersonalInfo, string> _success;
    private TalkException _e;

    public Dictionary<PersonalInfo, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPersonalInfos_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<PersonalInfo, string>();
                  TMap _map1273 = iprot.ReadMapBegin();
                  for( int _i1274 = 0; _i1274 < _map1273.Count; ++_i1274)
                  {
                    PersonalInfo _key1275;
                    string _val1276;
                    _key1275 = (PersonalInfo)iprot.ReadI32();
                    _val1276 = iprot.ReadString();
                    Success[_key1275] = _val1276;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPersonalInfos_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.String, Success.Count));
              foreach (PersonalInfo _iter1277 in Success.Keys)
              {
                oprot.WriteI32((int)_iter1277);
                oprot.WriteString(Success[_iter1277]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPersonalInfos_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrimaryClientsForChannel_args : TBase
  {
    private List<string> _userMids;

    public List<string> UserMids
    {
      get
      {
        return _userMids;
      }
      set
      {
        __isset.userMids = true;
        this._userMids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userMids;
    }

    public getPrimaryClientsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  UserMids = new List<string>();
                  TList _list1278 = iprot.ReadListBegin();
                  for( int _i1279 = 0; _i1279 < _list1278.Count; ++_i1279)
                  {
                    string _elem1280;
                    _elem1280 = iprot.ReadString();
                    UserMids.Add(_elem1280);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrimaryClientsForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserMids != null && __isset.userMids) {
          field.Name = "userMids";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, UserMids.Count));
            foreach (string _iter1281 in UserMids)
            {
              oprot.WriteString(_iter1281);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrimaryClientsForChannel_args(");
      bool __first = true;
      if (UserMids != null && __isset.userMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserMids: ");
        __sb.Append(UserMids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrimaryClientsForChannel_result : TBase
  {
    private List<SimpleChannelClient> _success;
    private TalkException _e;

    public List<SimpleChannelClient> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPrimaryClientsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SimpleChannelClient>();
                  TList _list1282 = iprot.ReadListBegin();
                  for( int _i1283 = 0; _i1283 < _list1282.Count; ++_i1283)
                  {
                    SimpleChannelClient _elem1284;
                    _elem1284 = new SimpleChannelClient();
                    _elem1284.Read(iprot);
                    Success.Add(_elem1284);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrimaryClientsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SimpleChannelClient _iter1285 in Success)
              {
                _iter1285.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrimaryClientsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addBuddyToContact_args : TBase
  {
    private string _buddyMid;

    public string BuddyMid
    {
      get
      {
        return _buddyMid;
      }
      set
      {
        __isset.buddyMid = true;
        this._buddyMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool buddyMid;
    }

    public addBuddyToContact_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                BuddyMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addBuddyToContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BuddyMid != null && __isset.buddyMid) {
          field.Name = "buddyMid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BuddyMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addBuddyToContact_args(");
      bool __first = true;
      if (BuddyMid != null && __isset.buddyMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BuddyMid: ");
        __sb.Append(BuddyMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addBuddyToContact_result : TBase
  {
    private ContactTransition _success;
    private TalkException _e;

    public ContactTransition Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public addBuddyToContact_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ContactTransition();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addBuddyToContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addBuddyToContact_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupMemberMidsForAppPlatform_args : TBase
  {
    private string _groupId;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
    }

    public getGroupMemberMidsForAppPlatform_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupMemberMidsForAppPlatform_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupMemberMidsForAppPlatform_args(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupMemberMidsForAppPlatform_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupMemberMidsForAppPlatform_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1286 = iprot.ReadListBegin();
                  for( int _i1287 = 0; _i1287 < _list1286.Count; ++_i1287)
                  {
                    string _elem1288;
                    _elem1288 = iprot.ReadString();
                    Success.Add(_elem1288);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupMemberMidsForAppPlatform_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1289 in Success)
              {
                oprot.WriteString(_iter1289);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupMemberMidsForAppPlatform_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserLanguage_args : TBase
  {

    public getUserLanguage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserLanguage_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserLanguage_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserLanguage_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserLanguage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserLanguage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserLanguage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class lookupPaidCall_args : TBase
  {
    private string _dialedNumber;
    private string _language;
    private string _referer;

    public string DialedNumber
    {
      get
      {
        return _dialedNumber;
      }
      set
      {
        __isset.dialedNumber = true;
        this._dialedNumber = value;
      }
    }

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }

    public string Referer
    {
      get
      {
        return _referer;
      }
      set
      {
        __isset.referer = true;
        this._referer = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dialedNumber;
      public bool language;
      public bool referer;
    }

    public lookupPaidCall_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                DialedNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Referer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("lookupPaidCall_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DialedNumber != null && __isset.dialedNumber) {
          field.Name = "dialedNumber";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DialedNumber);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        if (Referer != null && __isset.referer) {
          field.Name = "referer";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Referer);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("lookupPaidCall_args(");
      bool __first = true;
      if (DialedNumber != null && __isset.dialedNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DialedNumber: ");
        __sb.Append(DialedNumber);
      }
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      if (Referer != null && __isset.referer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Referer: ");
        __sb.Append(Referer);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class lookupPaidCall_result : TBase
  {
    private PaidCallResponse _success;
    private TalkException _e;

    public PaidCallResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public lookupPaidCall_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaidCallResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("lookupPaidCall_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("lookupPaidCall_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getExtendedProfile_args : TBase
  {

    public getExtendedProfile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getExtendedProfile_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getExtendedProfile_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getExtendedProfile_result : TBase
  {
    private ExtendedProfile _success;
    private TalkException _e;

    public ExtendedProfile Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getExtendedProfile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ExtendedProfile();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getExtendedProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getExtendedProfile_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getReverseCompactContacts_args : TBase
  {
    private List<string> _ids;

    public List<string> Ids
    {
      get
      {
        return _ids;
      }
      set
      {
        __isset.ids = true;
        this._ids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ids;
    }

    public getReverseCompactContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Ids = new List<string>();
                  TList _list1290 = iprot.ReadListBegin();
                  for( int _i1291 = 0; _i1291 < _list1290.Count; ++_i1291)
                  {
                    string _elem1292;
                    _elem1292 = iprot.ReadString();
                    Ids.Add(_elem1292);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getReverseCompactContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ids != null && __isset.ids) {
          field.Name = "ids";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Ids.Count));
            foreach (string _iter1293 in Ids)
            {
              oprot.WriteString(_iter1293);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getReverseCompactContacts_args(");
      bool __first = true;
      if (Ids != null && __isset.ids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ids: ");
        __sb.Append(Ids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getReverseCompactContacts_result : TBase
  {
    private Dictionary<string, CompactContact> _success;
    private TalkException _e;

    public Dictionary<string, CompactContact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getReverseCompactContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, CompactContact>();
                  TMap _map1294 = iprot.ReadMapBegin();
                  for( int _i1295 = 0; _i1295 < _map1294.Count; ++_i1295)
                  {
                    string _key1296;
                    CompactContact _val1297;
                    _key1296 = iprot.ReadString();
                    _val1297 = new CompactContact();
                    _val1297.Read(iprot);
                    Success[_key1296] = _val1297;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getReverseCompactContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter1298 in Success.Keys)
              {
                oprot.WriteString(_iter1298);
                Success[_iter1298].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getReverseCompactContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPaidCallAdStatus_args : TBase
  {

    public getPaidCallAdStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPaidCallAdStatus_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPaidCallAdStatus_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPaidCallAdStatus_result : TBase
  {
    private PaidCallAdResult _success;
    private TalkException _e;

    public PaidCallAdResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPaidCallAdStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PaidCallAdResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPaidCallAdStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPaidCallAdStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByUseridWithoutAbuseBlockForChannel_args : TBase
  {
    private string _userid;

    public string Userid
    {
      get
      {
        return _userid;
      }
      set
      {
        __isset.userid = true;
        this._userid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userid;
    }

    public findContactByUseridWithoutAbuseBlockForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByUseridWithoutAbuseBlockForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByUseridWithoutAbuseBlockForChannel_args(");
      bool __first = true;
      if (Userid != null && __isset.userid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Userid: ");
        __sb.Append(Userid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByUseridWithoutAbuseBlockForChannel_result : TBase
  {
    private Contact _success;
    private TalkException _e;

    public Contact Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findContactByUseridWithoutAbuseBlockForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByUseridWithoutAbuseBlockForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByUseridWithoutAbuseBlockForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupMemberMids_args : TBase
  {
    private string _groupId;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
    }

    public getGroupMemberMids_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupMemberMids_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupMemberMids_args(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupMemberMids_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupMemberMids_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1299 = iprot.ReadListBegin();
                  for( int _i1300 = 0; _i1300 < _list1299.Count; ++_i1300)
                  {
                    string _elem1301;
                    _elem1301 = iprot.ReadString();
                    Success.Add(_elem1301);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupMemberMids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1302 in Success)
              {
                oprot.WriteString(_iter1302);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupMemberMids_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageWithoutRelationship_args : TBase
  {
    private Message _message;

    public Message Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool message;
    }

    public sendMessageWithoutRelationship_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageWithoutRelationship_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageWithoutRelationship_args(");
      bool __first = true;
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageWithoutRelationship_result : TBase
  {
    private Message _success;
    private TalkException _e;

    public Message Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendMessageWithoutRelationship_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageWithoutRelationship_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageWithoutRelationship_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class displayBuddySubscriberCountInBulk_args : TBase
  {
    private List<string> _mids;

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mids;
    }

    public displayBuddySubscriberCountInBulk_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Mids = new List<string>();
                  TList _list1303 = iprot.ReadListBegin();
                  for( int _i1304 = 0; _i1304 < _list1303.Count; ++_i1304)
                  {
                    string _elem1305;
                    _elem1305 = iprot.ReadString();
                    Mids.Add(_elem1305);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("displayBuddySubscriberCountInBulk_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mids != null && __isset.mids) {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Mids.Count));
            foreach (string _iter1306 in Mids)
            {
              oprot.WriteString(_iter1306);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("displayBuddySubscriberCountInBulk_args(");
      bool __first = true;
      if (Mids != null && __isset.mids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mids: ");
        __sb.Append(Mids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class displayBuddySubscriberCountInBulk_result : TBase
  {
    private Dictionary<string, long> _success;
    private TalkException _e;

    public Dictionary<string, long> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public displayBuddySubscriberCountInBulk_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, long>();
                  TMap _map1307 = iprot.ReadMapBegin();
                  for( int _i1308 = 0; _i1308 < _map1307.Count; ++_i1308)
                  {
                    string _key1309;
                    long _val1310;
                    _key1309 = iprot.ReadString();
                    _val1310 = iprot.ReadI64();
                    Success[_key1309] = _val1310;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("displayBuddySubscriberCountInBulk_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Success.Count));
              foreach (string _iter1311 in Success.Keys)
              {
                oprot.WriteString(_iter1311);
                oprot.WriteI64(Success[_iter1311]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("displayBuddySubscriberCountInBulk_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class lookupRoomMembers_args : TBase
  {
    private string _roomId;
    private List<string> _mids;

    public string RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }

    public List<string> Mids
    {
      get
      {
        return _mids;
      }
      set
      {
        __isset.mids = true;
        this._mids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool roomId;
      public bool mids;
    }

    public lookupRoomMembers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Mids = new List<string>();
                  TList _list1312 = iprot.ReadListBegin();
                  for( int _i1313 = 0; _i1313 < _list1312.Count; ++_i1313)
                  {
                    string _elem1314;
                    _elem1314 = iprot.ReadString();
                    Mids.Add(_elem1314);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("lookupRoomMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        if (Mids != null && __isset.mids) {
          field.Name = "mids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Mids.Count));
            foreach (string _iter1315 in Mids)
            {
              oprot.WriteString(_iter1315);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("lookupRoomMembers_args(");
      bool __first = true;
      if (RoomId != null && __isset.roomId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoomId: ");
        __sb.Append(RoomId);
      }
      if (Mids != null && __isset.mids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mids: ");
        __sb.Append(Mids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class lookupRoomMembers_result : TBase
  {
    private List<SimpleChannelContact> _success;
    private TalkException _e;

    public List<SimpleChannelContact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public lookupRoomMembers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SimpleChannelContact>();
                  TList _list1316 = iprot.ReadListBegin();
                  for( int _i1317 = 0; _i1317 < _list1316.Count; ++_i1317)
                  {
                    SimpleChannelContact _elem1318;
                    _elem1318 = new SimpleChannelContact();
                    _elem1318.Read(iprot);
                    Success.Add(_elem1318);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("lookupRoomMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SimpleChannelContact _iter1319 in Success)
              {
                _iter1319.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("lookupRoomMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFavoriteMidsForChannel_args : TBase
  {

    public getFavoriteMidsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFavoriteMidsForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFavoriteMidsForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFavoriteMidsForChannel_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getFavoriteMidsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1320 = iprot.ReadListBegin();
                  for( int _i1321 = 0; _i1321 < _list1320.Count; ++_i1321)
                  {
                    string _elem1322;
                    _elem1322 = iprot.ReadString();
                    Success.Add(_elem1322);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFavoriteMidsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1323 in Success)
              {
                oprot.WriteString(_iter1323);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFavoriteMidsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllContactIdsForChannel_args : TBase
  {

    public getAllContactIdsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllContactIdsForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllContactIdsForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllContactIdsForChannel_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getAllContactIdsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1324 = iprot.ReadListBegin();
                  for( int _i1325 = 0; _i1325 < _list1324.Count; ++_i1325)
                  {
                    string _elem1326;
                    _elem1326 = iprot.ReadString();
                    Success.Add(_elem1326);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllContactIdsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1327 in Success)
              {
                oprot.WriteString(_iter1327);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllContactIdsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class displayBuddySubscriberCount_args : TBase
  {

    public displayBuddySubscriberCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("displayBuddySubscriberCount_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("displayBuddySubscriberCount_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class displayBuddySubscriberCount_result : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public displayBuddySubscriberCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("displayBuddySubscriberCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("displayBuddySubscriberCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProfileForChannel_args : TBase
  {

    public getProfileForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProfileForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProfileForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProfileForChannel_result : TBase
  {
    private Profile _success;
    private TalkException _e;

    public Profile Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getProfileForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Profile();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProfileForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProfileForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserTickets_args : TBase
  {
    private List<string> _userMids;

    public List<string> UserMids
    {
      get
      {
        return _userMids;
      }
      set
      {
        __isset.userMids = true;
        this._userMids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userMids;
    }

    public getUserTickets_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  UserMids = new List<string>();
                  TList _list1328 = iprot.ReadListBegin();
                  for( int _i1329 = 0; _i1329 < _list1328.Count; ++_i1329)
                  {
                    string _elem1330;
                    _elem1330 = iprot.ReadString();
                    UserMids.Add(_elem1330);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserTickets_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserMids != null && __isset.userMids) {
          field.Name = "userMids";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, UserMids.Count));
            foreach (string _iter1331 in UserMids)
            {
              oprot.WriteString(_iter1331);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserTickets_args(");
      bool __first = true;
      if (UserMids != null && __isset.userMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserMids: ");
        __sb.Append(UserMids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserTickets_result : TBase
  {
    private List<UserTicketResponse> _success;
    private TalkException _e;

    public List<UserTicketResponse> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserTickets_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<UserTicketResponse>();
                  TList _list1332 = iprot.ReadListBegin();
                  for( int _i1333 = 0; _i1333 < _list1332.Count; ++_i1333)
                  {
                    UserTicketResponse _elem1334;
                    _elem1334 = new UserTicketResponse();
                    _elem1334.Read(iprot);
                    Success.Add(_elem1334);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserTickets_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (UserTicketResponse _iter1335 in Success)
              {
                _iter1335.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserTickets_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getOAFriendMids_args : TBase
  {

    public getOAFriendMids_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getOAFriendMids_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getOAFriendMids_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getOAFriendMids_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getOAFriendMids_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1336 = iprot.ReadListBegin();
                  for( int _i1337 = 0; _i1337 < _list1336.Count; ++_i1337)
                  {
                    string _elem1338;
                    _elem1338 = iprot.ReadString();
                    Success.Add(_elem1338);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getOAFriendMids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1339 in Success)
              {
                oprot.WriteString(_iter1339);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getOAFriendMids_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class searchPaidCallUserRate_args : TBase
  {
    private string _countryCode;
    private string _language;

    public string CountryCode
    {
      get
      {
        return _countryCode;
      }
      set
      {
        __isset.countryCode = true;
        this._countryCode = value;
      }
    }

    public string Language
    {
      get
      {
        return _language;
      }
      set
      {
        __isset.language = true;
        this._language = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool countryCode;
      public bool language;
    }

    public searchPaidCallUserRate_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                CountryCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Language = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("searchPaidCallUserRate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CountryCode != null && __isset.countryCode) {
          field.Name = "countryCode";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CountryCode);
          oprot.WriteFieldEnd();
        }
        if (Language != null && __isset.language) {
          field.Name = "language";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Language);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("searchPaidCallUserRate_args(");
      bool __first = true;
      if (CountryCode != null && __isset.countryCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CountryCode: ");
        __sb.Append(CountryCode);
      }
      if (Language != null && __isset.language) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Language: ");
        __sb.Append(Language);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class searchPaidCallUserRate_result : TBase
  {
    private List<PaidCallUserRate> _success;
    private TalkException _e;

    public List<PaidCallUserRate> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public searchPaidCallUserRate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<PaidCallUserRate>();
                  TList _list1340 = iprot.ReadListBegin();
                  for( int _i1341 = 0; _i1341 < _list1340.Count; ++_i1341)
                  {
                    PaidCallUserRate _elem1342;
                    _elem1342 = new PaidCallUserRate();
                    _elem1342.Read(iprot);
                    Success.Add(_elem1342);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("searchPaidCallUserRate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (PaidCallUserRate _iter1343 in Success)
              {
                _iter1343.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("searchPaidCallUserRate_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinedGroupIdsForChannel_args : TBase
  {

    public getJoinedGroupIdsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinedGroupIdsForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinedGroupIdsForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinedGroupIdsForChannel_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getJoinedGroupIdsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1344 = iprot.ReadListBegin();
                  for( int _i1345 = 0; _i1345 < _list1344.Count; ++_i1345)
                  {
                    string _elem1346;
                    _elem1346 = iprot.ReadString();
                    Success.Add(_elem1346);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinedGroupIdsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1347 in Success)
              {
                oprot.WriteString(_iter1347);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinedGroupIdsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquireGroupCallRoute_args : TBase
  {
    private string _chatMid;
    private GroupCallMediaType _mediaType;

    public string ChatMid
    {
      get
      {
        return _chatMid;
      }
      set
      {
        __isset.chatMid = true;
        this._chatMid = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="GroupCallMediaType"/>
    /// </summary>
    public GroupCallMediaType MediaType
    {
      get
      {
        return _mediaType;
      }
      set
      {
        __isset.mediaType = true;
        this._mediaType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatMid;
      public bool mediaType;
    }

    public acquireGroupCallRoute_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChatMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MediaType = (GroupCallMediaType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquireGroupCallRoute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatMid != null && __isset.chatMid) {
          field.Name = "chatMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatMid);
          oprot.WriteFieldEnd();
        }
        if (__isset.mediaType) {
          field.Name = "mediaType";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)MediaType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquireGroupCallRoute_args(");
      bool __first = true;
      if (ChatMid != null && __isset.chatMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatMid: ");
        __sb.Append(ChatMid);
      }
      if (__isset.mediaType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MediaType: ");
        __sb.Append(MediaType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquireGroupCallRoute_result : TBase
  {
    private GroupCallRoute _success;
    private TalkException _e;

    public GroupCallRoute Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public acquireGroupCallRoute_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new GroupCallRoute();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquireGroupCallRoute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquireGroupCallRoute_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserMidsWhoAddedMe_args : TBase
  {

    public getUserMidsWhoAddedMe_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserMidsWhoAddedMe_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserMidsWhoAddedMe_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserMidsWhoAddedMe_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserMidsWhoAddedMe_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1348 = iprot.ReadListBegin();
                  for( int _i1349 = 0; _i1349 < _list1348.Count; ++_i1349)
                  {
                    string _elem1350;
                    _elem1350 = iprot.ReadString();
                    Success.Add(_elem1350);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserMidsWhoAddedMe_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1351 in Success)
              {
                oprot.WriteString(_iter1351);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserMidsWhoAddedMe_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getIdentityCredential_args : TBase
  {

    public getIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getIdentityCredential_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getIdentityCredential_result : TBase
  {
    private IdentityCredential _success;
    private TalkException _e;

    public IdentityCredential Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new IdentityCredential();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getIdentityCredential_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addOperationForChannel_args : TBase
  {
    private OpType _opType;
    private string _param1;
    private string _param2;
    private string _param3;

    /// <summary>
    /// 
    /// <seealso cref="OpType"/>
    /// </summary>
    public OpType OpType
    {
      get
      {
        return _opType;
      }
      set
      {
        __isset.opType = true;
        this._opType = value;
      }
    }

    public string Param1
    {
      get
      {
        return _param1;
      }
      set
      {
        __isset.param1 = true;
        this._param1 = value;
      }
    }

    public string Param2
    {
      get
      {
        return _param2;
      }
      set
      {
        __isset.param2 = true;
        this._param2 = value;
      }
    }

    public string Param3
    {
      get
      {
        return _param3;
      }
      set
      {
        __isset.param3 = true;
        this._param3 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool opType;
      public bool param1;
      public bool param2;
      public bool param3;
    }

    public addOperationForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                OpType = (OpType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Param1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Param2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Param3 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addOperationForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.opType) {
          field.Name = "opType";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)OpType);
          oprot.WriteFieldEnd();
        }
        if (Param1 != null && __isset.param1) {
          field.Name = "param1";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Param1);
          oprot.WriteFieldEnd();
        }
        if (Param2 != null && __isset.param2) {
          field.Name = "param2";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Param2);
          oprot.WriteFieldEnd();
        }
        if (Param3 != null && __isset.param3) {
          field.Name = "param3";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Param3);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addOperationForChannel_args(");
      bool __first = true;
      if (__isset.opType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OpType: ");
        __sb.Append(OpType);
      }
      if (Param1 != null && __isset.param1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param1: ");
        __sb.Append(Param1);
      }
      if (Param2 != null && __isset.param2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param2: ");
        __sb.Append(Param2);
      }
      if (Param3 != null && __isset.param3) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param3: ");
        __sb.Append(Param3);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addOperationForChannel_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public addOperationForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addOperationForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addOperationForChannel_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSimpleChannelContacts_args : TBase
  {
    private List<string> _ids;
    private bool _statusSticonFallbackDisabled;

    public List<string> Ids
    {
      get
      {
        return _ids;
      }
      set
      {
        __isset.ids = true;
        this._ids = value;
      }
    }

    public bool StatusSticonFallbackDisabled
    {
      get
      {
        return _statusSticonFallbackDisabled;
      }
      set
      {
        __isset.statusSticonFallbackDisabled = true;
        this._statusSticonFallbackDisabled = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ids;
      public bool statusSticonFallbackDisabled;
    }

    public getSimpleChannelContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Ids = new List<string>();
                  TList _list1352 = iprot.ReadListBegin();
                  for( int _i1353 = 0; _i1353 < _list1352.Count; ++_i1353)
                  {
                    string _elem1354;
                    _elem1354 = iprot.ReadString();
                    Ids.Add(_elem1354);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                StatusSticonFallbackDisabled = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSimpleChannelContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ids != null && __isset.ids) {
          field.Name = "ids";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Ids.Count));
            foreach (string _iter1355 in Ids)
            {
              oprot.WriteString(_iter1355);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.statusSticonFallbackDisabled) {
          field.Name = "statusSticonFallbackDisabled";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(StatusSticonFallbackDisabled);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSimpleChannelContacts_args(");
      bool __first = true;
      if (Ids != null && __isset.ids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ids: ");
        __sb.Append(Ids);
      }
      if (__isset.statusSticonFallbackDisabled) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StatusSticonFallbackDisabled: ");
        __sb.Append(StatusSticonFallbackDisabled);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSimpleChannelContacts_result : TBase
  {
    private List<SimpleChannelContact> _success;
    private TalkException _e;

    public List<SimpleChannelContact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSimpleChannelContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SimpleChannelContact>();
                  TList _list1356 = iprot.ReadListBegin();
                  for( int _i1357 = 0; _i1357 < _list1356.Count; ++_i1357)
                  {
                    SimpleChannelContact _elem1358;
                    _elem1358 = new SimpleChannelContact();
                    _elem1358.Read(iprot);
                    Success.Add(_elem1358);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSimpleChannelContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SimpleChannelContact _iter1359 in Success)
              {
                _iter1359.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSimpleChannelContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserLastSentMessageTimeStamp_args : TBase
  {
    private string _mid;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
    }

    public getUserLastSentMessageTimeStamp_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserLastSentMessageTimeStamp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserLastSentMessageTimeStamp_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserLastSentMessageTimeStamp_result : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserLastSentMessageTimeStamp_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserLastSentMessageTimeStamp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserLastSentMessageTimeStamp_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
