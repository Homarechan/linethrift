/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SquareEventNotificationMessage : TBase
{
  private string _squareChatMid;
  private SquareMessage _squareMessage;
  private string _senderDisplayName;
  private int _unreadCount;
  private bool _requiredToFetchChatEvents;

  public string SquareChatMid
  {
    get
    {
      return _squareChatMid;
    }
    set
    {
      __isset.squareChatMid = true;
      this._squareChatMid = value;
    }
  }

  public SquareMessage SquareMessage
  {
    get
    {
      return _squareMessage;
    }
    set
    {
      __isset.squareMessage = true;
      this._squareMessage = value;
    }
  }

  public string SenderDisplayName
  {
    get
    {
      return _senderDisplayName;
    }
    set
    {
      __isset.senderDisplayName = true;
      this._senderDisplayName = value;
    }
  }

  public int UnreadCount
  {
    get
    {
      return _unreadCount;
    }
    set
    {
      __isset.unreadCount = true;
      this._unreadCount = value;
    }
  }

  public bool RequiredToFetchChatEvents
  {
    get
    {
      return _requiredToFetchChatEvents;
    }
    set
    {
      __isset.requiredToFetchChatEvents = true;
      this._requiredToFetchChatEvents = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool squareChatMid;
    public bool squareMessage;
    public bool senderDisplayName;
    public bool unreadCount;
    public bool requiredToFetchChatEvents;
  }

  public SquareEventNotificationMessage() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              SquareChatMid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              SquareMessage = new SquareMessage();
              SquareMessage.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              SenderDisplayName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              UnreadCount = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              RequiredToFetchChatEvents = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SquareEventNotificationMessage");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SquareChatMid != null && __isset.squareChatMid) {
        field.Name = "squareChatMid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SquareChatMid);
        oprot.WriteFieldEnd();
      }
      if (SquareMessage != null && __isset.squareMessage) {
        field.Name = "squareMessage";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        SquareMessage.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (SenderDisplayName != null && __isset.senderDisplayName) {
        field.Name = "senderDisplayName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SenderDisplayName);
        oprot.WriteFieldEnd();
      }
      if (__isset.unreadCount) {
        field.Name = "unreadCount";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(UnreadCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.requiredToFetchChatEvents) {
        field.Name = "requiredToFetchChatEvents";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(RequiredToFetchChatEvents);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SquareEventNotificationMessage(");
    bool __first = true;
    if (SquareChatMid != null && __isset.squareChatMid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SquareChatMid: ");
      __sb.Append(SquareChatMid);
    }
    if (SquareMessage != null && __isset.squareMessage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SquareMessage: ");
      __sb.Append(SquareMessage== null ? "<null>" : SquareMessage.ToString());
    }
    if (SenderDisplayName != null && __isset.senderDisplayName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SenderDisplayName: ");
      __sb.Append(SenderDisplayName);
    }
    if (__isset.unreadCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UnreadCount: ");
      __sb.Append(UnreadCount);
    }
    if (__isset.requiredToFetchChatEvents) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RequiredToFetchChatEvents: ");
      __sb.Append(RequiredToFetchChatEvents);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

