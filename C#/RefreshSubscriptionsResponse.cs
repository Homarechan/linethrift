/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class RefreshSubscriptionsResponse : TBase
{
  private long _ttlMillis;
  private Dictionary<long, SubscriptionState> _subscriptionStates;

  public long TtlMillis
  {
    get
    {
      return _ttlMillis;
    }
    set
    {
      __isset.ttlMillis = true;
      this._ttlMillis = value;
    }
  }

  public Dictionary<long, SubscriptionState> SubscriptionStates
  {
    get
    {
      return _subscriptionStates;
    }
    set
    {
      __isset.subscriptionStates = true;
      this._subscriptionStates = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool ttlMillis;
    public bool subscriptionStates;
  }

  public RefreshSubscriptionsResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              TtlMillis = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                SubscriptionStates = new Dictionary<long, SubscriptionState>();
                TMap _map466 = iprot.ReadMapBegin();
                for( int _i467 = 0; _i467 < _map466.Count; ++_i467)
                {
                  long _key468;
                  SubscriptionState _val469;
                  _key468 = iprot.ReadI64();
                  _val469 = new SubscriptionState();
                  _val469.Read(iprot);
                  SubscriptionStates[_key468] = _val469;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("RefreshSubscriptionsResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.ttlMillis) {
        field.Name = "ttlMillis";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TtlMillis);
        oprot.WriteFieldEnd();
      }
      if (SubscriptionStates != null && __isset.subscriptionStates) {
        field.Name = "subscriptionStates";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.I64, TType.Struct, SubscriptionStates.Count));
          foreach (long _iter470 in SubscriptionStates.Keys)
          {
            oprot.WriteI64(_iter470);
            SubscriptionStates[_iter470].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("RefreshSubscriptionsResponse(");
    bool __first = true;
    if (__isset.ttlMillis) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TtlMillis: ");
      __sb.Append(TtlMillis);
    }
    if (SubscriptionStates != null && __isset.subscriptionStates) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SubscriptionStates: ");
      __sb.Append(SubscriptionStates);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

