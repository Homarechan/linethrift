/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class BuddyDetail : TBase
{
  private string _mid;
  private long _memberCount;
  private bool _onAir;
  private bool _businessAccount;
  private bool _addable;
  private THashSet<ContentType> _acceptableContentTypes;
  private bool _capableMyhome;

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  public long MemberCount
  {
    get
    {
      return _memberCount;
    }
    set
    {
      __isset.memberCount = true;
      this._memberCount = value;
    }
  }

  public bool OnAir
  {
    get
    {
      return _onAir;
    }
    set
    {
      __isset.onAir = true;
      this._onAir = value;
    }
  }

  public bool BusinessAccount
  {
    get
    {
      return _businessAccount;
    }
    set
    {
      __isset.businessAccount = true;
      this._businessAccount = value;
    }
  }

  public bool Addable
  {
    get
    {
      return _addable;
    }
    set
    {
      __isset.addable = true;
      this._addable = value;
    }
  }

  public THashSet<ContentType> AcceptableContentTypes
  {
    get
    {
      return _acceptableContentTypes;
    }
    set
    {
      __isset.acceptableContentTypes = true;
      this._acceptableContentTypes = value;
    }
  }

  public bool CapableMyhome
  {
    get
    {
      return _capableMyhome;
    }
    set
    {
      __isset.capableMyhome = true;
      this._capableMyhome = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool mid;
    public bool memberCount;
    public bool onAir;
    public bool businessAccount;
    public bool addable;
    public bool acceptableContentTypes;
    public bool capableMyhome;
  }

  public BuddyDetail() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Mid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              MemberCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              OnAir = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              BusinessAccount = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              Addable = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Set) {
              {
                AcceptableContentTypes = new THashSet<ContentType>();
                TSet _set56 = iprot.ReadSetBegin();
                for( int _i57 = 0; _i57 < _set56.Count; ++_i57)
                {
                  ContentType _elem58;
                  _elem58 = (ContentType)iprot.ReadI32();
                  AcceptableContentTypes.Add(_elem58);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              CapableMyhome = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("BuddyDetail");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Mid != null && __isset.mid) {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mid);
        oprot.WriteFieldEnd();
      }
      if (__isset.memberCount) {
        field.Name = "memberCount";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(MemberCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.onAir) {
        field.Name = "onAir";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(OnAir);
        oprot.WriteFieldEnd();
      }
      if (__isset.businessAccount) {
        field.Name = "businessAccount";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(BusinessAccount);
        oprot.WriteFieldEnd();
      }
      if (__isset.addable) {
        field.Name = "addable";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Addable);
        oprot.WriteFieldEnd();
      }
      if (AcceptableContentTypes != null && __isset.acceptableContentTypes) {
        field.Name = "acceptableContentTypes";
        field.Type = TType.Set;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.I32, AcceptableContentTypes.Count));
          foreach (ContentType _iter59 in AcceptableContentTypes)
          {
            oprot.WriteI32((int)_iter59);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.capableMyhome) {
        field.Name = "capableMyhome";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(CapableMyhome);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("BuddyDetail(");
    bool __first = true;
    if (Mid != null && __isset.mid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Mid: ");
      __sb.Append(Mid);
    }
    if (__isset.memberCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MemberCount: ");
      __sb.Append(MemberCount);
    }
    if (__isset.onAir) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OnAir: ");
      __sb.Append(OnAir);
    }
    if (__isset.businessAccount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BusinessAccount: ");
      __sb.Append(BusinessAccount);
    }
    if (__isset.addable) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Addable: ");
      __sb.Append(Addable);
    }
    if (AcceptableContentTypes != null && __isset.acceptableContentTypes) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AcceptableContentTypes: ");
      __sb.Append(AcceptableContentTypes);
    }
    if (__isset.capableMyhome) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CapableMyhome: ");
      __sb.Append(CapableMyhome);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

