/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ShouldSyncException : TException, TBase
{
  private long _syncOpRevision;
  private SyncScope _syncScope;
  private SyncTriggerReason _syncReason;
  private string _message;

  public long SyncOpRevision
  {
    get
    {
      return _syncOpRevision;
    }
    set
    {
      __isset.syncOpRevision = true;
      this._syncOpRevision = value;
    }
  }

  public SyncScope SyncScope
  {
    get
    {
      return _syncScope;
    }
    set
    {
      __isset.syncScope = true;
      this._syncScope = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SyncTriggerReason"/>
  /// </summary>
  public SyncTriggerReason SyncReason
  {
    get
    {
      return _syncReason;
    }
    set
    {
      __isset.syncReason = true;
      this._syncReason = value;
    }
  }

  public string Message
  {
    get
    {
      return _message;
    }
    set
    {
      __isset.message = true;
      this._message = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool syncOpRevision;
    public bool syncScope;
    public bool syncReason;
    public bool message;
  }

  public ShouldSyncException() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              SyncOpRevision = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              SyncScope = new SyncScope();
              SyncScope.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              SyncReason = (SyncTriggerReason)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Message = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ShouldSyncException");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.syncOpRevision) {
        field.Name = "syncOpRevision";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SyncOpRevision);
        oprot.WriteFieldEnd();
      }
      if (SyncScope != null && __isset.syncScope) {
        field.Name = "syncScope";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        SyncScope.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.syncReason) {
        field.Name = "syncReason";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SyncReason);
        oprot.WriteFieldEnd();
      }
      if (Message != null && __isset.message) {
        field.Name = "message";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Message);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ShouldSyncException(");
    bool __first = true;
    if (__isset.syncOpRevision) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncOpRevision: ");
      __sb.Append(SyncOpRevision);
    }
    if (SyncScope != null && __isset.syncScope) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncScope: ");
      __sb.Append(SyncScope== null ? "<null>" : SyncScope.ToString());
    }
    if (__isset.syncReason) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncReason: ");
      __sb.Append(SyncReason);
    }
    if (Message != null && __isset.message) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Message: ");
      __sb.Append(Message);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

