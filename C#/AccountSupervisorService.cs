/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class AccountSupervisorService {
  public interface ISync {
    RSAKey getRSAKey();
    void notifyEmailConfirmationResult(Dictionary<string, string> parameterMap);
    string registerVirtualAccount(string locale, string encryptedVirtualUserId, string encryptedPassword);
    void requestVirtualAccountPasswordChange(string virtualMid, string encryptedVirtualUserId, string encryptedOldPassword, string encryptedNewPassword);
    void requestVirtualAccountPasswordSet(string virtualMid, string encryptedVirtualUserId, string encryptedNewPassword);
    void unregisterVirtualAccount(string virtualMid);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_getRSAKey(AsyncCallback callback, object state);
    RSAKey End_getRSAKey(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_notifyEmailConfirmationResult(AsyncCallback callback, object state, Dictionary<string, string> parameterMap);
    void End_notifyEmailConfirmationResult(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerVirtualAccount(AsyncCallback callback, object state, string locale, string encryptedVirtualUserId, string encryptedPassword);
    string End_registerVirtualAccount(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_requestVirtualAccountPasswordChange(AsyncCallback callback, object state, string virtualMid, string encryptedVirtualUserId, string encryptedOldPassword, string encryptedNewPassword);
    void End_requestVirtualAccountPasswordChange(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_requestVirtualAccountPasswordSet(AsyncCallback callback, object state, string virtualMid, string encryptedVirtualUserId, string encryptedNewPassword);
    void End_requestVirtualAccountPasswordSet(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_unregisterVirtualAccount(AsyncCallback callback, object state, string virtualMid);
    void End_unregisterVirtualAccount(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRSAKey(AsyncCallback callback, object state)
    {
      return send_getRSAKey(callback, state);
    }

    public RSAKey End_getRSAKey(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRSAKey();
    }

    #endif

    public RSAKey getRSAKey()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRSAKey(null, null);
      return End_getRSAKey(asyncResult);

      #else
      send_getRSAKey();
      return recv_getRSAKey();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRSAKey(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getRSAKey", TMessageType.Call, seqid_));
      getRSAKey_args args = new getRSAKey_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRSAKey()
    {
      oprot_.WriteMessageBegin(new TMessage("getRSAKey", TMessageType.Call, seqid_));
      getRSAKey_args args = new getRSAKey_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RSAKey recv_getRSAKey()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRSAKey_result result = new getRSAKey_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRSAKey failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_notifyEmailConfirmationResult(AsyncCallback callback, object state, Dictionary<string, string> parameterMap)
    {
      return send_notifyEmailConfirmationResult(callback, state, parameterMap);
    }

    public void End_notifyEmailConfirmationResult(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_notifyEmailConfirmationResult();
    }

    #endif

    public void notifyEmailConfirmationResult(Dictionary<string, string> parameterMap)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_notifyEmailConfirmationResult(null, null, parameterMap);
      End_notifyEmailConfirmationResult(asyncResult);

      #else
      send_notifyEmailConfirmationResult(parameterMap);
      recv_notifyEmailConfirmationResult();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_notifyEmailConfirmationResult(AsyncCallback callback, object state, Dictionary<string, string> parameterMap)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.Call, seqid_));
      notifyEmailConfirmationResult_args args = new notifyEmailConfirmationResult_args();
      args.ParameterMap = parameterMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_notifyEmailConfirmationResult(Dictionary<string, string> parameterMap)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.Call, seqid_));
      notifyEmailConfirmationResult_args args = new notifyEmailConfirmationResult_args();
      args.ParameterMap = parameterMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_notifyEmailConfirmationResult()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerVirtualAccount(AsyncCallback callback, object state, string locale, string encryptedVirtualUserId, string encryptedPassword)
    {
      return send_registerVirtualAccount(callback, state, locale, encryptedVirtualUserId, encryptedPassword);
    }

    public string End_registerVirtualAccount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerVirtualAccount();
    }

    #endif

    public string registerVirtualAccount(string locale, string encryptedVirtualUserId, string encryptedPassword)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerVirtualAccount(null, null, locale, encryptedVirtualUserId, encryptedPassword);
      return End_registerVirtualAccount(asyncResult);

      #else
      send_registerVirtualAccount(locale, encryptedVirtualUserId, encryptedPassword);
      return recv_registerVirtualAccount();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerVirtualAccount(AsyncCallback callback, object state, string locale, string encryptedVirtualUserId, string encryptedPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("registerVirtualAccount", TMessageType.Call, seqid_));
      registerVirtualAccount_args args = new registerVirtualAccount_args();
      args.Locale = locale;
      args.EncryptedVirtualUserId = encryptedVirtualUserId;
      args.EncryptedPassword = encryptedPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerVirtualAccount(string locale, string encryptedVirtualUserId, string encryptedPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("registerVirtualAccount", TMessageType.Call, seqid_));
      registerVirtualAccount_args args = new registerVirtualAccount_args();
      args.Locale = locale;
      args.EncryptedVirtualUserId = encryptedVirtualUserId;
      args.EncryptedPassword = encryptedPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerVirtualAccount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerVirtualAccount_result result = new registerVirtualAccount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerVirtualAccount failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_requestVirtualAccountPasswordChange(AsyncCallback callback, object state, string virtualMid, string encryptedVirtualUserId, string encryptedOldPassword, string encryptedNewPassword)
    {
      return send_requestVirtualAccountPasswordChange(callback, state, virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
    }

    public void End_requestVirtualAccountPasswordChange(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_requestVirtualAccountPasswordChange();
    }

    #endif

    public void requestVirtualAccountPasswordChange(string virtualMid, string encryptedVirtualUserId, string encryptedOldPassword, string encryptedNewPassword)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_requestVirtualAccountPasswordChange(null, null, virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
      End_requestVirtualAccountPasswordChange(asyncResult);

      #else
      send_requestVirtualAccountPasswordChange(virtualMid, encryptedVirtualUserId, encryptedOldPassword, encryptedNewPassword);
      recv_requestVirtualAccountPasswordChange();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_requestVirtualAccountPasswordChange(AsyncCallback callback, object state, string virtualMid, string encryptedVirtualUserId, string encryptedOldPassword, string encryptedNewPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.Call, seqid_));
      requestVirtualAccountPasswordChange_args args = new requestVirtualAccountPasswordChange_args();
      args.VirtualMid = virtualMid;
      args.EncryptedVirtualUserId = encryptedVirtualUserId;
      args.EncryptedOldPassword = encryptedOldPassword;
      args.EncryptedNewPassword = encryptedNewPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_requestVirtualAccountPasswordChange(string virtualMid, string encryptedVirtualUserId, string encryptedOldPassword, string encryptedNewPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.Call, seqid_));
      requestVirtualAccountPasswordChange_args args = new requestVirtualAccountPasswordChange_args();
      args.VirtualMid = virtualMid;
      args.EncryptedVirtualUserId = encryptedVirtualUserId;
      args.EncryptedOldPassword = encryptedOldPassword;
      args.EncryptedNewPassword = encryptedNewPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_requestVirtualAccountPasswordChange()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_requestVirtualAccountPasswordSet(AsyncCallback callback, object state, string virtualMid, string encryptedVirtualUserId, string encryptedNewPassword)
    {
      return send_requestVirtualAccountPasswordSet(callback, state, virtualMid, encryptedVirtualUserId, encryptedNewPassword);
    }

    public void End_requestVirtualAccountPasswordSet(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_requestVirtualAccountPasswordSet();
    }

    #endif

    public void requestVirtualAccountPasswordSet(string virtualMid, string encryptedVirtualUserId, string encryptedNewPassword)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_requestVirtualAccountPasswordSet(null, null, virtualMid, encryptedVirtualUserId, encryptedNewPassword);
      End_requestVirtualAccountPasswordSet(asyncResult);

      #else
      send_requestVirtualAccountPasswordSet(virtualMid, encryptedVirtualUserId, encryptedNewPassword);
      recv_requestVirtualAccountPasswordSet();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_requestVirtualAccountPasswordSet(AsyncCallback callback, object state, string virtualMid, string encryptedVirtualUserId, string encryptedNewPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.Call, seqid_));
      requestVirtualAccountPasswordSet_args args = new requestVirtualAccountPasswordSet_args();
      args.VirtualMid = virtualMid;
      args.EncryptedVirtualUserId = encryptedVirtualUserId;
      args.EncryptedNewPassword = encryptedNewPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_requestVirtualAccountPasswordSet(string virtualMid, string encryptedVirtualUserId, string encryptedNewPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.Call, seqid_));
      requestVirtualAccountPasswordSet_args args = new requestVirtualAccountPasswordSet_args();
      args.VirtualMid = virtualMid;
      args.EncryptedVirtualUserId = encryptedVirtualUserId;
      args.EncryptedNewPassword = encryptedNewPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_requestVirtualAccountPasswordSet()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_unregisterVirtualAccount(AsyncCallback callback, object state, string virtualMid)
    {
      return send_unregisterVirtualAccount(callback, state, virtualMid);
    }

    public void End_unregisterVirtualAccount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_unregisterVirtualAccount();
    }

    #endif

    public void unregisterVirtualAccount(string virtualMid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_unregisterVirtualAccount(null, null, virtualMid);
      End_unregisterVirtualAccount(asyncResult);

      #else
      send_unregisterVirtualAccount(virtualMid);
      recv_unregisterVirtualAccount();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_unregisterVirtualAccount(AsyncCallback callback, object state, string virtualMid)
    {
      oprot_.WriteMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.Call, seqid_));
      unregisterVirtualAccount_args args = new unregisterVirtualAccount_args();
      args.VirtualMid = virtualMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_unregisterVirtualAccount(string virtualMid)
    {
      oprot_.WriteMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.Call, seqid_));
      unregisterVirtualAccount_args args = new unregisterVirtualAccount_args();
      args.VirtualMid = virtualMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_unregisterVirtualAccount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getRSAKey"] = getRSAKey_Process;
      processMap_["notifyEmailConfirmationResult"] = notifyEmailConfirmationResult_Process;
      processMap_["registerVirtualAccount"] = registerVirtualAccount_Process;
      processMap_["requestVirtualAccountPasswordChange"] = requestVirtualAccountPasswordChange_Process;
      processMap_["requestVirtualAccountPasswordSet"] = requestVirtualAccountPasswordSet_Process;
      processMap_["unregisterVirtualAccount"] = unregisterVirtualAccount_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getRSAKey_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRSAKey_args args = new getRSAKey_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRSAKey_result result = new getRSAKey_result();
      try
      {
        try
        {
          result.Success = iface_.getRSAKey();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRSAKey", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRSAKey", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void notifyEmailConfirmationResult_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      notifyEmailConfirmationResult_args args = new notifyEmailConfirmationResult_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      notifyEmailConfirmationResult_result result = new notifyEmailConfirmationResult_result();
      try
      {
        try
        {
          iface_.notifyEmailConfirmationResult(args.ParameterMap);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("notifyEmailConfirmationResult", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerVirtualAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerVirtualAccount_args args = new registerVirtualAccount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerVirtualAccount_result result = new registerVirtualAccount_result();
      try
      {
        try
        {
          result.Success = iface_.registerVirtualAccount(args.Locale, args.EncryptedVirtualUserId, args.EncryptedPassword);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerVirtualAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerVirtualAccount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void requestVirtualAccountPasswordChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      requestVirtualAccountPasswordChange_args args = new requestVirtualAccountPasswordChange_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      requestVirtualAccountPasswordChange_result result = new requestVirtualAccountPasswordChange_result();
      try
      {
        try
        {
          iface_.requestVirtualAccountPasswordChange(args.VirtualMid, args.EncryptedVirtualUserId, args.EncryptedOldPassword, args.EncryptedNewPassword);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("requestVirtualAccountPasswordChange", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void requestVirtualAccountPasswordSet_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      requestVirtualAccountPasswordSet_args args = new requestVirtualAccountPasswordSet_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      requestVirtualAccountPasswordSet_result result = new requestVirtualAccountPasswordSet_result();
      try
      {
        try
        {
          iface_.requestVirtualAccountPasswordSet(args.VirtualMid, args.EncryptedVirtualUserId, args.EncryptedNewPassword);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("requestVirtualAccountPasswordSet", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void unregisterVirtualAccount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unregisterVirtualAccount_args args = new unregisterVirtualAccount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unregisterVirtualAccount_result result = new unregisterVirtualAccount_result();
      try
      {
        try
        {
          iface_.unregisterVirtualAccount(args.VirtualMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("unregisterVirtualAccount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRSAKey_args : TBase
  {

    public getRSAKey_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRSAKey_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRSAKey_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRSAKey_result : TBase
  {
    private RSAKey _success;
    private TalkException _e;

    public RSAKey Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getRSAKey_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RSAKey();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRSAKey_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRSAKey_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyEmailConfirmationResult_args : TBase
  {
    private Dictionary<string, string> _parameterMap;

    public Dictionary<string, string> ParameterMap
    {
      get
      {
        return _parameterMap;
      }
      set
      {
        __isset.parameterMap = true;
        this._parameterMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool parameterMap;
    }

    public notifyEmailConfirmationResult_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Map) {
                {
                  ParameterMap = new Dictionary<string, string>();
                  TMap _map545 = iprot.ReadMapBegin();
                  for( int _i546 = 0; _i546 < _map545.Count; ++_i546)
                  {
                    string _key547;
                    string _val548;
                    _key547 = iprot.ReadString();
                    _val548 = iprot.ReadString();
                    ParameterMap[_key547] = _val548;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyEmailConfirmationResult_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ParameterMap != null && __isset.parameterMap) {
          field.Name = "parameterMap";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParameterMap.Count));
            foreach (string _iter549 in ParameterMap.Keys)
            {
              oprot.WriteString(_iter549);
              oprot.WriteString(ParameterMap[_iter549]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyEmailConfirmationResult_args(");
      bool __first = true;
      if (ParameterMap != null && __isset.parameterMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParameterMap: ");
        __sb.Append(ParameterMap);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyEmailConfirmationResult_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public notifyEmailConfirmationResult_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyEmailConfirmationResult_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyEmailConfirmationResult_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerVirtualAccount_args : TBase
  {
    private string _locale;
    private string _encryptedVirtualUserId;
    private string _encryptedPassword;

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }

    public string EncryptedVirtualUserId
    {
      get
      {
        return _encryptedVirtualUserId;
      }
      set
      {
        __isset.encryptedVirtualUserId = true;
        this._encryptedVirtualUserId = value;
      }
    }

    public string EncryptedPassword
    {
      get
      {
        return _encryptedPassword;
      }
      set
      {
        __isset.encryptedPassword = true;
        this._encryptedPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool locale;
      public bool encryptedVirtualUserId;
      public bool encryptedPassword;
    }

    public registerVirtualAccount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                EncryptedVirtualUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                EncryptedPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerVirtualAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        if (EncryptedVirtualUserId != null && __isset.encryptedVirtualUserId) {
          field.Name = "encryptedVirtualUserId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EncryptedVirtualUserId);
          oprot.WriteFieldEnd();
        }
        if (EncryptedPassword != null && __isset.encryptedPassword) {
          field.Name = "encryptedPassword";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EncryptedPassword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerVirtualAccount_args(");
      bool __first = true;
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      if (EncryptedVirtualUserId != null && __isset.encryptedVirtualUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncryptedVirtualUserId: ");
        __sb.Append(EncryptedVirtualUserId);
      }
      if (EncryptedPassword != null && __isset.encryptedPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncryptedPassword: ");
        __sb.Append(EncryptedPassword);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerVirtualAccount_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerVirtualAccount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerVirtualAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerVirtualAccount_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestVirtualAccountPasswordChange_args : TBase
  {
    private string _virtualMid;
    private string _encryptedVirtualUserId;
    private string _encryptedOldPassword;
    private string _encryptedNewPassword;

    public string VirtualMid
    {
      get
      {
        return _virtualMid;
      }
      set
      {
        __isset.virtualMid = true;
        this._virtualMid = value;
      }
    }

    public string EncryptedVirtualUserId
    {
      get
      {
        return _encryptedVirtualUserId;
      }
      set
      {
        __isset.encryptedVirtualUserId = true;
        this._encryptedVirtualUserId = value;
      }
    }

    public string EncryptedOldPassword
    {
      get
      {
        return _encryptedOldPassword;
      }
      set
      {
        __isset.encryptedOldPassword = true;
        this._encryptedOldPassword = value;
      }
    }

    public string EncryptedNewPassword
    {
      get
      {
        return _encryptedNewPassword;
      }
      set
      {
        __isset.encryptedNewPassword = true;
        this._encryptedNewPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool virtualMid;
      public bool encryptedVirtualUserId;
      public bool encryptedOldPassword;
      public bool encryptedNewPassword;
    }

    public requestVirtualAccountPasswordChange_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                VirtualMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                EncryptedVirtualUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                EncryptedOldPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                EncryptedNewPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestVirtualAccountPasswordChange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (VirtualMid != null && __isset.virtualMid) {
          field.Name = "virtualMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VirtualMid);
          oprot.WriteFieldEnd();
        }
        if (EncryptedVirtualUserId != null && __isset.encryptedVirtualUserId) {
          field.Name = "encryptedVirtualUserId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EncryptedVirtualUserId);
          oprot.WriteFieldEnd();
        }
        if (EncryptedOldPassword != null && __isset.encryptedOldPassword) {
          field.Name = "encryptedOldPassword";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EncryptedOldPassword);
          oprot.WriteFieldEnd();
        }
        if (EncryptedNewPassword != null && __isset.encryptedNewPassword) {
          field.Name = "encryptedNewPassword";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EncryptedNewPassword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestVirtualAccountPasswordChange_args(");
      bool __first = true;
      if (VirtualMid != null && __isset.virtualMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VirtualMid: ");
        __sb.Append(VirtualMid);
      }
      if (EncryptedVirtualUserId != null && __isset.encryptedVirtualUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncryptedVirtualUserId: ");
        __sb.Append(EncryptedVirtualUserId);
      }
      if (EncryptedOldPassword != null && __isset.encryptedOldPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncryptedOldPassword: ");
        __sb.Append(EncryptedOldPassword);
      }
      if (EncryptedNewPassword != null && __isset.encryptedNewPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncryptedNewPassword: ");
        __sb.Append(EncryptedNewPassword);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestVirtualAccountPasswordChange_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public requestVirtualAccountPasswordChange_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestVirtualAccountPasswordChange_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestVirtualAccountPasswordChange_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestVirtualAccountPasswordSet_args : TBase
  {
    private string _virtualMid;
    private string _encryptedVirtualUserId;
    private string _encryptedNewPassword;

    public string VirtualMid
    {
      get
      {
        return _virtualMid;
      }
      set
      {
        __isset.virtualMid = true;
        this._virtualMid = value;
      }
    }

    public string EncryptedVirtualUserId
    {
      get
      {
        return _encryptedVirtualUserId;
      }
      set
      {
        __isset.encryptedVirtualUserId = true;
        this._encryptedVirtualUserId = value;
      }
    }

    public string EncryptedNewPassword
    {
      get
      {
        return _encryptedNewPassword;
      }
      set
      {
        __isset.encryptedNewPassword = true;
        this._encryptedNewPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool virtualMid;
      public bool encryptedVirtualUserId;
      public bool encryptedNewPassword;
    }

    public requestVirtualAccountPasswordSet_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                VirtualMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                EncryptedVirtualUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                EncryptedNewPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestVirtualAccountPasswordSet_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (VirtualMid != null && __isset.virtualMid) {
          field.Name = "virtualMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VirtualMid);
          oprot.WriteFieldEnd();
        }
        if (EncryptedVirtualUserId != null && __isset.encryptedVirtualUserId) {
          field.Name = "encryptedVirtualUserId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EncryptedVirtualUserId);
          oprot.WriteFieldEnd();
        }
        if (EncryptedNewPassword != null && __isset.encryptedNewPassword) {
          field.Name = "encryptedNewPassword";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EncryptedNewPassword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestVirtualAccountPasswordSet_args(");
      bool __first = true;
      if (VirtualMid != null && __isset.virtualMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VirtualMid: ");
        __sb.Append(VirtualMid);
      }
      if (EncryptedVirtualUserId != null && __isset.encryptedVirtualUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncryptedVirtualUserId: ");
        __sb.Append(EncryptedVirtualUserId);
      }
      if (EncryptedNewPassword != null && __isset.encryptedNewPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncryptedNewPassword: ");
        __sb.Append(EncryptedNewPassword);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestVirtualAccountPasswordSet_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public requestVirtualAccountPasswordSet_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestVirtualAccountPasswordSet_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestVirtualAccountPasswordSet_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unregisterVirtualAccount_args : TBase
  {
    private string _virtualMid;

    public string VirtualMid
    {
      get
      {
        return _virtualMid;
      }
      set
      {
        __isset.virtualMid = true;
        this._virtualMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool virtualMid;
    }

    public unregisterVirtualAccount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                VirtualMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unregisterVirtualAccount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (VirtualMid != null && __isset.virtualMid) {
          field.Name = "virtualMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VirtualMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unregisterVirtualAccount_args(");
      bool __first = true;
      if (VirtualMid != null && __isset.virtualMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VirtualMid: ");
        __sb.Append(VirtualMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unregisterVirtualAccount_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public unregisterVirtualAccount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unregisterVirtualAccount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unregisterVirtualAccount_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
