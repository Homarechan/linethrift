/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class PaidCallResponse : TBase
{
  private CallHost _host;
  private PaidCallDialing _dialing;
  private string _token;
  private List<SpotItem> _spotItems;

  public CallHost Host
  {
    get
    {
      return _host;
    }
    set
    {
      __isset.host = true;
      this._host = value;
    }
  }

  public PaidCallDialing Dialing
  {
    get
    {
      return _dialing;
    }
    set
    {
      __isset.dialing = true;
      this._dialing = value;
    }
  }

  public string Token
  {
    get
    {
      return _token;
    }
    set
    {
      __isset.token = true;
      this._token = value;
    }
  }

  public List<SpotItem> SpotItems
  {
    get
    {
      return _spotItems;
    }
    set
    {
      __isset.spotItems = true;
      this._spotItems = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool host;
    public bool dialing;
    public bool token;
    public bool spotItems;
  }

  public PaidCallResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Host = new CallHost();
              Host.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Dialing = new PaidCallDialing();
              Dialing.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Token = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                SpotItems = new List<SpotItem>();
                TList _list107 = iprot.ReadListBegin();
                for( int _i108 = 0; _i108 < _list107.Count; ++_i108)
                {
                  SpotItem _elem109;
                  _elem109 = new SpotItem();
                  _elem109.Read(iprot);
                  SpotItems.Add(_elem109);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("PaidCallResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Host.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Dialing != null && __isset.dialing) {
        field.Name = "dialing";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Dialing.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Token != null && __isset.token) {
        field.Name = "token";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Token);
        oprot.WriteFieldEnd();
      }
      if (SpotItems != null && __isset.spotItems) {
        field.Name = "spotItems";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SpotItems.Count));
          foreach (SpotItem _iter110 in SpotItems)
          {
            _iter110.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("PaidCallResponse(");
    bool __first = true;
    if (Host != null && __isset.host) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Host: ");
      __sb.Append(Host== null ? "<null>" : Host.ToString());
    }
    if (Dialing != null && __isset.dialing) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Dialing: ");
      __sb.Append(Dialing== null ? "<null>" : Dialing.ToString());
    }
    if (Token != null && __isset.token) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Token: ");
      __sb.Append(Token);
    }
    if (SpotItems != null && __isset.spotItems) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SpotItems: ");
      __sb.Append(SpotItems);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

