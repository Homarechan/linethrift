/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CoinPurchaseConfirm : TBase
{
  private string _orderId;
  private PaymentType _appStoreCode;
  private string _receipt;
  private string _signature;
  private string _seller;
  private string _requestType;
  private bool _ignoreReceipt;

  public string OrderId
  {
    get
    {
      return _orderId;
    }
    set
    {
      __isset.orderId = true;
      this._orderId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PaymentType"/>
  /// </summary>
  public PaymentType AppStoreCode
  {
    get
    {
      return _appStoreCode;
    }
    set
    {
      __isset.appStoreCode = true;
      this._appStoreCode = value;
    }
  }

  public string Receipt
  {
    get
    {
      return _receipt;
    }
    set
    {
      __isset.receipt = true;
      this._receipt = value;
    }
  }

  public string Signature
  {
    get
    {
      return _signature;
    }
    set
    {
      __isset.signature = true;
      this._signature = value;
    }
  }

  public string Seller
  {
    get
    {
      return _seller;
    }
    set
    {
      __isset.seller = true;
      this._seller = value;
    }
  }

  public string RequestType
  {
    get
    {
      return _requestType;
    }
    set
    {
      __isset.requestType = true;
      this._requestType = value;
    }
  }

  public bool IgnoreReceipt
  {
    get
    {
      return _ignoreReceipt;
    }
    set
    {
      __isset.ignoreReceipt = true;
      this._ignoreReceipt = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool orderId;
    public bool appStoreCode;
    public bool receipt;
    public bool signature;
    public bool seller;
    public bool requestType;
    public bool ignoreReceipt;
  }

  public CoinPurchaseConfirm() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              OrderId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              AppStoreCode = (PaymentType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Receipt = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Signature = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Seller = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              RequestType = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              IgnoreReceipt = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("CoinPurchaseConfirm");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (OrderId != null && __isset.orderId) {
        field.Name = "orderId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.appStoreCode) {
        field.Name = "appStoreCode";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)AppStoreCode);
        oprot.WriteFieldEnd();
      }
      if (Receipt != null && __isset.receipt) {
        field.Name = "receipt";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Receipt);
        oprot.WriteFieldEnd();
      }
      if (Signature != null && __isset.signature) {
        field.Name = "signature";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Signature);
        oprot.WriteFieldEnd();
      }
      if (Seller != null && __isset.seller) {
        field.Name = "seller";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Seller);
        oprot.WriteFieldEnd();
      }
      if (RequestType != null && __isset.requestType) {
        field.Name = "requestType";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(RequestType);
        oprot.WriteFieldEnd();
      }
      if (__isset.ignoreReceipt) {
        field.Name = "ignoreReceipt";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IgnoreReceipt);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CoinPurchaseConfirm(");
    bool __first = true;
    if (OrderId != null && __isset.orderId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OrderId: ");
      __sb.Append(OrderId);
    }
    if (__isset.appStoreCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AppStoreCode: ");
      __sb.Append(AppStoreCode);
    }
    if (Receipt != null && __isset.receipt) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Receipt: ");
      __sb.Append(Receipt);
    }
    if (Signature != null && __isset.signature) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Signature: ");
      __sb.Append(Signature);
    }
    if (Seller != null && __isset.seller) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Seller: ");
      __sb.Append(Seller);
    }
    if (RequestType != null && __isset.requestType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RequestType: ");
      __sb.Append(RequestType);
    }
    if (__isset.ignoreReceipt) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("IgnoreReceipt: ");
      __sb.Append(IgnoreReceipt);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

