/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ChannelApplicationProvidedService {
  public interface ISync {
    long activeBuddySubscriberCount();
    void addOperationForChannel(OpType opType, string param1, string param2, string param3);
    long displayBuddySubscriberCount();
    Contact findContactByUseridWithoutAbuseBlockForChannel(string userid);
    List<string> getAllContactIdsForChannel();
    List<CompactContact> getCompactContacts(long lastModifiedTimestamp);
    List<Contact> getContactsForChannel(List<string> ids);
    string getDisplayName(string mid);
    List<string> getFavoriteMidsForChannel();
    List<string> getFriendMids();
    List<string> getGroupMemberMids(string groupId);
    List<@Group> getGroupsForChannel(List<string> groupIds);
    IdentityCredential getIdentityCredential();
    List<string> getJoinedGroupIdsForChannel();
    MetaProfile getMetaProfile();
    string getMid();
    SimpleChannelClient getPrimaryClientForChannel();
    Profile getProfileForChannel();
    List<SimpleChannelContact> getSimpleChannelContacts(List<string> ids);
    string getUserCountryForBilling(string country, string remoteIp);
    long getUserCreateTime();
    Dictionary<RegistrationType, string> getUserIdentities();
    string getUserLanguage();
    List<string> getUserMidsWhoAddedMe();
    bool isGroupMember(string groupId);
    bool isInContact(string mid);
    string registerChannelCP(string cpId, string registerPassword);
    void removeNotificationStatus(NotificationStatus notificationStatus);
    Message sendMessageForChannel(Message message);
    void sendPinCodeOperation(string verifier);
    void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string @value);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_activeBuddySubscriberCount(AsyncCallback callback, object state);
    long End_activeBuddySubscriberCount(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_addOperationForChannel(AsyncCallback callback, object state, OpType opType, string param1, string param2, string param3);
    void End_addOperationForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_displayBuddySubscriberCount(AsyncCallback callback, object state);
    long End_displayBuddySubscriberCount(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findContactByUseridWithoutAbuseBlockForChannel(AsyncCallback callback, object state, string userid);
    Contact End_findContactByUseridWithoutAbuseBlockForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAllContactIdsForChannel(AsyncCallback callback, object state);
    List<string> End_getAllContactIdsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCompactContacts(AsyncCallback callback, object state, long lastModifiedTimestamp);
    List<CompactContact> End_getCompactContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getContactsForChannel(AsyncCallback callback, object state, List<string> ids);
    List<Contact> End_getContactsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getDisplayName(AsyncCallback callback, object state, string mid);
    string End_getDisplayName(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getFavoriteMidsForChannel(AsyncCallback callback, object state);
    List<string> End_getFavoriteMidsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getFriendMids(AsyncCallback callback, object state);
    List<string> End_getFriendMids(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupMemberMids(AsyncCallback callback, object state, string groupId);
    List<string> End_getGroupMemberMids(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupsForChannel(AsyncCallback callback, object state, List<string> groupIds);
    List<@Group> End_getGroupsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getIdentityCredential(AsyncCallback callback, object state);
    IdentityCredential End_getIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getJoinedGroupIdsForChannel(AsyncCallback callback, object state);
    List<string> End_getJoinedGroupIdsForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMetaProfile(AsyncCallback callback, object state);
    MetaProfile End_getMetaProfile(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMid(AsyncCallback callback, object state);
    string End_getMid(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPrimaryClientForChannel(AsyncCallback callback, object state);
    SimpleChannelClient End_getPrimaryClientForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getProfileForChannel(AsyncCallback callback, object state);
    Profile End_getProfileForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSimpleChannelContacts(AsyncCallback callback, object state, List<string> ids);
    List<SimpleChannelContact> End_getSimpleChannelContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserCountryForBilling(AsyncCallback callback, object state, string country, string remoteIp);
    string End_getUserCountryForBilling(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserCreateTime(AsyncCallback callback, object state);
    long End_getUserCreateTime(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserIdentities(AsyncCallback callback, object state);
    Dictionary<RegistrationType, string> End_getUserIdentities(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserLanguage(AsyncCallback callback, object state);
    string End_getUserLanguage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserMidsWhoAddedMe(AsyncCallback callback, object state);
    List<string> End_getUserMidsWhoAddedMe(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_isGroupMember(AsyncCallback callback, object state, string groupId);
    bool End_isGroupMember(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_isInContact(AsyncCallback callback, object state, string mid);
    bool End_isInContact(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerChannelCP(AsyncCallback callback, object state, string cpId, string registerPassword);
    string End_registerChannelCP(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeNotificationStatus(AsyncCallback callback, object state, NotificationStatus notificationStatus);
    void End_removeNotificationStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessageForChannel(AsyncCallback callback, object state, Message message);
    Message End_sendMessageForChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendPinCodeOperation(AsyncCallback callback, object state, string verifier);
    void End_sendPinCodeOperation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateProfileAttributeForChannel(AsyncCallback callback, object state, ProfileAttribute profileAttribute, string @value);
    void End_updateProfileAttributeForChannel(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_activeBuddySubscriberCount(AsyncCallback callback, object state)
    {
      return send_activeBuddySubscriberCount(callback, state);
    }

    public long End_activeBuddySubscriberCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_activeBuddySubscriberCount();
    }

    #endif

    public long activeBuddySubscriberCount()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_activeBuddySubscriberCount(null, null);
      return End_activeBuddySubscriberCount(asyncResult);

      #else
      send_activeBuddySubscriberCount();
      return recv_activeBuddySubscriberCount();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_activeBuddySubscriberCount(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.Call, seqid_));
      activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_activeBuddySubscriberCount()
    {
      oprot_.WriteMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.Call, seqid_));
      activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_activeBuddySubscriberCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      activeBuddySubscriberCount_result result = new activeBuddySubscriberCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "activeBuddySubscriberCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_addOperationForChannel(AsyncCallback callback, object state, OpType opType, string param1, string param2, string param3)
    {
      return send_addOperationForChannel(callback, state, opType, param1, param2, param3);
    }

    public void End_addOperationForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_addOperationForChannel();
    }

    #endif

    public void addOperationForChannel(OpType opType, string param1, string param2, string param3)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_addOperationForChannel(null, null, opType, param1, param2, param3);
      End_addOperationForChannel(asyncResult);

      #else
      send_addOperationForChannel(opType, param1, param2, param3);
      recv_addOperationForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addOperationForChannel(AsyncCallback callback, object state, OpType opType, string param1, string param2, string param3)
    {
      oprot_.WriteMessageBegin(new TMessage("addOperationForChannel", TMessageType.Call, seqid_));
      addOperationForChannel_args args = new addOperationForChannel_args();
      args.OpType = opType;
      args.Param1 = param1;
      args.Param2 = param2;
      args.Param3 = param3;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_addOperationForChannel(OpType opType, string param1, string param2, string param3)
    {
      oprot_.WriteMessageBegin(new TMessage("addOperationForChannel", TMessageType.Call, seqid_));
      addOperationForChannel_args args = new addOperationForChannel_args();
      args.OpType = opType;
      args.Param1 = param1;
      args.Param2 = param2;
      args.Param3 = param3;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_addOperationForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addOperationForChannel_result result = new addOperationForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_displayBuddySubscriberCount(AsyncCallback callback, object state)
    {
      return send_displayBuddySubscriberCount(callback, state);
    }

    public long End_displayBuddySubscriberCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_displayBuddySubscriberCount();
    }

    #endif

    public long displayBuddySubscriberCount()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_displayBuddySubscriberCount(null, null);
      return End_displayBuddySubscriberCount(asyncResult);

      #else
      send_displayBuddySubscriberCount();
      return recv_displayBuddySubscriberCount();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_displayBuddySubscriberCount(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.Call, seqid_));
      displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_displayBuddySubscriberCount()
    {
      oprot_.WriteMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.Call, seqid_));
      displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_displayBuddySubscriberCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      displayBuddySubscriberCount_result result = new displayBuddySubscriberCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "displayBuddySubscriberCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findContactByUseridWithoutAbuseBlockForChannel(AsyncCallback callback, object state, string userid)
    {
      return send_findContactByUseridWithoutAbuseBlockForChannel(callback, state, userid);
    }

    public Contact End_findContactByUseridWithoutAbuseBlockForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findContactByUseridWithoutAbuseBlockForChannel();
    }

    #endif

    public Contact findContactByUseridWithoutAbuseBlockForChannel(string userid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findContactByUseridWithoutAbuseBlockForChannel(null, null, userid);
      return End_findContactByUseridWithoutAbuseBlockForChannel(asyncResult);

      #else
      send_findContactByUseridWithoutAbuseBlockForChannel(userid);
      return recv_findContactByUseridWithoutAbuseBlockForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findContactByUseridWithoutAbuseBlockForChannel(AsyncCallback callback, object state, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.Call, seqid_));
      findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findContactByUseridWithoutAbuseBlockForChannel(string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.Call, seqid_));
      findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Contact recv_findContactByUseridWithoutAbuseBlockForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findContactByUseridWithoutAbuseBlockForChannel_result result = new findContactByUseridWithoutAbuseBlockForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactByUseridWithoutAbuseBlockForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAllContactIdsForChannel(AsyncCallback callback, object state)
    {
      return send_getAllContactIdsForChannel(callback, state);
    }

    public List<string> End_getAllContactIdsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllContactIdsForChannel();
    }

    #endif

    public List<string> getAllContactIdsForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAllContactIdsForChannel(null, null);
      return End_getAllContactIdsForChannel(asyncResult);

      #else
      send_getAllContactIdsForChannel();
      return recv_getAllContactIdsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllContactIdsForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.Call, seqid_));
      getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAllContactIdsForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.Call, seqid_));
      getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getAllContactIdsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllContactIdsForChannel_result result = new getAllContactIdsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllContactIdsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCompactContacts(AsyncCallback callback, object state, long lastModifiedTimestamp)
    {
      return send_getCompactContacts(callback, state, lastModifiedTimestamp);
    }

    public List<CompactContact> End_getCompactContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCompactContacts();
    }

    #endif

    public List<CompactContact> getCompactContacts(long lastModifiedTimestamp)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCompactContacts(null, null, lastModifiedTimestamp);
      return End_getCompactContacts(asyncResult);

      #else
      send_getCompactContacts(lastModifiedTimestamp);
      return recv_getCompactContacts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCompactContacts(AsyncCallback callback, object state, long lastModifiedTimestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactContacts", TMessageType.Call, seqid_));
      getCompactContacts_args args = new getCompactContacts_args();
      args.LastModifiedTimestamp = lastModifiedTimestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCompactContacts(long lastModifiedTimestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactContacts", TMessageType.Call, seqid_));
      getCompactContacts_args args = new getCompactContacts_args();
      args.LastModifiedTimestamp = lastModifiedTimestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<CompactContact> recv_getCompactContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCompactContacts_result result = new getCompactContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompactContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getContactsForChannel(AsyncCallback callback, object state, List<string> ids)
    {
      return send_getContactsForChannel(callback, state, ids);
    }

    public List<Contact> End_getContactsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getContactsForChannel();
    }

    #endif

    public List<Contact> getContactsForChannel(List<string> ids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getContactsForChannel(null, null, ids);
      return End_getContactsForChannel(asyncResult);

      #else
      send_getContactsForChannel(ids);
      return recv_getContactsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getContactsForChannel(AsyncCallback callback, object state, List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getContactsForChannel", TMessageType.Call, seqid_));
      getContactsForChannel_args args = new getContactsForChannel_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getContactsForChannel(List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getContactsForChannel", TMessageType.Call, seqid_));
      getContactsForChannel_args args = new getContactsForChannel_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Contact> recv_getContactsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getContactsForChannel_result result = new getContactsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContactsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getDisplayName(AsyncCallback callback, object state, string mid)
    {
      return send_getDisplayName(callback, state, mid);
    }

    public string End_getDisplayName(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDisplayName();
    }

    #endif

    public string getDisplayName(string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getDisplayName(null, null, mid);
      return End_getDisplayName(asyncResult);

      #else
      send_getDisplayName(mid);
      return recv_getDisplayName();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getDisplayName(AsyncCallback callback, object state, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Call, seqid_));
      getDisplayName_args args = new getDisplayName_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getDisplayName(string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Call, seqid_));
      getDisplayName_args args = new getDisplayName_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getDisplayName()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDisplayName_result result = new getDisplayName_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDisplayName failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getFavoriteMidsForChannel(AsyncCallback callback, object state)
    {
      return send_getFavoriteMidsForChannel(callback, state);
    }

    public List<string> End_getFavoriteMidsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFavoriteMidsForChannel();
    }

    #endif

    public List<string> getFavoriteMidsForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getFavoriteMidsForChannel(null, null);
      return End_getFavoriteMidsForChannel(asyncResult);

      #else
      send_getFavoriteMidsForChannel();
      return recv_getFavoriteMidsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFavoriteMidsForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.Call, seqid_));
      getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getFavoriteMidsForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.Call, seqid_));
      getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getFavoriteMidsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFavoriteMidsForChannel_result result = new getFavoriteMidsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFavoriteMidsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getFriendMids(AsyncCallback callback, object state)
    {
      return send_getFriendMids(callback, state);
    }

    public List<string> End_getFriendMids(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFriendMids();
    }

    #endif

    public List<string> getFriendMids()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getFriendMids(null, null);
      return End_getFriendMids(asyncResult);

      #else
      send_getFriendMids();
      return recv_getFriendMids();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFriendMids(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getFriendMids", TMessageType.Call, seqid_));
      getFriendMids_args args = new getFriendMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getFriendMids()
    {
      oprot_.WriteMessageBegin(new TMessage("getFriendMids", TMessageType.Call, seqid_));
      getFriendMids_args args = new getFriendMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getFriendMids()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFriendMids_result result = new getFriendMids_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriendMids failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupMemberMids(AsyncCallback callback, object state, string groupId)
    {
      return send_getGroupMemberMids(callback, state, groupId);
    }

    public List<string> End_getGroupMemberMids(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupMemberMids();
    }

    #endif

    public List<string> getGroupMemberMids(string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupMemberMids(null, null, groupId);
      return End_getGroupMemberMids(asyncResult);

      #else
      send_getGroupMemberMids(groupId);
      return recv_getGroupMemberMids();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupMemberMids(AsyncCallback callback, object state, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupMemberMids", TMessageType.Call, seqid_));
      getGroupMemberMids_args args = new getGroupMemberMids_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupMemberMids(string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupMemberMids", TMessageType.Call, seqid_));
      getGroupMemberMids_args args = new getGroupMemberMids_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getGroupMemberMids()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupMemberMids_result result = new getGroupMemberMids_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupMemberMids failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupsForChannel(AsyncCallback callback, object state, List<string> groupIds)
    {
      return send_getGroupsForChannel(callback, state, groupIds);
    }

    public List<@Group> End_getGroupsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupsForChannel();
    }

    #endif

    public List<@Group> getGroupsForChannel(List<string> groupIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupsForChannel(null, null, groupIds);
      return End_getGroupsForChannel(asyncResult);

      #else
      send_getGroupsForChannel(groupIds);
      return recv_getGroupsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupsForChannel(AsyncCallback callback, object state, List<string> groupIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupsForChannel", TMessageType.Call, seqid_));
      getGroupsForChannel_args args = new getGroupsForChannel_args();
      args.GroupIds = groupIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupsForChannel(List<string> groupIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupsForChannel", TMessageType.Call, seqid_));
      getGroupsForChannel_args args = new getGroupsForChannel_args();
      args.GroupIds = groupIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<@Group> recv_getGroupsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupsForChannel_result result = new getGroupsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getIdentityCredential(AsyncCallback callback, object state)
    {
      return send_getIdentityCredential(callback, state);
    }

    public IdentityCredential End_getIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getIdentityCredential();
    }

    #endif

    public IdentityCredential getIdentityCredential()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getIdentityCredential(null, null);
      return End_getIdentityCredential(asyncResult);

      #else
      send_getIdentityCredential();
      return recv_getIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getIdentityCredential(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getIdentityCredential", TMessageType.Call, seqid_));
      getIdentityCredential_args args = new getIdentityCredential_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getIdentityCredential()
    {
      oprot_.WriteMessageBegin(new TMessage("getIdentityCredential", TMessageType.Call, seqid_));
      getIdentityCredential_args args = new getIdentityCredential_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public IdentityCredential recv_getIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getIdentityCredential_result result = new getIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getIdentityCredential failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getJoinedGroupIdsForChannel(AsyncCallback callback, object state)
    {
      return send_getJoinedGroupIdsForChannel(callback, state);
    }

    public List<string> End_getJoinedGroupIdsForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getJoinedGroupIdsForChannel();
    }

    #endif

    public List<string> getJoinedGroupIdsForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getJoinedGroupIdsForChannel(null, null);
      return End_getJoinedGroupIdsForChannel(asyncResult);

      #else
      send_getJoinedGroupIdsForChannel();
      return recv_getJoinedGroupIdsForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getJoinedGroupIdsForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.Call, seqid_));
      getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getJoinedGroupIdsForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.Call, seqid_));
      getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getJoinedGroupIdsForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getJoinedGroupIdsForChannel_result result = new getJoinedGroupIdsForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getJoinedGroupIdsForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMetaProfile(AsyncCallback callback, object state)
    {
      return send_getMetaProfile(callback, state);
    }

    public MetaProfile End_getMetaProfile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMetaProfile();
    }

    #endif

    public MetaProfile getMetaProfile()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMetaProfile(null, null);
      return End_getMetaProfile(asyncResult);

      #else
      send_getMetaProfile();
      return recv_getMetaProfile();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMetaProfile(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getMetaProfile", TMessageType.Call, seqid_));
      getMetaProfile_args args = new getMetaProfile_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMetaProfile()
    {
      oprot_.WriteMessageBegin(new TMessage("getMetaProfile", TMessageType.Call, seqid_));
      getMetaProfile_args args = new getMetaProfile_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public MetaProfile recv_getMetaProfile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMetaProfile_result result = new getMetaProfile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMetaProfile failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMid(AsyncCallback callback, object state)
    {
      return send_getMid(callback, state);
    }

    public string End_getMid(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMid();
    }

    #endif

    public string getMid()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMid(null, null);
      return End_getMid(asyncResult);

      #else
      send_getMid();
      return recv_getMid();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMid(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getMid", TMessageType.Call, seqid_));
      getMid_args args = new getMid_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMid()
    {
      oprot_.WriteMessageBegin(new TMessage("getMid", TMessageType.Call, seqid_));
      getMid_args args = new getMid_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getMid()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMid_result result = new getMid_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMid failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPrimaryClientForChannel(AsyncCallback callback, object state)
    {
      return send_getPrimaryClientForChannel(callback, state);
    }

    public SimpleChannelClient End_getPrimaryClientForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPrimaryClientForChannel();
    }

    #endif

    public SimpleChannelClient getPrimaryClientForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPrimaryClientForChannel(null, null);
      return End_getPrimaryClientForChannel(asyncResult);

      #else
      send_getPrimaryClientForChannel();
      return recv_getPrimaryClientForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPrimaryClientForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.Call, seqid_));
      getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPrimaryClientForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.Call, seqid_));
      getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SimpleChannelClient recv_getPrimaryClientForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPrimaryClientForChannel_result result = new getPrimaryClientForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPrimaryClientForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getProfileForChannel(AsyncCallback callback, object state)
    {
      return send_getProfileForChannel(callback, state);
    }

    public Profile End_getProfileForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProfileForChannel();
    }

    #endif

    public Profile getProfileForChannel()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getProfileForChannel(null, null);
      return End_getProfileForChannel(asyncResult);

      #else
      send_getProfileForChannel();
      return recv_getProfileForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProfileForChannel(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getProfileForChannel", TMessageType.Call, seqid_));
      getProfileForChannel_args args = new getProfileForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getProfileForChannel()
    {
      oprot_.WriteMessageBegin(new TMessage("getProfileForChannel", TMessageType.Call, seqid_));
      getProfileForChannel_args args = new getProfileForChannel_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Profile recv_getProfileForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProfileForChannel_result result = new getProfileForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProfileForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSimpleChannelContacts(AsyncCallback callback, object state, List<string> ids)
    {
      return send_getSimpleChannelContacts(callback, state, ids);
    }

    public List<SimpleChannelContact> End_getSimpleChannelContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSimpleChannelContacts();
    }

    #endif

    public List<SimpleChannelContact> getSimpleChannelContacts(List<string> ids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSimpleChannelContacts(null, null, ids);
      return End_getSimpleChannelContacts(asyncResult);

      #else
      send_getSimpleChannelContacts(ids);
      return recv_getSimpleChannelContacts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSimpleChannelContacts(AsyncCallback callback, object state, List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.Call, seqid_));
      getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSimpleChannelContacts(List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.Call, seqid_));
      getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<SimpleChannelContact> recv_getSimpleChannelContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSimpleChannelContacts_result result = new getSimpleChannelContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSimpleChannelContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserCountryForBilling(AsyncCallback callback, object state, string country, string remoteIp)
    {
      return send_getUserCountryForBilling(callback, state, country, remoteIp);
    }

    public string End_getUserCountryForBilling(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserCountryForBilling();
    }

    #endif

    public string getUserCountryForBilling(string country, string remoteIp)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserCountryForBilling(null, null, country, remoteIp);
      return End_getUserCountryForBilling(asyncResult);

      #else
      send_getUserCountryForBilling(country, remoteIp);
      return recv_getUserCountryForBilling();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserCountryForBilling(AsyncCallback callback, object state, string country, string remoteIp)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.Call, seqid_));
      getUserCountryForBilling_args args = new getUserCountryForBilling_args();
      args.Country = country;
      args.RemoteIp = remoteIp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserCountryForBilling(string country, string remoteIp)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.Call, seqid_));
      getUserCountryForBilling_args args = new getUserCountryForBilling_args();
      args.Country = country;
      args.RemoteIp = remoteIp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getUserCountryForBilling()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserCountryForBilling_result result = new getUserCountryForBilling_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserCountryForBilling failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserCreateTime(AsyncCallback callback, object state)
    {
      return send_getUserCreateTime(callback, state);
    }

    public long End_getUserCreateTime(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserCreateTime();
    }

    #endif

    public long getUserCreateTime()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserCreateTime(null, null);
      return End_getUserCreateTime(asyncResult);

      #else
      send_getUserCreateTime();
      return recv_getUserCreateTime();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserCreateTime(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserCreateTime", TMessageType.Call, seqid_));
      getUserCreateTime_args args = new getUserCreateTime_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserCreateTime()
    {
      oprot_.WriteMessageBegin(new TMessage("getUserCreateTime", TMessageType.Call, seqid_));
      getUserCreateTime_args args = new getUserCreateTime_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_getUserCreateTime()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserCreateTime_result result = new getUserCreateTime_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserCreateTime failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserIdentities(AsyncCallback callback, object state)
    {
      return send_getUserIdentities(callback, state);
    }

    public Dictionary<RegistrationType, string> End_getUserIdentities(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserIdentities();
    }

    #endif

    public Dictionary<RegistrationType, string> getUserIdentities()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserIdentities(null, null);
      return End_getUserIdentities(asyncResult);

      #else
      send_getUserIdentities();
      return recv_getUserIdentities();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserIdentities(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserIdentities", TMessageType.Call, seqid_));
      getUserIdentities_args args = new getUserIdentities_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserIdentities()
    {
      oprot_.WriteMessageBegin(new TMessage("getUserIdentities", TMessageType.Call, seqid_));
      getUserIdentities_args args = new getUserIdentities_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<RegistrationType, string> recv_getUserIdentities()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserIdentities_result result = new getUserIdentities_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserIdentities failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserLanguage(AsyncCallback callback, object state)
    {
      return send_getUserLanguage(callback, state);
    }

    public string End_getUserLanguage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserLanguage();
    }

    #endif

    public string getUserLanguage()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserLanguage(null, null);
      return End_getUserLanguage(asyncResult);

      #else
      send_getUserLanguage();
      return recv_getUserLanguage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserLanguage(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserLanguage", TMessageType.Call, seqid_));
      getUserLanguage_args args = new getUserLanguage_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserLanguage()
    {
      oprot_.WriteMessageBegin(new TMessage("getUserLanguage", TMessageType.Call, seqid_));
      getUserLanguage_args args = new getUserLanguage_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getUserLanguage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserLanguage_result result = new getUserLanguage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserLanguage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserMidsWhoAddedMe(AsyncCallback callback, object state)
    {
      return send_getUserMidsWhoAddedMe(callback, state);
    }

    public List<string> End_getUserMidsWhoAddedMe(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserMidsWhoAddedMe();
    }

    #endif

    public List<string> getUserMidsWhoAddedMe()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserMidsWhoAddedMe(null, null);
      return End_getUserMidsWhoAddedMe(asyncResult);

      #else
      send_getUserMidsWhoAddedMe();
      return recv_getUserMidsWhoAddedMe();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserMidsWhoAddedMe(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.Call, seqid_));
      getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserMidsWhoAddedMe()
    {
      oprot_.WriteMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.Call, seqid_));
      getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getUserMidsWhoAddedMe()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserMidsWhoAddedMe_result result = new getUserMidsWhoAddedMe_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserMidsWhoAddedMe failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_isGroupMember(AsyncCallback callback, object state, string groupId)
    {
      return send_isGroupMember(callback, state, groupId);
    }

    public bool End_isGroupMember(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isGroupMember();
    }

    #endif

    public bool isGroupMember(string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_isGroupMember(null, null, groupId);
      return End_isGroupMember(asyncResult);

      #else
      send_isGroupMember(groupId);
      return recv_isGroupMember();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_isGroupMember(AsyncCallback callback, object state, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("isGroupMember", TMessageType.Call, seqid_));
      isGroupMember_args args = new isGroupMember_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_isGroupMember(string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("isGroupMember", TMessageType.Call, seqid_));
      isGroupMember_args args = new isGroupMember_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_isGroupMember()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isGroupMember_result result = new isGroupMember_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isGroupMember failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_isInContact(AsyncCallback callback, object state, string mid)
    {
      return send_isInContact(callback, state, mid);
    }

    public bool End_isInContact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isInContact();
    }

    #endif

    public bool isInContact(string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_isInContact(null, null, mid);
      return End_isInContact(asyncResult);

      #else
      send_isInContact(mid);
      return recv_isInContact();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_isInContact(AsyncCallback callback, object state, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("isInContact", TMessageType.Call, seqid_));
      isInContact_args args = new isInContact_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_isInContact(string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("isInContact", TMessageType.Call, seqid_));
      isInContact_args args = new isInContact_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_isInContact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isInContact_result result = new isInContact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isInContact failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerChannelCP(AsyncCallback callback, object state, string cpId, string registerPassword)
    {
      return send_registerChannelCP(callback, state, cpId, registerPassword);
    }

    public string End_registerChannelCP(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerChannelCP();
    }

    #endif

    public string registerChannelCP(string cpId, string registerPassword)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerChannelCP(null, null, cpId, registerPassword);
      return End_registerChannelCP(asyncResult);

      #else
      send_registerChannelCP(cpId, registerPassword);
      return recv_registerChannelCP();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerChannelCP(AsyncCallback callback, object state, string cpId, string registerPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("registerChannelCP", TMessageType.Call, seqid_));
      registerChannelCP_args args = new registerChannelCP_args();
      args.CpId = cpId;
      args.RegisterPassword = registerPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerChannelCP(string cpId, string registerPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("registerChannelCP", TMessageType.Call, seqid_));
      registerChannelCP_args args = new registerChannelCP_args();
      args.CpId = cpId;
      args.RegisterPassword = registerPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerChannelCP()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerChannelCP_result result = new registerChannelCP_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerChannelCP failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeNotificationStatus(AsyncCallback callback, object state, NotificationStatus notificationStatus)
    {
      return send_removeNotificationStatus(callback, state, notificationStatus);
    }

    public void End_removeNotificationStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_removeNotificationStatus();
    }

    #endif

    public void removeNotificationStatus(NotificationStatus notificationStatus)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeNotificationStatus(null, null, notificationStatus);
      End_removeNotificationStatus(asyncResult);

      #else
      send_removeNotificationStatus(notificationStatus);
      recv_removeNotificationStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeNotificationStatus(AsyncCallback callback, object state, NotificationStatus notificationStatus)
    {
      oprot_.WriteMessageBegin(new TMessage("removeNotificationStatus", TMessageType.Call, seqid_));
      removeNotificationStatus_args args = new removeNotificationStatus_args();
      args.NotificationStatus = notificationStatus;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeNotificationStatus(NotificationStatus notificationStatus)
    {
      oprot_.WriteMessageBegin(new TMessage("removeNotificationStatus", TMessageType.Call, seqid_));
      removeNotificationStatus_args args = new removeNotificationStatus_args();
      args.NotificationStatus = notificationStatus;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_removeNotificationStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeNotificationStatus_result result = new removeNotificationStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessageForChannel(AsyncCallback callback, object state, Message message)
    {
      return send_sendMessageForChannel(callback, state, message);
    }

    public Message End_sendMessageForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendMessageForChannel();
    }

    #endif

    public Message sendMessageForChannel(Message message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessageForChannel(null, null, message);
      return End_sendMessageForChannel(asyncResult);

      #else
      send_sendMessageForChannel(message);
      return recv_sendMessageForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessageForChannel(AsyncCallback callback, object state, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageForChannel", TMessageType.Call, seqid_));
      sendMessageForChannel_args args = new sendMessageForChannel_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessageForChannel(Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageForChannel", TMessageType.Call, seqid_));
      sendMessageForChannel_args args = new sendMessageForChannel_args();
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Message recv_sendMessageForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessageForChannel_result result = new sendMessageForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessageForChannel failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendPinCodeOperation(AsyncCallback callback, object state, string verifier)
    {
      return send_sendPinCodeOperation(callback, state, verifier);
    }

    public void End_sendPinCodeOperation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendPinCodeOperation();
    }

    #endif

    public void sendPinCodeOperation(string verifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendPinCodeOperation(null, null, verifier);
      End_sendPinCodeOperation(asyncResult);

      #else
      send_sendPinCodeOperation(verifier);
      recv_sendPinCodeOperation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendPinCodeOperation(AsyncCallback callback, object state, string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.Call, seqid_));
      sendPinCodeOperation_args args = new sendPinCodeOperation_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendPinCodeOperation(string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.Call, seqid_));
      sendPinCodeOperation_args args = new sendPinCodeOperation_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendPinCodeOperation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendPinCodeOperation_result result = new sendPinCodeOperation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateProfileAttributeForChannel(AsyncCallback callback, object state, ProfileAttribute profileAttribute, string @value)
    {
      return send_updateProfileAttributeForChannel(callback, state, profileAttribute, @value);
    }

    public void End_updateProfileAttributeForChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateProfileAttributeForChannel();
    }

    #endif

    public void updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateProfileAttributeForChannel(null, null, profileAttribute, @value);
      End_updateProfileAttributeForChannel(asyncResult);

      #else
      send_updateProfileAttributeForChannel(profileAttribute, @value);
      recv_updateProfileAttributeForChannel();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateProfileAttributeForChannel(AsyncCallback callback, object state, ProfileAttribute profileAttribute, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.Call, seqid_));
      updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
      args.ProfileAttribute = profileAttribute;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateProfileAttributeForChannel(ProfileAttribute profileAttribute, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.Call, seqid_));
      updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
      args.ProfileAttribute = profileAttribute;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateProfileAttributeForChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateProfileAttributeForChannel_result result = new updateProfileAttributeForChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["activeBuddySubscriberCount"] = activeBuddySubscriberCount_Process;
      processMap_["addOperationForChannel"] = addOperationForChannel_Process;
      processMap_["displayBuddySubscriberCount"] = displayBuddySubscriberCount_Process;
      processMap_["findContactByUseridWithoutAbuseBlockForChannel"] = findContactByUseridWithoutAbuseBlockForChannel_Process;
      processMap_["getAllContactIdsForChannel"] = getAllContactIdsForChannel_Process;
      processMap_["getCompactContacts"] = getCompactContacts_Process;
      processMap_["getContactsForChannel"] = getContactsForChannel_Process;
      processMap_["getDisplayName"] = getDisplayName_Process;
      processMap_["getFavoriteMidsForChannel"] = getFavoriteMidsForChannel_Process;
      processMap_["getFriendMids"] = getFriendMids_Process;
      processMap_["getGroupMemberMids"] = getGroupMemberMids_Process;
      processMap_["getGroupsForChannel"] = getGroupsForChannel_Process;
      processMap_["getIdentityCredential"] = getIdentityCredential_Process;
      processMap_["getJoinedGroupIdsForChannel"] = getJoinedGroupIdsForChannel_Process;
      processMap_["getMetaProfile"] = getMetaProfile_Process;
      processMap_["getMid"] = getMid_Process;
      processMap_["getPrimaryClientForChannel"] = getPrimaryClientForChannel_Process;
      processMap_["getProfileForChannel"] = getProfileForChannel_Process;
      processMap_["getSimpleChannelContacts"] = getSimpleChannelContacts_Process;
      processMap_["getUserCountryForBilling"] = getUserCountryForBilling_Process;
      processMap_["getUserCreateTime"] = getUserCreateTime_Process;
      processMap_["getUserIdentities"] = getUserIdentities_Process;
      processMap_["getUserLanguage"] = getUserLanguage_Process;
      processMap_["getUserMidsWhoAddedMe"] = getUserMidsWhoAddedMe_Process;
      processMap_["isGroupMember"] = isGroupMember_Process;
      processMap_["isInContact"] = isInContact_Process;
      processMap_["registerChannelCP"] = registerChannelCP_Process;
      processMap_["removeNotificationStatus"] = removeNotificationStatus_Process;
      processMap_["sendMessageForChannel"] = sendMessageForChannel_Process;
      processMap_["sendPinCodeOperation"] = sendPinCodeOperation_Process;
      processMap_["updateProfileAttributeForChannel"] = updateProfileAttributeForChannel_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void activeBuddySubscriberCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      activeBuddySubscriberCount_args args = new activeBuddySubscriberCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      activeBuddySubscriberCount_result result = new activeBuddySubscriberCount_result();
      try
      {
        try
        {
          result.Success = iface_.activeBuddySubscriberCount();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("activeBuddySubscriberCount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addOperationForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addOperationForChannel_args args = new addOperationForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addOperationForChannel_result result = new addOperationForChannel_result();
      try
      {
        try
        {
          iface_.addOperationForChannel(args.OpType, args.Param1, args.Param2, args.Param3);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("addOperationForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addOperationForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void displayBuddySubscriberCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      displayBuddySubscriberCount_args args = new displayBuddySubscriberCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      displayBuddySubscriberCount_result result = new displayBuddySubscriberCount_result();
      try
      {
        try
        {
          result.Success = iface_.displayBuddySubscriberCount();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("displayBuddySubscriberCount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findContactByUseridWithoutAbuseBlockForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findContactByUseridWithoutAbuseBlockForChannel_args args = new findContactByUseridWithoutAbuseBlockForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findContactByUseridWithoutAbuseBlockForChannel_result result = new findContactByUseridWithoutAbuseBlockForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.findContactByUseridWithoutAbuseBlockForChannel(args.Userid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findContactByUseridWithoutAbuseBlockForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAllContactIdsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllContactIdsForChannel_args args = new getAllContactIdsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllContactIdsForChannel_result result = new getAllContactIdsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getAllContactIdsForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAllContactIdsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCompactContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCompactContacts_args args = new getCompactContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCompactContacts_result result = new getCompactContacts_result();
      try
      {
        try
        {
          result.Success = iface_.getCompactContacts(args.LastModifiedTimestamp);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCompactContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCompactContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getContactsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getContactsForChannel_args args = new getContactsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getContactsForChannel_result result = new getContactsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getContactsForChannel(args.Ids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getContactsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getContactsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDisplayName_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDisplayName_args args = new getDisplayName_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDisplayName_result result = new getDisplayName_result();
      try
      {
        try
        {
          result.Success = iface_.getDisplayName(args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDisplayName", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFavoriteMidsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFavoriteMidsForChannel_args args = new getFavoriteMidsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFavoriteMidsForChannel_result result = new getFavoriteMidsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getFavoriteMidsForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFavoriteMidsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFriendMids_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFriendMids_args args = new getFriendMids_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFriendMids_result result = new getFriendMids_result();
      try
      {
        try
        {
          result.Success = iface_.getFriendMids();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getFriendMids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFriendMids", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupMemberMids_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupMemberMids_args args = new getGroupMemberMids_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupMemberMids_result result = new getGroupMemberMids_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupMemberMids(args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupMemberMids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupMemberMids", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupsForChannel_args args = new getGroupsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupsForChannel_result result = new getGroupsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupsForChannel(args.GroupIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getIdentityCredential_args args = new getIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getIdentityCredential_result result = new getIdentityCredential_result();
      try
      {
        try
        {
          result.Success = iface_.getIdentityCredential();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getJoinedGroupIdsForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getJoinedGroupIdsForChannel_args args = new getJoinedGroupIdsForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getJoinedGroupIdsForChannel_result result = new getJoinedGroupIdsForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getJoinedGroupIdsForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getJoinedGroupIdsForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMetaProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMetaProfile_args args = new getMetaProfile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMetaProfile_result result = new getMetaProfile_result();
      try
      {
        try
        {
          result.Success = iface_.getMetaProfile();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMetaProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMetaProfile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMid_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMid_args args = new getMid_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMid_result result = new getMid_result();
      try
      {
        try
        {
          result.Success = iface_.getMid();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMid", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPrimaryClientForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPrimaryClientForChannel_args args = new getPrimaryClientForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPrimaryClientForChannel_result result = new getPrimaryClientForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getPrimaryClientForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPrimaryClientForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProfileForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProfileForChannel_args args = new getProfileForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProfileForChannel_result result = new getProfileForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.getProfileForChannel();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProfileForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProfileForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSimpleChannelContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSimpleChannelContacts_args args = new getSimpleChannelContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSimpleChannelContacts_result result = new getSimpleChannelContacts_result();
      try
      {
        try
        {
          result.Success = iface_.getSimpleChannelContacts(args.Ids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSimpleChannelContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserCountryForBilling_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserCountryForBilling_args args = new getUserCountryForBilling_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserCountryForBilling_result result = new getUserCountryForBilling_result();
      try
      {
        try
        {
          result.Success = iface_.getUserCountryForBilling(args.Country, args.RemoteIp);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserCountryForBilling", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserCreateTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserCreateTime_args args = new getUserCreateTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserCreateTime_result result = new getUserCreateTime_result();
      try
      {
        try
        {
          result.Success = iface_.getUserCreateTime();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserCreateTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserCreateTime", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserIdentities_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserIdentities_args args = new getUserIdentities_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserIdentities_result result = new getUserIdentities_result();
      try
      {
        try
        {
          result.Success = iface_.getUserIdentities();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserIdentities", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserIdentities", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserLanguage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserLanguage_args args = new getUserLanguage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserLanguage_result result = new getUserLanguage_result();
      try
      {
        try
        {
          result.Success = iface_.getUserLanguage();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserLanguage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserLanguage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserMidsWhoAddedMe_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserMidsWhoAddedMe_args args = new getUserMidsWhoAddedMe_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserMidsWhoAddedMe_result result = new getUserMidsWhoAddedMe_result();
      try
      {
        try
        {
          result.Success = iface_.getUserMidsWhoAddedMe();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserMidsWhoAddedMe", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isGroupMember_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isGroupMember_args args = new isGroupMember_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isGroupMember_result result = new isGroupMember_result();
      try
      {
        try
        {
          result.Success = iface_.isGroupMember(args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isGroupMember", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isGroupMember", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isInContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isInContact_args args = new isInContact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isInContact_result result = new isInContact_result();
      try
      {
        try
        {
          result.Success = iface_.isInContact(args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isInContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isInContact", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerChannelCP_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerChannelCP_args args = new registerChannelCP_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerChannelCP_result result = new registerChannelCP_result();
      try
      {
        try
        {
          result.Success = iface_.registerChannelCP(args.CpId, args.RegisterPassword);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerChannelCP", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerChannelCP", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeNotificationStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeNotificationStatus_args args = new removeNotificationStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeNotificationStatus_result result = new removeNotificationStatus_result();
      try
      {
        try
        {
          iface_.removeNotificationStatus(args.NotificationStatus);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeNotificationStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeNotificationStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessageForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessageForChannel_args args = new sendMessageForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessageForChannel_result result = new sendMessageForChannel_result();
      try
      {
        try
        {
          result.Success = iface_.sendMessageForChannel(args.Message);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessageForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendPinCodeOperation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendPinCodeOperation_args args = new sendPinCodeOperation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendPinCodeOperation_result result = new sendPinCodeOperation_result();
      try
      {
        try
        {
          iface_.sendPinCodeOperation(args.Verifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendPinCodeOperation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateProfileAttributeForChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateProfileAttributeForChannel_args args = new updateProfileAttributeForChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateProfileAttributeForChannel_result result = new updateProfileAttributeForChannel_result();
      try
      {
        try
        {
          iface_.updateProfileAttributeForChannel(args.ProfileAttribute, args.Value);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateProfileAttributeForChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class activeBuddySubscriberCount_args : TBase
  {

    public activeBuddySubscriberCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("activeBuddySubscriberCount_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("activeBuddySubscriberCount_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class activeBuddySubscriberCount_result : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public activeBuddySubscriberCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("activeBuddySubscriberCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("activeBuddySubscriberCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addOperationForChannel_args : TBase
  {
    private OpType _opType;
    private string _param1;
    private string _param2;
    private string _param3;

    /// <summary>
    /// 
    /// <seealso cref="OpType"/>
    /// </summary>
    public OpType OpType
    {
      get
      {
        return _opType;
      }
      set
      {
        __isset.opType = true;
        this._opType = value;
      }
    }

    public string Param1
    {
      get
      {
        return _param1;
      }
      set
      {
        __isset.param1 = true;
        this._param1 = value;
      }
    }

    public string Param2
    {
      get
      {
        return _param2;
      }
      set
      {
        __isset.param2 = true;
        this._param2 = value;
      }
    }

    public string Param3
    {
      get
      {
        return _param3;
      }
      set
      {
        __isset.param3 = true;
        this._param3 = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool opType;
      public bool param1;
      public bool param2;
      public bool param3;
    }

    public addOperationForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                OpType = (OpType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Param1 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Param2 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Param3 = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addOperationForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.opType) {
          field.Name = "opType";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)OpType);
          oprot.WriteFieldEnd();
        }
        if (Param1 != null && __isset.param1) {
          field.Name = "param1";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Param1);
          oprot.WriteFieldEnd();
        }
        if (Param2 != null && __isset.param2) {
          field.Name = "param2";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Param2);
          oprot.WriteFieldEnd();
        }
        if (Param3 != null && __isset.param3) {
          field.Name = "param3";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Param3);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addOperationForChannel_args(");
      bool __first = true;
      if (__isset.opType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OpType: ");
        __sb.Append(OpType);
      }
      if (Param1 != null && __isset.param1) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param1: ");
        __sb.Append(Param1);
      }
      if (Param2 != null && __isset.param2) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param2: ");
        __sb.Append(Param2);
      }
      if (Param3 != null && __isset.param3) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Param3: ");
        __sb.Append(Param3);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addOperationForChannel_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public addOperationForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addOperationForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addOperationForChannel_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class displayBuddySubscriberCount_args : TBase
  {

    public displayBuddySubscriberCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("displayBuddySubscriberCount_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("displayBuddySubscriberCount_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class displayBuddySubscriberCount_result : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public displayBuddySubscriberCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("displayBuddySubscriberCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("displayBuddySubscriberCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByUseridWithoutAbuseBlockForChannel_args : TBase
  {
    private string _userid;

    public string Userid
    {
      get
      {
        return _userid;
      }
      set
      {
        __isset.userid = true;
        this._userid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userid;
    }

    public findContactByUseridWithoutAbuseBlockForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByUseridWithoutAbuseBlockForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByUseridWithoutAbuseBlockForChannel_args(");
      bool __first = true;
      if (Userid != null && __isset.userid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Userid: ");
        __sb.Append(Userid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByUseridWithoutAbuseBlockForChannel_result : TBase
  {
    private Contact _success;
    private TalkException _e;

    public Contact Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findContactByUseridWithoutAbuseBlockForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByUseridWithoutAbuseBlockForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByUseridWithoutAbuseBlockForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllContactIdsForChannel_args : TBase
  {

    public getAllContactIdsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllContactIdsForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllContactIdsForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllContactIdsForChannel_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getAllContactIdsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list660 = iprot.ReadListBegin();
                  for( int _i661 = 0; _i661 < _list660.Count; ++_i661)
                  {
                    string _elem662;
                    _elem662 = iprot.ReadString();
                    Success.Add(_elem662);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllContactIdsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter663 in Success)
              {
                oprot.WriteString(_iter663);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllContactIdsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactContacts_args : TBase
  {
    private long _lastModifiedTimestamp;

    public long LastModifiedTimestamp
    {
      get
      {
        return _lastModifiedTimestamp;
      }
      set
      {
        __isset.lastModifiedTimestamp = true;
        this._lastModifiedTimestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastModifiedTimestamp;
    }

    public getCompactContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastModifiedTimestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastModifiedTimestamp) {
          field.Name = "lastModifiedTimestamp";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastModifiedTimestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactContacts_args(");
      bool __first = true;
      if (__isset.lastModifiedTimestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastModifiedTimestamp: ");
        __sb.Append(LastModifiedTimestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactContacts_result : TBase
  {
    private List<CompactContact> _success;
    private TalkException _e;

    public List<CompactContact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCompactContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompactContact>();
                  TList _list664 = iprot.ReadListBegin();
                  for( int _i665 = 0; _i665 < _list664.Count; ++_i665)
                  {
                    CompactContact _elem666;
                    _elem666 = new CompactContact();
                    _elem666.Read(iprot);
                    Success.Add(_elem666);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompactContact _iter667 in Success)
              {
                _iter667.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContactsForChannel_args : TBase
  {
    private List<string> _ids;

    public List<string> Ids
    {
      get
      {
        return _ids;
      }
      set
      {
        __isset.ids = true;
        this._ids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ids;
    }

    public getContactsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  Ids = new List<string>();
                  TList _list668 = iprot.ReadListBegin();
                  for( int _i669 = 0; _i669 < _list668.Count; ++_i669)
                  {
                    string _elem670;
                    _elem670 = iprot.ReadString();
                    Ids.Add(_elem670);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContactsForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ids != null && __isset.ids) {
          field.Name = "ids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Ids.Count));
            foreach (string _iter671 in Ids)
            {
              oprot.WriteString(_iter671);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContactsForChannel_args(");
      bool __first = true;
      if (Ids != null && __isset.ids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ids: ");
        __sb.Append(Ids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContactsForChannel_result : TBase
  {
    private List<Contact> _success;
    private TalkException _e;

    public List<Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getContactsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Contact>();
                  TList _list672 = iprot.ReadListBegin();
                  for( int _i673 = 0; _i673 < _list672.Count; ++_i673)
                  {
                    Contact _elem674;
                    _elem674 = new Contact();
                    _elem674.Read(iprot);
                    Success.Add(_elem674);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContactsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Contact _iter675 in Success)
              {
                _iter675.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContactsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDisplayName_args : TBase
  {
    private string _mid;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
    }

    public getDisplayName_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDisplayName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDisplayName_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDisplayName_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getDisplayName_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDisplayName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDisplayName_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFavoriteMidsForChannel_args : TBase
  {

    public getFavoriteMidsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFavoriteMidsForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFavoriteMidsForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFavoriteMidsForChannel_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getFavoriteMidsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list676 = iprot.ReadListBegin();
                  for( int _i677 = 0; _i677 < _list676.Count; ++_i677)
                  {
                    string _elem678;
                    _elem678 = iprot.ReadString();
                    Success.Add(_elem678);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFavoriteMidsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter679 in Success)
              {
                oprot.WriteString(_iter679);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFavoriteMidsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFriendMids_args : TBase
  {

    public getFriendMids_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFriendMids_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFriendMids_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFriendMids_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getFriendMids_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list680 = iprot.ReadListBegin();
                  for( int _i681 = 0; _i681 < _list680.Count; ++_i681)
                  {
                    string _elem682;
                    _elem682 = iprot.ReadString();
                    Success.Add(_elem682);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFriendMids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter683 in Success)
              {
                oprot.WriteString(_iter683);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFriendMids_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupMemberMids_args : TBase
  {
    private string _groupId;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
    }

    public getGroupMemberMids_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupMemberMids_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupMemberMids_args(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupMemberMids_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupMemberMids_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list684 = iprot.ReadListBegin();
                  for( int _i685 = 0; _i685 < _list684.Count; ++_i685)
                  {
                    string _elem686;
                    _elem686 = iprot.ReadString();
                    Success.Add(_elem686);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupMemberMids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter687 in Success)
              {
                oprot.WriteString(_iter687);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupMemberMids_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupsForChannel_args : TBase
  {
    private List<string> _groupIds;

    public List<string> GroupIds
    {
      get
      {
        return _groupIds;
      }
      set
      {
        __isset.groupIds = true;
        this._groupIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupIds;
    }

    public getGroupsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  GroupIds = new List<string>();
                  TList _list688 = iprot.ReadListBegin();
                  for( int _i689 = 0; _i689 < _list688.Count; ++_i689)
                  {
                    string _elem690;
                    _elem690 = iprot.ReadString();
                    GroupIds.Add(_elem690);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupsForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupIds != null && __isset.groupIds) {
          field.Name = "groupIds";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, GroupIds.Count));
            foreach (string _iter691 in GroupIds)
            {
              oprot.WriteString(_iter691);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupsForChannel_args(");
      bool __first = true;
      if (GroupIds != null && __isset.groupIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupIds: ");
        __sb.Append(GroupIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupsForChannel_result : TBase
  {
    private List<@Group> _success;
    private TalkException _e;

    public List<@Group> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<@Group>();
                  TList _list692 = iprot.ReadListBegin();
                  for( int _i693 = 0; _i693 < _list692.Count; ++_i693)
                  {
                    @Group _elem694;
                    _elem694 = new @Group();
                    _elem694.Read(iprot);
                    Success.Add(_elem694);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (@Group _iter695 in Success)
              {
                _iter695.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getIdentityCredential_args : TBase
  {

    public getIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getIdentityCredential_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getIdentityCredential_result : TBase
  {
    private IdentityCredential _success;
    private TalkException _e;

    public IdentityCredential Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new IdentityCredential();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getIdentityCredential_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinedGroupIdsForChannel_args : TBase
  {

    public getJoinedGroupIdsForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinedGroupIdsForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinedGroupIdsForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJoinedGroupIdsForChannel_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getJoinedGroupIdsForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list696 = iprot.ReadListBegin();
                  for( int _i697 = 0; _i697 < _list696.Count; ++_i697)
                  {
                    string _elem698;
                    _elem698 = iprot.ReadString();
                    Success.Add(_elem698);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJoinedGroupIdsForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter699 in Success)
              {
                oprot.WriteString(_iter699);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJoinedGroupIdsForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMetaProfile_args : TBase
  {

    public getMetaProfile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMetaProfile_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMetaProfile_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMetaProfile_result : TBase
  {
    private MetaProfile _success;
    private TalkException _e;

    public MetaProfile Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMetaProfile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MetaProfile();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMetaProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMetaProfile_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMid_args : TBase
  {

    public getMid_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMid_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMid_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMid_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMid_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMid_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrimaryClientForChannel_args : TBase
  {

    public getPrimaryClientForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrimaryClientForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrimaryClientForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrimaryClientForChannel_result : TBase
  {
    private SimpleChannelClient _success;
    private TalkException _e;

    public SimpleChannelClient Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPrimaryClientForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SimpleChannelClient();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrimaryClientForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrimaryClientForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProfileForChannel_args : TBase
  {

    public getProfileForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProfileForChannel_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProfileForChannel_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProfileForChannel_result : TBase
  {
    private Profile _success;
    private TalkException _e;

    public Profile Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getProfileForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Profile();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProfileForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProfileForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSimpleChannelContacts_args : TBase
  {
    private List<string> _ids;

    public List<string> Ids
    {
      get
      {
        return _ids;
      }
      set
      {
        __isset.ids = true;
        this._ids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ids;
    }

    public getSimpleChannelContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Ids = new List<string>();
                  TList _list700 = iprot.ReadListBegin();
                  for( int _i701 = 0; _i701 < _list700.Count; ++_i701)
                  {
                    string _elem702;
                    _elem702 = iprot.ReadString();
                    Ids.Add(_elem702);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSimpleChannelContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ids != null && __isset.ids) {
          field.Name = "ids";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Ids.Count));
            foreach (string _iter703 in Ids)
            {
              oprot.WriteString(_iter703);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSimpleChannelContacts_args(");
      bool __first = true;
      if (Ids != null && __isset.ids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ids: ");
        __sb.Append(Ids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSimpleChannelContacts_result : TBase
  {
    private List<SimpleChannelContact> _success;
    private TalkException _e;

    public List<SimpleChannelContact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSimpleChannelContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SimpleChannelContact>();
                  TList _list704 = iprot.ReadListBegin();
                  for( int _i705 = 0; _i705 < _list704.Count; ++_i705)
                  {
                    SimpleChannelContact _elem706;
                    _elem706 = new SimpleChannelContact();
                    _elem706.Read(iprot);
                    Success.Add(_elem706);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSimpleChannelContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SimpleChannelContact _iter707 in Success)
              {
                _iter707.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSimpleChannelContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserCountryForBilling_args : TBase
  {
    private string _country;
    private string _remoteIp;

    public string Country
    {
      get
      {
        return _country;
      }
      set
      {
        __isset.country = true;
        this._country = value;
      }
    }

    public string RemoteIp
    {
      get
      {
        return _remoteIp;
      }
      set
      {
        __isset.remoteIp = true;
        this._remoteIp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool country;
      public bool remoteIp;
    }

    public getUserCountryForBilling_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Country = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                RemoteIp = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserCountryForBilling_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Country != null && __isset.country) {
          field.Name = "country";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Country);
          oprot.WriteFieldEnd();
        }
        if (RemoteIp != null && __isset.remoteIp) {
          field.Name = "remoteIp";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RemoteIp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserCountryForBilling_args(");
      bool __first = true;
      if (Country != null && __isset.country) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Country: ");
        __sb.Append(Country);
      }
      if (RemoteIp != null && __isset.remoteIp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RemoteIp: ");
        __sb.Append(RemoteIp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserCountryForBilling_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserCountryForBilling_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserCountryForBilling_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserCountryForBilling_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserCreateTime_args : TBase
  {

    public getUserCreateTime_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserCreateTime_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserCreateTime_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserCreateTime_result : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserCreateTime_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserCreateTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserCreateTime_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserIdentities_args : TBase
  {

    public getUserIdentities_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserIdentities_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserIdentities_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserIdentities_result : TBase
  {
    private Dictionary<RegistrationType, string> _success;
    private TalkException _e;

    public Dictionary<RegistrationType, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserIdentities_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<RegistrationType, string>();
                  TMap _map708 = iprot.ReadMapBegin();
                  for( int _i709 = 0; _i709 < _map708.Count; ++_i709)
                  {
                    RegistrationType _key710;
                    string _val711;
                    _key710 = (RegistrationType)iprot.ReadI32();
                    _val711 = iprot.ReadString();
                    Success[_key710] = _val711;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserIdentities_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.I32, TType.String, Success.Count));
              foreach (RegistrationType _iter712 in Success.Keys)
              {
                oprot.WriteI32((int)_iter712);
                oprot.WriteString(Success[_iter712]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserIdentities_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserLanguage_args : TBase
  {

    public getUserLanguage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserLanguage_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserLanguage_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserLanguage_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserLanguage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserLanguage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserLanguage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserMidsWhoAddedMe_args : TBase
  {

    public getUserMidsWhoAddedMe_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserMidsWhoAddedMe_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserMidsWhoAddedMe_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserMidsWhoAddedMe_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserMidsWhoAddedMe_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list713 = iprot.ReadListBegin();
                  for( int _i714 = 0; _i714 < _list713.Count; ++_i714)
                  {
                    string _elem715;
                    _elem715 = iprot.ReadString();
                    Success.Add(_elem715);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserMidsWhoAddedMe_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter716 in Success)
              {
                oprot.WriteString(_iter716);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserMidsWhoAddedMe_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isGroupMember_args : TBase
  {
    private string _groupId;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
    }

    public isGroupMember_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isGroupMember_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isGroupMember_args(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isGroupMember_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public isGroupMember_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isGroupMember_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isGroupMember_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isInContact_args : TBase
  {
    private string _mid;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
    }

    public isInContact_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isInContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isInContact_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isInContact_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public isInContact_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isInContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isInContact_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerChannelCP_args : TBase
  {
    private string _cpId;
    private string _registerPassword;

    public string CpId
    {
      get
      {
        return _cpId;
      }
      set
      {
        __isset.cpId = true;
        this._cpId = value;
      }
    }

    public string RegisterPassword
    {
      get
      {
        return _registerPassword;
      }
      set
      {
        __isset.registerPassword = true;
        this._registerPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cpId;
      public bool registerPassword;
    }

    public registerChannelCP_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                CpId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                RegisterPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerChannelCP_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CpId != null && __isset.cpId) {
          field.Name = "cpId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CpId);
          oprot.WriteFieldEnd();
        }
        if (RegisterPassword != null && __isset.registerPassword) {
          field.Name = "registerPassword";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegisterPassword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerChannelCP_args(");
      bool __first = true;
      if (CpId != null && __isset.cpId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CpId: ");
        __sb.Append(CpId);
      }
      if (RegisterPassword != null && __isset.registerPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegisterPassword: ");
        __sb.Append(RegisterPassword);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerChannelCP_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerChannelCP_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerChannelCP_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerChannelCP_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeNotificationStatus_args : TBase
  {
    private NotificationStatus _notificationStatus;

    /// <summary>
    /// 
    /// <seealso cref="NotificationStatus"/>
    /// </summary>
    public NotificationStatus NotificationStatus
    {
      get
      {
        return _notificationStatus;
      }
      set
      {
        __isset.notificationStatus = true;
        this._notificationStatus = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool notificationStatus;
    }

    public removeNotificationStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                NotificationStatus = (NotificationStatus)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeNotificationStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.notificationStatus) {
          field.Name = "notificationStatus";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)NotificationStatus);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeNotificationStatus_args(");
      bool __first = true;
      if (__isset.notificationStatus) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotificationStatus: ");
        __sb.Append(NotificationStatus);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeNotificationStatus_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public removeNotificationStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeNotificationStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeNotificationStatus_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageForChannel_args : TBase
  {
    private Message _message;

    public Message Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool message;
    }

    public sendMessageForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageForChannel_args(");
      bool __first = true;
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageForChannel_result : TBase
  {
    private Message _success;
    private TalkException _e;

    public Message Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendMessageForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageForChannel_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendPinCodeOperation_args : TBase
  {
    private string _verifier;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
    }

    public sendPinCodeOperation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendPinCodeOperation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendPinCodeOperation_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendPinCodeOperation_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public sendPinCodeOperation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendPinCodeOperation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendPinCodeOperation_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProfileAttributeForChannel_args : TBase
  {
    private ProfileAttribute _profileAttribute;
    private string _value;

    /// <summary>
    /// 
    /// <seealso cref="ProfileAttribute"/>
    /// </summary>
    public ProfileAttribute ProfileAttribute
    {
      get
      {
        return _profileAttribute;
      }
      set
      {
        __isset.profileAttribute = true;
        this._profileAttribute = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool profileAttribute;
      public bool @value;
    }

    public updateProfileAttributeForChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                ProfileAttribute = (ProfileAttribute)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProfileAttributeForChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.profileAttribute) {
          field.Name = "profileAttribute";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ProfileAttribute);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProfileAttributeForChannel_args(");
      bool __first = true;
      if (__isset.profileAttribute) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProfileAttribute: ");
        __sb.Append(ProfileAttribute);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProfileAttributeForChannel_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateProfileAttributeForChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProfileAttributeForChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProfileAttributeForChannel_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
