/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class GetSquareMemberRelationsResponse : TBase
{
  private List<SquareMember> _squareMembers;
  private Dictionary<string, SquareMemberRelation> _relations;
  private string _continuationToken;

  public List<SquareMember> SquareMembers
  {
    get
    {
      return _squareMembers;
    }
    set
    {
      __isset.squareMembers = true;
      this._squareMembers = value;
    }
  }

  public Dictionary<string, SquareMemberRelation> Relations
  {
    get
    {
      return _relations;
    }
    set
    {
      __isset.relations = true;
      this._relations = value;
    }
  }

  public string ContinuationToken
  {
    get
    {
      return _continuationToken;
    }
    set
    {
      __isset.continuationToken = true;
      this._continuationToken = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool squareMembers;
    public bool relations;
    public bool continuationToken;
  }

  public GetSquareMemberRelationsResponse() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                SquareMembers = new List<SquareMember>();
                TList _list457 = iprot.ReadListBegin();
                for( int _i458 = 0; _i458 < _list457.Count; ++_i458)
                {
                  SquareMember _elem459;
                  _elem459 = new SquareMember();
                  _elem459.Read(iprot);
                  SquareMembers.Add(_elem459);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Map) {
              {
                Relations = new Dictionary<string, SquareMemberRelation>();
                TMap _map460 = iprot.ReadMapBegin();
                for( int _i461 = 0; _i461 < _map460.Count; ++_i461)
                {
                  string _key462;
                  SquareMemberRelation _val463;
                  _key462 = iprot.ReadString();
                  _val463 = new SquareMemberRelation();
                  _val463.Read(iprot);
                  Relations[_key462] = _val463;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ContinuationToken = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("GetSquareMemberRelationsResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SquareMembers != null && __isset.squareMembers) {
        field.Name = "squareMembers";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SquareMembers.Count));
          foreach (SquareMember _iter464 in SquareMembers)
          {
            _iter464.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Relations != null && __isset.relations) {
        field.Name = "relations";
        field.Type = TType.Map;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Relations.Count));
          foreach (string _iter465 in Relations.Keys)
          {
            oprot.WriteString(_iter465);
            Relations[_iter465].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ContinuationToken != null && __isset.continuationToken) {
        field.Name = "continuationToken";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ContinuationToken);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("GetSquareMemberRelationsResponse(");
    bool __first = true;
    if (SquareMembers != null && __isset.squareMembers) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SquareMembers: ");
      __sb.Append(SquareMembers);
    }
    if (Relations != null && __isset.relations) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Relations: ");
      __sb.Append(Relations);
    }
    if (ContinuationToken != null && __isset.continuationToken) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ContinuationToken: ");
      __sb.Append(ContinuationToken);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

