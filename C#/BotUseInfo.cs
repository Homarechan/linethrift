/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class BotUseInfo : TBase
{
  private bool _botUseAgreementAccepted;
  private bool _botInFriends;
  private string _primaryApplication;
  private string _locale;

  public bool BotUseAgreementAccepted
  {
    get
    {
      return _botUseAgreementAccepted;
    }
    set
    {
      __isset.botUseAgreementAccepted = true;
      this._botUseAgreementAccepted = value;
    }
  }

  public bool BotInFriends
  {
    get
    {
      return _botInFriends;
    }
    set
    {
      __isset.botInFriends = true;
      this._botInFriends = value;
    }
  }

  public string PrimaryApplication
  {
    get
    {
      return _primaryApplication;
    }
    set
    {
      __isset.primaryApplication = true;
      this._primaryApplication = value;
    }
  }

  public string Locale
  {
    get
    {
      return _locale;
    }
    set
    {
      __isset.locale = true;
      this._locale = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool botUseAgreementAccepted;
    public bool botInFriends;
    public bool primaryApplication;
    public bool locale;
  }

  public BotUseInfo() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              BotUseAgreementAccepted = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              BotInFriends = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              PrimaryApplication = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Locale = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("BotUseInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.botUseAgreementAccepted) {
        field.Name = "botUseAgreementAccepted";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(BotUseAgreementAccepted);
        oprot.WriteFieldEnd();
      }
      if (__isset.botInFriends) {
        field.Name = "botInFriends";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(BotInFriends);
        oprot.WriteFieldEnd();
      }
      if (PrimaryApplication != null && __isset.primaryApplication) {
        field.Name = "primaryApplication";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PrimaryApplication);
        oprot.WriteFieldEnd();
      }
      if (Locale != null && __isset.locale) {
        field.Name = "locale";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Locale);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("BotUseInfo(");
    bool __first = true;
    if (__isset.botUseAgreementAccepted) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BotUseAgreementAccepted: ");
      __sb.Append(BotUseAgreementAccepted);
    }
    if (__isset.botInFriends) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("BotInFriends: ");
      __sb.Append(BotInFriends);
    }
    if (PrimaryApplication != null && __isset.primaryApplication) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrimaryApplication: ");
      __sb.Append(PrimaryApplication);
    }
    if (Locale != null && __isset.locale) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Locale: ");
      __sb.Append(Locale);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

