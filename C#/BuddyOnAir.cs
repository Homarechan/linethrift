/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class BuddyOnAir : TBase
{
  private string _mid;
  private long _freshnessLifetime;
  private string _onAirId;
  private bool _onAir;
  private string _text;
  private long _viewerCount;
  private long _targetCount;
  private BuddyOnAirType _onAirType;
  private BuddyOnAirUrls _onAirUrls;

  public string Mid
  {
    get
    {
      return _mid;
    }
    set
    {
      __isset.mid = true;
      this._mid = value;
    }
  }

  public long FreshnessLifetime
  {
    get
    {
      return _freshnessLifetime;
    }
    set
    {
      __isset.freshnessLifetime = true;
      this._freshnessLifetime = value;
    }
  }

  public string OnAirId
  {
    get
    {
      return _onAirId;
    }
    set
    {
      __isset.onAirId = true;
      this._onAirId = value;
    }
  }

  public bool OnAir
  {
    get
    {
      return _onAir;
    }
    set
    {
      __isset.onAir = true;
      this._onAir = value;
    }
  }

  public string Text
  {
    get
    {
      return _text;
    }
    set
    {
      __isset.text = true;
      this._text = value;
    }
  }

  public long ViewerCount
  {
    get
    {
      return _viewerCount;
    }
    set
    {
      __isset.viewerCount = true;
      this._viewerCount = value;
    }
  }

  public long TargetCount
  {
    get
    {
      return _targetCount;
    }
    set
    {
      __isset.targetCount = true;
      this._targetCount = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="BuddyOnAirType"/>
  /// </summary>
  public BuddyOnAirType OnAirType
  {
    get
    {
      return _onAirType;
    }
    set
    {
      __isset.onAirType = true;
      this._onAirType = value;
    }
  }

  public BuddyOnAirUrls OnAirUrls
  {
    get
    {
      return _onAirUrls;
    }
    set
    {
      __isset.onAirUrls = true;
      this._onAirUrls = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool mid;
    public bool freshnessLifetime;
    public bool onAirId;
    public bool onAir;
    public bool text;
    public bool viewerCount;
    public bool targetCount;
    public bool onAirType;
    public bool onAirUrls;
  }

  public BuddyOnAir() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Mid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              FreshnessLifetime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              OnAirId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Bool) {
              OnAir = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.I64) {
              ViewerCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              TargetCount = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 31:
            if (field.Type == TType.I32) {
              OnAirType = (BuddyOnAirType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 32:
            if (field.Type == TType.Struct) {
              OnAirUrls = new BuddyOnAirUrls();
              OnAirUrls.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("BuddyOnAir");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Mid != null && __isset.mid) {
        field.Name = "mid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Mid);
        oprot.WriteFieldEnd();
      }
      if (__isset.freshnessLifetime) {
        field.Name = "freshnessLifetime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FreshnessLifetime);
        oprot.WriteFieldEnd();
      }
      if (OnAirId != null && __isset.onAirId) {
        field.Name = "onAirId";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OnAirId);
        oprot.WriteFieldEnd();
      }
      if (__isset.onAir) {
        field.Name = "onAir";
        field.Type = TType.Bool;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(OnAir);
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      if (__isset.viewerCount) {
        field.Name = "viewerCount";
        field.Type = TType.I64;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ViewerCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.targetCount) {
        field.Name = "targetCount";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TargetCount);
        oprot.WriteFieldEnd();
      }
      if (__isset.onAirType) {
        field.Name = "onAirType";
        field.Type = TType.I32;
        field.ID = 31;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)OnAirType);
        oprot.WriteFieldEnd();
      }
      if (OnAirUrls != null && __isset.onAirUrls) {
        field.Name = "onAirUrls";
        field.Type = TType.Struct;
        field.ID = 32;
        oprot.WriteFieldBegin(field);
        OnAirUrls.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("BuddyOnAir(");
    bool __first = true;
    if (Mid != null && __isset.mid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Mid: ");
      __sb.Append(Mid);
    }
    if (__isset.freshnessLifetime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FreshnessLifetime: ");
      __sb.Append(FreshnessLifetime);
    }
    if (OnAirId != null && __isset.onAirId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OnAirId: ");
      __sb.Append(OnAirId);
    }
    if (__isset.onAir) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OnAir: ");
      __sb.Append(OnAir);
    }
    if (Text != null && __isset.text) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Text: ");
      __sb.Append(Text);
    }
    if (__isset.viewerCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ViewerCount: ");
      __sb.Append(ViewerCount);
    }
    if (__isset.targetCount) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TargetCount: ");
      __sb.Append(TargetCount);
    }
    if (__isset.onAirType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OnAirType: ");
      __sb.Append(OnAirType);
    }
    if (OnAirUrls != null && __isset.onAirUrls) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OnAirUrls: ");
      __sb.Append(OnAirUrls== null ? "<null>" : OnAirUrls.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

