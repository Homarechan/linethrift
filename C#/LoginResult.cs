/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class LoginResult : TBase
{
  private string _authToken;
  private string _certificate;
  private string _verifier;
  private string _pinCode;
  private LoginResultType _type;
  private long _lastPrimaryBindTime;
  private string _displayMessage;
  private VerificationSessionData _sessionForSMSConfirm;

  public string AuthToken
  {
    get
    {
      return _authToken;
    }
    set
    {
      __isset.authToken = true;
      this._authToken = value;
    }
  }

  public string Certificate
  {
    get
    {
      return _certificate;
    }
    set
    {
      __isset.certificate = true;
      this._certificate = value;
    }
  }

  public string Verifier
  {
    get
    {
      return _verifier;
    }
    set
    {
      __isset.verifier = true;
      this._verifier = value;
    }
  }

  public string PinCode
  {
    get
    {
      return _pinCode;
    }
    set
    {
      __isset.pinCode = true;
      this._pinCode = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="LoginResultType"/>
  /// </summary>
  public LoginResultType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public long LastPrimaryBindTime
  {
    get
    {
      return _lastPrimaryBindTime;
    }
    set
    {
      __isset.lastPrimaryBindTime = true;
      this._lastPrimaryBindTime = value;
    }
  }

  public string DisplayMessage
  {
    get
    {
      return _displayMessage;
    }
    set
    {
      __isset.displayMessage = true;
      this._displayMessage = value;
    }
  }

  public VerificationSessionData SessionForSMSConfirm
  {
    get
    {
      return _sessionForSMSConfirm;
    }
    set
    {
      __isset.sessionForSMSConfirm = true;
      this._sessionForSMSConfirm = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool authToken;
    public bool certificate;
    public bool verifier;
    public bool pinCode;
    public bool type;
    public bool lastPrimaryBindTime;
    public bool displayMessage;
    public bool sessionForSMSConfirm;
  }

  public LoginResult() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AuthToken = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Certificate = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Verifier = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              PinCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Type = (LoginResultType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              LastPrimaryBindTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              DisplayMessage = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Struct) {
              SessionForSMSConfirm = new VerificationSessionData();
              SessionForSMSConfirm.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("LoginResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AuthToken != null && __isset.authToken) {
        field.Name = "authToken";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AuthToken);
        oprot.WriteFieldEnd();
      }
      if (Certificate != null && __isset.certificate) {
        field.Name = "certificate";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Certificate);
        oprot.WriteFieldEnd();
      }
      if (Verifier != null && __isset.verifier) {
        field.Name = "verifier";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Verifier);
        oprot.WriteFieldEnd();
      }
      if (PinCode != null && __isset.pinCode) {
        field.Name = "pinCode";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PinCode);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.lastPrimaryBindTime) {
        field.Name = "lastPrimaryBindTime";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(LastPrimaryBindTime);
        oprot.WriteFieldEnd();
      }
      if (DisplayMessage != null && __isset.displayMessage) {
        field.Name = "displayMessage";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DisplayMessage);
        oprot.WriteFieldEnd();
      }
      if (SessionForSMSConfirm != null && __isset.sessionForSMSConfirm) {
        field.Name = "sessionForSMSConfirm";
        field.Type = TType.Struct;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        SessionForSMSConfirm.Write(oprot);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("LoginResult(");
    bool __first = true;
    if (AuthToken != null && __isset.authToken) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AuthToken: ");
      __sb.Append(AuthToken);
    }
    if (Certificate != null && __isset.certificate) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Certificate: ");
      __sb.Append(Certificate);
    }
    if (Verifier != null && __isset.verifier) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Verifier: ");
      __sb.Append(Verifier);
    }
    if (PinCode != null && __isset.pinCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PinCode: ");
      __sb.Append(PinCode);
    }
    if (__isset.type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Type: ");
      __sb.Append(Type);
    }
    if (__isset.lastPrimaryBindTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("LastPrimaryBindTime: ");
      __sb.Append(LastPrimaryBindTime);
    }
    if (DisplayMessage != null && __isset.displayMessage) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DisplayMessage: ");
      __sb.Append(DisplayMessage);
    }
    if (SessionForSMSConfirm != null && __isset.sessionForSMSConfirm) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SessionForSMSConfirm: ");
      __sb.Append(SessionForSMSConfirm== null ? "<null>" : SessionForSMSConfirm.ToString());
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

