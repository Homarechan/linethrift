/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ChannelService {
  public interface ISync {
    OTPResult issueOTP(string channelId);
    ChannelToken approveChannelAndIssueChannelToken(string channelId);
    string approveChannelAndIssueRequestToken(string channelId, string otpId);
    NotificationFetchResult fetchNotificationItems(long localRev);
    ApprovedChannelInfos getApprovedChannels(long lastSynced, string locale);
    ChannelInfo getChannelInfo(string channelId, string locale);
    ChannelNotificationSetting getChannelNotificationSetting(string channelId, string locale);
    List<ChannelNotificationSetting> getChannelNotificationSettings(string locale);
    ChannelInfos getChannels(long lastSynced, string locale);
    ChannelDomains getDomains(long lastSynced);
    FriendChannelMatricesResponse getFriendChannelMatrices(List<string> channelIds);
    bool updateChannelSettings(ChannelSettings channelSettings);
    ChannelDomains getCommonDomains(long lastSynced);
    int getNotificationBadgeCount(long localRev);
    ChannelToken issueChannelToken(string channelId);
    string issueRequestToken(string channelId, string otpId);
    RequestTokenResponse issueRequestTokenWithAuthScheme(string channelId, string otpId, List<string> authScheme, string returnUrl);
    string issueRequestTokenForAutoLogin(string channelId, string otpId, string redirectUrl);
    List<string> getUpdatedChannelIds(List<ChannelIdWithLastUpdated> channelIds);
    string reserveCoinUse(CoinUseReservation request, string locale);
    void revokeChannel(string channelId);
    ChannelSyncDatas syncChannelData(long lastSynced, string locale);
    void updateChannelNotificationSetting(List<ChannelNotificationSetting> setting);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_issueOTP(AsyncCallback callback, object state, string channelId);
    OTPResult End_issueOTP(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_approveChannelAndIssueChannelToken(AsyncCallback callback, object state, string channelId);
    ChannelToken End_approveChannelAndIssueChannelToken(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_approveChannelAndIssueRequestToken(AsyncCallback callback, object state, string channelId, string otpId);
    string End_approveChannelAndIssueRequestToken(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fetchNotificationItems(AsyncCallback callback, object state, long localRev);
    NotificationFetchResult End_fetchNotificationItems(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getApprovedChannels(AsyncCallback callback, object state, long lastSynced, string locale);
    ApprovedChannelInfos End_getApprovedChannels(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getChannelInfo(AsyncCallback callback, object state, string channelId, string locale);
    ChannelInfo End_getChannelInfo(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getChannelNotificationSetting(AsyncCallback callback, object state, string channelId, string locale);
    ChannelNotificationSetting End_getChannelNotificationSetting(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getChannelNotificationSettings(AsyncCallback callback, object state, string locale);
    List<ChannelNotificationSetting> End_getChannelNotificationSettings(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getChannels(AsyncCallback callback, object state, long lastSynced, string locale);
    ChannelInfos End_getChannels(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getDomains(AsyncCallback callback, object state, long lastSynced);
    ChannelDomains End_getDomains(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getFriendChannelMatrices(AsyncCallback callback, object state, List<string> channelIds);
    FriendChannelMatricesResponse End_getFriendChannelMatrices(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateChannelSettings(AsyncCallback callback, object state, ChannelSettings channelSettings);
    bool End_updateChannelSettings(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCommonDomains(AsyncCallback callback, object state, long lastSynced);
    ChannelDomains End_getCommonDomains(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getNotificationBadgeCount(AsyncCallback callback, object state, long localRev);
    int End_getNotificationBadgeCount(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_issueChannelToken(AsyncCallback callback, object state, string channelId);
    ChannelToken End_issueChannelToken(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_issueRequestToken(AsyncCallback callback, object state, string channelId, string otpId);
    string End_issueRequestToken(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_issueRequestTokenWithAuthScheme(AsyncCallback callback, object state, string channelId, string otpId, List<string> authScheme, string returnUrl);
    RequestTokenResponse End_issueRequestTokenWithAuthScheme(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_issueRequestTokenForAutoLogin(AsyncCallback callback, object state, string channelId, string otpId, string redirectUrl);
    string End_issueRequestTokenForAutoLogin(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUpdatedChannelIds(AsyncCallback callback, object state, List<ChannelIdWithLastUpdated> channelIds);
    List<string> End_getUpdatedChannelIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reserveCoinUse(AsyncCallback callback, object state, CoinUseReservation request, string locale);
    string End_reserveCoinUse(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_revokeChannel(AsyncCallback callback, object state, string channelId);
    void End_revokeChannel(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_syncChannelData(AsyncCallback callback, object state, long lastSynced, string locale);
    ChannelSyncDatas End_syncChannelData(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateChannelNotificationSetting(AsyncCallback callback, object state, List<ChannelNotificationSetting> setting);
    void End_updateChannelNotificationSetting(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_issueOTP(AsyncCallback callback, object state, string channelId)
    {
      return send_issueOTP(callback, state, channelId);
    }

    public OTPResult End_issueOTP(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_issueOTP();
    }

    #endif

    public OTPResult issueOTP(string channelId)
    {
      #if !SILVERLIGHT
      send_issueOTP(channelId);
      return recv_issueOTP();

      #else
      var asyncResult = Begin_issueOTP(null, null, channelId);
      return End_issueOTP(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_issueOTP(AsyncCallback callback, object state, string channelId)
    #else
    public void send_issueOTP(string channelId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("issueOTP", TMessageType.Call, seqid_));
      issueOTP_args args = new issueOTP_args();
      args.ChannelId = channelId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public OTPResult recv_issueOTP()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      issueOTP_result result = new issueOTP_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "issueOTP failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_approveChannelAndIssueChannelToken(AsyncCallback callback, object state, string channelId)
    {
      return send_approveChannelAndIssueChannelToken(callback, state, channelId);
    }

    public ChannelToken End_approveChannelAndIssueChannelToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_approveChannelAndIssueChannelToken();
    }

    #endif

    public ChannelToken approveChannelAndIssueChannelToken(string channelId)
    {
      #if !SILVERLIGHT
      send_approveChannelAndIssueChannelToken(channelId);
      return recv_approveChannelAndIssueChannelToken();

      #else
      var asyncResult = Begin_approveChannelAndIssueChannelToken(null, null, channelId);
      return End_approveChannelAndIssueChannelToken(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_approveChannelAndIssueChannelToken(AsyncCallback callback, object state, string channelId)
    #else
    public void send_approveChannelAndIssueChannelToken(string channelId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("approveChannelAndIssueChannelToken", TMessageType.Call, seqid_));
      approveChannelAndIssueChannelToken_args args = new approveChannelAndIssueChannelToken_args();
      args.ChannelId = channelId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelToken recv_approveChannelAndIssueChannelToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      approveChannelAndIssueChannelToken_result result = new approveChannelAndIssueChannelToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "approveChannelAndIssueChannelToken failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_approveChannelAndIssueRequestToken(AsyncCallback callback, object state, string channelId, string otpId)
    {
      return send_approveChannelAndIssueRequestToken(callback, state, channelId, otpId);
    }

    public string End_approveChannelAndIssueRequestToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_approveChannelAndIssueRequestToken();
    }

    #endif

    public string approveChannelAndIssueRequestToken(string channelId, string otpId)
    {
      #if !SILVERLIGHT
      send_approveChannelAndIssueRequestToken(channelId, otpId);
      return recv_approveChannelAndIssueRequestToken();

      #else
      var asyncResult = Begin_approveChannelAndIssueRequestToken(null, null, channelId, otpId);
      return End_approveChannelAndIssueRequestToken(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_approveChannelAndIssueRequestToken(AsyncCallback callback, object state, string channelId, string otpId)
    #else
    public void send_approveChannelAndIssueRequestToken(string channelId, string otpId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("approveChannelAndIssueRequestToken", TMessageType.Call, seqid_));
      approveChannelAndIssueRequestToken_args args = new approveChannelAndIssueRequestToken_args();
      args.ChannelId = channelId;
      args.OtpId = otpId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_approveChannelAndIssueRequestToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      approveChannelAndIssueRequestToken_result result = new approveChannelAndIssueRequestToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "approveChannelAndIssueRequestToken failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_fetchNotificationItems(AsyncCallback callback, object state, long localRev)
    {
      return send_fetchNotificationItems(callback, state, localRev);
    }

    public NotificationFetchResult End_fetchNotificationItems(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchNotificationItems();
    }

    #endif

    public NotificationFetchResult fetchNotificationItems(long localRev)
    {
      #if !SILVERLIGHT
      send_fetchNotificationItems(localRev);
      return recv_fetchNotificationItems();

      #else
      var asyncResult = Begin_fetchNotificationItems(null, null, localRev);
      return End_fetchNotificationItems(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchNotificationItems(AsyncCallback callback, object state, long localRev)
    #else
    public void send_fetchNotificationItems(long localRev)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("fetchNotificationItems", TMessageType.Call, seqid_));
      fetchNotificationItems_args args = new fetchNotificationItems_args();
      args.LocalRev = localRev;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public NotificationFetchResult recv_fetchNotificationItems()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchNotificationItems_result result = new fetchNotificationItems_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchNotificationItems failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getApprovedChannels(AsyncCallback callback, object state, long lastSynced, string locale)
    {
      return send_getApprovedChannels(callback, state, lastSynced, locale);
    }

    public ApprovedChannelInfos End_getApprovedChannels(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getApprovedChannels();
    }

    #endif

    public ApprovedChannelInfos getApprovedChannels(long lastSynced, string locale)
    {
      #if !SILVERLIGHT
      send_getApprovedChannels(lastSynced, locale);
      return recv_getApprovedChannels();

      #else
      var asyncResult = Begin_getApprovedChannels(null, null, lastSynced, locale);
      return End_getApprovedChannels(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getApprovedChannels(AsyncCallback callback, object state, long lastSynced, string locale)
    #else
    public void send_getApprovedChannels(long lastSynced, string locale)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getApprovedChannels", TMessageType.Call, seqid_));
      getApprovedChannels_args args = new getApprovedChannels_args();
      args.LastSynced = lastSynced;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ApprovedChannelInfos recv_getApprovedChannels()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getApprovedChannels_result result = new getApprovedChannels_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getApprovedChannels failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getChannelInfo(AsyncCallback callback, object state, string channelId, string locale)
    {
      return send_getChannelInfo(callback, state, channelId, locale);
    }

    public ChannelInfo End_getChannelInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getChannelInfo();
    }

    #endif

    public ChannelInfo getChannelInfo(string channelId, string locale)
    {
      #if !SILVERLIGHT
      send_getChannelInfo(channelId, locale);
      return recv_getChannelInfo();

      #else
      var asyncResult = Begin_getChannelInfo(null, null, channelId, locale);
      return End_getChannelInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getChannelInfo(AsyncCallback callback, object state, string channelId, string locale)
    #else
    public void send_getChannelInfo(string channelId, string locale)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getChannelInfo", TMessageType.Call, seqid_));
      getChannelInfo_args args = new getChannelInfo_args();
      args.ChannelId = channelId;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelInfo recv_getChannelInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getChannelInfo_result result = new getChannelInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChannelInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getChannelNotificationSetting(AsyncCallback callback, object state, string channelId, string locale)
    {
      return send_getChannelNotificationSetting(callback, state, channelId, locale);
    }

    public ChannelNotificationSetting End_getChannelNotificationSetting(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getChannelNotificationSetting();
    }

    #endif

    public ChannelNotificationSetting getChannelNotificationSetting(string channelId, string locale)
    {
      #if !SILVERLIGHT
      send_getChannelNotificationSetting(channelId, locale);
      return recv_getChannelNotificationSetting();

      #else
      var asyncResult = Begin_getChannelNotificationSetting(null, null, channelId, locale);
      return End_getChannelNotificationSetting(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getChannelNotificationSetting(AsyncCallback callback, object state, string channelId, string locale)
    #else
    public void send_getChannelNotificationSetting(string channelId, string locale)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getChannelNotificationSetting", TMessageType.Call, seqid_));
      getChannelNotificationSetting_args args = new getChannelNotificationSetting_args();
      args.ChannelId = channelId;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelNotificationSetting recv_getChannelNotificationSetting()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getChannelNotificationSetting_result result = new getChannelNotificationSetting_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChannelNotificationSetting failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getChannelNotificationSettings(AsyncCallback callback, object state, string locale)
    {
      return send_getChannelNotificationSettings(callback, state, locale);
    }

    public List<ChannelNotificationSetting> End_getChannelNotificationSettings(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getChannelNotificationSettings();
    }

    #endif

    public List<ChannelNotificationSetting> getChannelNotificationSettings(string locale)
    {
      #if !SILVERLIGHT
      send_getChannelNotificationSettings(locale);
      return recv_getChannelNotificationSettings();

      #else
      var asyncResult = Begin_getChannelNotificationSettings(null, null, locale);
      return End_getChannelNotificationSettings(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getChannelNotificationSettings(AsyncCallback callback, object state, string locale)
    #else
    public void send_getChannelNotificationSettings(string locale)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getChannelNotificationSettings", TMessageType.Call, seqid_));
      getChannelNotificationSettings_args args = new getChannelNotificationSettings_args();
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<ChannelNotificationSetting> recv_getChannelNotificationSettings()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getChannelNotificationSettings_result result = new getChannelNotificationSettings_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChannelNotificationSettings failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getChannels(AsyncCallback callback, object state, long lastSynced, string locale)
    {
      return send_getChannels(callback, state, lastSynced, locale);
    }

    public ChannelInfos End_getChannels(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getChannels();
    }

    #endif

    public ChannelInfos getChannels(long lastSynced, string locale)
    {
      #if !SILVERLIGHT
      send_getChannels(lastSynced, locale);
      return recv_getChannels();

      #else
      var asyncResult = Begin_getChannels(null, null, lastSynced, locale);
      return End_getChannels(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getChannels(AsyncCallback callback, object state, long lastSynced, string locale)
    #else
    public void send_getChannels(long lastSynced, string locale)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getChannels", TMessageType.Call, seqid_));
      getChannels_args args = new getChannels_args();
      args.LastSynced = lastSynced;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelInfos recv_getChannels()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getChannels_result result = new getChannels_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChannels failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getDomains(AsyncCallback callback, object state, long lastSynced)
    {
      return send_getDomains(callback, state, lastSynced);
    }

    public ChannelDomains End_getDomains(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getDomains();
    }

    #endif

    public ChannelDomains getDomains(long lastSynced)
    {
      #if !SILVERLIGHT
      send_getDomains(lastSynced);
      return recv_getDomains();

      #else
      var asyncResult = Begin_getDomains(null, null, lastSynced);
      return End_getDomains(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getDomains(AsyncCallback callback, object state, long lastSynced)
    #else
    public void send_getDomains(long lastSynced)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getDomains", TMessageType.Call, seqid_));
      getDomains_args args = new getDomains_args();
      args.LastSynced = lastSynced;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelDomains recv_getDomains()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getDomains_result result = new getDomains_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getDomains failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getFriendChannelMatrices(AsyncCallback callback, object state, List<string> channelIds)
    {
      return send_getFriendChannelMatrices(callback, state, channelIds);
    }

    public FriendChannelMatricesResponse End_getFriendChannelMatrices(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFriendChannelMatrices();
    }

    #endif

    public FriendChannelMatricesResponse getFriendChannelMatrices(List<string> channelIds)
    {
      #if !SILVERLIGHT
      send_getFriendChannelMatrices(channelIds);
      return recv_getFriendChannelMatrices();

      #else
      var asyncResult = Begin_getFriendChannelMatrices(null, null, channelIds);
      return End_getFriendChannelMatrices(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFriendChannelMatrices(AsyncCallback callback, object state, List<string> channelIds)
    #else
    public void send_getFriendChannelMatrices(List<string> channelIds)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getFriendChannelMatrices", TMessageType.Call, seqid_));
      getFriendChannelMatrices_args args = new getFriendChannelMatrices_args();
      args.ChannelIds = channelIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public FriendChannelMatricesResponse recv_getFriendChannelMatrices()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFriendChannelMatrices_result result = new getFriendChannelMatrices_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriendChannelMatrices failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_updateChannelSettings(AsyncCallback callback, object state, ChannelSettings channelSettings)
    {
      return send_updateChannelSettings(callback, state, channelSettings);
    }

    public bool End_updateChannelSettings(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateChannelSettings();
    }

    #endif

    public bool updateChannelSettings(ChannelSettings channelSettings)
    {
      #if !SILVERLIGHT
      send_updateChannelSettings(channelSettings);
      return recv_updateChannelSettings();

      #else
      var asyncResult = Begin_updateChannelSettings(null, null, channelSettings);
      return End_updateChannelSettings(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateChannelSettings(AsyncCallback callback, object state, ChannelSettings channelSettings)
    #else
    public void send_updateChannelSettings(ChannelSettings channelSettings)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("updateChannelSettings", TMessageType.Call, seqid_));
      updateChannelSettings_args args = new updateChannelSettings_args();
      args.ChannelSettings = channelSettings;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public bool recv_updateChannelSettings()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateChannelSettings_result result = new updateChannelSettings_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateChannelSettings failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getCommonDomains(AsyncCallback callback, object state, long lastSynced)
    {
      return send_getCommonDomains(callback, state, lastSynced);
    }

    public ChannelDomains End_getCommonDomains(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCommonDomains();
    }

    #endif

    public ChannelDomains getCommonDomains(long lastSynced)
    {
      #if !SILVERLIGHT
      send_getCommonDomains(lastSynced);
      return recv_getCommonDomains();

      #else
      var asyncResult = Begin_getCommonDomains(null, null, lastSynced);
      return End_getCommonDomains(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCommonDomains(AsyncCallback callback, object state, long lastSynced)
    #else
    public void send_getCommonDomains(long lastSynced)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getCommonDomains", TMessageType.Call, seqid_));
      getCommonDomains_args args = new getCommonDomains_args();
      args.LastSynced = lastSynced;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelDomains recv_getCommonDomains()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCommonDomains_result result = new getCommonDomains_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCommonDomains failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getNotificationBadgeCount(AsyncCallback callback, object state, long localRev)
    {
      return send_getNotificationBadgeCount(callback, state, localRev);
    }

    public int End_getNotificationBadgeCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getNotificationBadgeCount();
    }

    #endif

    public int getNotificationBadgeCount(long localRev)
    {
      #if !SILVERLIGHT
      send_getNotificationBadgeCount(localRev);
      return recv_getNotificationBadgeCount();

      #else
      var asyncResult = Begin_getNotificationBadgeCount(null, null, localRev);
      return End_getNotificationBadgeCount(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getNotificationBadgeCount(AsyncCallback callback, object state, long localRev)
    #else
    public void send_getNotificationBadgeCount(long localRev)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getNotificationBadgeCount", TMessageType.Call, seqid_));
      getNotificationBadgeCount_args args = new getNotificationBadgeCount_args();
      args.LocalRev = localRev;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public int recv_getNotificationBadgeCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getNotificationBadgeCount_result result = new getNotificationBadgeCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotificationBadgeCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_issueChannelToken(AsyncCallback callback, object state, string channelId)
    {
      return send_issueChannelToken(callback, state, channelId);
    }

    public ChannelToken End_issueChannelToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_issueChannelToken();
    }

    #endif

    public ChannelToken issueChannelToken(string channelId)
    {
      #if !SILVERLIGHT
      send_issueChannelToken(channelId);
      return recv_issueChannelToken();

      #else
      var asyncResult = Begin_issueChannelToken(null, null, channelId);
      return End_issueChannelToken(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_issueChannelToken(AsyncCallback callback, object state, string channelId)
    #else
    public void send_issueChannelToken(string channelId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("issueChannelToken", TMessageType.Call, seqid_));
      issueChannelToken_args args = new issueChannelToken_args();
      args.ChannelId = channelId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelToken recv_issueChannelToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      issueChannelToken_result result = new issueChannelToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "issueChannelToken failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_issueRequestToken(AsyncCallback callback, object state, string channelId, string otpId)
    {
      return send_issueRequestToken(callback, state, channelId, otpId);
    }

    public string End_issueRequestToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_issueRequestToken();
    }

    #endif

    public string issueRequestToken(string channelId, string otpId)
    {
      #if !SILVERLIGHT
      send_issueRequestToken(channelId, otpId);
      return recv_issueRequestToken();

      #else
      var asyncResult = Begin_issueRequestToken(null, null, channelId, otpId);
      return End_issueRequestToken(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_issueRequestToken(AsyncCallback callback, object state, string channelId, string otpId)
    #else
    public void send_issueRequestToken(string channelId, string otpId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("issueRequestToken", TMessageType.Call, seqid_));
      issueRequestToken_args args = new issueRequestToken_args();
      args.ChannelId = channelId;
      args.OtpId = otpId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_issueRequestToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      issueRequestToken_result result = new issueRequestToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "issueRequestToken failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_issueRequestTokenWithAuthScheme(AsyncCallback callback, object state, string channelId, string otpId, List<string> authScheme, string returnUrl)
    {
      return send_issueRequestTokenWithAuthScheme(callback, state, channelId, otpId, authScheme, returnUrl);
    }

    public RequestTokenResponse End_issueRequestTokenWithAuthScheme(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_issueRequestTokenWithAuthScheme();
    }

    #endif

    public RequestTokenResponse issueRequestTokenWithAuthScheme(string channelId, string otpId, List<string> authScheme, string returnUrl)
    {
      #if !SILVERLIGHT
      send_issueRequestTokenWithAuthScheme(channelId, otpId, authScheme, returnUrl);
      return recv_issueRequestTokenWithAuthScheme();

      #else
      var asyncResult = Begin_issueRequestTokenWithAuthScheme(null, null, channelId, otpId, authScheme, returnUrl);
      return End_issueRequestTokenWithAuthScheme(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_issueRequestTokenWithAuthScheme(AsyncCallback callback, object state, string channelId, string otpId, List<string> authScheme, string returnUrl)
    #else
    public void send_issueRequestTokenWithAuthScheme(string channelId, string otpId, List<string> authScheme, string returnUrl)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("issueRequestTokenWithAuthScheme", TMessageType.Call, seqid_));
      issueRequestTokenWithAuthScheme_args args = new issueRequestTokenWithAuthScheme_args();
      args.ChannelId = channelId;
      args.OtpId = otpId;
      args.AuthScheme = authScheme;
      args.ReturnUrl = returnUrl;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public RequestTokenResponse recv_issueRequestTokenWithAuthScheme()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      issueRequestTokenWithAuthScheme_result result = new issueRequestTokenWithAuthScheme_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "issueRequestTokenWithAuthScheme failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_issueRequestTokenForAutoLogin(AsyncCallback callback, object state, string channelId, string otpId, string redirectUrl)
    {
      return send_issueRequestTokenForAutoLogin(callback, state, channelId, otpId, redirectUrl);
    }

    public string End_issueRequestTokenForAutoLogin(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_issueRequestTokenForAutoLogin();
    }

    #endif

    public string issueRequestTokenForAutoLogin(string channelId, string otpId, string redirectUrl)
    {
      #if !SILVERLIGHT
      send_issueRequestTokenForAutoLogin(channelId, otpId, redirectUrl);
      return recv_issueRequestTokenForAutoLogin();

      #else
      var asyncResult = Begin_issueRequestTokenForAutoLogin(null, null, channelId, otpId, redirectUrl);
      return End_issueRequestTokenForAutoLogin(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_issueRequestTokenForAutoLogin(AsyncCallback callback, object state, string channelId, string otpId, string redirectUrl)
    #else
    public void send_issueRequestTokenForAutoLogin(string channelId, string otpId, string redirectUrl)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("issueRequestTokenForAutoLogin", TMessageType.Call, seqid_));
      issueRequestTokenForAutoLogin_args args = new issueRequestTokenForAutoLogin_args();
      args.ChannelId = channelId;
      args.OtpId = otpId;
      args.RedirectUrl = redirectUrl;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_issueRequestTokenForAutoLogin()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      issueRequestTokenForAutoLogin_result result = new issueRequestTokenForAutoLogin_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "issueRequestTokenForAutoLogin failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getUpdatedChannelIds(AsyncCallback callback, object state, List<ChannelIdWithLastUpdated> channelIds)
    {
      return send_getUpdatedChannelIds(callback, state, channelIds);
    }

    public List<string> End_getUpdatedChannelIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUpdatedChannelIds();
    }

    #endif

    public List<string> getUpdatedChannelIds(List<ChannelIdWithLastUpdated> channelIds)
    {
      #if !SILVERLIGHT
      send_getUpdatedChannelIds(channelIds);
      return recv_getUpdatedChannelIds();

      #else
      var asyncResult = Begin_getUpdatedChannelIds(null, null, channelIds);
      return End_getUpdatedChannelIds(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUpdatedChannelIds(AsyncCallback callback, object state, List<ChannelIdWithLastUpdated> channelIds)
    #else
    public void send_getUpdatedChannelIds(List<ChannelIdWithLastUpdated> channelIds)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getUpdatedChannelIds", TMessageType.Call, seqid_));
      getUpdatedChannelIds_args args = new getUpdatedChannelIds_args();
      args.ChannelIds = channelIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<string> recv_getUpdatedChannelIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUpdatedChannelIds_result result = new getUpdatedChannelIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUpdatedChannelIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_reserveCoinUse(AsyncCallback callback, object state, CoinUseReservation request, string locale)
    {
      return send_reserveCoinUse(callback, state, request, locale);
    }

    public string End_reserveCoinUse(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reserveCoinUse();
    }

    #endif

    public string reserveCoinUse(CoinUseReservation request, string locale)
    {
      #if !SILVERLIGHT
      send_reserveCoinUse(request, locale);
      return recv_reserveCoinUse();

      #else
      var asyncResult = Begin_reserveCoinUse(null, null, request, locale);
      return End_reserveCoinUse(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reserveCoinUse(AsyncCallback callback, object state, CoinUseReservation request, string locale)
    #else
    public void send_reserveCoinUse(CoinUseReservation request, string locale)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("reserveCoinUse", TMessageType.Call, seqid_));
      reserveCoinUse_args args = new reserveCoinUse_args();
      args.Request = request;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_reserveCoinUse()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reserveCoinUse_result result = new reserveCoinUse_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reserveCoinUse failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_revokeChannel(AsyncCallback callback, object state, string channelId)
    {
      return send_revokeChannel(callback, state, channelId);
    }

    public void End_revokeChannel(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_revokeChannel();
    }

    #endif

    public void revokeChannel(string channelId)
    {
      #if !SILVERLIGHT
      send_revokeChannel(channelId);
      recv_revokeChannel();

      #else
      var asyncResult = Begin_revokeChannel(null, null, channelId);
      End_revokeChannel(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_revokeChannel(AsyncCallback callback, object state, string channelId)
    #else
    public void send_revokeChannel(string channelId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("revokeChannel", TMessageType.Call, seqid_));
      revokeChannel_args args = new revokeChannel_args();
      args.ChannelId = channelId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_revokeChannel()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      revokeChannel_result result = new revokeChannel_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_syncChannelData(AsyncCallback callback, object state, long lastSynced, string locale)
    {
      return send_syncChannelData(callback, state, lastSynced, locale);
    }

    public ChannelSyncDatas End_syncChannelData(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_syncChannelData();
    }

    #endif

    public ChannelSyncDatas syncChannelData(long lastSynced, string locale)
    {
      #if !SILVERLIGHT
      send_syncChannelData(lastSynced, locale);
      return recv_syncChannelData();

      #else
      var asyncResult = Begin_syncChannelData(null, null, lastSynced, locale);
      return End_syncChannelData(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_syncChannelData(AsyncCallback callback, object state, long lastSynced, string locale)
    #else
    public void send_syncChannelData(long lastSynced, string locale)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("syncChannelData", TMessageType.Call, seqid_));
      syncChannelData_args args = new syncChannelData_args();
      args.LastSynced = lastSynced;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ChannelSyncDatas recv_syncChannelData()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      syncChannelData_result result = new syncChannelData_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "syncChannelData failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_updateChannelNotificationSetting(AsyncCallback callback, object state, List<ChannelNotificationSetting> setting)
    {
      return send_updateChannelNotificationSetting(callback, state, setting);
    }

    public void End_updateChannelNotificationSetting(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateChannelNotificationSetting();
    }

    #endif

    public void updateChannelNotificationSetting(List<ChannelNotificationSetting> setting)
    {
      #if !SILVERLIGHT
      send_updateChannelNotificationSetting(setting);
      recv_updateChannelNotificationSetting();

      #else
      var asyncResult = Begin_updateChannelNotificationSetting(null, null, setting);
      End_updateChannelNotificationSetting(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateChannelNotificationSetting(AsyncCallback callback, object state, List<ChannelNotificationSetting> setting)
    #else
    public void send_updateChannelNotificationSetting(List<ChannelNotificationSetting> setting)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("updateChannelNotificationSetting", TMessageType.Call, seqid_));
      updateChannelNotificationSetting_args args = new updateChannelNotificationSetting_args();
      args.Setting = setting;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public void recv_updateChannelNotificationSetting()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateChannelNotificationSetting_result result = new updateChannelNotificationSetting_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["issueOTP"] = issueOTP_Process;
      processMap_["approveChannelAndIssueChannelToken"] = approveChannelAndIssueChannelToken_Process;
      processMap_["approveChannelAndIssueRequestToken"] = approveChannelAndIssueRequestToken_Process;
      processMap_["fetchNotificationItems"] = fetchNotificationItems_Process;
      processMap_["getApprovedChannels"] = getApprovedChannels_Process;
      processMap_["getChannelInfo"] = getChannelInfo_Process;
      processMap_["getChannelNotificationSetting"] = getChannelNotificationSetting_Process;
      processMap_["getChannelNotificationSettings"] = getChannelNotificationSettings_Process;
      processMap_["getChannels"] = getChannels_Process;
      processMap_["getDomains"] = getDomains_Process;
      processMap_["getFriendChannelMatrices"] = getFriendChannelMatrices_Process;
      processMap_["updateChannelSettings"] = updateChannelSettings_Process;
      processMap_["getCommonDomains"] = getCommonDomains_Process;
      processMap_["getNotificationBadgeCount"] = getNotificationBadgeCount_Process;
      processMap_["issueChannelToken"] = issueChannelToken_Process;
      processMap_["issueRequestToken"] = issueRequestToken_Process;
      processMap_["issueRequestTokenWithAuthScheme"] = issueRequestTokenWithAuthScheme_Process;
      processMap_["issueRequestTokenForAutoLogin"] = issueRequestTokenForAutoLogin_Process;
      processMap_["getUpdatedChannelIds"] = getUpdatedChannelIds_Process;
      processMap_["reserveCoinUse"] = reserveCoinUse_Process;
      processMap_["revokeChannel"] = revokeChannel_Process;
      processMap_["syncChannelData"] = syncChannelData_Process;
      processMap_["updateChannelNotificationSetting"] = updateChannelNotificationSetting_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void issueOTP_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      issueOTP_args args = new issueOTP_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      issueOTP_result result = new issueOTP_result();
      try
      {
        try
        {
          result.Success = iface_.issueOTP(args.ChannelId);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("issueOTP", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("issueOTP", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void approveChannelAndIssueChannelToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      approveChannelAndIssueChannelToken_args args = new approveChannelAndIssueChannelToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      approveChannelAndIssueChannelToken_result result = new approveChannelAndIssueChannelToken_result();
      try
      {
        try
        {
          result.Success = iface_.approveChannelAndIssueChannelToken(args.ChannelId);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("approveChannelAndIssueChannelToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("approveChannelAndIssueChannelToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void approveChannelAndIssueRequestToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      approveChannelAndIssueRequestToken_args args = new approveChannelAndIssueRequestToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      approveChannelAndIssueRequestToken_result result = new approveChannelAndIssueRequestToken_result();
      try
      {
        try
        {
          result.Success = iface_.approveChannelAndIssueRequestToken(args.ChannelId, args.OtpId);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("approveChannelAndIssueRequestToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("approveChannelAndIssueRequestToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fetchNotificationItems_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchNotificationItems_args args = new fetchNotificationItems_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchNotificationItems_result result = new fetchNotificationItems_result();
      try
      {
        try
        {
          result.Success = iface_.fetchNotificationItems(args.LocalRev);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchNotificationItems", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchNotificationItems", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getApprovedChannels_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getApprovedChannels_args args = new getApprovedChannels_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getApprovedChannels_result result = new getApprovedChannels_result();
      try
      {
        try
        {
          result.Success = iface_.getApprovedChannels(args.LastSynced, args.Locale);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getApprovedChannels", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getApprovedChannels", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getChannelInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getChannelInfo_args args = new getChannelInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getChannelInfo_result result = new getChannelInfo_result();
      try
      {
        try
        {
          result.Success = iface_.getChannelInfo(args.ChannelId, args.Locale);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getChannelInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getChannelInfo", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getChannelNotificationSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getChannelNotificationSetting_args args = new getChannelNotificationSetting_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getChannelNotificationSetting_result result = new getChannelNotificationSetting_result();
      try
      {
        try
        {
          result.Success = iface_.getChannelNotificationSetting(args.ChannelId, args.Locale);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getChannelNotificationSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getChannelNotificationSetting", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getChannelNotificationSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getChannelNotificationSettings_args args = new getChannelNotificationSettings_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getChannelNotificationSettings_result result = new getChannelNotificationSettings_result();
      try
      {
        try
        {
          result.Success = iface_.getChannelNotificationSettings(args.Locale);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getChannelNotificationSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getChannelNotificationSettings", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getChannels_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getChannels_args args = new getChannels_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getChannels_result result = new getChannels_result();
      try
      {
        try
        {
          result.Success = iface_.getChannels(args.LastSynced, args.Locale);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getChannels", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getChannels", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getDomains_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getDomains_args args = new getDomains_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getDomains_result result = new getDomains_result();
      try
      {
        try
        {
          result.Success = iface_.getDomains(args.LastSynced);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getDomains", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getDomains", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFriendChannelMatrices_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFriendChannelMatrices_args args = new getFriendChannelMatrices_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFriendChannelMatrices_result result = new getFriendChannelMatrices_result();
      try
      {
        try
        {
          result.Success = iface_.getFriendChannelMatrices(args.ChannelIds);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getFriendChannelMatrices", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFriendChannelMatrices", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateChannelSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateChannelSettings_args args = new updateChannelSettings_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateChannelSettings_result result = new updateChannelSettings_result();
      try
      {
        try
        {
          result.Success = iface_.updateChannelSettings(args.ChannelSettings);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateChannelSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateChannelSettings", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCommonDomains_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCommonDomains_args args = new getCommonDomains_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCommonDomains_result result = new getCommonDomains_result();
      try
      {
        try
        {
          result.Success = iface_.getCommonDomains(args.LastSynced);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCommonDomains", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCommonDomains", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getNotificationBadgeCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getNotificationBadgeCount_args args = new getNotificationBadgeCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getNotificationBadgeCount_result result = new getNotificationBadgeCount_result();
      try
      {
        try
        {
          result.Success = iface_.getNotificationBadgeCount(args.LocalRev);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getNotificationBadgeCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getNotificationBadgeCount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void issueChannelToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      issueChannelToken_args args = new issueChannelToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      issueChannelToken_result result = new issueChannelToken_result();
      try
      {
        try
        {
          result.Success = iface_.issueChannelToken(args.ChannelId);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("issueChannelToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("issueChannelToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void issueRequestToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      issueRequestToken_args args = new issueRequestToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      issueRequestToken_result result = new issueRequestToken_result();
      try
      {
        try
        {
          result.Success = iface_.issueRequestToken(args.ChannelId, args.OtpId);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("issueRequestToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("issueRequestToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void issueRequestTokenWithAuthScheme_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      issueRequestTokenWithAuthScheme_args args = new issueRequestTokenWithAuthScheme_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      issueRequestTokenWithAuthScheme_result result = new issueRequestTokenWithAuthScheme_result();
      try
      {
        try
        {
          result.Success = iface_.issueRequestTokenWithAuthScheme(args.ChannelId, args.OtpId, args.AuthScheme, args.ReturnUrl);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("issueRequestTokenWithAuthScheme", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("issueRequestTokenWithAuthScheme", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void issueRequestTokenForAutoLogin_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      issueRequestTokenForAutoLogin_args args = new issueRequestTokenForAutoLogin_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      issueRequestTokenForAutoLogin_result result = new issueRequestTokenForAutoLogin_result();
      try
      {
        try
        {
          result.Success = iface_.issueRequestTokenForAutoLogin(args.ChannelId, args.OtpId, args.RedirectUrl);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("issueRequestTokenForAutoLogin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("issueRequestTokenForAutoLogin", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUpdatedChannelIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUpdatedChannelIds_args args = new getUpdatedChannelIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUpdatedChannelIds_result result = new getUpdatedChannelIds_result();
      try
      {
        try
        {
          result.Success = iface_.getUpdatedChannelIds(args.ChannelIds);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUpdatedChannelIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUpdatedChannelIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reserveCoinUse_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reserveCoinUse_args args = new reserveCoinUse_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reserveCoinUse_result result = new reserveCoinUse_result();
      try
      {
        try
        {
          result.Success = iface_.reserveCoinUse(args.Request, args.Locale);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reserveCoinUse", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reserveCoinUse", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void revokeChannel_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      revokeChannel_args args = new revokeChannel_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      revokeChannel_result result = new revokeChannel_result();
      try
      {
        try
        {
          iface_.revokeChannel(args.ChannelId);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("revokeChannel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("revokeChannel", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void syncChannelData_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      syncChannelData_args args = new syncChannelData_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      syncChannelData_result result = new syncChannelData_result();
      try
      {
        try
        {
          result.Success = iface_.syncChannelData(args.LastSynced, args.Locale);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("syncChannelData", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("syncChannelData", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateChannelNotificationSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateChannelNotificationSetting_args args = new updateChannelNotificationSetting_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateChannelNotificationSetting_result result = new updateChannelNotificationSetting_result();
      try
      {
        try
        {
          iface_.updateChannelNotificationSetting(args.Setting);
        }
        catch (ChannelException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateChannelNotificationSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateChannelNotificationSetting", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueOTP_args : TBase
  {
    private string _channelId;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
    }

    public issueOTP_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueOTP_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueOTP_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueOTP_result : TBase
  {
    private OTPResult _success;
    private ChannelException _e;

    public OTPResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public issueOTP_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new OTPResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueOTP_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueOTP_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class approveChannelAndIssueChannelToken_args : TBase
  {
    private string _channelId;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
    }

    public approveChannelAndIssueChannelToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("approveChannelAndIssueChannelToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("approveChannelAndIssueChannelToken_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class approveChannelAndIssueChannelToken_result : TBase
  {
    private ChannelToken _success;
    private ChannelException _e;

    public ChannelToken Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public approveChannelAndIssueChannelToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelToken();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("approveChannelAndIssueChannelToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("approveChannelAndIssueChannelToken_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class approveChannelAndIssueRequestToken_args : TBase
  {
    private string _channelId;
    private string _otpId;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public string OtpId
    {
      get
      {
        return _otpId;
      }
      set
      {
        __isset.otpId = true;
        this._otpId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool otpId;
    }

    public approveChannelAndIssueRequestToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OtpId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("approveChannelAndIssueRequestToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (OtpId != null && __isset.otpId) {
          field.Name = "otpId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OtpId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("approveChannelAndIssueRequestToken_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (OtpId != null && __isset.otpId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OtpId: ");
        __sb.Append(OtpId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class approveChannelAndIssueRequestToken_result : TBase
  {
    private string _success;
    private ChannelException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public approveChannelAndIssueRequestToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("approveChannelAndIssueRequestToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("approveChannelAndIssueRequestToken_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchNotificationItems_args : TBase
  {
    private long _localRev;

    public long LocalRev
    {
      get
      {
        return _localRev;
      }
      set
      {
        __isset.localRev = true;
        this._localRev = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool localRev;
    }

    public fetchNotificationItems_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LocalRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchNotificationItems_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.localRev) {
          field.Name = "localRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalRev);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchNotificationItems_args(");
      bool __first = true;
      if (__isset.localRev) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalRev: ");
        __sb.Append(LocalRev);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchNotificationItems_result : TBase
  {
    private NotificationFetchResult _success;
    private ChannelException _e;

    public NotificationFetchResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public fetchNotificationItems_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new NotificationFetchResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchNotificationItems_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchNotificationItems_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getApprovedChannels_args : TBase
  {
    private long _lastSynced;
    private string _locale;

    public long LastSynced
    {
      get
      {
        return _lastSynced;
      }
      set
      {
        __isset.lastSynced = true;
        this._lastSynced = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastSynced;
      public bool locale;
    }

    public getApprovedChannels_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastSynced = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getApprovedChannels_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastSynced) {
          field.Name = "lastSynced";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastSynced);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getApprovedChannels_args(");
      bool __first = true;
      if (__isset.lastSynced) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastSynced: ");
        __sb.Append(LastSynced);
      }
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getApprovedChannels_result : TBase
  {
    private ApprovedChannelInfos _success;
    private ChannelException _e;

    public ApprovedChannelInfos Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getApprovedChannels_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ApprovedChannelInfos();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getApprovedChannels_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getApprovedChannels_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChannelInfo_args : TBase
  {
    private string _channelId;
    private string _locale;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool locale;
    }

    public getChannelInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChannelInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChannelInfo_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChannelInfo_result : TBase
  {
    private ChannelInfo _success;
    private ChannelException _e;

    public ChannelInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getChannelInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChannelInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChannelInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChannelNotificationSetting_args : TBase
  {
    private string _channelId;
    private string _locale;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool locale;
    }

    public getChannelNotificationSetting_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChannelNotificationSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChannelNotificationSetting_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChannelNotificationSetting_result : TBase
  {
    private ChannelNotificationSetting _success;
    private ChannelException _e;

    public ChannelNotificationSetting Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getChannelNotificationSetting_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelNotificationSetting();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChannelNotificationSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChannelNotificationSetting_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChannelNotificationSettings_args : TBase
  {
    private string _locale;

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool locale;
    }

    public getChannelNotificationSettings_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChannelNotificationSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChannelNotificationSettings_args(");
      bool __first = true;
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChannelNotificationSettings_result : TBase
  {
    private List<ChannelNotificationSetting> _success;
    private ChannelException _e;

    public List<ChannelNotificationSetting> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getChannelNotificationSettings_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChannelNotificationSetting>();
                  TList _list805 = iprot.ReadListBegin();
                  for( int _i806 = 0; _i806 < _list805.Count; ++_i806)
                  {
                    ChannelNotificationSetting _elem807;
                    _elem807 = new ChannelNotificationSetting();
                    _elem807.Read(iprot);
                    Success.Add(_elem807);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChannelNotificationSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChannelNotificationSetting _iter808 in Success)
              {
                _iter808.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChannelNotificationSettings_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChannels_args : TBase
  {
    private long _lastSynced;
    private string _locale;

    public long LastSynced
    {
      get
      {
        return _lastSynced;
      }
      set
      {
        __isset.lastSynced = true;
        this._lastSynced = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastSynced;
      public bool locale;
    }

    public getChannels_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastSynced = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChannels_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastSynced) {
          field.Name = "lastSynced";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastSynced);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChannels_args(");
      bool __first = true;
      if (__isset.lastSynced) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastSynced: ");
        __sb.Append(LastSynced);
      }
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChannels_result : TBase
  {
    private ChannelInfos _success;
    private ChannelException _e;

    public ChannelInfos Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getChannels_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelInfos();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChannels_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChannels_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDomains_args : TBase
  {
    private long _lastSynced;

    public long LastSynced
    {
      get
      {
        return _lastSynced;
      }
      set
      {
        __isset.lastSynced = true;
        this._lastSynced = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastSynced;
    }

    public getDomains_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastSynced = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDomains_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastSynced) {
          field.Name = "lastSynced";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastSynced);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDomains_args(");
      bool __first = true;
      if (__isset.lastSynced) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastSynced: ");
        __sb.Append(LastSynced);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getDomains_result : TBase
  {
    private ChannelDomains _success;
    private ChannelException _e;

    public ChannelDomains Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getDomains_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelDomains();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getDomains_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getDomains_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFriendChannelMatrices_args : TBase
  {
    private List<string> _channelIds;

    public List<string> ChannelIds
    {
      get
      {
        return _channelIds;
      }
      set
      {
        __isset.channelIds = true;
        this._channelIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelIds;
    }

    public getFriendChannelMatrices_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  ChannelIds = new List<string>();
                  TList _list809 = iprot.ReadListBegin();
                  for( int _i810 = 0; _i810 < _list809.Count; ++_i810)
                  {
                    string _elem811;
                    _elem811 = iprot.ReadString();
                    ChannelIds.Add(_elem811);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFriendChannelMatrices_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelIds != null && __isset.channelIds) {
          field.Name = "channelIds";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ChannelIds.Count));
            foreach (string _iter812 in ChannelIds)
            {
              oprot.WriteString(_iter812);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFriendChannelMatrices_args(");
      bool __first = true;
      if (ChannelIds != null && __isset.channelIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelIds: ");
        __sb.Append(ChannelIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFriendChannelMatrices_result : TBase
  {
    private FriendChannelMatricesResponse _success;
    private ChannelException _e;

    public FriendChannelMatricesResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getFriendChannelMatrices_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new FriendChannelMatricesResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFriendChannelMatrices_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFriendChannelMatrices_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateChannelSettings_args : TBase
  {
    private ChannelSettings _channelSettings;

    public ChannelSettings ChannelSettings
    {
      get
      {
        return _channelSettings;
      }
      set
      {
        __isset.channelSettings = true;
        this._channelSettings = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelSettings;
    }

    public updateChannelSettings_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                ChannelSettings = new ChannelSettings();
                ChannelSettings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateChannelSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelSettings != null && __isset.channelSettings) {
          field.Name = "channelSettings";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          ChannelSettings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateChannelSettings_args(");
      bool __first = true;
      if (ChannelSettings != null && __isset.channelSettings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelSettings: ");
        __sb.Append(ChannelSettings== null ? "<null>" : ChannelSettings.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateChannelSettings_result : TBase
  {
    private bool _success;
    private ChannelException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateChannelSettings_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateChannelSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateChannelSettings_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCommonDomains_args : TBase
  {
    private long _lastSynced;

    public long LastSynced
    {
      get
      {
        return _lastSynced;
      }
      set
      {
        __isset.lastSynced = true;
        this._lastSynced = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastSynced;
    }

    public getCommonDomains_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                LastSynced = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCommonDomains_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastSynced) {
          field.Name = "lastSynced";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastSynced);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCommonDomains_args(");
      bool __first = true;
      if (__isset.lastSynced) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastSynced: ");
        __sb.Append(LastSynced);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCommonDomains_result : TBase
  {
    private ChannelDomains _success;
    private ChannelException _e;

    public ChannelDomains Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCommonDomains_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelDomains();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCommonDomains_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCommonDomains_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNotificationBadgeCount_args : TBase
  {
    private long _localRev;

    public long LocalRev
    {
      get
      {
        return _localRev;
      }
      set
      {
        __isset.localRev = true;
        this._localRev = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool localRev;
    }

    public getNotificationBadgeCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LocalRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNotificationBadgeCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.localRev) {
          field.Name = "localRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalRev);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNotificationBadgeCount_args(");
      bool __first = true;
      if (__isset.localRev) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalRev: ");
        __sb.Append(LocalRev);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNotificationBadgeCount_result : TBase
  {
    private int _success;
    private ChannelException _e;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getNotificationBadgeCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNotificationBadgeCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNotificationBadgeCount_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueChannelToken_args : TBase
  {
    private string _channelId;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
    }

    public issueChannelToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueChannelToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueChannelToken_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueChannelToken_result : TBase
  {
    private ChannelToken _success;
    private ChannelException _e;

    public ChannelToken Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public issueChannelToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelToken();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueChannelToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueChannelToken_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueRequestToken_args : TBase
  {
    private string _channelId;
    private string _otpId;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public string OtpId
    {
      get
      {
        return _otpId;
      }
      set
      {
        __isset.otpId = true;
        this._otpId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool otpId;
    }

    public issueRequestToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OtpId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueRequestToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (OtpId != null && __isset.otpId) {
          field.Name = "otpId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OtpId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueRequestToken_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (OtpId != null && __isset.otpId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OtpId: ");
        __sb.Append(OtpId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueRequestToken_result : TBase
  {
    private string _success;
    private ChannelException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public issueRequestToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueRequestToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueRequestToken_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueRequestTokenWithAuthScheme_args : TBase
  {
    private string _channelId;
    private string _otpId;
    private List<string> _authScheme;
    private string _returnUrl;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public string OtpId
    {
      get
      {
        return _otpId;
      }
      set
      {
        __isset.otpId = true;
        this._otpId = value;
      }
    }

    public List<string> AuthScheme
    {
      get
      {
        return _authScheme;
      }
      set
      {
        __isset.authScheme = true;
        this._authScheme = value;
      }
    }

    public string ReturnUrl
    {
      get
      {
        return _returnUrl;
      }
      set
      {
        __isset.returnUrl = true;
        this._returnUrl = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool otpId;
      public bool authScheme;
      public bool returnUrl;
    }

    public issueRequestTokenWithAuthScheme_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OtpId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  AuthScheme = new List<string>();
                  TList _list813 = iprot.ReadListBegin();
                  for( int _i814 = 0; _i814 < _list813.Count; ++_i814)
                  {
                    string _elem815;
                    _elem815 = iprot.ReadString();
                    AuthScheme.Add(_elem815);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ReturnUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueRequestTokenWithAuthScheme_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (OtpId != null && __isset.otpId) {
          field.Name = "otpId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OtpId);
          oprot.WriteFieldEnd();
        }
        if (AuthScheme != null && __isset.authScheme) {
          field.Name = "authScheme";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, AuthScheme.Count));
            foreach (string _iter816 in AuthScheme)
            {
              oprot.WriteString(_iter816);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ReturnUrl != null && __isset.returnUrl) {
          field.Name = "returnUrl";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ReturnUrl);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueRequestTokenWithAuthScheme_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (OtpId != null && __isset.otpId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OtpId: ");
        __sb.Append(OtpId);
      }
      if (AuthScheme != null && __isset.authScheme) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AuthScheme: ");
        __sb.Append(AuthScheme);
      }
      if (ReturnUrl != null && __isset.returnUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReturnUrl: ");
        __sb.Append(ReturnUrl);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueRequestTokenWithAuthScheme_result : TBase
  {
    private RequestTokenResponse _success;
    private ChannelException _e;

    public RequestTokenResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public issueRequestTokenWithAuthScheme_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RequestTokenResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueRequestTokenWithAuthScheme_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueRequestTokenWithAuthScheme_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueRequestTokenForAutoLogin_args : TBase
  {
    private string _channelId;
    private string _otpId;
    private string _redirectUrl;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public string OtpId
    {
      get
      {
        return _otpId;
      }
      set
      {
        __isset.otpId = true;
        this._otpId = value;
      }
    }

    public string RedirectUrl
    {
      get
      {
        return _redirectUrl;
      }
      set
      {
        __isset.redirectUrl = true;
        this._redirectUrl = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool otpId;
      public bool redirectUrl;
    }

    public issueRequestTokenForAutoLogin_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                OtpId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                RedirectUrl = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueRequestTokenForAutoLogin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (OtpId != null && __isset.otpId) {
          field.Name = "otpId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OtpId);
          oprot.WriteFieldEnd();
        }
        if (RedirectUrl != null && __isset.redirectUrl) {
          field.Name = "redirectUrl";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RedirectUrl);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueRequestTokenForAutoLogin_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (OtpId != null && __isset.otpId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OtpId: ");
        __sb.Append(OtpId);
      }
      if (RedirectUrl != null && __isset.redirectUrl) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RedirectUrl: ");
        __sb.Append(RedirectUrl);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueRequestTokenForAutoLogin_result : TBase
  {
    private string _success;
    private ChannelException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public issueRequestTokenForAutoLogin_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueRequestTokenForAutoLogin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueRequestTokenForAutoLogin_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUpdatedChannelIds_args : TBase
  {
    private List<ChannelIdWithLastUpdated> _channelIds;

    public List<ChannelIdWithLastUpdated> ChannelIds
    {
      get
      {
        return _channelIds;
      }
      set
      {
        __isset.channelIds = true;
        this._channelIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelIds;
    }

    public getUpdatedChannelIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  ChannelIds = new List<ChannelIdWithLastUpdated>();
                  TList _list817 = iprot.ReadListBegin();
                  for( int _i818 = 0; _i818 < _list817.Count; ++_i818)
                  {
                    ChannelIdWithLastUpdated _elem819;
                    _elem819 = new ChannelIdWithLastUpdated();
                    _elem819.Read(iprot);
                    ChannelIds.Add(_elem819);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUpdatedChannelIds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelIds != null && __isset.channelIds) {
          field.Name = "channelIds";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ChannelIds.Count));
            foreach (ChannelIdWithLastUpdated _iter820 in ChannelIds)
            {
              _iter820.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUpdatedChannelIds_args(");
      bool __first = true;
      if (ChannelIds != null && __isset.channelIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelIds: ");
        __sb.Append(ChannelIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUpdatedChannelIds_result : TBase
  {
    private List<string> _success;
    private ChannelException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUpdatedChannelIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list821 = iprot.ReadListBegin();
                  for( int _i822 = 0; _i822 < _list821.Count; ++_i822)
                  {
                    string _elem823;
                    _elem823 = iprot.ReadString();
                    Success.Add(_elem823);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUpdatedChannelIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter824 in Success)
              {
                oprot.WriteString(_iter824);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUpdatedChannelIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reserveCoinUse_args : TBase
  {
    private CoinUseReservation _request;
    private string _locale;

    public CoinUseReservation Request
    {
      get
      {
        return _request;
      }
      set
      {
        __isset.request = true;
        this._request = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool request;
      public bool locale;
    }

    public reserveCoinUse_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Request = new CoinUseReservation();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reserveCoinUse_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reserveCoinUse_args(");
      bool __first = true;
      if (Request != null && __isset.request) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Request: ");
        __sb.Append(Request== null ? "<null>" : Request.ToString());
      }
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reserveCoinUse_result : TBase
  {
    private string _success;
    private ChannelException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reserveCoinUse_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reserveCoinUse_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reserveCoinUse_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class revokeChannel_args : TBase
  {
    private string _channelId;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
    }

    public revokeChannel_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("revokeChannel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("revokeChannel_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class revokeChannel_result : TBase
  {
    private ChannelException _e;

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public revokeChannel_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("revokeChannel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("revokeChannel_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class syncChannelData_args : TBase
  {
    private long _lastSynced;
    private string _locale;

    public long LastSynced
    {
      get
      {
        return _lastSynced;
      }
      set
      {
        __isset.lastSynced = true;
        this._lastSynced = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastSynced;
      public bool locale;
    }

    public syncChannelData_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastSynced = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("syncChannelData_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastSynced) {
          field.Name = "lastSynced";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastSynced);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("syncChannelData_args(");
      bool __first = true;
      if (__isset.lastSynced) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastSynced: ");
        __sb.Append(LastSynced);
      }
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class syncChannelData_result : TBase
  {
    private ChannelSyncDatas _success;
    private ChannelException _e;

    public ChannelSyncDatas Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public syncChannelData_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChannelSyncDatas();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("syncChannelData_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("syncChannelData_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateChannelNotificationSetting_args : TBase
  {
    private List<ChannelNotificationSetting> _setting;

    public List<ChannelNotificationSetting> Setting
    {
      get
      {
        return _setting;
      }
      set
      {
        __isset.setting = true;
        this._setting = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool setting;
    }

    public updateChannelNotificationSetting_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.List) {
                {
                  Setting = new List<ChannelNotificationSetting>();
                  TList _list825 = iprot.ReadListBegin();
                  for( int _i826 = 0; _i826 < _list825.Count; ++_i826)
                  {
                    ChannelNotificationSetting _elem827;
                    _elem827 = new ChannelNotificationSetting();
                    _elem827.Read(iprot);
                    Setting.Add(_elem827);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateChannelNotificationSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Setting != null && __isset.setting) {
          field.Name = "setting";
          field.Type = TType.List;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Setting.Count));
            foreach (ChannelNotificationSetting _iter828 in Setting)
            {
              _iter828.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateChannelNotificationSetting_args(");
      bool __first = true;
      if (Setting != null && __isset.setting) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Setting: ");
        __sb.Append(Setting);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateChannelNotificationSetting_result : TBase
  {
    private ChannelException _e;

    public ChannelException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateChannelNotificationSetting_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new ChannelException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateChannelNotificationSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateChannelNotificationSetting_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
