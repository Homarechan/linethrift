/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class AuthService {
  public interface ISync {
    string normalizePhoneNumber(string countryCode, string phoneNumber, string countryCodeHint);
    void respondE2EELoginRequest(string verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode);
    string confirmE2EELogin(string verifier, byte[] deviceSecret);
    void logoutZ();
    LoginResult loginZ(LoginRequest loginRequest);
    SecurityCenterResult issueTokenForAccountMigrationSettings(bool enforce);
    SecurityCenterResult issueTokenForAccountMigration(string migrationSessionId);
    string verifyQrcodeWithE2EE(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_normalizePhoneNumber(AsyncCallback callback, object state, string countryCode, string phoneNumber, string countryCodeHint);
    string End_normalizePhoneNumber(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_respondE2EELoginRequest(AsyncCallback callback, object state, string verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode);
    void End_respondE2EELoginRequest(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_confirmE2EELogin(AsyncCallback callback, object state, string verifier, byte[] deviceSecret);
    string End_confirmE2EELogin(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_logoutZ(AsyncCallback callback, object state);
    void End_logoutZ(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_loginZ(AsyncCallback callback, object state, LoginRequest loginRequest);
    LoginResult End_loginZ(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_issueTokenForAccountMigrationSettings(AsyncCallback callback, object state, bool enforce);
    SecurityCenterResult End_issueTokenForAccountMigrationSettings(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_issueTokenForAccountMigration(AsyncCallback callback, object state, string migrationSessionId);
    SecurityCenterResult End_issueTokenForAccountMigration(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_verifyQrcodeWithE2EE(AsyncCallback callback, object state, string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain);
    string End_verifyQrcodeWithE2EE(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_normalizePhoneNumber(AsyncCallback callback, object state, string countryCode, string phoneNumber, string countryCodeHint)
    {
      return send_normalizePhoneNumber(callback, state, countryCode, phoneNumber, countryCodeHint);
    }

    public string End_normalizePhoneNumber(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_normalizePhoneNumber();
    }

    #endif

    public string normalizePhoneNumber(string countryCode, string phoneNumber, string countryCodeHint)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_normalizePhoneNumber(null, null, countryCode, phoneNumber, countryCodeHint);
      return End_normalizePhoneNumber(asyncResult);

      #else
      send_normalizePhoneNumber(countryCode, phoneNumber, countryCodeHint);
      return recv_normalizePhoneNumber();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_normalizePhoneNumber(AsyncCallback callback, object state, string countryCode, string phoneNumber, string countryCodeHint)
    {
      oprot_.WriteMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.Call, seqid_));
      normalizePhoneNumber_args args = new normalizePhoneNumber_args();
      args.CountryCode = countryCode;
      args.PhoneNumber = phoneNumber;
      args.CountryCodeHint = countryCodeHint;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_normalizePhoneNumber(string countryCode, string phoneNumber, string countryCodeHint)
    {
      oprot_.WriteMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.Call, seqid_));
      normalizePhoneNumber_args args = new normalizePhoneNumber_args();
      args.CountryCode = countryCode;
      args.PhoneNumber = phoneNumber;
      args.CountryCodeHint = countryCodeHint;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_normalizePhoneNumber()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      normalizePhoneNumber_result result = new normalizePhoneNumber_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "normalizePhoneNumber failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_respondE2EELoginRequest(AsyncCallback callback, object state, string verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode)
    {
      return send_respondE2EELoginRequest(callback, state, verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
    }

    public void End_respondE2EELoginRequest(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_respondE2EELoginRequest();
    }

    #endif

    public void respondE2EELoginRequest(string verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_respondE2EELoginRequest(null, null, verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
      End_respondE2EELoginRequest(asyncResult);

      #else
      send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
      recv_respondE2EELoginRequest();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_respondE2EELoginRequest(AsyncCallback callback, object state, string verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode)
    {
      oprot_.WriteMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.Call, seqid_));
      respondE2EELoginRequest_args args = new respondE2EELoginRequest_args();
      args.Verifier = verifier;
      args.PublicKey = publicKey;
      args.EncryptedKeyChain = encryptedKeyChain;
      args.HashKeyChain = hashKeyChain;
      args.ErrorCode = errorCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_respondE2EELoginRequest(string verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode)
    {
      oprot_.WriteMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.Call, seqid_));
      respondE2EELoginRequest_args args = new respondE2EELoginRequest_args();
      args.Verifier = verifier;
      args.PublicKey = publicKey;
      args.EncryptedKeyChain = encryptedKeyChain;
      args.HashKeyChain = hashKeyChain;
      args.ErrorCode = errorCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_respondE2EELoginRequest()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_confirmE2EELogin(AsyncCallback callback, object state, string verifier, byte[] deviceSecret)
    {
      return send_confirmE2EELogin(callback, state, verifier, deviceSecret);
    }

    public string End_confirmE2EELogin(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_confirmE2EELogin();
    }

    #endif

    public string confirmE2EELogin(string verifier, byte[] deviceSecret)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_confirmE2EELogin(null, null, verifier, deviceSecret);
      return End_confirmE2EELogin(asyncResult);

      #else
      send_confirmE2EELogin(verifier, deviceSecret);
      return recv_confirmE2EELogin();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_confirmE2EELogin(AsyncCallback callback, object state, string verifier, byte[] deviceSecret)
    {
      oprot_.WriteMessageBegin(new TMessage("confirmE2EELogin", TMessageType.Call, seqid_));
      confirmE2EELogin_args args = new confirmE2EELogin_args();
      args.Verifier = verifier;
      args.DeviceSecret = deviceSecret;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_confirmE2EELogin(string verifier, byte[] deviceSecret)
    {
      oprot_.WriteMessageBegin(new TMessage("confirmE2EELogin", TMessageType.Call, seqid_));
      confirmE2EELogin_args args = new confirmE2EELogin_args();
      args.Verifier = verifier;
      args.DeviceSecret = deviceSecret;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_confirmE2EELogin()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      confirmE2EELogin_result result = new confirmE2EELogin_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "confirmE2EELogin failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_logoutZ(AsyncCallback callback, object state)
    {
      return send_logoutZ(callback, state);
    }

    public void End_logoutZ(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_logoutZ();
    }

    #endif

    public void logoutZ()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_logoutZ(null, null);
      End_logoutZ(asyncResult);

      #else
      send_logoutZ();
      recv_logoutZ();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_logoutZ(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("logoutZ", TMessageType.Call, seqid_));
      logoutZ_args args = new logoutZ_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_logoutZ()
    {
      oprot_.WriteMessageBegin(new TMessage("logoutZ", TMessageType.Call, seqid_));
      logoutZ_args args = new logoutZ_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_logoutZ()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      logoutZ_result result = new logoutZ_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_loginZ(AsyncCallback callback, object state, LoginRequest loginRequest)
    {
      return send_loginZ(callback, state, loginRequest);
    }

    public LoginResult End_loginZ(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loginZ();
    }

    #endif

    public LoginResult loginZ(LoginRequest loginRequest)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_loginZ(null, null, loginRequest);
      return End_loginZ(asyncResult);

      #else
      send_loginZ(loginRequest);
      return recv_loginZ();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_loginZ(AsyncCallback callback, object state, LoginRequest loginRequest)
    {
      oprot_.WriteMessageBegin(new TMessage("loginZ", TMessageType.Call, seqid_));
      loginZ_args args = new loginZ_args();
      args.LoginRequest = loginRequest;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_loginZ(LoginRequest loginRequest)
    {
      oprot_.WriteMessageBegin(new TMessage("loginZ", TMessageType.Call, seqid_));
      loginZ_args args = new loginZ_args();
      args.LoginRequest = loginRequest;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public LoginResult recv_loginZ()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loginZ_result result = new loginZ_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginZ failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_issueTokenForAccountMigrationSettings(AsyncCallback callback, object state, bool enforce)
    {
      return send_issueTokenForAccountMigrationSettings(callback, state, enforce);
    }

    public SecurityCenterResult End_issueTokenForAccountMigrationSettings(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_issueTokenForAccountMigrationSettings();
    }

    #endif

    public SecurityCenterResult issueTokenForAccountMigrationSettings(bool enforce)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_issueTokenForAccountMigrationSettings(null, null, enforce);
      return End_issueTokenForAccountMigrationSettings(asyncResult);

      #else
      send_issueTokenForAccountMigrationSettings(enforce);
      return recv_issueTokenForAccountMigrationSettings();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_issueTokenForAccountMigrationSettings(AsyncCallback callback, object state, bool enforce)
    {
      oprot_.WriteMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.Call, seqid_));
      issueTokenForAccountMigrationSettings_args args = new issueTokenForAccountMigrationSettings_args();
      args.Enforce = enforce;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_issueTokenForAccountMigrationSettings(bool enforce)
    {
      oprot_.WriteMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.Call, seqid_));
      issueTokenForAccountMigrationSettings_args args = new issueTokenForAccountMigrationSettings_args();
      args.Enforce = enforce;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SecurityCenterResult recv_issueTokenForAccountMigrationSettings()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "issueTokenForAccountMigrationSettings failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_issueTokenForAccountMigration(AsyncCallback callback, object state, string migrationSessionId)
    {
      return send_issueTokenForAccountMigration(callback, state, migrationSessionId);
    }

    public SecurityCenterResult End_issueTokenForAccountMigration(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_issueTokenForAccountMigration();
    }

    #endif

    public SecurityCenterResult issueTokenForAccountMigration(string migrationSessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_issueTokenForAccountMigration(null, null, migrationSessionId);
      return End_issueTokenForAccountMigration(asyncResult);

      #else
      send_issueTokenForAccountMigration(migrationSessionId);
      return recv_issueTokenForAccountMigration();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_issueTokenForAccountMigration(AsyncCallback callback, object state, string migrationSessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.Call, seqid_));
      issueTokenForAccountMigration_args args = new issueTokenForAccountMigration_args();
      args.MigrationSessionId = migrationSessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_issueTokenForAccountMigration(string migrationSessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.Call, seqid_));
      issueTokenForAccountMigration_args args = new issueTokenForAccountMigration_args();
      args.MigrationSessionId = migrationSessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SecurityCenterResult recv_issueTokenForAccountMigration()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "issueTokenForAccountMigration failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_verifyQrcodeWithE2EE(AsyncCallback callback, object state, string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain)
    {
      return send_verifyQrcodeWithE2EE(callback, state, verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
    }

    public string End_verifyQrcodeWithE2EE(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_verifyQrcodeWithE2EE();
    }

    #endif

    public string verifyQrcodeWithE2EE(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_verifyQrcodeWithE2EE(null, null, verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
      return End_verifyQrcodeWithE2EE(asyncResult);

      #else
      send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
      return recv_verifyQrcodeWithE2EE();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_verifyQrcodeWithE2EE(AsyncCallback callback, object state, string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.Call, seqid_));
      verifyQrcodeWithE2EE_args args = new verifyQrcodeWithE2EE_args();
      args.Verifier = verifier;
      args.PinCode = pinCode;
      args.ErrorCode = errorCode;
      args.PublicKey = publicKey;
      args.EncryptedKeyChain = encryptedKeyChain;
      args.HashKeyChain = hashKeyChain;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_verifyQrcodeWithE2EE(string verifier, string pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.Call, seqid_));
      verifyQrcodeWithE2EE_args args = new verifyQrcodeWithE2EE_args();
      args.Verifier = verifier;
      args.PinCode = pinCode;
      args.ErrorCode = errorCode;
      args.PublicKey = publicKey;
      args.EncryptedKeyChain = encryptedKeyChain;
      args.HashKeyChain = hashKeyChain;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_verifyQrcodeWithE2EE()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyQrcodeWithE2EE failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["normalizePhoneNumber"] = normalizePhoneNumber_Process;
      processMap_["respondE2EELoginRequest"] = respondE2EELoginRequest_Process;
      processMap_["confirmE2EELogin"] = confirmE2EELogin_Process;
      processMap_["logoutZ"] = logoutZ_Process;
      processMap_["loginZ"] = loginZ_Process;
      processMap_["issueTokenForAccountMigrationSettings"] = issueTokenForAccountMigrationSettings_Process;
      processMap_["issueTokenForAccountMigration"] = issueTokenForAccountMigration_Process;
      processMap_["verifyQrcodeWithE2EE"] = verifyQrcodeWithE2EE_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void normalizePhoneNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      normalizePhoneNumber_args args = new normalizePhoneNumber_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      normalizePhoneNumber_result result = new normalizePhoneNumber_result();
      try
      {
        try
        {
          result.Success = iface_.normalizePhoneNumber(args.CountryCode, args.PhoneNumber, args.CountryCodeHint);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void respondE2EELoginRequest_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      respondE2EELoginRequest_args args = new respondE2EELoginRequest_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
      try
      {
        try
        {
          iface_.respondE2EELoginRequest(args.Verifier, args.PublicKey, args.EncryptedKeyChain, args.HashKeyChain, args.ErrorCode);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void confirmE2EELogin_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      confirmE2EELogin_args args = new confirmE2EELogin_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      confirmE2EELogin_result result = new confirmE2EELogin_result();
      try
      {
        try
        {
          result.Success = iface_.confirmE2EELogin(args.Verifier, args.DeviceSecret);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("confirmE2EELogin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("confirmE2EELogin", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void logoutZ_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      logoutZ_args args = new logoutZ_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      logoutZ_result result = new logoutZ_result();
      try
      {
        try
        {
          iface_.logoutZ();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("logoutZ", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("logoutZ", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loginZ_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loginZ_args args = new loginZ_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loginZ_result result = new loginZ_result();
      try
      {
        try
        {
          result.Success = iface_.loginZ(args.LoginRequest);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginZ", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loginZ", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void issueTokenForAccountMigrationSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      issueTokenForAccountMigrationSettings_args args = new issueTokenForAccountMigrationSettings_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
      try
      {
        try
        {
          result.Success = iface_.issueTokenForAccountMigrationSettings(args.Enforce);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void issueTokenForAccountMigration_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      issueTokenForAccountMigration_args args = new issueTokenForAccountMigration_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
      try
      {
        try
        {
          result.Success = iface_.issueTokenForAccountMigration(args.MigrationSessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void verifyQrcodeWithE2EE_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      verifyQrcodeWithE2EE_args args = new verifyQrcodeWithE2EE_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
      try
      {
        try
        {
          result.Success = iface_.verifyQrcodeWithE2EE(args.Verifier, args.PinCode, args.ErrorCode, args.PublicKey, args.EncryptedKeyChain, args.HashKeyChain);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class normalizePhoneNumber_args : TBase
  {
    private string _countryCode;
    private string _phoneNumber;
    private string _countryCodeHint;

    public string CountryCode
    {
      get
      {
        return _countryCode;
      }
      set
      {
        __isset.countryCode = true;
        this._countryCode = value;
      }
    }

    public string PhoneNumber
    {
      get
      {
        return _phoneNumber;
      }
      set
      {
        __isset.phoneNumber = true;
        this._phoneNumber = value;
      }
    }

    public string CountryCodeHint
    {
      get
      {
        return _countryCodeHint;
      }
      set
      {
        __isset.countryCodeHint = true;
        this._countryCodeHint = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool countryCode;
      public bool phoneNumber;
      public bool countryCodeHint;
    }

    public normalizePhoneNumber_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                CountryCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PhoneNumber = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                CountryCodeHint = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("normalizePhoneNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CountryCode != null && __isset.countryCode) {
          field.Name = "countryCode";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CountryCode);
          oprot.WriteFieldEnd();
        }
        if (PhoneNumber != null && __isset.phoneNumber) {
          field.Name = "phoneNumber";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PhoneNumber);
          oprot.WriteFieldEnd();
        }
        if (CountryCodeHint != null && __isset.countryCodeHint) {
          field.Name = "countryCodeHint";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CountryCodeHint);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("normalizePhoneNumber_args(");
      bool __first = true;
      if (CountryCode != null && __isset.countryCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CountryCode: ");
        __sb.Append(CountryCode);
      }
      if (PhoneNumber != null && __isset.phoneNumber) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PhoneNumber: ");
        __sb.Append(PhoneNumber);
      }
      if (CountryCodeHint != null && __isset.countryCodeHint) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CountryCodeHint: ");
        __sb.Append(CountryCodeHint);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class normalizePhoneNumber_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public normalizePhoneNumber_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("normalizePhoneNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("normalizePhoneNumber_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class respondE2EELoginRequest_args : TBase
  {
    private string _verifier;
    private E2EEPublicKey _publicKey;
    private byte[] _encryptedKeyChain;
    private byte[] _hashKeyChain;
    private ErrorCode _errorCode;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public E2EEPublicKey PublicKey
    {
      get
      {
        return _publicKey;
      }
      set
      {
        __isset.publicKey = true;
        this._publicKey = value;
      }
    }

    public byte[] EncryptedKeyChain
    {
      get
      {
        return _encryptedKeyChain;
      }
      set
      {
        __isset.encryptedKeyChain = true;
        this._encryptedKeyChain = value;
      }
    }

    public byte[] HashKeyChain
    {
      get
      {
        return _hashKeyChain;
      }
      set
      {
        __isset.hashKeyChain = true;
        this._hashKeyChain = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ErrorCode"/>
    /// </summary>
    public ErrorCode ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
      public bool publicKey;
      public bool encryptedKeyChain;
      public bool hashKeyChain;
      public bool errorCode;
    }

    public respondE2EELoginRequest_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                PublicKey = new E2EEPublicKey();
                PublicKey.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                EncryptedKeyChain = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                HashKeyChain = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                ErrorCode = (ErrorCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("respondE2EELoginRequest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (PublicKey != null && __isset.publicKey) {
          field.Name = "publicKey";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          PublicKey.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (EncryptedKeyChain != null && __isset.encryptedKeyChain) {
          field.Name = "encryptedKeyChain";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(EncryptedKeyChain);
          oprot.WriteFieldEnd();
        }
        if (HashKeyChain != null && __isset.hashKeyChain) {
          field.Name = "hashKeyChain";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(HashKeyChain);
          oprot.WriteFieldEnd();
        }
        if (__isset.errorCode) {
          field.Name = "errorCode";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ErrorCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("respondE2EELoginRequest_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      if (PublicKey != null && __isset.publicKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublicKey: ");
        __sb.Append(PublicKey== null ? "<null>" : PublicKey.ToString());
      }
      if (EncryptedKeyChain != null && __isset.encryptedKeyChain) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncryptedKeyChain: ");
        __sb.Append(EncryptedKeyChain);
      }
      if (HashKeyChain != null && __isset.hashKeyChain) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HashKeyChain: ");
        __sb.Append(HashKeyChain);
      }
      if (__isset.errorCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ErrorCode: ");
        __sb.Append(ErrorCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class respondE2EELoginRequest_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public respondE2EELoginRequest_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("respondE2EELoginRequest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("respondE2EELoginRequest_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmE2EELogin_args : TBase
  {
    private string _verifier;
    private byte[] _deviceSecret;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public byte[] DeviceSecret
    {
      get
      {
        return _deviceSecret;
      }
      set
      {
        __isset.deviceSecret = true;
        this._deviceSecret = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
      public bool deviceSecret;
    }

    public confirmE2EELogin_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DeviceSecret = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmE2EELogin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (DeviceSecret != null && __isset.deviceSecret) {
          field.Name = "deviceSecret";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(DeviceSecret);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmE2EELogin_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      if (DeviceSecret != null && __isset.deviceSecret) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceSecret: ");
        __sb.Append(DeviceSecret);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmE2EELogin_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public confirmE2EELogin_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmE2EELogin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmE2EELogin_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class logoutZ_args : TBase
  {

    public logoutZ_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("logoutZ_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("logoutZ_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class logoutZ_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public logoutZ_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("logoutZ_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("logoutZ_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginZ_args : TBase
  {
    private LoginRequest _loginRequest;

    public LoginRequest LoginRequest
    {
      get
      {
        return _loginRequest;
      }
      set
      {
        __isset.loginRequest = true;
        this._loginRequest = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool loginRequest;
    }

    public loginZ_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                LoginRequest = new LoginRequest();
                LoginRequest.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginZ_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (LoginRequest != null && __isset.loginRequest) {
          field.Name = "loginRequest";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          LoginRequest.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginZ_args(");
      bool __first = true;
      if (LoginRequest != null && __isset.loginRequest) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LoginRequest: ");
        __sb.Append(LoginRequest== null ? "<null>" : LoginRequest.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginZ_result : TBase
  {
    private LoginResult _success;
    private TalkException _e;

    public LoginResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public loginZ_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LoginResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginZ_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginZ_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueTokenForAccountMigrationSettings_args : TBase
  {
    private bool _enforce;

    public bool Enforce
    {
      get
      {
        return _enforce;
      }
      set
      {
        __isset.enforce = true;
        this._enforce = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool enforce;
    }

    public issueTokenForAccountMigrationSettings_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Bool) {
                Enforce = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueTokenForAccountMigrationSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.enforce) {
          field.Name = "enforce";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Enforce);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueTokenForAccountMigrationSettings_args(");
      bool __first = true;
      if (__isset.enforce) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Enforce: ");
        __sb.Append(Enforce);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueTokenForAccountMigrationSettings_result : TBase
  {
    private SecurityCenterResult _success;
    private TalkException _e;

    public SecurityCenterResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public issueTokenForAccountMigrationSettings_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SecurityCenterResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueTokenForAccountMigrationSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueTokenForAccountMigrationSettings_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueTokenForAccountMigration_args : TBase
  {
    private string _migrationSessionId;

    public string MigrationSessionId
    {
      get
      {
        return _migrationSessionId;
      }
      set
      {
        __isset.migrationSessionId = true;
        this._migrationSessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool migrationSessionId;
    }

    public issueTokenForAccountMigration_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MigrationSessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueTokenForAccountMigration_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MigrationSessionId != null && __isset.migrationSessionId) {
          field.Name = "migrationSessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MigrationSessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueTokenForAccountMigration_args(");
      bool __first = true;
      if (MigrationSessionId != null && __isset.migrationSessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MigrationSessionId: ");
        __sb.Append(MigrationSessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class issueTokenForAccountMigration_result : TBase
  {
    private SecurityCenterResult _success;
    private TalkException _e;

    public SecurityCenterResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public issueTokenForAccountMigration_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SecurityCenterResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("issueTokenForAccountMigration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("issueTokenForAccountMigration_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyQrcodeWithE2EE_args : TBase
  {
    private string _verifier;
    private string _pinCode;
    private ErrorCode _errorCode;
    private E2EEPublicKey _publicKey;
    private byte[] _encryptedKeyChain;
    private byte[] _hashKeyChain;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public string PinCode
    {
      get
      {
        return _pinCode;
      }
      set
      {
        __isset.pinCode = true;
        this._pinCode = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ErrorCode"/>
    /// </summary>
    public ErrorCode ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }

    public E2EEPublicKey PublicKey
    {
      get
      {
        return _publicKey;
      }
      set
      {
        __isset.publicKey = true;
        this._publicKey = value;
      }
    }

    public byte[] EncryptedKeyChain
    {
      get
      {
        return _encryptedKeyChain;
      }
      set
      {
        __isset.encryptedKeyChain = true;
        this._encryptedKeyChain = value;
      }
    }

    public byte[] HashKeyChain
    {
      get
      {
        return _hashKeyChain;
      }
      set
      {
        __isset.hashKeyChain = true;
        this._hashKeyChain = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
      public bool pinCode;
      public bool errorCode;
      public bool publicKey;
      public bool encryptedKeyChain;
      public bool hashKeyChain;
    }

    public verifyQrcodeWithE2EE_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PinCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                ErrorCode = (ErrorCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                PublicKey = new E2EEPublicKey();
                PublicKey.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                EncryptedKeyChain = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                HashKeyChain = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyQrcodeWithE2EE_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (PinCode != null && __isset.pinCode) {
          field.Name = "pinCode";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PinCode);
          oprot.WriteFieldEnd();
        }
        if (__isset.errorCode) {
          field.Name = "errorCode";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ErrorCode);
          oprot.WriteFieldEnd();
        }
        if (PublicKey != null && __isset.publicKey) {
          field.Name = "publicKey";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          PublicKey.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (EncryptedKeyChain != null && __isset.encryptedKeyChain) {
          field.Name = "encryptedKeyChain";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(EncryptedKeyChain);
          oprot.WriteFieldEnd();
        }
        if (HashKeyChain != null && __isset.hashKeyChain) {
          field.Name = "hashKeyChain";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(HashKeyChain);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyQrcodeWithE2EE_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      if (PinCode != null && __isset.pinCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PinCode: ");
        __sb.Append(PinCode);
      }
      if (__isset.errorCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ErrorCode: ");
        __sb.Append(ErrorCode);
      }
      if (PublicKey != null && __isset.publicKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublicKey: ");
        __sb.Append(PublicKey== null ? "<null>" : PublicKey.ToString());
      }
      if (EncryptedKeyChain != null && __isset.encryptedKeyChain) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EncryptedKeyChain: ");
        __sb.Append(EncryptedKeyChain);
      }
      if (HashKeyChain != null && __isset.hashKeyChain) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("HashKeyChain: ");
        __sb.Append(HashKeyChain);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyQrcodeWithE2EE_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public verifyQrcodeWithE2EE_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyQrcodeWithE2EE_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyQrcodeWithE2EE_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
