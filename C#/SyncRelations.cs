/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SyncRelations : TBase
{
  private bool _syncAll;
  private List<SyncParamContact> _syncParamContact;
  private List<SyncParamMid> _syncParamMid;

  public bool SyncAll
  {
    get
    {
      return _syncAll;
    }
    set
    {
      __isset.syncAll = true;
      this._syncAll = value;
    }
  }

  public List<SyncParamContact> SyncParamContact
  {
    get
    {
      return _syncParamContact;
    }
    set
    {
      __isset.syncParamContact = true;
      this._syncParamContact = value;
    }
  }

  public List<SyncParamMid> SyncParamMid
  {
    get
    {
      return _syncParamMid;
    }
    set
    {
      __isset.syncParamMid = true;
      this._syncParamMid = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool syncAll;
    public bool syncParamContact;
    public bool syncParamMid;
  }

  public SyncRelations() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              SyncAll = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                SyncParamContact = new List<SyncParamContact>();
                TList _list276 = iprot.ReadListBegin();
                for( int _i277 = 0; _i277 < _list276.Count; ++_i277)
                {
                  SyncParamContact _elem278;
                  _elem278 = new SyncParamContact();
                  _elem278.Read(iprot);
                  SyncParamContact.Add(_elem278);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                SyncParamMid = new List<SyncParamMid>();
                TList _list279 = iprot.ReadListBegin();
                for( int _i280 = 0; _i280 < _list279.Count; ++_i280)
                {
                  SyncParamMid _elem281;
                  _elem281 = new SyncParamMid();
                  _elem281.Read(iprot);
                  SyncParamMid.Add(_elem281);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SyncRelations");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.syncAll) {
        field.Name = "syncAll";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SyncAll);
        oprot.WriteFieldEnd();
      }
      if (SyncParamContact != null && __isset.syncParamContact) {
        field.Name = "syncParamContact";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SyncParamContact.Count));
          foreach (SyncParamContact _iter282 in SyncParamContact)
          {
            _iter282.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SyncParamMid != null && __isset.syncParamMid) {
        field.Name = "syncParamMid";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, SyncParamMid.Count));
          foreach (SyncParamMid _iter283 in SyncParamMid)
          {
            _iter283.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SyncRelations(");
    bool __first = true;
    if (__isset.syncAll) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncAll: ");
      __sb.Append(SyncAll);
    }
    if (SyncParamContact != null && __isset.syncParamContact) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncParamContact: ");
      __sb.Append(SyncParamContact);
    }
    if (SyncParamMid != null && __isset.syncParamMid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SyncParamMid: ");
      __sb.Append(SyncParamMid);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

