/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class TalkService {
  public interface ISync {
    Dictionary<string, List<ChatRoomAnnouncement>> getChatRoomAnnouncementsBulk(List<string> chatRoomMids);
    List<ChatRoomAnnouncement> getChatRoomAnnouncements(string chatRoomMid);
    ChatRoomAnnouncement createChatRoomAnnouncement(int reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents);
    void removeChatRoomAnnouncement(int reqSeq, string chatRoomMid, long announcementSeq);
    void unsendMessage(int seq, string messageId);
    @Group getGroupWithoutMembers(string groupId);
    void requestResendMessage(int reqSeq, string senderMid, string messageId);
    void respondResendMessage(int reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode);
    void acceptGroupInvitation(int reqSeq, string groupId);
    void acceptGroupInvitationByTicket(int reqSeq, string GroupMid, string ticketId);
    void acceptProximityMatches(string sessionId, THashSet<string> ids);
    List<string> acquireCallRoute(string to);
    string acquireCallTicket(string to);
    string acquireEncryptedAccessToken(FeatureType featureType);
    string addSnsId(SnsIdType snsIdType, string snsAccessToken);
    void blockContact(int reqSeq, string id);
    void blockRecommendation(int reqSeq, string id);
    void cancelGroupInvitation(int reqSeq, string groupId, List<string> contactIds);
    VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method);
    void clearIdentityCredential();
    void clearMessageBox(string channelId, string messageBoxId);
    void closeProximityMatch(string sessionId);
    Dictionary<string, string> commitSendMessage(int seq, string messageId, List<string> receiverMids);
    Dictionary<string, string> commitSendMessages(int seq, List<string> messageIds, List<string> receiverMids);
    Dictionary<string, string> commitUpdateProfile(int seq, List<ProfileAttribute> attrs, List<string> receiverMids);
    void confirmEmail(string verifier, string pinCode);
    @Group createGroup(int seq, string name, List<string> contactIds);
    string createQrcodeBase64Image(string url, string characterSet, int imageSize, int x, int y, int width, int height);
    Room createRoom(int reqSeq, List<string> contactIds);
    string createSession();
    List<Announcement> fetchAnnouncements(int lastFetchedIndex);
    List<Message> fetchMessages(long localTs, int count);
    List<Operation> fetchOperations(long localRev, int count);
    List<Operation> fetchOps(long localRev, int count, long globalRev, long individualRev);
    Dictionary<string, Contact> findAndAddContactsByEmail(int reqSeq, THashSet<string> emails);
    Dictionary<string, Contact> findAndAddContactsByMid(int reqSeq, string mid, ContactType type, string reference);
    @Group findGroupByTicketV2(string ticketId);
    Dictionary<string, Contact> findAndAddContactsByPhone(int reqSeq, THashSet<string> phones);
    List<FriendRequest> getFriendRequests(FriendRequestDirection direction, long lastSeenSeqId);
    void removeFriendRequest(FriendRequestDirection direction, string midOrEMid);
    Dictionary<string, Contact> findAndAddContactsByUserid(int reqSeq, string userid);
    Contact findContactByUserid(string userid);
    Contact findContactByUserTicket(string ticketIdWithTag);
    Dictionary<string, Contact> findContactsByEmail(THashSet<string> emails);
    Dictionary<string, Contact> findContactsByPhone(THashSet<string> phones);
    SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash);
    void finishUpdateVerification(string sessionId);
    Ticket generateUserTicket(long expirationTime, int maxUseCount);
    void destroyMessage(int seq, string chatId, string messageId, sbyte sessionId);
    THashSet<string> getAcceptedProximityMatches(string sessionId);
    List<string> getActiveBuddySubscriberIds();
    List<string> getAllContactIds();
    AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName);
    List<string> getBlockedContactIds();
    RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId);
    RegisterWithPhoneNumberResult registerWithPhoneNumberAndPassword(string sessionId, string keynm, string encrypted);
    AnalyticsInfo getAnalyticsInfo();
    void reportClientStatistics(int reqSeq, ReportCategory category, int count);
    string verifyPhoneNumberForLogin(string verifierFromPhone, string pinCodeForPhone, string verifierFromLogin);
    PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash);
    List<string> getBlockedContactIdsByRange(int start, int count);
    List<string> getBlockedRecommendationIds();
    List<string> getBuddyBlockerIds();
    Geolocation getBuddyLocation(string mid, int index);
    List<CompactContact> getCompactContactsModifiedSince(long timestamp);
    @Group getCompactGroup(string groupId);
    Room getCompactRoom(string roomId);
    Contact getContact(string id);
    List<Contact> getContacts(List<string> ids);
    Contact getContactWithFriendRequestStatus(string id);
    string getCountryWithRequestIp();
    List<string> getFavoriteMids();
    @Group getGroup(string groupId);
    List<string> getGroupIdsInvited();
    List<string> getGroupIdsJoined();
    List<@Group> getGroups(List<string> groupIds);
    List<string> getHiddenContactMids();
    string getIdentityIdentifier();
    int getLastAnnouncementIndex();
    long getLastOpRevision();
    SuggestDictionaryRevisions getSuggestRevisions();
    List<Message> getPreviousMessagesV2WithReadCount(string messageBoxId, MessageBoxV2MessageId endMessageId, int messagesCount);
    TMessageBox getMessageBox(string channelId, string messageBoxId, int lastMessagesCount);
    TMessageBoxWrapUp getMessageBoxCompactWrapUp(string mid);
    TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(int start, int messageBoxCount);
    List<TMessageBox> getMessageBoxList(string channelId, int lastMessagesCount);
    List<TMessageBox> getMessageBoxListByStatus(string channelId, int lastMessagesCount, int status);
    TMessageBoxWrapUp getMessageBoxWrapUp(string mid);
    TMessageBoxWrapUpResponse getMessageBoxWrapUpList(int start, int messageBoxCount);
    List<Message> getMessagesBySequenceNumber(string channelId, string messageBoxId, long startSeq, long endSeq);
    List<Message> getNextMessages(string messageBoxId, long startSeq, int messagesCount);
    List<NotificationType> getNotificationPolicy(CarrierCode carrier);
    List<Message> getPreviousMessages(string messageBoxId, long endSeq, int messagesCount);
    Profile getProfile();
    ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId);
    THashSet<Contact> getProximityMatchCandidates(string sessionId);
    List<Message> getRecentMessages(string messageBoxId, int messagesCount);
    List<string> getRecommendationIds();
    Room getRoom(string roomId);
    RSAKey getRSAKeyInfo(IdentityProvider provider);
    long getServerTime();
    List<LoginSession> getSessions();
    Settings getSettings();
    List<@Group> getGroupsV2(List<string> groupIds);
    Settings getSettingsAttributes(int attrBitset);
    SystemConfiguration getSystemConfiguration();
    Ticket getUserTicket();
    WapInvitation getWapInvitation(string invitationHash);
    void invalidateUserTicket();
    void inviteFriendsBySms(List<string> phoneNumberList);
    void inviteIntoGroup(int reqSeq, string groupId, List<string> contactIds);
    void inviteIntoRoom(int reqSeq, string roomId, List<string> contactIds);
    void inviteViaEmail(int reqSeq, string email, string name);
    bool isIdentityIdentifierAvailable(IdentityProvider provider, string identifier);
    bool isUseridAvailable(string userid);
    void kickoutFromGroup(int reqSeq, string groupId, List<string> contactIds);
    string reissueGroupTicket(string groupMid);
    @Group findGroupByTicket(string ticketId);
    void leaveGroup(int reqSeq, string groupId);
    void leaveRoom(int reqSeq, string roomId);
    string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate);
    LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate);
    string loginWithVerifier(string verifier);
    LoginResult loginWithVerifierForCerificate(string verifier);
    LoginResult loginWithVerifierForCertificate(string verifier);
    void logout();
    void logoutSession(string tokenKey);
    void noop();
    void notifiedRedirect(Dictionary<string, string> paramMap);
    Dictionary<string, string> notifyBuddyOnAir(int seq, List<string> receiverMids);
    void notifyIndividualEvent(NotificationStatus notificationStatus, List<string> receiverMids);
    void notifyInstalled(string udidHash, string applicationTypeWithExtensions);
    void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions);
    void notifySleep(long lastRev, int badge);
    void notifyUpdated(long lastRev, DeviceInfo deviceInfo);
    string openProximityMatch(Location location);
    string registerBuddyUser(string buddyId, string registrarPassword);
    void registerBuddyUserid(int seq, string userid);
    string registerDevice(string sessionId);
    string registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier);
    string registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo);
    string registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid, string migrationPincodeSessionId);
    bool registerUserid(int reqSeq, string userid);
    string registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo);
    string registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo);
    RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid);
    string registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo);
    string reissueDeviceCredential();
    string reissueUserTicket(long expirationTime, int maxUseCount);
    List<TMessageReadRange> getMessageReadRange(List<string> chatIds);
    void rejectGroupInvitation(int reqSeq, string groupId);
    void releaseSession();
    void removeAllMessages(int seq, string lastMessageId);
    void removeBuddyLocation(string mid, int index);
    bool removeMessage(string messageId);
    ContactTransition makeUserAddMyselfAsContact(string contactOwnerMid);
    bool removeMessageFromMyHome(string messageId);
    string removeSnsId(SnsIdType snsIdType);
    void report(long syncOpRevision, SyncCategory category, string report);
    List<ContactReportResult> reportContacts(long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType);
    void reportGroups(long syncOpRevision, List<@Group> groups);
    void reportProfile(long syncOpRevision, Profile profile);
    void reportRooms(long syncOpRevision, List<Room> rooms);
    Contact findAndAddContactByMetaTag(int reqSeq, string userid, string reference);
    void reportSettings(long syncOpRevision, Settings settings);
    void reportSpam(string chatMid, List<string> memberMids, List<SpammerReason> spammerReasons, List<string> senderMids, List<string> spamMessageIds, List<string> spamMessages);
    void reportSpammer(string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds);
    void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale);
    EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation);
    void requestIdentityUnbind(IdentityProvider provider, string identifier);
    EmailConfirmationSession resendEmailConfirmation(string verifier);
    void resendPinCode(string sessionId);
    void resendPinCodeBySMS(string sessionId);
    void sendChatChecked(int seq, string consumer, string lastMessageId);
    CommitMessageResult sendMessageAwaitCommit(int seq, Message message);
    void sendChatRemoved(int seq, string consumer, string lastMessageId);
    Dictionary<string, string> sendContentPreviewUpdated(int esq, string messageId, List<string> receiverMids);
    void sendContentReceipt(int seq, string consumer, string messageId);
    void sendDummyPush();
    void removeE2EEPublicKey(E2EEPublicKey publicKey);
    E2EENegotiationResult negotiateE2EEPublicKey(string mid);
    E2EEPublicKey getE2EEPublicKey(string mid, int version, int keyId);
    void requestE2EEKeyExchange(int reqSeq, byte[] temporalPublicKey, E2EEPublicKey publicKey, byte[] verifier);
    Dictionary<string, E2EEPublicKey> getLastE2EEPublicKeys(string chatMid);
    E2EEPublicKey registerE2EEPublicKey(int reqSeq, E2EEPublicKey publicKey);
    List<E2EEPublicKey> getE2EEPublicKeys();
    List<E2EEPublicKey> getE2EEPublicKeysEx(bool ignoreE2EEStatus);
    List<Operation> getReadMessageOpsInBulk(List<string> chatIds);
    Message sendEvent(int seq, Message message);
    Message sendMessage(int seq, Message message);
    void sendMessageIgnored(int seq, string consumer, List<string> messageIds);
    void sendMessageReceipt(int seq, string consumer, List<string> messageIds);
    Contact findContactByMetaTag(string userid, string reference);
    Message sendMessageToMyHome(int seq, Message message);
    void setBuddyLocation(string mid, int index, Geolocation location);
    void setIdentityCredential(string identifier, string verifier, IdentityProvider provider);
    void setNotificationsEnabled(int reqSeq, MIDType type, string target, bool enablement);
    VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale);
    VerificationSessionData startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash);
    void updateGroupPreferenceAttribute(int reqSeq, string groupMid, Dictionary<GroupPreferenceAttribute, string> updatedAttrs);
    Room createRoomV2(int reqSeq, List<string> contactIds);
    void storeUpdateProfileAttribute(int seq, ProfileAttribute profileAttribute, string @value);
    List<SnsFriendContactRegistration> syncContactBySnsIds(int reqSeq, List<SnsFriendModification> modifications);
    Dictionary<string, ContactRegistration> syncContacts(int reqSeq, List<ContactModification> localContacts);
    Message trySendMessage(int seq, Message message);
    List<Message> getNextMessagesV2(string messageBoxId, MessageBoxV2MessageId startMessageId, int messagesCount);
    TMessageBoxWrapUp getMessageBoxCompactWrapUpV2(string messageBoxId);
    List<Message> getRecentMessagesV2(string messageBoxId, int messagesCount);
    Dictionary<string, string> validateContactsOnBot(List<string> contacts);
    void tryFriendRequest(string midOrEMid, FriendRequestMethod method, string friendRequestParams);
    void unblockContact(int reqSeq, string id);
    void unblockRecommendation(int reqSeq, string id);
    string unregisterUserAndDevice();
    void updateApnsDeviceToken(byte[] apnsDeviceToken);
    void updateBuddySetting(string key, string @value);
    void updateC2DMRegistrationId(string registrationId);
    void updateContactSetting(int reqSeq, string mid, ContactSetting flag, string @value);
    void updateCustomModeSettings(CustomMode customMode, Dictionary<string, string> paramMap);
    void updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo);
    void updateGroup(int reqSeq, @Group @group);
    void updateNotificationToken(NotificationType type, string token);
    void updateNotificationTokenWithBytes(NotificationType type, byte[] token);
    void updateProfile(int reqSeq, Profile profile);
    void updateProfileAttribute(int reqSeq, ProfileAttribute attr, string @value);
    void updateRegion(string region);
    void updateSettings(int reqSeq, Settings settings);
    int updateSettings2(int reqSeq, Settings settings);
    void updateSettingsAttribute(int reqSeq, SettingsAttribute attr, string @value);
    int updateSettingsAttributes(int reqSeq, int attrBitset, Settings settings);
    void verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password);
    UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential);
    VerificationResult verifyPhone(string sessionId, string pinCode, string udidHash);
    string verifyQrcode(string verifier, string pinCode);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_getChatRoomAnnouncementsBulk(AsyncCallback callback, object state, List<string> chatRoomMids);
    Dictionary<string, List<ChatRoomAnnouncement>> End_getChatRoomAnnouncementsBulk(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getChatRoomAnnouncements(AsyncCallback callback, object state, string chatRoomMid);
    List<ChatRoomAnnouncement> End_getChatRoomAnnouncements(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createChatRoomAnnouncement(AsyncCallback callback, object state, int reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents);
    ChatRoomAnnouncement End_createChatRoomAnnouncement(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeChatRoomAnnouncement(AsyncCallback callback, object state, int reqSeq, string chatRoomMid, long announcementSeq);
    void End_removeChatRoomAnnouncement(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_unsendMessage(AsyncCallback callback, object state, int seq, string messageId);
    void End_unsendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupWithoutMembers(AsyncCallback callback, object state, string groupId);
    @Group End_getGroupWithoutMembers(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_requestResendMessage(AsyncCallback callback, object state, int reqSeq, string senderMid, string messageId);
    void End_requestResendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_respondResendMessage(AsyncCallback callback, object state, int reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode);
    void End_respondResendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_acceptGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId);
    void End_acceptGroupInvitation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_acceptGroupInvitationByTicket(AsyncCallback callback, object state, int reqSeq, string GroupMid, string ticketId);
    void End_acceptGroupInvitationByTicket(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_acceptProximityMatches(AsyncCallback callback, object state, string sessionId, THashSet<string> ids);
    void End_acceptProximityMatches(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_acquireCallRoute(AsyncCallback callback, object state, string to);
    List<string> End_acquireCallRoute(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_acquireCallTicket(AsyncCallback callback, object state, string to);
    string End_acquireCallTicket(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_acquireEncryptedAccessToken(AsyncCallback callback, object state, FeatureType featureType);
    string End_acquireEncryptedAccessToken(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_addSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken);
    string End_addSnsId(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_blockContact(AsyncCallback callback, object state, int reqSeq, string id);
    void End_blockContact(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_blockRecommendation(AsyncCallback callback, object state, int reqSeq, string id);
    void End_blockRecommendation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_cancelGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds);
    void End_cancelGroupInvitation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_changeVerificationMethod(AsyncCallback callback, object state, string sessionId, VerificationMethod method);
    VerificationSessionData End_changeVerificationMethod(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_clearIdentityCredential(AsyncCallback callback, object state);
    void End_clearIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_clearMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId);
    void End_clearMessageBox(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_closeProximityMatch(AsyncCallback callback, object state, string sessionId);
    void End_closeProximityMatch(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_commitSendMessage(AsyncCallback callback, object state, int seq, string messageId, List<string> receiverMids);
    Dictionary<string, string> End_commitSendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_commitSendMessages(AsyncCallback callback, object state, int seq, List<string> messageIds, List<string> receiverMids);
    Dictionary<string, string> End_commitSendMessages(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_commitUpdateProfile(AsyncCallback callback, object state, int seq, List<ProfileAttribute> attrs, List<string> receiverMids);
    Dictionary<string, string> End_commitUpdateProfile(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_confirmEmail(AsyncCallback callback, object state, string verifier, string pinCode);
    void End_confirmEmail(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createGroup(AsyncCallback callback, object state, int seq, string name, List<string> contactIds);
    @Group End_createGroup(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createQrcodeBase64Image(AsyncCallback callback, object state, string url, string characterSet, int imageSize, int x, int y, int width, int height);
    string End_createQrcodeBase64Image(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createRoom(AsyncCallback callback, object state, int reqSeq, List<string> contactIds);
    Room End_createRoom(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createSession(AsyncCallback callback, object state);
    string End_createSession(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fetchAnnouncements(AsyncCallback callback, object state, int lastFetchedIndex);
    List<Announcement> End_fetchAnnouncements(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fetchMessages(AsyncCallback callback, object state, long localTs, int count);
    List<Message> End_fetchMessages(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fetchOperations(AsyncCallback callback, object state, long localRev, int count);
    List<Operation> End_fetchOperations(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_fetchOps(AsyncCallback callback, object state, long localRev, int count, long globalRev, long individualRev);
    List<Operation> End_fetchOps(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findAndAddContactsByEmail(AsyncCallback callback, object state, int reqSeq, THashSet<string> emails);
    Dictionary<string, Contact> End_findAndAddContactsByEmail(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findAndAddContactsByMid(AsyncCallback callback, object state, int reqSeq, string mid, ContactType type, string reference);
    Dictionary<string, Contact> End_findAndAddContactsByMid(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findGroupByTicketV2(AsyncCallback callback, object state, string ticketId);
    @Group End_findGroupByTicketV2(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findAndAddContactsByPhone(AsyncCallback callback, object state, int reqSeq, THashSet<string> phones);
    Dictionary<string, Contact> End_findAndAddContactsByPhone(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getFriendRequests(AsyncCallback callback, object state, FriendRequestDirection direction, long lastSeenSeqId);
    List<FriendRequest> End_getFriendRequests(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeFriendRequest(AsyncCallback callback, object state, FriendRequestDirection direction, string midOrEMid);
    void End_removeFriendRequest(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findAndAddContactsByUserid(AsyncCallback callback, object state, int reqSeq, string userid);
    Dictionary<string, Contact> End_findAndAddContactsByUserid(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findContactByUserid(AsyncCallback callback, object state, string userid);
    Contact End_findContactByUserid(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findContactByUserTicket(AsyncCallback callback, object state, string ticketIdWithTag);
    Contact End_findContactByUserTicket(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findContactsByEmail(AsyncCallback callback, object state, THashSet<string> emails);
    Dictionary<string, Contact> End_findContactsByEmail(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findContactsByPhone(AsyncCallback callback, object state, THashSet<string> phones);
    Dictionary<string, Contact> End_findContactsByPhone(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findSnsIdUserStatus(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string udidHash);
    SnsIdUserStatus End_findSnsIdUserStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_finishUpdateVerification(AsyncCallback callback, object state, string sessionId);
    void End_finishUpdateVerification(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_generateUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount);
    Ticket End_generateUserTicket(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_destroyMessage(AsyncCallback callback, object state, int seq, string chatId, string messageId, sbyte sessionId);
    void End_destroyMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAcceptedProximityMatches(AsyncCallback callback, object state, string sessionId);
    THashSet<string> End_getAcceptedProximityMatches(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getActiveBuddySubscriberIds(AsyncCallback callback, object state);
    List<string> End_getActiveBuddySubscriberIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAllContactIds(AsyncCallback callback, object state);
    List<string> End_getAllContactIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAuthQrcode(AsyncCallback callback, object state, bool keepLoggedIn, string systemName);
    AuthQrcode End_getAuthQrcode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getBlockedContactIds(AsyncCallback callback, object state);
    List<string> End_getBlockedContactIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerWithPhoneNumber(AsyncCallback callback, object state, string sessionId, string migrationPincodeSessionId);
    RegisterWithPhoneNumberResult End_registerWithPhoneNumber(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerWithPhoneNumberAndPassword(AsyncCallback callback, object state, string sessionId, string keynm, string encrypted);
    RegisterWithPhoneNumberResult End_registerWithPhoneNumberAndPassword(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getAnalyticsInfo(AsyncCallback callback, object state);
    AnalyticsInfo End_getAnalyticsInfo(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportClientStatistics(AsyncCallback callback, object state, int reqSeq, ReportCategory category, int count);
    void End_reportClientStatistics(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_verifyPhoneNumberForLogin(AsyncCallback callback, object state, string verifierFromPhone, string pinCodeForPhone, string verifierFromLogin);
    string End_verifyPhoneNumberForLogin(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_verifyPhoneNumber(AsyncCallback callback, object state, string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash);
    PhoneVerificationResult End_verifyPhoneNumber(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getBlockedContactIdsByRange(AsyncCallback callback, object state, int start, int count);
    List<string> End_getBlockedContactIdsByRange(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getBlockedRecommendationIds(AsyncCallback callback, object state);
    List<string> End_getBlockedRecommendationIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getBuddyBlockerIds(AsyncCallback callback, object state);
    List<string> End_getBuddyBlockerIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getBuddyLocation(AsyncCallback callback, object state, string mid, int index);
    Geolocation End_getBuddyLocation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCompactContactsModifiedSince(AsyncCallback callback, object state, long timestamp);
    List<CompactContact> End_getCompactContactsModifiedSince(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCompactGroup(AsyncCallback callback, object state, string groupId);
    @Group End_getCompactGroup(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCompactRoom(AsyncCallback callback, object state, string roomId);
    Room End_getCompactRoom(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getContact(AsyncCallback callback, object state, string id);
    Contact End_getContact(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getContacts(AsyncCallback callback, object state, List<string> ids);
    List<Contact> End_getContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getContactWithFriendRequestStatus(AsyncCallback callback, object state, string id);
    Contact End_getContactWithFriendRequestStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getCountryWithRequestIp(AsyncCallback callback, object state);
    string End_getCountryWithRequestIp(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getFavoriteMids(AsyncCallback callback, object state);
    List<string> End_getFavoriteMids(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroup(AsyncCallback callback, object state, string groupId);
    @Group End_getGroup(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupIdsInvited(AsyncCallback callback, object state);
    List<string> End_getGroupIdsInvited(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupIdsJoined(AsyncCallback callback, object state);
    List<string> End_getGroupIdsJoined(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroups(AsyncCallback callback, object state, List<string> groupIds);
    List<@Group> End_getGroups(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getHiddenContactMids(AsyncCallback callback, object state);
    List<string> End_getHiddenContactMids(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getIdentityIdentifier(AsyncCallback callback, object state);
    string End_getIdentityIdentifier(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getLastAnnouncementIndex(AsyncCallback callback, object state);
    int End_getLastAnnouncementIndex(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getLastOpRevision(AsyncCallback callback, object state);
    long End_getLastOpRevision(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSuggestRevisions(AsyncCallback callback, object state);
    SuggestDictionaryRevisions End_getSuggestRevisions(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPreviousMessagesV2WithReadCount(AsyncCallback callback, object state, string messageBoxId, MessageBoxV2MessageId endMessageId, int messagesCount);
    List<Message> End_getPreviousMessagesV2WithReadCount(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId, int lastMessagesCount);
    TMessageBox End_getMessageBox(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessageBoxCompactWrapUp(AsyncCallback callback, object state, string mid);
    TMessageBoxWrapUp End_getMessageBoxCompactWrapUp(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessageBoxCompactWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount);
    TMessageBoxWrapUpResponse End_getMessageBoxCompactWrapUpList(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessageBoxList(AsyncCallback callback, object state, string channelId, int lastMessagesCount);
    List<TMessageBox> End_getMessageBoxList(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessageBoxListByStatus(AsyncCallback callback, object state, string channelId, int lastMessagesCount, int status);
    List<TMessageBox> End_getMessageBoxListByStatus(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessageBoxWrapUp(AsyncCallback callback, object state, string mid);
    TMessageBoxWrapUp End_getMessageBoxWrapUp(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessageBoxWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount);
    TMessageBoxWrapUpResponse End_getMessageBoxWrapUpList(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessagesBySequenceNumber(AsyncCallback callback, object state, string channelId, string messageBoxId, long startSeq, long endSeq);
    List<Message> End_getMessagesBySequenceNumber(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getNextMessages(AsyncCallback callback, object state, string messageBoxId, long startSeq, int messagesCount);
    List<Message> End_getNextMessages(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getNotificationPolicy(AsyncCallback callback, object state, CarrierCode carrier);
    List<NotificationType> End_getNotificationPolicy(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getPreviousMessages(AsyncCallback callback, object state, string messageBoxId, long endSeq, int messagesCount);
    List<Message> End_getPreviousMessages(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getProfile(AsyncCallback callback, object state);
    Profile End_getProfile(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getProximityMatchCandidateList(AsyncCallback callback, object state, string sessionId);
    ProximityMatchCandidateResult End_getProximityMatchCandidateList(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getProximityMatchCandidates(AsyncCallback callback, object state, string sessionId);
    THashSet<Contact> End_getProximityMatchCandidates(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRecentMessages(AsyncCallback callback, object state, string messageBoxId, int messagesCount);
    List<Message> End_getRecentMessages(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRecommendationIds(AsyncCallback callback, object state);
    List<string> End_getRecommendationIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRoom(AsyncCallback callback, object state, string roomId);
    Room End_getRoom(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRSAKeyInfo(AsyncCallback callback, object state, IdentityProvider provider);
    RSAKey End_getRSAKeyInfo(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getServerTime(AsyncCallback callback, object state);
    long End_getServerTime(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSessions(AsyncCallback callback, object state);
    List<LoginSession> End_getSessions(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSettings(AsyncCallback callback, object state);
    Settings End_getSettings(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getGroupsV2(AsyncCallback callback, object state, List<string> groupIds);
    List<@Group> End_getGroupsV2(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSettingsAttributes(AsyncCallback callback, object state, int attrBitset);
    Settings End_getSettingsAttributes(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getSystemConfiguration(AsyncCallback callback, object state);
    SystemConfiguration End_getSystemConfiguration(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getUserTicket(AsyncCallback callback, object state);
    Ticket End_getUserTicket(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getWapInvitation(AsyncCallback callback, object state, string invitationHash);
    WapInvitation End_getWapInvitation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_invalidateUserTicket(AsyncCallback callback, object state);
    void End_invalidateUserTicket(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_inviteFriendsBySms(AsyncCallback callback, object state, List<string> phoneNumberList);
    void End_inviteFriendsBySms(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_inviteIntoGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds);
    void End_inviteIntoGroup(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_inviteIntoRoom(AsyncCallback callback, object state, int reqSeq, string roomId, List<string> contactIds);
    void End_inviteIntoRoom(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_inviteViaEmail(AsyncCallback callback, object state, int reqSeq, string email, string name);
    void End_inviteViaEmail(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_isIdentityIdentifierAvailable(AsyncCallback callback, object state, IdentityProvider provider, string identifier);
    bool End_isIdentityIdentifierAvailable(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_isUseridAvailable(AsyncCallback callback, object state, string userid);
    bool End_isUseridAvailable(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_kickoutFromGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds);
    void End_kickoutFromGroup(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reissueGroupTicket(AsyncCallback callback, object state, string groupMid);
    string End_reissueGroupTicket(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findGroupByTicket(AsyncCallback callback, object state, string ticketId);
    @Group End_findGroupByTicket(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_leaveGroup(AsyncCallback callback, object state, int reqSeq, string groupId);
    void End_leaveGroup(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_leaveRoom(AsyncCallback callback, object state, int reqSeq, string roomId);
    void End_leaveRoom(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_loginWithIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate);
    string End_loginWithIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_loginWithIdentityCredentialForCertificate(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate);
    LoginResult End_loginWithIdentityCredentialForCertificate(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_loginWithVerifier(AsyncCallback callback, object state, string verifier);
    string End_loginWithVerifier(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_loginWithVerifierForCerificate(AsyncCallback callback, object state, string verifier);
    LoginResult End_loginWithVerifierForCerificate(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_loginWithVerifierForCertificate(AsyncCallback callback, object state, string verifier);
    LoginResult End_loginWithVerifierForCertificate(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_logout(AsyncCallback callback, object state);
    void End_logout(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_logoutSession(AsyncCallback callback, object state, string tokenKey);
    void End_logoutSession(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_noop(AsyncCallback callback, object state);
    void End_noop(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_notifiedRedirect(AsyncCallback callback, object state, Dictionary<string, string> paramMap);
    void End_notifiedRedirect(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_notifyBuddyOnAir(AsyncCallback callback, object state, int seq, List<string> receiverMids);
    Dictionary<string, string> End_notifyBuddyOnAir(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_notifyIndividualEvent(AsyncCallback callback, object state, NotificationStatus notificationStatus, List<string> receiverMids);
    void End_notifyIndividualEvent(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_notifyInstalled(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions);
    void End_notifyInstalled(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_notifyRegistrationComplete(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions);
    void End_notifyRegistrationComplete(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_notifySleep(AsyncCallback callback, object state, long lastRev, int badge);
    void End_notifySleep(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_notifyUpdated(AsyncCallback callback, object state, long lastRev, DeviceInfo deviceInfo);
    void End_notifyUpdated(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_openProximityMatch(AsyncCallback callback, object state, Location location);
    string End_openProximityMatch(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerBuddyUser(AsyncCallback callback, object state, string buddyId, string registrarPassword);
    string End_registerBuddyUser(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerBuddyUserid(AsyncCallback callback, object state, int seq, string userid);
    void End_registerBuddyUserid(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerDevice(AsyncCallback callback, object state, string sessionId);
    string End_registerDevice(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerDeviceWithIdentityCredential(AsyncCallback callback, object state, string sessionId, IdentityProvider provider, string identifier, string verifier);
    string End_registerDeviceWithIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerDeviceWithoutPhoneNumber(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo);
    string End_registerDeviceWithoutPhoneNumber(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerDeviceWithoutPhoneNumberWithIdentityCredential(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid, string migrationPincodeSessionId);
    string End_registerDeviceWithoutPhoneNumberWithIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerUserid(AsyncCallback callback, object state, int reqSeq, string userid);
    bool End_registerUserid(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerWapDevice(AsyncCallback callback, object state, string invitationHash, string guidHash, string email, DeviceInfo deviceInfo);
    string End_registerWapDevice(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerWithExistingSnsIdAndIdentityCredential(AsyncCallback callback, object state, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo);
    string End_registerWithExistingSnsIdAndIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerWithSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid);
    RegisterWithSnsIdResult End_registerWithSnsId(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerWithSnsIdAndIdentityCredential(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo);
    string End_registerWithSnsIdAndIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reissueDeviceCredential(AsyncCallback callback, object state);
    string End_reissueDeviceCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reissueUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount);
    string End_reissueUserTicket(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessageReadRange(AsyncCallback callback, object state, List<string> chatIds);
    List<TMessageReadRange> End_getMessageReadRange(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_rejectGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId);
    void End_rejectGroupInvitation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_releaseSession(AsyncCallback callback, object state);
    void End_releaseSession(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeAllMessages(AsyncCallback callback, object state, int seq, string lastMessageId);
    void End_removeAllMessages(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeBuddyLocation(AsyncCallback callback, object state, string mid, int index);
    void End_removeBuddyLocation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeMessage(AsyncCallback callback, object state, string messageId);
    bool End_removeMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_makeUserAddMyselfAsContact(AsyncCallback callback, object state, string contactOwnerMid);
    ContactTransition End_makeUserAddMyselfAsContact(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeMessageFromMyHome(AsyncCallback callback, object state, string messageId);
    bool End_removeMessageFromMyHome(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeSnsId(AsyncCallback callback, object state, SnsIdType snsIdType);
    string End_removeSnsId(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_report(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, string report);
    void End_report(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportContacts(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType);
    List<ContactReportResult> End_reportContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportGroups(AsyncCallback callback, object state, long syncOpRevision, List<@Group> groups);
    void End_reportGroups(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportProfile(AsyncCallback callback, object state, long syncOpRevision, Profile profile);
    void End_reportProfile(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportRooms(AsyncCallback callback, object state, long syncOpRevision, List<Room> rooms);
    void End_reportRooms(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findAndAddContactByMetaTag(AsyncCallback callback, object state, int reqSeq, string userid, string reference);
    Contact End_findAndAddContactByMetaTag(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportSettings(AsyncCallback callback, object state, long syncOpRevision, Settings settings);
    void End_reportSettings(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportSpam(AsyncCallback callback, object state, string chatMid, List<string> memberMids, List<SpammerReason> spammerReasons, List<string> senderMids, List<string> spamMessageIds, List<string> spamMessages);
    void End_reportSpam(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_reportSpammer(AsyncCallback callback, object state, string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds);
    void End_reportSpammer(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_requestAccountPasswordReset(AsyncCallback callback, object state, IdentityProvider provider, string identifier, string locale);
    void End_requestAccountPasswordReset(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_requestEmailConfirmation(AsyncCallback callback, object state, EmailConfirmation emailConfirmation);
    EmailConfirmationSession End_requestEmailConfirmation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_requestIdentityUnbind(AsyncCallback callback, object state, IdentityProvider provider, string identifier);
    void End_requestIdentityUnbind(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_resendEmailConfirmation(AsyncCallback callback, object state, string verifier);
    EmailConfirmationSession End_resendEmailConfirmation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_resendPinCode(AsyncCallback callback, object state, string sessionId);
    void End_resendPinCode(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_resendPinCodeBySMS(AsyncCallback callback, object state, string sessionId);
    void End_resendPinCodeBySMS(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendChatChecked(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId);
    void End_sendChatChecked(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessageAwaitCommit(AsyncCallback callback, object state, int seq, Message message);
    CommitMessageResult End_sendMessageAwaitCommit(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendChatRemoved(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId);
    void End_sendChatRemoved(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendContentPreviewUpdated(AsyncCallback callback, object state, int esq, string messageId, List<string> receiverMids);
    Dictionary<string, string> End_sendContentPreviewUpdated(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendContentReceipt(AsyncCallback callback, object state, int seq, string consumer, string messageId);
    void End_sendContentReceipt(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendDummyPush(AsyncCallback callback, object state);
    void End_sendDummyPush(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_removeE2EEPublicKey(AsyncCallback callback, object state, E2EEPublicKey publicKey);
    void End_removeE2EEPublicKey(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_negotiateE2EEPublicKey(AsyncCallback callback, object state, string mid);
    E2EENegotiationResult End_negotiateE2EEPublicKey(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getE2EEPublicKey(AsyncCallback callback, object state, string mid, int version, int keyId);
    E2EEPublicKey End_getE2EEPublicKey(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_requestE2EEKeyExchange(AsyncCallback callback, object state, int reqSeq, byte[] temporalPublicKey, E2EEPublicKey publicKey, byte[] verifier);
    void End_requestE2EEKeyExchange(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getLastE2EEPublicKeys(AsyncCallback callback, object state, string chatMid);
    Dictionary<string, E2EEPublicKey> End_getLastE2EEPublicKeys(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_registerE2EEPublicKey(AsyncCallback callback, object state, int reqSeq, E2EEPublicKey publicKey);
    E2EEPublicKey End_registerE2EEPublicKey(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getE2EEPublicKeys(AsyncCallback callback, object state);
    List<E2EEPublicKey> End_getE2EEPublicKeys(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getE2EEPublicKeysEx(AsyncCallback callback, object state, bool ignoreE2EEStatus);
    List<E2EEPublicKey> End_getE2EEPublicKeysEx(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getReadMessageOpsInBulk(AsyncCallback callback, object state, List<string> chatIds);
    List<Operation> End_getReadMessageOpsInBulk(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendEvent(AsyncCallback callback, object state, int seq, Message message);
    Message End_sendEvent(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, int seq, Message message);
    Message End_sendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessageIgnored(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds);
    void End_sendMessageIgnored(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessageReceipt(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds);
    void End_sendMessageReceipt(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_findContactByMetaTag(AsyncCallback callback, object state, string userid, string reference);
    Contact End_findContactByMetaTag(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_sendMessageToMyHome(AsyncCallback callback, object state, int seq, Message message);
    Message End_sendMessageToMyHome(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setBuddyLocation(AsyncCallback callback, object state, string mid, int index, Geolocation location);
    void End_setBuddyLocation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setIdentityCredential(AsyncCallback callback, object state, string identifier, string verifier, IdentityProvider provider);
    void End_setIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_setNotificationsEnabled(AsyncCallback callback, object state, int reqSeq, MIDType type, string target, bool enablement);
    void End_setNotificationsEnabled(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_startUpdateVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale);
    VerificationSessionData End_startUpdateVerification(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_startVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash);
    VerificationSessionData End_startVerification(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateGroupPreferenceAttribute(AsyncCallback callback, object state, int reqSeq, string groupMid, Dictionary<GroupPreferenceAttribute, string> updatedAttrs);
    void End_updateGroupPreferenceAttribute(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_createRoomV2(AsyncCallback callback, object state, int reqSeq, List<string> contactIds);
    Room End_createRoomV2(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_storeUpdateProfileAttribute(AsyncCallback callback, object state, int seq, ProfileAttribute profileAttribute, string @value);
    void End_storeUpdateProfileAttribute(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_syncContactBySnsIds(AsyncCallback callback, object state, int reqSeq, List<SnsFriendModification> modifications);
    List<SnsFriendContactRegistration> End_syncContactBySnsIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_syncContacts(AsyncCallback callback, object state, int reqSeq, List<ContactModification> localContacts);
    Dictionary<string, ContactRegistration> End_syncContacts(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_trySendMessage(AsyncCallback callback, object state, int seq, Message message);
    Message End_trySendMessage(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getNextMessagesV2(AsyncCallback callback, object state, string messageBoxId, MessageBoxV2MessageId startMessageId, int messagesCount);
    List<Message> End_getNextMessagesV2(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getMessageBoxCompactWrapUpV2(AsyncCallback callback, object state, string messageBoxId);
    TMessageBoxWrapUp End_getMessageBoxCompactWrapUpV2(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getRecentMessagesV2(AsyncCallback callback, object state, string messageBoxId, int messagesCount);
    List<Message> End_getRecentMessagesV2(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_validateContactsOnBot(AsyncCallback callback, object state, List<string> contacts);
    Dictionary<string, string> End_validateContactsOnBot(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_tryFriendRequest(AsyncCallback callback, object state, string midOrEMid, FriendRequestMethod method, string friendRequestParams);
    void End_tryFriendRequest(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_unblockContact(AsyncCallback callback, object state, int reqSeq, string id);
    void End_unblockContact(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_unblockRecommendation(AsyncCallback callback, object state, int reqSeq, string id);
    void End_unblockRecommendation(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_unregisterUserAndDevice(AsyncCallback callback, object state);
    string End_unregisterUserAndDevice(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateApnsDeviceToken(AsyncCallback callback, object state, byte[] apnsDeviceToken);
    void End_updateApnsDeviceToken(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateBuddySetting(AsyncCallback callback, object state, string key, string @value);
    void End_updateBuddySetting(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateC2DMRegistrationId(AsyncCallback callback, object state, string registrationId);
    void End_updateC2DMRegistrationId(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateContactSetting(AsyncCallback callback, object state, int reqSeq, string mid, ContactSetting flag, string @value);
    void End_updateContactSetting(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateCustomModeSettings(AsyncCallback callback, object state, CustomMode customMode, Dictionary<string, string> paramMap);
    void End_updateCustomModeSettings(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateDeviceInfo(AsyncCallback callback, object state, string deviceUid, DeviceInfo deviceInfo);
    void End_updateDeviceInfo(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateGroup(AsyncCallback callback, object state, int reqSeq, @Group @group);
    void End_updateGroup(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateNotificationToken(AsyncCallback callback, object state, NotificationType type, string token);
    void End_updateNotificationToken(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateNotificationTokenWithBytes(AsyncCallback callback, object state, NotificationType type, byte[] token);
    void End_updateNotificationTokenWithBytes(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateProfile(AsyncCallback callback, object state, int reqSeq, Profile profile);
    void End_updateProfile(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateProfileAttribute(AsyncCallback callback, object state, int reqSeq, ProfileAttribute attr, string @value);
    void End_updateProfileAttribute(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateRegion(AsyncCallback callback, object state, string region);
    void End_updateRegion(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSettings(AsyncCallback callback, object state, int reqSeq, Settings settings);
    void End_updateSettings(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSettings2(AsyncCallback callback, object state, int reqSeq, Settings settings);
    int End_updateSettings2(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSettingsAttribute(AsyncCallback callback, object state, int reqSeq, SettingsAttribute attr, string @value);
    void End_updateSettingsAttribute(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_updateSettingsAttributes(AsyncCallback callback, object state, int reqSeq, int attrBitset, Settings settings);
    int End_updateSettingsAttributes(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_verifyIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password);
    void End_verifyIdentityCredential(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_verifyIdentityCredentialWithResult(AsyncCallback callback, object state, IdentityCredential identityCredential);
    UserAuthStatus End_verifyIdentityCredentialWithResult(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_verifyPhone(AsyncCallback callback, object state, string sessionId, string pinCode, string udidHash);
    VerificationResult End_verifyPhone(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_verifyQrcode(AsyncCallback callback, object state, string verifier, string pinCode);
    string End_verifyQrcode(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getChatRoomAnnouncementsBulk(AsyncCallback callback, object state, List<string> chatRoomMids)
    {
      return send_getChatRoomAnnouncementsBulk(callback, state, chatRoomMids);
    }

    public Dictionary<string, List<ChatRoomAnnouncement>> End_getChatRoomAnnouncementsBulk(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getChatRoomAnnouncementsBulk();
    }

    #endif

    public Dictionary<string, List<ChatRoomAnnouncement>> getChatRoomAnnouncementsBulk(List<string> chatRoomMids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getChatRoomAnnouncementsBulk(null, null, chatRoomMids);
      return End_getChatRoomAnnouncementsBulk(asyncResult);

      #else
      send_getChatRoomAnnouncementsBulk(chatRoomMids);
      return recv_getChatRoomAnnouncementsBulk();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getChatRoomAnnouncementsBulk(AsyncCallback callback, object state, List<string> chatRoomMids)
    {
      oprot_.WriteMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.Call, seqid_));
      getChatRoomAnnouncementsBulk_args args = new getChatRoomAnnouncementsBulk_args();
      args.ChatRoomMids = chatRoomMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getChatRoomAnnouncementsBulk(List<string> chatRoomMids)
    {
      oprot_.WriteMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.Call, seqid_));
      getChatRoomAnnouncementsBulk_args args = new getChatRoomAnnouncementsBulk_args();
      args.ChatRoomMids = chatRoomMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, List<ChatRoomAnnouncement>> recv_getChatRoomAnnouncementsBulk()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getChatRoomAnnouncementsBulk_result result = new getChatRoomAnnouncementsBulk_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChatRoomAnnouncementsBulk failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getChatRoomAnnouncements(AsyncCallback callback, object state, string chatRoomMid)
    {
      return send_getChatRoomAnnouncements(callback, state, chatRoomMid);
    }

    public List<ChatRoomAnnouncement> End_getChatRoomAnnouncements(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getChatRoomAnnouncements();
    }

    #endif

    public List<ChatRoomAnnouncement> getChatRoomAnnouncements(string chatRoomMid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getChatRoomAnnouncements(null, null, chatRoomMid);
      return End_getChatRoomAnnouncements(asyncResult);

      #else
      send_getChatRoomAnnouncements(chatRoomMid);
      return recv_getChatRoomAnnouncements();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getChatRoomAnnouncements(AsyncCallback callback, object state, string chatRoomMid)
    {
      oprot_.WriteMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.Call, seqid_));
      getChatRoomAnnouncements_args args = new getChatRoomAnnouncements_args();
      args.ChatRoomMid = chatRoomMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getChatRoomAnnouncements(string chatRoomMid)
    {
      oprot_.WriteMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.Call, seqid_));
      getChatRoomAnnouncements_args args = new getChatRoomAnnouncements_args();
      args.ChatRoomMid = chatRoomMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<ChatRoomAnnouncement> recv_getChatRoomAnnouncements()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getChatRoomAnnouncements_result result = new getChatRoomAnnouncements_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getChatRoomAnnouncements failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createChatRoomAnnouncement(AsyncCallback callback, object state, int reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents)
    {
      return send_createChatRoomAnnouncement(callback, state, reqSeq, chatRoomMid, type, contents);
    }

    public ChatRoomAnnouncement End_createChatRoomAnnouncement(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createChatRoomAnnouncement();
    }

    #endif

    public ChatRoomAnnouncement createChatRoomAnnouncement(int reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createChatRoomAnnouncement(null, null, reqSeq, chatRoomMid, type, contents);
      return End_createChatRoomAnnouncement(asyncResult);

      #else
      send_createChatRoomAnnouncement(reqSeq, chatRoomMid, type, contents);
      return recv_createChatRoomAnnouncement();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createChatRoomAnnouncement(AsyncCallback callback, object state, int reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents)
    {
      oprot_.WriteMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.Call, seqid_));
      createChatRoomAnnouncement_args args = new createChatRoomAnnouncement_args();
      args.ReqSeq = reqSeq;
      args.ChatRoomMid = chatRoomMid;
      args.Type = type;
      args.Contents = contents;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createChatRoomAnnouncement(int reqSeq, string chatRoomMid, ChatRoomAnnouncementType type, ChatRoomAnnouncementContents contents)
    {
      oprot_.WriteMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.Call, seqid_));
      createChatRoomAnnouncement_args args = new createChatRoomAnnouncement_args();
      args.ReqSeq = reqSeq;
      args.ChatRoomMid = chatRoomMid;
      args.Type = type;
      args.Contents = contents;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ChatRoomAnnouncement recv_createChatRoomAnnouncement()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createChatRoomAnnouncement_result result = new createChatRoomAnnouncement_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createChatRoomAnnouncement failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeChatRoomAnnouncement(AsyncCallback callback, object state, int reqSeq, string chatRoomMid, long announcementSeq)
    {
      return send_removeChatRoomAnnouncement(callback, state, reqSeq, chatRoomMid, announcementSeq);
    }

    public void End_removeChatRoomAnnouncement(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_removeChatRoomAnnouncement();
    }

    #endif

    public void removeChatRoomAnnouncement(int reqSeq, string chatRoomMid, long announcementSeq)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeChatRoomAnnouncement(null, null, reqSeq, chatRoomMid, announcementSeq);
      End_removeChatRoomAnnouncement(asyncResult);

      #else
      send_removeChatRoomAnnouncement(reqSeq, chatRoomMid, announcementSeq);
      recv_removeChatRoomAnnouncement();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeChatRoomAnnouncement(AsyncCallback callback, object state, int reqSeq, string chatRoomMid, long announcementSeq)
    {
      oprot_.WriteMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.Call, seqid_));
      removeChatRoomAnnouncement_args args = new removeChatRoomAnnouncement_args();
      args.ReqSeq = reqSeq;
      args.ChatRoomMid = chatRoomMid;
      args.AnnouncementSeq = announcementSeq;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeChatRoomAnnouncement(int reqSeq, string chatRoomMid, long announcementSeq)
    {
      oprot_.WriteMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.Call, seqid_));
      removeChatRoomAnnouncement_args args = new removeChatRoomAnnouncement_args();
      args.ReqSeq = reqSeq;
      args.ChatRoomMid = chatRoomMid;
      args.AnnouncementSeq = announcementSeq;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_removeChatRoomAnnouncement()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeChatRoomAnnouncement_result result = new removeChatRoomAnnouncement_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_unsendMessage(AsyncCallback callback, object state, int seq, string messageId)
    {
      return send_unsendMessage(callback, state, seq, messageId);
    }

    public void End_unsendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_unsendMessage();
    }

    #endif

    public void unsendMessage(int seq, string messageId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_unsendMessage(null, null, seq, messageId);
      End_unsendMessage(asyncResult);

      #else
      send_unsendMessage(seq, messageId);
      recv_unsendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_unsendMessage(AsyncCallback callback, object state, int seq, string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("unsendMessage", TMessageType.Call, seqid_));
      unsendMessage_args args = new unsendMessage_args();
      args.Seq = seq;
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_unsendMessage(int seq, string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("unsendMessage", TMessageType.Call, seqid_));
      unsendMessage_args args = new unsendMessage_args();
      args.Seq = seq;
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_unsendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      unsendMessage_result result = new unsendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupWithoutMembers(AsyncCallback callback, object state, string groupId)
    {
      return send_getGroupWithoutMembers(callback, state, groupId);
    }

    public @Group End_getGroupWithoutMembers(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupWithoutMembers();
    }

    #endif

    public @Group getGroupWithoutMembers(string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupWithoutMembers(null, null, groupId);
      return End_getGroupWithoutMembers(asyncResult);

      #else
      send_getGroupWithoutMembers(groupId);
      return recv_getGroupWithoutMembers();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupWithoutMembers(AsyncCallback callback, object state, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.Call, seqid_));
      getGroupWithoutMembers_args args = new getGroupWithoutMembers_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupWithoutMembers(string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.Call, seqid_));
      getGroupWithoutMembers_args args = new getGroupWithoutMembers_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public @Group recv_getGroupWithoutMembers()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupWithoutMembers_result result = new getGroupWithoutMembers_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupWithoutMembers failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_requestResendMessage(AsyncCallback callback, object state, int reqSeq, string senderMid, string messageId)
    {
      return send_requestResendMessage(callback, state, reqSeq, senderMid, messageId);
    }

    public void End_requestResendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_requestResendMessage();
    }

    #endif

    public void requestResendMessage(int reqSeq, string senderMid, string messageId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_requestResendMessage(null, null, reqSeq, senderMid, messageId);
      End_requestResendMessage(asyncResult);

      #else
      send_requestResendMessage(reqSeq, senderMid, messageId);
      recv_requestResendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_requestResendMessage(AsyncCallback callback, object state, int reqSeq, string senderMid, string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("requestResendMessage", TMessageType.Call, seqid_));
      requestResendMessage_args args = new requestResendMessage_args();
      args.ReqSeq = reqSeq;
      args.SenderMid = senderMid;
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_requestResendMessage(int reqSeq, string senderMid, string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("requestResendMessage", TMessageType.Call, seqid_));
      requestResendMessage_args args = new requestResendMessage_args();
      args.ReqSeq = reqSeq;
      args.SenderMid = senderMid;
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_requestResendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      requestResendMessage_result result = new requestResendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_respondResendMessage(AsyncCallback callback, object state, int reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode)
    {
      return send_respondResendMessage(callback, state, reqSeq, receiverMid, originalMessageId, resendMessage, errorCode);
    }

    public void End_respondResendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_respondResendMessage();
    }

    #endif

    public void respondResendMessage(int reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_respondResendMessage(null, null, reqSeq, receiverMid, originalMessageId, resendMessage, errorCode);
      End_respondResendMessage(asyncResult);

      #else
      send_respondResendMessage(reqSeq, receiverMid, originalMessageId, resendMessage, errorCode);
      recv_respondResendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_respondResendMessage(AsyncCallback callback, object state, int reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode)
    {
      oprot_.WriteMessageBegin(new TMessage("respondResendMessage", TMessageType.Call, seqid_));
      respondResendMessage_args args = new respondResendMessage_args();
      args.ReqSeq = reqSeq;
      args.ReceiverMid = receiverMid;
      args.OriginalMessageId = originalMessageId;
      args.ResendMessage = resendMessage;
      args.ErrorCode = errorCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_respondResendMessage(int reqSeq, string receiverMid, string originalMessageId, Message resendMessage, ErrorCode errorCode)
    {
      oprot_.WriteMessageBegin(new TMessage("respondResendMessage", TMessageType.Call, seqid_));
      respondResendMessage_args args = new respondResendMessage_args();
      args.ReqSeq = reqSeq;
      args.ReceiverMid = receiverMid;
      args.OriginalMessageId = originalMessageId;
      args.ResendMessage = resendMessage;
      args.ErrorCode = errorCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_respondResendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      respondResendMessage_result result = new respondResendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_acceptGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId)
    {
      return send_acceptGroupInvitation(callback, state, reqSeq, groupId);
    }

    public void End_acceptGroupInvitation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_acceptGroupInvitation();
    }

    #endif

    public void acceptGroupInvitation(int reqSeq, string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_acceptGroupInvitation(null, null, reqSeq, groupId);
      End_acceptGroupInvitation(asyncResult);

      #else
      send_acceptGroupInvitation(reqSeq, groupId);
      recv_acceptGroupInvitation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_acceptGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.Call, seqid_));
      acceptGroupInvitation_args args = new acceptGroupInvitation_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_acceptGroupInvitation(int reqSeq, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.Call, seqid_));
      acceptGroupInvitation_args args = new acceptGroupInvitation_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_acceptGroupInvitation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      acceptGroupInvitation_result result = new acceptGroupInvitation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_acceptGroupInvitationByTicket(AsyncCallback callback, object state, int reqSeq, string GroupMid, string ticketId)
    {
      return send_acceptGroupInvitationByTicket(callback, state, reqSeq, GroupMid, ticketId);
    }

    public void End_acceptGroupInvitationByTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_acceptGroupInvitationByTicket();
    }

    #endif

    public void acceptGroupInvitationByTicket(int reqSeq, string GroupMid, string ticketId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_acceptGroupInvitationByTicket(null, null, reqSeq, GroupMid, ticketId);
      End_acceptGroupInvitationByTicket(asyncResult);

      #else
      send_acceptGroupInvitationByTicket(reqSeq, GroupMid, ticketId);
      recv_acceptGroupInvitationByTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_acceptGroupInvitationByTicket(AsyncCallback callback, object state, int reqSeq, string GroupMid, string ticketId)
    {
      oprot_.WriteMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.Call, seqid_));
      acceptGroupInvitationByTicket_args args = new acceptGroupInvitationByTicket_args();
      args.ReqSeq = reqSeq;
      args.GroupMid = GroupMid;
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_acceptGroupInvitationByTicket(int reqSeq, string GroupMid, string ticketId)
    {
      oprot_.WriteMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.Call, seqid_));
      acceptGroupInvitationByTicket_args args = new acceptGroupInvitationByTicket_args();
      args.ReqSeq = reqSeq;
      args.GroupMid = GroupMid;
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_acceptGroupInvitationByTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      acceptGroupInvitationByTicket_result result = new acceptGroupInvitationByTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_acceptProximityMatches(AsyncCallback callback, object state, string sessionId, THashSet<string> ids)
    {
      return send_acceptProximityMatches(callback, state, sessionId, ids);
    }

    public void End_acceptProximityMatches(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_acceptProximityMatches();
    }

    #endif

    public void acceptProximityMatches(string sessionId, THashSet<string> ids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_acceptProximityMatches(null, null, sessionId, ids);
      End_acceptProximityMatches(asyncResult);

      #else
      send_acceptProximityMatches(sessionId, ids);
      recv_acceptProximityMatches();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_acceptProximityMatches(AsyncCallback callback, object state, string sessionId, THashSet<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("acceptProximityMatches", TMessageType.Call, seqid_));
      acceptProximityMatches_args args = new acceptProximityMatches_args();
      args.SessionId = sessionId;
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_acceptProximityMatches(string sessionId, THashSet<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("acceptProximityMatches", TMessageType.Call, seqid_));
      acceptProximityMatches_args args = new acceptProximityMatches_args();
      args.SessionId = sessionId;
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_acceptProximityMatches()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      acceptProximityMatches_result result = new acceptProximityMatches_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_acquireCallRoute(AsyncCallback callback, object state, string to)
    {
      return send_acquireCallRoute(callback, state, to);
    }

    public List<string> End_acquireCallRoute(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_acquireCallRoute();
    }

    #endif

    public List<string> acquireCallRoute(string to)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_acquireCallRoute(null, null, to);
      return End_acquireCallRoute(asyncResult);

      #else
      send_acquireCallRoute(to);
      return recv_acquireCallRoute();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_acquireCallRoute(AsyncCallback callback, object state, string to)
    {
      oprot_.WriteMessageBegin(new TMessage("acquireCallRoute", TMessageType.Call, seqid_));
      acquireCallRoute_args args = new acquireCallRoute_args();
      args.To = to;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_acquireCallRoute(string to)
    {
      oprot_.WriteMessageBegin(new TMessage("acquireCallRoute", TMessageType.Call, seqid_));
      acquireCallRoute_args args = new acquireCallRoute_args();
      args.To = to;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_acquireCallRoute()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      acquireCallRoute_result result = new acquireCallRoute_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquireCallRoute failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_acquireCallTicket(AsyncCallback callback, object state, string to)
    {
      return send_acquireCallTicket(callback, state, to);
    }

    public string End_acquireCallTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_acquireCallTicket();
    }

    #endif

    public string acquireCallTicket(string to)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_acquireCallTicket(null, null, to);
      return End_acquireCallTicket(asyncResult);

      #else
      send_acquireCallTicket(to);
      return recv_acquireCallTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_acquireCallTicket(AsyncCallback callback, object state, string to)
    {
      oprot_.WriteMessageBegin(new TMessage("acquireCallTicket", TMessageType.Call, seqid_));
      acquireCallTicket_args args = new acquireCallTicket_args();
      args.To = to;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_acquireCallTicket(string to)
    {
      oprot_.WriteMessageBegin(new TMessage("acquireCallTicket", TMessageType.Call, seqid_));
      acquireCallTicket_args args = new acquireCallTicket_args();
      args.To = to;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_acquireCallTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      acquireCallTicket_result result = new acquireCallTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquireCallTicket failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_acquireEncryptedAccessToken(AsyncCallback callback, object state, FeatureType featureType)
    {
      return send_acquireEncryptedAccessToken(callback, state, featureType);
    }

    public string End_acquireEncryptedAccessToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_acquireEncryptedAccessToken();
    }

    #endif

    public string acquireEncryptedAccessToken(FeatureType featureType)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_acquireEncryptedAccessToken(null, null, featureType);
      return End_acquireEncryptedAccessToken(asyncResult);

      #else
      send_acquireEncryptedAccessToken(featureType);
      return recv_acquireEncryptedAccessToken();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_acquireEncryptedAccessToken(AsyncCallback callback, object state, FeatureType featureType)
    {
      oprot_.WriteMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.Call, seqid_));
      acquireEncryptedAccessToken_args args = new acquireEncryptedAccessToken_args();
      args.FeatureType = featureType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_acquireEncryptedAccessToken(FeatureType featureType)
    {
      oprot_.WriteMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.Call, seqid_));
      acquireEncryptedAccessToken_args args = new acquireEncryptedAccessToken_args();
      args.FeatureType = featureType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_acquireEncryptedAccessToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      acquireEncryptedAccessToken_result result = new acquireEncryptedAccessToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "acquireEncryptedAccessToken failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_addSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken)
    {
      return send_addSnsId(callback, state, snsIdType, snsAccessToken);
    }

    public string End_addSnsId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addSnsId();
    }

    #endif

    public string addSnsId(SnsIdType snsIdType, string snsAccessToken)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_addSnsId(null, null, snsIdType, snsAccessToken);
      return End_addSnsId(asyncResult);

      #else
      send_addSnsId(snsIdType, snsAccessToken);
      return recv_addSnsId();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken)
    {
      oprot_.WriteMessageBegin(new TMessage("addSnsId", TMessageType.Call, seqid_));
      addSnsId_args args = new addSnsId_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_addSnsId(SnsIdType snsIdType, string snsAccessToken)
    {
      oprot_.WriteMessageBegin(new TMessage("addSnsId", TMessageType.Call, seqid_));
      addSnsId_args args = new addSnsId_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_addSnsId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addSnsId_result result = new addSnsId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addSnsId failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_blockContact(AsyncCallback callback, object state, int reqSeq, string id)
    {
      return send_blockContact(callback, state, reqSeq, id);
    }

    public void End_blockContact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_blockContact();
    }

    #endif

    public void blockContact(int reqSeq, string id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_blockContact(null, null, reqSeq, id);
      End_blockContact(asyncResult);

      #else
      send_blockContact(reqSeq, id);
      recv_blockContact();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_blockContact(AsyncCallback callback, object state, int reqSeq, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("blockContact", TMessageType.Call, seqid_));
      blockContact_args args = new blockContact_args();
      args.ReqSeq = reqSeq;
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_blockContact(int reqSeq, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("blockContact", TMessageType.Call, seqid_));
      blockContact_args args = new blockContact_args();
      args.ReqSeq = reqSeq;
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_blockContact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      blockContact_result result = new blockContact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_blockRecommendation(AsyncCallback callback, object state, int reqSeq, string id)
    {
      return send_blockRecommendation(callback, state, reqSeq, id);
    }

    public void End_blockRecommendation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_blockRecommendation();
    }

    #endif

    public void blockRecommendation(int reqSeq, string id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_blockRecommendation(null, null, reqSeq, id);
      End_blockRecommendation(asyncResult);

      #else
      send_blockRecommendation(reqSeq, id);
      recv_blockRecommendation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_blockRecommendation(AsyncCallback callback, object state, int reqSeq, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("blockRecommendation", TMessageType.Call, seqid_));
      blockRecommendation_args args = new blockRecommendation_args();
      args.ReqSeq = reqSeq;
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_blockRecommendation(int reqSeq, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("blockRecommendation", TMessageType.Call, seqid_));
      blockRecommendation_args args = new blockRecommendation_args();
      args.ReqSeq = reqSeq;
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_blockRecommendation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      blockRecommendation_result result = new blockRecommendation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_cancelGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
    {
      return send_cancelGroupInvitation(callback, state, reqSeq, groupId, contactIds);
    }

    public void End_cancelGroupInvitation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_cancelGroupInvitation();
    }

    #endif

    public void cancelGroupInvitation(int reqSeq, string groupId, List<string> contactIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_cancelGroupInvitation(null, null, reqSeq, groupId, contactIds);
      End_cancelGroupInvitation(asyncResult);

      #else
      send_cancelGroupInvitation(reqSeq, groupId, contactIds);
      recv_cancelGroupInvitation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_cancelGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.Call, seqid_));
      cancelGroupInvitation_args args = new cancelGroupInvitation_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_cancelGroupInvitation(int reqSeq, string groupId, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.Call, seqid_));
      cancelGroupInvitation_args args = new cancelGroupInvitation_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_cancelGroupInvitation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      cancelGroupInvitation_result result = new cancelGroupInvitation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_changeVerificationMethod(AsyncCallback callback, object state, string sessionId, VerificationMethod method)
    {
      return send_changeVerificationMethod(callback, state, sessionId, method);
    }

    public VerificationSessionData End_changeVerificationMethod(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_changeVerificationMethod();
    }

    #endif

    public VerificationSessionData changeVerificationMethod(string sessionId, VerificationMethod method)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_changeVerificationMethod(null, null, sessionId, method);
      return End_changeVerificationMethod(asyncResult);

      #else
      send_changeVerificationMethod(sessionId, method);
      return recv_changeVerificationMethod();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_changeVerificationMethod(AsyncCallback callback, object state, string sessionId, VerificationMethod method)
    {
      oprot_.WriteMessageBegin(new TMessage("changeVerificationMethod", TMessageType.Call, seqid_));
      changeVerificationMethod_args args = new changeVerificationMethod_args();
      args.SessionId = sessionId;
      args.Method = method;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_changeVerificationMethod(string sessionId, VerificationMethod method)
    {
      oprot_.WriteMessageBegin(new TMessage("changeVerificationMethod", TMessageType.Call, seqid_));
      changeVerificationMethod_args args = new changeVerificationMethod_args();
      args.SessionId = sessionId;
      args.Method = method;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public VerificationSessionData recv_changeVerificationMethod()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      changeVerificationMethod_result result = new changeVerificationMethod_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changeVerificationMethod failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_clearIdentityCredential(AsyncCallback callback, object state)
    {
      return send_clearIdentityCredential(callback, state);
    }

    public void End_clearIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_clearIdentityCredential();
    }

    #endif

    public void clearIdentityCredential()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_clearIdentityCredential(null, null);
      End_clearIdentityCredential(asyncResult);

      #else
      send_clearIdentityCredential();
      recv_clearIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_clearIdentityCredential(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("clearIdentityCredential", TMessageType.Call, seqid_));
      clearIdentityCredential_args args = new clearIdentityCredential_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_clearIdentityCredential()
    {
      oprot_.WriteMessageBegin(new TMessage("clearIdentityCredential", TMessageType.Call, seqid_));
      clearIdentityCredential_args args = new clearIdentityCredential_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_clearIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      clearIdentityCredential_result result = new clearIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_clearMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId)
    {
      return send_clearMessageBox(callback, state, channelId, messageBoxId);
    }

    public void End_clearMessageBox(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_clearMessageBox();
    }

    #endif

    public void clearMessageBox(string channelId, string messageBoxId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_clearMessageBox(null, null, channelId, messageBoxId);
      End_clearMessageBox(asyncResult);

      #else
      send_clearMessageBox(channelId, messageBoxId);
      recv_clearMessageBox();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_clearMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId)
    {
      oprot_.WriteMessageBegin(new TMessage("clearMessageBox", TMessageType.Call, seqid_));
      clearMessageBox_args args = new clearMessageBox_args();
      args.ChannelId = channelId;
      args.MessageBoxId = messageBoxId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_clearMessageBox(string channelId, string messageBoxId)
    {
      oprot_.WriteMessageBegin(new TMessage("clearMessageBox", TMessageType.Call, seqid_));
      clearMessageBox_args args = new clearMessageBox_args();
      args.ChannelId = channelId;
      args.MessageBoxId = messageBoxId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_clearMessageBox()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      clearMessageBox_result result = new clearMessageBox_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_closeProximityMatch(AsyncCallback callback, object state, string sessionId)
    {
      return send_closeProximityMatch(callback, state, sessionId);
    }

    public void End_closeProximityMatch(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_closeProximityMatch();
    }

    #endif

    public void closeProximityMatch(string sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_closeProximityMatch(null, null, sessionId);
      End_closeProximityMatch(asyncResult);

      #else
      send_closeProximityMatch(sessionId);
      recv_closeProximityMatch();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_closeProximityMatch(AsyncCallback callback, object state, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("closeProximityMatch", TMessageType.Call, seqid_));
      closeProximityMatch_args args = new closeProximityMatch_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_closeProximityMatch(string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("closeProximityMatch", TMessageType.Call, seqid_));
      closeProximityMatch_args args = new closeProximityMatch_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_closeProximityMatch()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      closeProximityMatch_result result = new closeProximityMatch_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_commitSendMessage(AsyncCallback callback, object state, int seq, string messageId, List<string> receiverMids)
    {
      return send_commitSendMessage(callback, state, seq, messageId, receiverMids);
    }

    public Dictionary<string, string> End_commitSendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_commitSendMessage();
    }

    #endif

    public Dictionary<string, string> commitSendMessage(int seq, string messageId, List<string> receiverMids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_commitSendMessage(null, null, seq, messageId, receiverMids);
      return End_commitSendMessage(asyncResult);

      #else
      send_commitSendMessage(seq, messageId, receiverMids);
      return recv_commitSendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_commitSendMessage(AsyncCallback callback, object state, int seq, string messageId, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("commitSendMessage", TMessageType.Call, seqid_));
      commitSendMessage_args args = new commitSendMessage_args();
      args.Seq = seq;
      args.MessageId = messageId;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_commitSendMessage(int seq, string messageId, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("commitSendMessage", TMessageType.Call, seqid_));
      commitSendMessage_args args = new commitSendMessage_args();
      args.Seq = seq;
      args.MessageId = messageId;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, string> recv_commitSendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      commitSendMessage_result result = new commitSendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "commitSendMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_commitSendMessages(AsyncCallback callback, object state, int seq, List<string> messageIds, List<string> receiverMids)
    {
      return send_commitSendMessages(callback, state, seq, messageIds, receiverMids);
    }

    public Dictionary<string, string> End_commitSendMessages(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_commitSendMessages();
    }

    #endif

    public Dictionary<string, string> commitSendMessages(int seq, List<string> messageIds, List<string> receiverMids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_commitSendMessages(null, null, seq, messageIds, receiverMids);
      return End_commitSendMessages(asyncResult);

      #else
      send_commitSendMessages(seq, messageIds, receiverMids);
      return recv_commitSendMessages();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_commitSendMessages(AsyncCallback callback, object state, int seq, List<string> messageIds, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("commitSendMessages", TMessageType.Call, seqid_));
      commitSendMessages_args args = new commitSendMessages_args();
      args.Seq = seq;
      args.MessageIds = messageIds;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_commitSendMessages(int seq, List<string> messageIds, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("commitSendMessages", TMessageType.Call, seqid_));
      commitSendMessages_args args = new commitSendMessages_args();
      args.Seq = seq;
      args.MessageIds = messageIds;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, string> recv_commitSendMessages()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      commitSendMessages_result result = new commitSendMessages_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "commitSendMessages failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_commitUpdateProfile(AsyncCallback callback, object state, int seq, List<ProfileAttribute> attrs, List<string> receiverMids)
    {
      return send_commitUpdateProfile(callback, state, seq, attrs, receiverMids);
    }

    public Dictionary<string, string> End_commitUpdateProfile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_commitUpdateProfile();
    }

    #endif

    public Dictionary<string, string> commitUpdateProfile(int seq, List<ProfileAttribute> attrs, List<string> receiverMids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_commitUpdateProfile(null, null, seq, attrs, receiverMids);
      return End_commitUpdateProfile(asyncResult);

      #else
      send_commitUpdateProfile(seq, attrs, receiverMids);
      return recv_commitUpdateProfile();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_commitUpdateProfile(AsyncCallback callback, object state, int seq, List<ProfileAttribute> attrs, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("commitUpdateProfile", TMessageType.Call, seqid_));
      commitUpdateProfile_args args = new commitUpdateProfile_args();
      args.Seq = seq;
      args.Attrs = attrs;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_commitUpdateProfile(int seq, List<ProfileAttribute> attrs, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("commitUpdateProfile", TMessageType.Call, seqid_));
      commitUpdateProfile_args args = new commitUpdateProfile_args();
      args.Seq = seq;
      args.Attrs = attrs;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, string> recv_commitUpdateProfile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      commitUpdateProfile_result result = new commitUpdateProfile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "commitUpdateProfile failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_confirmEmail(AsyncCallback callback, object state, string verifier, string pinCode)
    {
      return send_confirmEmail(callback, state, verifier, pinCode);
    }

    public void End_confirmEmail(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_confirmEmail();
    }

    #endif

    public void confirmEmail(string verifier, string pinCode)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_confirmEmail(null, null, verifier, pinCode);
      End_confirmEmail(asyncResult);

      #else
      send_confirmEmail(verifier, pinCode);
      recv_confirmEmail();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_confirmEmail(AsyncCallback callback, object state, string verifier, string pinCode)
    {
      oprot_.WriteMessageBegin(new TMessage("confirmEmail", TMessageType.Call, seqid_));
      confirmEmail_args args = new confirmEmail_args();
      args.Verifier = verifier;
      args.PinCode = pinCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_confirmEmail(string verifier, string pinCode)
    {
      oprot_.WriteMessageBegin(new TMessage("confirmEmail", TMessageType.Call, seqid_));
      confirmEmail_args args = new confirmEmail_args();
      args.Verifier = verifier;
      args.PinCode = pinCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_confirmEmail()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      confirmEmail_result result = new confirmEmail_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createGroup(AsyncCallback callback, object state, int seq, string name, List<string> contactIds)
    {
      return send_createGroup(callback, state, seq, name, contactIds);
    }

    public @Group End_createGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createGroup();
    }

    #endif

    public @Group createGroup(int seq, string name, List<string> contactIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createGroup(null, null, seq, name, contactIds);
      return End_createGroup(asyncResult);

      #else
      send_createGroup(seq, name, contactIds);
      return recv_createGroup();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createGroup(AsyncCallback callback, object state, int seq, string name, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("createGroup", TMessageType.Call, seqid_));
      createGroup_args args = new createGroup_args();
      args.Seq = seq;
      args.Name = name;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createGroup(int seq, string name, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("createGroup", TMessageType.Call, seqid_));
      createGroup_args args = new createGroup_args();
      args.Seq = seq;
      args.Name = name;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public @Group recv_createGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createGroup_result result = new createGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createGroup failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createQrcodeBase64Image(AsyncCallback callback, object state, string url, string characterSet, int imageSize, int x, int y, int width, int height)
    {
      return send_createQrcodeBase64Image(callback, state, url, characterSet, imageSize, x, y, width, height);
    }

    public string End_createQrcodeBase64Image(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createQrcodeBase64Image();
    }

    #endif

    public string createQrcodeBase64Image(string url, string characterSet, int imageSize, int x, int y, int width, int height)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createQrcodeBase64Image(null, null, url, characterSet, imageSize, x, y, width, height);
      return End_createQrcodeBase64Image(asyncResult);

      #else
      send_createQrcodeBase64Image(url, characterSet, imageSize, x, y, width, height);
      return recv_createQrcodeBase64Image();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createQrcodeBase64Image(AsyncCallback callback, object state, string url, string characterSet, int imageSize, int x, int y, int width, int height)
    {
      oprot_.WriteMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.Call, seqid_));
      createQrcodeBase64Image_args args = new createQrcodeBase64Image_args();
      args.Url = url;
      args.CharacterSet = characterSet;
      args.ImageSize = imageSize;
      args.X = x;
      args.Y = y;
      args.Width = width;
      args.Height = height;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createQrcodeBase64Image(string url, string characterSet, int imageSize, int x, int y, int width, int height)
    {
      oprot_.WriteMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.Call, seqid_));
      createQrcodeBase64Image_args args = new createQrcodeBase64Image_args();
      args.Url = url;
      args.CharacterSet = characterSet;
      args.ImageSize = imageSize;
      args.X = x;
      args.Y = y;
      args.Width = width;
      args.Height = height;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_createQrcodeBase64Image()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createQrcodeBase64Image_result result = new createQrcodeBase64Image_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createQrcodeBase64Image failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createRoom(AsyncCallback callback, object state, int reqSeq, List<string> contactIds)
    {
      return send_createRoom(callback, state, reqSeq, contactIds);
    }

    public Room End_createRoom(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createRoom();
    }

    #endif

    public Room createRoom(int reqSeq, List<string> contactIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createRoom(null, null, reqSeq, contactIds);
      return End_createRoom(asyncResult);

      #else
      send_createRoom(reqSeq, contactIds);
      return recv_createRoom();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createRoom(AsyncCallback callback, object state, int reqSeq, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("createRoom", TMessageType.Call, seqid_));
      createRoom_args args = new createRoom_args();
      args.ReqSeq = reqSeq;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createRoom(int reqSeq, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("createRoom", TMessageType.Call, seqid_));
      createRoom_args args = new createRoom_args();
      args.ReqSeq = reqSeq;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Room recv_createRoom()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createRoom_result result = new createRoom_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createRoom failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createSession(AsyncCallback callback, object state)
    {
      return send_createSession(callback, state);
    }

    public string End_createSession(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createSession();
    }

    #endif

    public string createSession()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createSession(null, null);
      return End_createSession(asyncResult);

      #else
      send_createSession();
      return recv_createSession();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createSession(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("createSession", TMessageType.Call, seqid_));
      createSession_args args = new createSession_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createSession()
    {
      oprot_.WriteMessageBegin(new TMessage("createSession", TMessageType.Call, seqid_));
      createSession_args args = new createSession_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_createSession()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createSession_result result = new createSession_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSession failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fetchAnnouncements(AsyncCallback callback, object state, int lastFetchedIndex)
    {
      return send_fetchAnnouncements(callback, state, lastFetchedIndex);
    }

    public List<Announcement> End_fetchAnnouncements(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchAnnouncements();
    }

    #endif

    public List<Announcement> fetchAnnouncements(int lastFetchedIndex)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fetchAnnouncements(null, null, lastFetchedIndex);
      return End_fetchAnnouncements(asyncResult);

      #else
      send_fetchAnnouncements(lastFetchedIndex);
      return recv_fetchAnnouncements();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchAnnouncements(AsyncCallback callback, object state, int lastFetchedIndex)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchAnnouncements", TMessageType.Call, seqid_));
      fetchAnnouncements_args args = new fetchAnnouncements_args();
      args.LastFetchedIndex = lastFetchedIndex;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fetchAnnouncements(int lastFetchedIndex)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchAnnouncements", TMessageType.Call, seqid_));
      fetchAnnouncements_args args = new fetchAnnouncements_args();
      args.LastFetchedIndex = lastFetchedIndex;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Announcement> recv_fetchAnnouncements()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchAnnouncements_result result = new fetchAnnouncements_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchAnnouncements failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fetchMessages(AsyncCallback callback, object state, long localTs, int count)
    {
      return send_fetchMessages(callback, state, localTs, count);
    }

    public List<Message> End_fetchMessages(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchMessages();
    }

    #endif

    public List<Message> fetchMessages(long localTs, int count)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fetchMessages(null, null, localTs, count);
      return End_fetchMessages(asyncResult);

      #else
      send_fetchMessages(localTs, count);
      return recv_fetchMessages();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchMessages(AsyncCallback callback, object state, long localTs, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchMessages", TMessageType.Call, seqid_));
      fetchMessages_args args = new fetchMessages_args();
      args.LocalTs = localTs;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fetchMessages(long localTs, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchMessages", TMessageType.Call, seqid_));
      fetchMessages_args args = new fetchMessages_args();
      args.LocalTs = localTs;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Message> recv_fetchMessages()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchMessages_result result = new fetchMessages_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchMessages failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fetchOperations(AsyncCallback callback, object state, long localRev, int count)
    {
      return send_fetchOperations(callback, state, localRev, count);
    }

    public List<Operation> End_fetchOperations(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchOperations();
    }

    #endif

    public List<Operation> fetchOperations(long localRev, int count)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fetchOperations(null, null, localRev, count);
      return End_fetchOperations(asyncResult);

      #else
      send_fetchOperations(localRev, count);
      return recv_fetchOperations();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchOperations(AsyncCallback callback, object state, long localRev, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchOperations", TMessageType.Call, seqid_));
      fetchOperations_args args = new fetchOperations_args();
      args.LocalRev = localRev;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fetchOperations(long localRev, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchOperations", TMessageType.Call, seqid_));
      fetchOperations_args args = new fetchOperations_args();
      args.LocalRev = localRev;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Operation> recv_fetchOperations()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchOperations_result result = new fetchOperations_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchOperations failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_fetchOps(AsyncCallback callback, object state, long localRev, int count, long globalRev, long individualRev)
    {
      return send_fetchOps(callback, state, localRev, count, globalRev, individualRev);
    }

    public List<Operation> End_fetchOps(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchOps();
    }

    #endif

    public List<Operation> fetchOps(long localRev, int count, long globalRev, long individualRev)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_fetchOps(null, null, localRev, count, globalRev, individualRev);
      return End_fetchOps(asyncResult);

      #else
      send_fetchOps(localRev, count, globalRev, individualRev);
      return recv_fetchOps();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchOps(AsyncCallback callback, object state, long localRev, int count, long globalRev, long individualRev)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchOps", TMessageType.Call, seqid_));
      fetchOps_args args = new fetchOps_args();
      args.LocalRev = localRev;
      args.Count = count;
      args.GlobalRev = globalRev;
      args.IndividualRev = individualRev;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_fetchOps(long localRev, int count, long globalRev, long individualRev)
    {
      oprot_.WriteMessageBegin(new TMessage("fetchOps", TMessageType.Call, seqid_));
      fetchOps_args args = new fetchOps_args();
      args.LocalRev = localRev;
      args.Count = count;
      args.GlobalRev = globalRev;
      args.IndividualRev = individualRev;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Operation> recv_fetchOps()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchOps_result result = new fetchOps_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchOps failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findAndAddContactsByEmail(AsyncCallback callback, object state, int reqSeq, THashSet<string> emails)
    {
      return send_findAndAddContactsByEmail(callback, state, reqSeq, emails);
    }

    public Dictionary<string, Contact> End_findAndAddContactsByEmail(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findAndAddContactsByEmail();
    }

    #endif

    public Dictionary<string, Contact> findAndAddContactsByEmail(int reqSeq, THashSet<string> emails)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findAndAddContactsByEmail(null, null, reqSeq, emails);
      return End_findAndAddContactsByEmail(asyncResult);

      #else
      send_findAndAddContactsByEmail(reqSeq, emails);
      return recv_findAndAddContactsByEmail();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findAndAddContactsByEmail(AsyncCallback callback, object state, int reqSeq, THashSet<string> emails)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.Call, seqid_));
      findAndAddContactsByEmail_args args = new findAndAddContactsByEmail_args();
      args.ReqSeq = reqSeq;
      args.Emails = emails;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findAndAddContactsByEmail(int reqSeq, THashSet<string> emails)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.Call, seqid_));
      findAndAddContactsByEmail_args args = new findAndAddContactsByEmail_args();
      args.ReqSeq = reqSeq;
      args.Emails = emails;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, Contact> recv_findAndAddContactsByEmail()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findAndAddContactsByEmail_result result = new findAndAddContactsByEmail_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAndAddContactsByEmail failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findAndAddContactsByMid(AsyncCallback callback, object state, int reqSeq, string mid, ContactType type, string reference)
    {
      return send_findAndAddContactsByMid(callback, state, reqSeq, mid, type, reference);
    }

    public Dictionary<string, Contact> End_findAndAddContactsByMid(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findAndAddContactsByMid();
    }

    #endif

    public Dictionary<string, Contact> findAndAddContactsByMid(int reqSeq, string mid, ContactType type, string reference)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findAndAddContactsByMid(null, null, reqSeq, mid, type, reference);
      return End_findAndAddContactsByMid(asyncResult);

      #else
      send_findAndAddContactsByMid(reqSeq, mid, type, reference);
      return recv_findAndAddContactsByMid();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findAndAddContactsByMid(AsyncCallback callback, object state, int reqSeq, string mid, ContactType type, string reference)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.Call, seqid_));
      findAndAddContactsByMid_args args = new findAndAddContactsByMid_args();
      args.ReqSeq = reqSeq;
      args.Mid = mid;
      args.Type = type;
      args.Reference = reference;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findAndAddContactsByMid(int reqSeq, string mid, ContactType type, string reference)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.Call, seqid_));
      findAndAddContactsByMid_args args = new findAndAddContactsByMid_args();
      args.ReqSeq = reqSeq;
      args.Mid = mid;
      args.Type = type;
      args.Reference = reference;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, Contact> recv_findAndAddContactsByMid()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findAndAddContactsByMid_result result = new findAndAddContactsByMid_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAndAddContactsByMid failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findGroupByTicketV2(AsyncCallback callback, object state, string ticketId)
    {
      return send_findGroupByTicketV2(callback, state, ticketId);
    }

    public @Group End_findGroupByTicketV2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findGroupByTicketV2();
    }

    #endif

    public @Group findGroupByTicketV2(string ticketId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findGroupByTicketV2(null, null, ticketId);
      return End_findGroupByTicketV2(asyncResult);

      #else
      send_findGroupByTicketV2(ticketId);
      return recv_findGroupByTicketV2();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findGroupByTicketV2(AsyncCallback callback, object state, string ticketId)
    {
      oprot_.WriteMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.Call, seqid_));
      findGroupByTicketV2_args args = new findGroupByTicketV2_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findGroupByTicketV2(string ticketId)
    {
      oprot_.WriteMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.Call, seqid_));
      findGroupByTicketV2_args args = new findGroupByTicketV2_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public @Group recv_findGroupByTicketV2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findGroupByTicketV2_result result = new findGroupByTicketV2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findGroupByTicketV2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findAndAddContactsByPhone(AsyncCallback callback, object state, int reqSeq, THashSet<string> phones)
    {
      return send_findAndAddContactsByPhone(callback, state, reqSeq, phones);
    }

    public Dictionary<string, Contact> End_findAndAddContactsByPhone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findAndAddContactsByPhone();
    }

    #endif

    public Dictionary<string, Contact> findAndAddContactsByPhone(int reqSeq, THashSet<string> phones)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findAndAddContactsByPhone(null, null, reqSeq, phones);
      return End_findAndAddContactsByPhone(asyncResult);

      #else
      send_findAndAddContactsByPhone(reqSeq, phones);
      return recv_findAndAddContactsByPhone();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findAndAddContactsByPhone(AsyncCallback callback, object state, int reqSeq, THashSet<string> phones)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.Call, seqid_));
      findAndAddContactsByPhone_args args = new findAndAddContactsByPhone_args();
      args.ReqSeq = reqSeq;
      args.Phones = phones;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findAndAddContactsByPhone(int reqSeq, THashSet<string> phones)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.Call, seqid_));
      findAndAddContactsByPhone_args args = new findAndAddContactsByPhone_args();
      args.ReqSeq = reqSeq;
      args.Phones = phones;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, Contact> recv_findAndAddContactsByPhone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findAndAddContactsByPhone_result result = new findAndAddContactsByPhone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAndAddContactsByPhone failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getFriendRequests(AsyncCallback callback, object state, FriendRequestDirection direction, long lastSeenSeqId)
    {
      return send_getFriendRequests(callback, state, direction, lastSeenSeqId);
    }

    public List<FriendRequest> End_getFriendRequests(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFriendRequests();
    }

    #endif

    public List<FriendRequest> getFriendRequests(FriendRequestDirection direction, long lastSeenSeqId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getFriendRequests(null, null, direction, lastSeenSeqId);
      return End_getFriendRequests(asyncResult);

      #else
      send_getFriendRequests(direction, lastSeenSeqId);
      return recv_getFriendRequests();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFriendRequests(AsyncCallback callback, object state, FriendRequestDirection direction, long lastSeenSeqId)
    {
      oprot_.WriteMessageBegin(new TMessage("getFriendRequests", TMessageType.Call, seqid_));
      getFriendRequests_args args = new getFriendRequests_args();
      args.Direction = direction;
      args.LastSeenSeqId = lastSeenSeqId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getFriendRequests(FriendRequestDirection direction, long lastSeenSeqId)
    {
      oprot_.WriteMessageBegin(new TMessage("getFriendRequests", TMessageType.Call, seqid_));
      getFriendRequests_args args = new getFriendRequests_args();
      args.Direction = direction;
      args.LastSeenSeqId = lastSeenSeqId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<FriendRequest> recv_getFriendRequests()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFriendRequests_result result = new getFriendRequests_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFriendRequests failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeFriendRequest(AsyncCallback callback, object state, FriendRequestDirection direction, string midOrEMid)
    {
      return send_removeFriendRequest(callback, state, direction, midOrEMid);
    }

    public void End_removeFriendRequest(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_removeFriendRequest();
    }

    #endif

    public void removeFriendRequest(FriendRequestDirection direction, string midOrEMid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeFriendRequest(null, null, direction, midOrEMid);
      End_removeFriendRequest(asyncResult);

      #else
      send_removeFriendRequest(direction, midOrEMid);
      recv_removeFriendRequest();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeFriendRequest(AsyncCallback callback, object state, FriendRequestDirection direction, string midOrEMid)
    {
      oprot_.WriteMessageBegin(new TMessage("removeFriendRequest", TMessageType.Call, seqid_));
      removeFriendRequest_args args = new removeFriendRequest_args();
      args.Direction = direction;
      args.MidOrEMid = midOrEMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeFriendRequest(FriendRequestDirection direction, string midOrEMid)
    {
      oprot_.WriteMessageBegin(new TMessage("removeFriendRequest", TMessageType.Call, seqid_));
      removeFriendRequest_args args = new removeFriendRequest_args();
      args.Direction = direction;
      args.MidOrEMid = midOrEMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_removeFriendRequest()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeFriendRequest_result result = new removeFriendRequest_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findAndAddContactsByUserid(AsyncCallback callback, object state, int reqSeq, string userid)
    {
      return send_findAndAddContactsByUserid(callback, state, reqSeq, userid);
    }

    public Dictionary<string, Contact> End_findAndAddContactsByUserid(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findAndAddContactsByUserid();
    }

    #endif

    public Dictionary<string, Contact> findAndAddContactsByUserid(int reqSeq, string userid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findAndAddContactsByUserid(null, null, reqSeq, userid);
      return End_findAndAddContactsByUserid(asyncResult);

      #else
      send_findAndAddContactsByUserid(reqSeq, userid);
      return recv_findAndAddContactsByUserid();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findAndAddContactsByUserid(AsyncCallback callback, object state, int reqSeq, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.Call, seqid_));
      findAndAddContactsByUserid_args args = new findAndAddContactsByUserid_args();
      args.ReqSeq = reqSeq;
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findAndAddContactsByUserid(int reqSeq, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.Call, seqid_));
      findAndAddContactsByUserid_args args = new findAndAddContactsByUserid_args();
      args.ReqSeq = reqSeq;
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, Contact> recv_findAndAddContactsByUserid()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findAndAddContactsByUserid_result result = new findAndAddContactsByUserid_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAndAddContactsByUserid failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findContactByUserid(AsyncCallback callback, object state, string userid)
    {
      return send_findContactByUserid(callback, state, userid);
    }

    public Contact End_findContactByUserid(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findContactByUserid();
    }

    #endif

    public Contact findContactByUserid(string userid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findContactByUserid(null, null, userid);
      return End_findContactByUserid(asyncResult);

      #else
      send_findContactByUserid(userid);
      return recv_findContactByUserid();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findContactByUserid(AsyncCallback callback, object state, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByUserid", TMessageType.Call, seqid_));
      findContactByUserid_args args = new findContactByUserid_args();
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findContactByUserid(string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByUserid", TMessageType.Call, seqid_));
      findContactByUserid_args args = new findContactByUserid_args();
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Contact recv_findContactByUserid()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findContactByUserid_result result = new findContactByUserid_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactByUserid failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findContactByUserTicket(AsyncCallback callback, object state, string ticketIdWithTag)
    {
      return send_findContactByUserTicket(callback, state, ticketIdWithTag);
    }

    public Contact End_findContactByUserTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findContactByUserTicket();
    }

    #endif

    public Contact findContactByUserTicket(string ticketIdWithTag)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findContactByUserTicket(null, null, ticketIdWithTag);
      return End_findContactByUserTicket(asyncResult);

      #else
      send_findContactByUserTicket(ticketIdWithTag);
      return recv_findContactByUserTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findContactByUserTicket(AsyncCallback callback, object state, string ticketIdWithTag)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByUserTicket", TMessageType.Call, seqid_));
      findContactByUserTicket_args args = new findContactByUserTicket_args();
      args.TicketIdWithTag = ticketIdWithTag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findContactByUserTicket(string ticketIdWithTag)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByUserTicket", TMessageType.Call, seqid_));
      findContactByUserTicket_args args = new findContactByUserTicket_args();
      args.TicketIdWithTag = ticketIdWithTag;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Contact recv_findContactByUserTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findContactByUserTicket_result result = new findContactByUserTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactByUserTicket failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findContactsByEmail(AsyncCallback callback, object state, THashSet<string> emails)
    {
      return send_findContactsByEmail(callback, state, emails);
    }

    public Dictionary<string, Contact> End_findContactsByEmail(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findContactsByEmail();
    }

    #endif

    public Dictionary<string, Contact> findContactsByEmail(THashSet<string> emails)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findContactsByEmail(null, null, emails);
      return End_findContactsByEmail(asyncResult);

      #else
      send_findContactsByEmail(emails);
      return recv_findContactsByEmail();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findContactsByEmail(AsyncCallback callback, object state, THashSet<string> emails)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactsByEmail", TMessageType.Call, seqid_));
      findContactsByEmail_args args = new findContactsByEmail_args();
      args.Emails = emails;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findContactsByEmail(THashSet<string> emails)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactsByEmail", TMessageType.Call, seqid_));
      findContactsByEmail_args args = new findContactsByEmail_args();
      args.Emails = emails;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, Contact> recv_findContactsByEmail()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findContactsByEmail_result result = new findContactsByEmail_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactsByEmail failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findContactsByPhone(AsyncCallback callback, object state, THashSet<string> phones)
    {
      return send_findContactsByPhone(callback, state, phones);
    }

    public Dictionary<string, Contact> End_findContactsByPhone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findContactsByPhone();
    }

    #endif

    public Dictionary<string, Contact> findContactsByPhone(THashSet<string> phones)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findContactsByPhone(null, null, phones);
      return End_findContactsByPhone(asyncResult);

      #else
      send_findContactsByPhone(phones);
      return recv_findContactsByPhone();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findContactsByPhone(AsyncCallback callback, object state, THashSet<string> phones)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactsByPhone", TMessageType.Call, seqid_));
      findContactsByPhone_args args = new findContactsByPhone_args();
      args.Phones = phones;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findContactsByPhone(THashSet<string> phones)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactsByPhone", TMessageType.Call, seqid_));
      findContactsByPhone_args args = new findContactsByPhone_args();
      args.Phones = phones;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, Contact> recv_findContactsByPhone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findContactsByPhone_result result = new findContactsByPhone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactsByPhone failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findSnsIdUserStatus(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string udidHash)
    {
      return send_findSnsIdUserStatus(callback, state, snsIdType, snsAccessToken, udidHash);
    }

    public SnsIdUserStatus End_findSnsIdUserStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findSnsIdUserStatus();
    }

    #endif

    public SnsIdUserStatus findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findSnsIdUserStatus(null, null, snsIdType, snsAccessToken, udidHash);
      return End_findSnsIdUserStatus(asyncResult);

      #else
      send_findSnsIdUserStatus(snsIdType, snsAccessToken, udidHash);
      return recv_findSnsIdUserStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findSnsIdUserStatus(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string udidHash)
    {
      oprot_.WriteMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.Call, seqid_));
      findSnsIdUserStatus_args args = new findSnsIdUserStatus_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.UdidHash = udidHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findSnsIdUserStatus(SnsIdType snsIdType, string snsAccessToken, string udidHash)
    {
      oprot_.WriteMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.Call, seqid_));
      findSnsIdUserStatus_args args = new findSnsIdUserStatus_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.UdidHash = udidHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SnsIdUserStatus recv_findSnsIdUserStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findSnsIdUserStatus_result result = new findSnsIdUserStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findSnsIdUserStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_finishUpdateVerification(AsyncCallback callback, object state, string sessionId)
    {
      return send_finishUpdateVerification(callback, state, sessionId);
    }

    public void End_finishUpdateVerification(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_finishUpdateVerification();
    }

    #endif

    public void finishUpdateVerification(string sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_finishUpdateVerification(null, null, sessionId);
      End_finishUpdateVerification(asyncResult);

      #else
      send_finishUpdateVerification(sessionId);
      recv_finishUpdateVerification();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_finishUpdateVerification(AsyncCallback callback, object state, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("finishUpdateVerification", TMessageType.Call, seqid_));
      finishUpdateVerification_args args = new finishUpdateVerification_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_finishUpdateVerification(string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("finishUpdateVerification", TMessageType.Call, seqid_));
      finishUpdateVerification_args args = new finishUpdateVerification_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_finishUpdateVerification()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      finishUpdateVerification_result result = new finishUpdateVerification_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_generateUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount)
    {
      return send_generateUserTicket(callback, state, expirationTime, maxUseCount);
    }

    public Ticket End_generateUserTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_generateUserTicket();
    }

    #endif

    public Ticket generateUserTicket(long expirationTime, int maxUseCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_generateUserTicket(null, null, expirationTime, maxUseCount);
      return End_generateUserTicket(asyncResult);

      #else
      send_generateUserTicket(expirationTime, maxUseCount);
      return recv_generateUserTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_generateUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount)
    {
      oprot_.WriteMessageBegin(new TMessage("generateUserTicket", TMessageType.Call, seqid_));
      generateUserTicket_args args = new generateUserTicket_args();
      args.ExpirationTime = expirationTime;
      args.MaxUseCount = maxUseCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_generateUserTicket(long expirationTime, int maxUseCount)
    {
      oprot_.WriteMessageBegin(new TMessage("generateUserTicket", TMessageType.Call, seqid_));
      generateUserTicket_args args = new generateUserTicket_args();
      args.ExpirationTime = expirationTime;
      args.MaxUseCount = maxUseCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Ticket recv_generateUserTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      generateUserTicket_result result = new generateUserTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "generateUserTicket failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_destroyMessage(AsyncCallback callback, object state, int seq, string chatId, string messageId, sbyte sessionId)
    {
      return send_destroyMessage(callback, state, seq, chatId, messageId, sessionId);
    }

    public void End_destroyMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_destroyMessage();
    }

    #endif

    public void destroyMessage(int seq, string chatId, string messageId, sbyte sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_destroyMessage(null, null, seq, chatId, messageId, sessionId);
      End_destroyMessage(asyncResult);

      #else
      send_destroyMessage(seq, chatId, messageId, sessionId);
      recv_destroyMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_destroyMessage(AsyncCallback callback, object state, int seq, string chatId, string messageId, sbyte sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("destroyMessage", TMessageType.Call, seqid_));
      destroyMessage_args args = new destroyMessage_args();
      args.Seq = seq;
      args.ChatId = chatId;
      args.MessageId = messageId;
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_destroyMessage(int seq, string chatId, string messageId, sbyte sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("destroyMessage", TMessageType.Call, seqid_));
      destroyMessage_args args = new destroyMessage_args();
      args.Seq = seq;
      args.ChatId = chatId;
      args.MessageId = messageId;
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_destroyMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      destroyMessage_result result = new destroyMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAcceptedProximityMatches(AsyncCallback callback, object state, string sessionId)
    {
      return send_getAcceptedProximityMatches(callback, state, sessionId);
    }

    public THashSet<string> End_getAcceptedProximityMatches(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAcceptedProximityMatches();
    }

    #endif

    public THashSet<string> getAcceptedProximityMatches(string sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAcceptedProximityMatches(null, null, sessionId);
      return End_getAcceptedProximityMatches(asyncResult);

      #else
      send_getAcceptedProximityMatches(sessionId);
      return recv_getAcceptedProximityMatches();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAcceptedProximityMatches(AsyncCallback callback, object state, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.Call, seqid_));
      getAcceptedProximityMatches_args args = new getAcceptedProximityMatches_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAcceptedProximityMatches(string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.Call, seqid_));
      getAcceptedProximityMatches_args args = new getAcceptedProximityMatches_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public THashSet<string> recv_getAcceptedProximityMatches()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAcceptedProximityMatches_result result = new getAcceptedProximityMatches_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAcceptedProximityMatches failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getActiveBuddySubscriberIds(AsyncCallback callback, object state)
    {
      return send_getActiveBuddySubscriberIds(callback, state);
    }

    public List<string> End_getActiveBuddySubscriberIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getActiveBuddySubscriberIds();
    }

    #endif

    public List<string> getActiveBuddySubscriberIds()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getActiveBuddySubscriberIds(null, null);
      return End_getActiveBuddySubscriberIds(asyncResult);

      #else
      send_getActiveBuddySubscriberIds();
      return recv_getActiveBuddySubscriberIds();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getActiveBuddySubscriberIds(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.Call, seqid_));
      getActiveBuddySubscriberIds_args args = new getActiveBuddySubscriberIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getActiveBuddySubscriberIds()
    {
      oprot_.WriteMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.Call, seqid_));
      getActiveBuddySubscriberIds_args args = new getActiveBuddySubscriberIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getActiveBuddySubscriberIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getActiveBuddySubscriberIds_result result = new getActiveBuddySubscriberIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getActiveBuddySubscriberIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAllContactIds(AsyncCallback callback, object state)
    {
      return send_getAllContactIds(callback, state);
    }

    public List<string> End_getAllContactIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllContactIds();
    }

    #endif

    public List<string> getAllContactIds()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAllContactIds(null, null);
      return End_getAllContactIds(asyncResult);

      #else
      send_getAllContactIds();
      return recv_getAllContactIds();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllContactIds(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getAllContactIds", TMessageType.Call, seqid_));
      getAllContactIds_args args = new getAllContactIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAllContactIds()
    {
      oprot_.WriteMessageBegin(new TMessage("getAllContactIds", TMessageType.Call, seqid_));
      getAllContactIds_args args = new getAllContactIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getAllContactIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllContactIds_result result = new getAllContactIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllContactIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAuthQrcode(AsyncCallback callback, object state, bool keepLoggedIn, string systemName)
    {
      return send_getAuthQrcode(callback, state, keepLoggedIn, systemName);
    }

    public AuthQrcode End_getAuthQrcode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAuthQrcode();
    }

    #endif

    public AuthQrcode getAuthQrcode(bool keepLoggedIn, string systemName)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAuthQrcode(null, null, keepLoggedIn, systemName);
      return End_getAuthQrcode(asyncResult);

      #else
      send_getAuthQrcode(keepLoggedIn, systemName);
      return recv_getAuthQrcode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAuthQrcode(AsyncCallback callback, object state, bool keepLoggedIn, string systemName)
    {
      oprot_.WriteMessageBegin(new TMessage("getAuthQrcode", TMessageType.Call, seqid_));
      getAuthQrcode_args args = new getAuthQrcode_args();
      args.KeepLoggedIn = keepLoggedIn;
      args.SystemName = systemName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAuthQrcode(bool keepLoggedIn, string systemName)
    {
      oprot_.WriteMessageBegin(new TMessage("getAuthQrcode", TMessageType.Call, seqid_));
      getAuthQrcode_args args = new getAuthQrcode_args();
      args.KeepLoggedIn = keepLoggedIn;
      args.SystemName = systemName;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public AuthQrcode recv_getAuthQrcode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAuthQrcode_result result = new getAuthQrcode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAuthQrcode failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getBlockedContactIds(AsyncCallback callback, object state)
    {
      return send_getBlockedContactIds(callback, state);
    }

    public List<string> End_getBlockedContactIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getBlockedContactIds();
    }

    #endif

    public List<string> getBlockedContactIds()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getBlockedContactIds(null, null);
      return End_getBlockedContactIds(asyncResult);

      #else
      send_getBlockedContactIds();
      return recv_getBlockedContactIds();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getBlockedContactIds(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getBlockedContactIds", TMessageType.Call, seqid_));
      getBlockedContactIds_args args = new getBlockedContactIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getBlockedContactIds()
    {
      oprot_.WriteMessageBegin(new TMessage("getBlockedContactIds", TMessageType.Call, seqid_));
      getBlockedContactIds_args args = new getBlockedContactIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getBlockedContactIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBlockedContactIds_result result = new getBlockedContactIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockedContactIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerWithPhoneNumber(AsyncCallback callback, object state, string sessionId, string migrationPincodeSessionId)
    {
      return send_registerWithPhoneNumber(callback, state, sessionId, migrationPincodeSessionId);
    }

    public RegisterWithPhoneNumberResult End_registerWithPhoneNumber(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerWithPhoneNumber();
    }

    #endif

    public RegisterWithPhoneNumberResult registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerWithPhoneNumber(null, null, sessionId, migrationPincodeSessionId);
      return End_registerWithPhoneNumber(asyncResult);

      #else
      send_registerWithPhoneNumber(sessionId, migrationPincodeSessionId);
      return recv_registerWithPhoneNumber();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerWithPhoneNumber(AsyncCallback callback, object state, string sessionId, string migrationPincodeSessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.Call, seqid_));
      registerWithPhoneNumber_args args = new registerWithPhoneNumber_args();
      args.SessionId = sessionId;
      args.MigrationPincodeSessionId = migrationPincodeSessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerWithPhoneNumber(string sessionId, string migrationPincodeSessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.Call, seqid_));
      registerWithPhoneNumber_args args = new registerWithPhoneNumber_args();
      args.SessionId = sessionId;
      args.MigrationPincodeSessionId = migrationPincodeSessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RegisterWithPhoneNumberResult recv_registerWithPhoneNumber()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerWithPhoneNumber_result result = new registerWithPhoneNumber_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWithPhoneNumber failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerWithPhoneNumberAndPassword(AsyncCallback callback, object state, string sessionId, string keynm, string encrypted)
    {
      return send_registerWithPhoneNumberAndPassword(callback, state, sessionId, keynm, encrypted);
    }

    public RegisterWithPhoneNumberResult End_registerWithPhoneNumberAndPassword(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerWithPhoneNumberAndPassword();
    }

    #endif

    public RegisterWithPhoneNumberResult registerWithPhoneNumberAndPassword(string sessionId, string keynm, string encrypted)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerWithPhoneNumberAndPassword(null, null, sessionId, keynm, encrypted);
      return End_registerWithPhoneNumberAndPassword(asyncResult);

      #else
      send_registerWithPhoneNumberAndPassword(sessionId, keynm, encrypted);
      return recv_registerWithPhoneNumberAndPassword();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerWithPhoneNumberAndPassword(AsyncCallback callback, object state, string sessionId, string keynm, string encrypted)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.Call, seqid_));
      registerWithPhoneNumberAndPassword_args args = new registerWithPhoneNumberAndPassword_args();
      args.SessionId = sessionId;
      args.Keynm = keynm;
      args.Encrypted = encrypted;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerWithPhoneNumberAndPassword(string sessionId, string keynm, string encrypted)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.Call, seqid_));
      registerWithPhoneNumberAndPassword_args args = new registerWithPhoneNumberAndPassword_args();
      args.SessionId = sessionId;
      args.Keynm = keynm;
      args.Encrypted = encrypted;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RegisterWithPhoneNumberResult recv_registerWithPhoneNumberAndPassword()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerWithPhoneNumberAndPassword_result result = new registerWithPhoneNumberAndPassword_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWithPhoneNumberAndPassword failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getAnalyticsInfo(AsyncCallback callback, object state)
    {
      return send_getAnalyticsInfo(callback, state);
    }

    public AnalyticsInfo End_getAnalyticsInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAnalyticsInfo();
    }

    #endif

    public AnalyticsInfo getAnalyticsInfo()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getAnalyticsInfo(null, null);
      return End_getAnalyticsInfo(asyncResult);

      #else
      send_getAnalyticsInfo();
      return recv_getAnalyticsInfo();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAnalyticsInfo(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.Call, seqid_));
      getAnalyticsInfo_args args = new getAnalyticsInfo_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getAnalyticsInfo()
    {
      oprot_.WriteMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.Call, seqid_));
      getAnalyticsInfo_args args = new getAnalyticsInfo_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public AnalyticsInfo recv_getAnalyticsInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAnalyticsInfo_result result = new getAnalyticsInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAnalyticsInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportClientStatistics(AsyncCallback callback, object state, int reqSeq, ReportCategory category, int count)
    {
      return send_reportClientStatistics(callback, state, reqSeq, category, count);
    }

    public void End_reportClientStatistics(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_reportClientStatistics();
    }

    #endif

    public void reportClientStatistics(int reqSeq, ReportCategory category, int count)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportClientStatistics(null, null, reqSeq, category, count);
      End_reportClientStatistics(asyncResult);

      #else
      send_reportClientStatistics(reqSeq, category, count);
      recv_reportClientStatistics();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportClientStatistics(AsyncCallback callback, object state, int reqSeq, ReportCategory category, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("reportClientStatistics", TMessageType.Call, seqid_));
      reportClientStatistics_args args = new reportClientStatistics_args();
      args.ReqSeq = reqSeq;
      args.Category = category;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportClientStatistics(int reqSeq, ReportCategory category, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("reportClientStatistics", TMessageType.Call, seqid_));
      reportClientStatistics_args args = new reportClientStatistics_args();
      args.ReqSeq = reqSeq;
      args.Category = category;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_reportClientStatistics()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportClientStatistics_result result = new reportClientStatistics_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_verifyPhoneNumberForLogin(AsyncCallback callback, object state, string verifierFromPhone, string pinCodeForPhone, string verifierFromLogin)
    {
      return send_verifyPhoneNumberForLogin(callback, state, verifierFromPhone, pinCodeForPhone, verifierFromLogin);
    }

    public string End_verifyPhoneNumberForLogin(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_verifyPhoneNumberForLogin();
    }

    #endif

    public string verifyPhoneNumberForLogin(string verifierFromPhone, string pinCodeForPhone, string verifierFromLogin)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_verifyPhoneNumberForLogin(null, null, verifierFromPhone, pinCodeForPhone, verifierFromLogin);
      return End_verifyPhoneNumberForLogin(asyncResult);

      #else
      send_verifyPhoneNumberForLogin(verifierFromPhone, pinCodeForPhone, verifierFromLogin);
      return recv_verifyPhoneNumberForLogin();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_verifyPhoneNumberForLogin(AsyncCallback callback, object state, string verifierFromPhone, string pinCodeForPhone, string verifierFromLogin)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.Call, seqid_));
      verifyPhoneNumberForLogin_args args = new verifyPhoneNumberForLogin_args();
      args.VerifierFromPhone = verifierFromPhone;
      args.PinCodeForPhone = pinCodeForPhone;
      args.VerifierFromLogin = verifierFromLogin;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_verifyPhoneNumberForLogin(string verifierFromPhone, string pinCodeForPhone, string verifierFromLogin)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.Call, seqid_));
      verifyPhoneNumberForLogin_args args = new verifyPhoneNumberForLogin_args();
      args.VerifierFromPhone = verifierFromPhone;
      args.PinCodeForPhone = pinCodeForPhone;
      args.VerifierFromLogin = verifierFromLogin;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_verifyPhoneNumberForLogin()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      verifyPhoneNumberForLogin_result result = new verifyPhoneNumberForLogin_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyPhoneNumberForLogin failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_verifyPhoneNumber(AsyncCallback callback, object state, string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)
    {
      return send_verifyPhoneNumber(callback, state, sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash);
    }

    public PhoneVerificationResult End_verifyPhoneNumber(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_verifyPhoneNumber();
    }

    #endif

    public PhoneVerificationResult verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_verifyPhoneNumber(null, null, sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash);
      return End_verifyPhoneNumber(asyncResult);

      #else
      send_verifyPhoneNumber(sessionId, pinCode, udidHash, migrationPincodeSessionId, oldUdidHash);
      return recv_verifyPhoneNumber();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_verifyPhoneNumber(AsyncCallback callback, object state, string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.Call, seqid_));
      verifyPhoneNumber_args args = new verifyPhoneNumber_args();
      args.SessionId = sessionId;
      args.PinCode = pinCode;
      args.UdidHash = udidHash;
      args.MigrationPincodeSessionId = migrationPincodeSessionId;
      args.OldUdidHash = oldUdidHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_verifyPhoneNumber(string sessionId, string pinCode, string udidHash, string migrationPincodeSessionId, string oldUdidHash)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.Call, seqid_));
      verifyPhoneNumber_args args = new verifyPhoneNumber_args();
      args.SessionId = sessionId;
      args.PinCode = pinCode;
      args.UdidHash = udidHash;
      args.MigrationPincodeSessionId = migrationPincodeSessionId;
      args.OldUdidHash = oldUdidHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public PhoneVerificationResult recv_verifyPhoneNumber()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      verifyPhoneNumber_result result = new verifyPhoneNumber_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyPhoneNumber failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getBlockedContactIdsByRange(AsyncCallback callback, object state, int start, int count)
    {
      return send_getBlockedContactIdsByRange(callback, state, start, count);
    }

    public List<string> End_getBlockedContactIdsByRange(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getBlockedContactIdsByRange();
    }

    #endif

    public List<string> getBlockedContactIdsByRange(int start, int count)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getBlockedContactIdsByRange(null, null, start, count);
      return End_getBlockedContactIdsByRange(asyncResult);

      #else
      send_getBlockedContactIdsByRange(start, count);
      return recv_getBlockedContactIdsByRange();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getBlockedContactIdsByRange(AsyncCallback callback, object state, int start, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.Call, seqid_));
      getBlockedContactIdsByRange_args args = new getBlockedContactIdsByRange_args();
      args.Start = start;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getBlockedContactIdsByRange(int start, int count)
    {
      oprot_.WriteMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.Call, seqid_));
      getBlockedContactIdsByRange_args args = new getBlockedContactIdsByRange_args();
      args.Start = start;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getBlockedContactIdsByRange()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBlockedContactIdsByRange_result result = new getBlockedContactIdsByRange_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockedContactIdsByRange failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getBlockedRecommendationIds(AsyncCallback callback, object state)
    {
      return send_getBlockedRecommendationIds(callback, state);
    }

    public List<string> End_getBlockedRecommendationIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getBlockedRecommendationIds();
    }

    #endif

    public List<string> getBlockedRecommendationIds()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getBlockedRecommendationIds(null, null);
      return End_getBlockedRecommendationIds(asyncResult);

      #else
      send_getBlockedRecommendationIds();
      return recv_getBlockedRecommendationIds();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getBlockedRecommendationIds(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.Call, seqid_));
      getBlockedRecommendationIds_args args = new getBlockedRecommendationIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getBlockedRecommendationIds()
    {
      oprot_.WriteMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.Call, seqid_));
      getBlockedRecommendationIds_args args = new getBlockedRecommendationIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getBlockedRecommendationIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBlockedRecommendationIds_result result = new getBlockedRecommendationIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBlockedRecommendationIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getBuddyBlockerIds(AsyncCallback callback, object state)
    {
      return send_getBuddyBlockerIds(callback, state);
    }

    public List<string> End_getBuddyBlockerIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getBuddyBlockerIds();
    }

    #endif

    public List<string> getBuddyBlockerIds()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getBuddyBlockerIds(null, null);
      return End_getBuddyBlockerIds(asyncResult);

      #else
      send_getBuddyBlockerIds();
      return recv_getBuddyBlockerIds();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getBuddyBlockerIds(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.Call, seqid_));
      getBuddyBlockerIds_args args = new getBuddyBlockerIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getBuddyBlockerIds()
    {
      oprot_.WriteMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.Call, seqid_));
      getBuddyBlockerIds_args args = new getBuddyBlockerIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getBuddyBlockerIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBuddyBlockerIds_result result = new getBuddyBlockerIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyBlockerIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getBuddyLocation(AsyncCallback callback, object state, string mid, int index)
    {
      return send_getBuddyLocation(callback, state, mid, index);
    }

    public Geolocation End_getBuddyLocation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getBuddyLocation();
    }

    #endif

    public Geolocation getBuddyLocation(string mid, int index)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getBuddyLocation(null, null, mid, index);
      return End_getBuddyLocation(asyncResult);

      #else
      send_getBuddyLocation(mid, index);
      return recv_getBuddyLocation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getBuddyLocation(AsyncCallback callback, object state, string mid, int index)
    {
      oprot_.WriteMessageBegin(new TMessage("getBuddyLocation", TMessageType.Call, seqid_));
      getBuddyLocation_args args = new getBuddyLocation_args();
      args.Mid = mid;
      args.Index = index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getBuddyLocation(string mid, int index)
    {
      oprot_.WriteMessageBegin(new TMessage("getBuddyLocation", TMessageType.Call, seqid_));
      getBuddyLocation_args args = new getBuddyLocation_args();
      args.Mid = mid;
      args.Index = index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Geolocation recv_getBuddyLocation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getBuddyLocation_result result = new getBuddyLocation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getBuddyLocation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCompactContactsModifiedSince(AsyncCallback callback, object state, long timestamp)
    {
      return send_getCompactContactsModifiedSince(callback, state, timestamp);
    }

    public List<CompactContact> End_getCompactContactsModifiedSince(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCompactContactsModifiedSince();
    }

    #endif

    public List<CompactContact> getCompactContactsModifiedSince(long timestamp)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCompactContactsModifiedSince(null, null, timestamp);
      return End_getCompactContactsModifiedSince(asyncResult);

      #else
      send_getCompactContactsModifiedSince(timestamp);
      return recv_getCompactContactsModifiedSince();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCompactContactsModifiedSince(AsyncCallback callback, object state, long timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.Call, seqid_));
      getCompactContactsModifiedSince_args args = new getCompactContactsModifiedSince_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCompactContactsModifiedSince(long timestamp)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.Call, seqid_));
      getCompactContactsModifiedSince_args args = new getCompactContactsModifiedSince_args();
      args.Timestamp = timestamp;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<CompactContact> recv_getCompactContactsModifiedSince()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCompactContactsModifiedSince_result result = new getCompactContactsModifiedSince_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompactContactsModifiedSince failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCompactGroup(AsyncCallback callback, object state, string groupId)
    {
      return send_getCompactGroup(callback, state, groupId);
    }

    public @Group End_getCompactGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCompactGroup();
    }

    #endif

    public @Group getCompactGroup(string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCompactGroup(null, null, groupId);
      return End_getCompactGroup(asyncResult);

      #else
      send_getCompactGroup(groupId);
      return recv_getCompactGroup();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCompactGroup(AsyncCallback callback, object state, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactGroup", TMessageType.Call, seqid_));
      getCompactGroup_args args = new getCompactGroup_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCompactGroup(string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactGroup", TMessageType.Call, seqid_));
      getCompactGroup_args args = new getCompactGroup_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public @Group recv_getCompactGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCompactGroup_result result = new getCompactGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompactGroup failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCompactRoom(AsyncCallback callback, object state, string roomId)
    {
      return send_getCompactRoom(callback, state, roomId);
    }

    public Room End_getCompactRoom(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCompactRoom();
    }

    #endif

    public Room getCompactRoom(string roomId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCompactRoom(null, null, roomId);
      return End_getCompactRoom(asyncResult);

      #else
      send_getCompactRoom(roomId);
      return recv_getCompactRoom();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCompactRoom(AsyncCallback callback, object state, string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactRoom", TMessageType.Call, seqid_));
      getCompactRoom_args args = new getCompactRoom_args();
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCompactRoom(string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("getCompactRoom", TMessageType.Call, seqid_));
      getCompactRoom_args args = new getCompactRoom_args();
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Room recv_getCompactRoom()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCompactRoom_result result = new getCompactRoom_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCompactRoom failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getContact(AsyncCallback callback, object state, string id)
    {
      return send_getContact(callback, state, id);
    }

    public Contact End_getContact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getContact();
    }

    #endif

    public Contact getContact(string id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getContact(null, null, id);
      return End_getContact(asyncResult);

      #else
      send_getContact(id);
      return recv_getContact();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getContact(AsyncCallback callback, object state, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("getContact", TMessageType.Call, seqid_));
      getContact_args args = new getContact_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getContact(string id)
    {
      oprot_.WriteMessageBegin(new TMessage("getContact", TMessageType.Call, seqid_));
      getContact_args args = new getContact_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Contact recv_getContact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getContact_result result = new getContact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContact failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getContacts(AsyncCallback callback, object state, List<string> ids)
    {
      return send_getContacts(callback, state, ids);
    }

    public List<Contact> End_getContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getContacts();
    }

    #endif

    public List<Contact> getContacts(List<string> ids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getContacts(null, null, ids);
      return End_getContacts(asyncResult);

      #else
      send_getContacts(ids);
      return recv_getContacts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getContacts(AsyncCallback callback, object state, List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getContacts", TMessageType.Call, seqid_));
      getContacts_args args = new getContacts_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getContacts(List<string> ids)
    {
      oprot_.WriteMessageBegin(new TMessage("getContacts", TMessageType.Call, seqid_));
      getContacts_args args = new getContacts_args();
      args.Ids = ids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Contact> recv_getContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getContacts_result result = new getContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getContactWithFriendRequestStatus(AsyncCallback callback, object state, string id)
    {
      return send_getContactWithFriendRequestStatus(callback, state, id);
    }

    public Contact End_getContactWithFriendRequestStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getContactWithFriendRequestStatus();
    }

    #endif

    public Contact getContactWithFriendRequestStatus(string id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getContactWithFriendRequestStatus(null, null, id);
      return End_getContactWithFriendRequestStatus(asyncResult);

      #else
      send_getContactWithFriendRequestStatus(id);
      return recv_getContactWithFriendRequestStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getContactWithFriendRequestStatus(AsyncCallback callback, object state, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.Call, seqid_));
      getContactWithFriendRequestStatus_args args = new getContactWithFriendRequestStatus_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getContactWithFriendRequestStatus(string id)
    {
      oprot_.WriteMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.Call, seqid_));
      getContactWithFriendRequestStatus_args args = new getContactWithFriendRequestStatus_args();
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Contact recv_getContactWithFriendRequestStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getContactWithFriendRequestStatus_result result = new getContactWithFriendRequestStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getContactWithFriendRequestStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getCountryWithRequestIp(AsyncCallback callback, object state)
    {
      return send_getCountryWithRequestIp(callback, state);
    }

    public string End_getCountryWithRequestIp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getCountryWithRequestIp();
    }

    #endif

    public string getCountryWithRequestIp()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getCountryWithRequestIp(null, null);
      return End_getCountryWithRequestIp(asyncResult);

      #else
      send_getCountryWithRequestIp();
      return recv_getCountryWithRequestIp();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getCountryWithRequestIp(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.Call, seqid_));
      getCountryWithRequestIp_args args = new getCountryWithRequestIp_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getCountryWithRequestIp()
    {
      oprot_.WriteMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.Call, seqid_));
      getCountryWithRequestIp_args args = new getCountryWithRequestIp_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getCountryWithRequestIp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getCountryWithRequestIp_result result = new getCountryWithRequestIp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getCountryWithRequestIp failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getFavoriteMids(AsyncCallback callback, object state)
    {
      return send_getFavoriteMids(callback, state);
    }

    public List<string> End_getFavoriteMids(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFavoriteMids();
    }

    #endif

    public List<string> getFavoriteMids()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getFavoriteMids(null, null);
      return End_getFavoriteMids(asyncResult);

      #else
      send_getFavoriteMids();
      return recv_getFavoriteMids();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFavoriteMids(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getFavoriteMids", TMessageType.Call, seqid_));
      getFavoriteMids_args args = new getFavoriteMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getFavoriteMids()
    {
      oprot_.WriteMessageBegin(new TMessage("getFavoriteMids", TMessageType.Call, seqid_));
      getFavoriteMids_args args = new getFavoriteMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getFavoriteMids()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFavoriteMids_result result = new getFavoriteMids_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFavoriteMids failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroup(AsyncCallback callback, object state, string groupId)
    {
      return send_getGroup(callback, state, groupId);
    }

    public @Group End_getGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroup();
    }

    #endif

    public @Group getGroup(string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroup(null, null, groupId);
      return End_getGroup(asyncResult);

      #else
      send_getGroup(groupId);
      return recv_getGroup();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroup(AsyncCallback callback, object state, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroup", TMessageType.Call, seqid_));
      getGroup_args args = new getGroup_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroup(string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroup", TMessageType.Call, seqid_));
      getGroup_args args = new getGroup_args();
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public @Group recv_getGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroup_result result = new getGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroup failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupIdsInvited(AsyncCallback callback, object state)
    {
      return send_getGroupIdsInvited(callback, state);
    }

    public List<string> End_getGroupIdsInvited(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupIdsInvited();
    }

    #endif

    public List<string> getGroupIdsInvited()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupIdsInvited(null, null);
      return End_getGroupIdsInvited(asyncResult);

      #else
      send_getGroupIdsInvited();
      return recv_getGroupIdsInvited();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupIdsInvited(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.Call, seqid_));
      getGroupIdsInvited_args args = new getGroupIdsInvited_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupIdsInvited()
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.Call, seqid_));
      getGroupIdsInvited_args args = new getGroupIdsInvited_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getGroupIdsInvited()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupIdsInvited_result result = new getGroupIdsInvited_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupIdsInvited failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupIdsJoined(AsyncCallback callback, object state)
    {
      return send_getGroupIdsJoined(callback, state);
    }

    public List<string> End_getGroupIdsJoined(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupIdsJoined();
    }

    #endif

    public List<string> getGroupIdsJoined()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupIdsJoined(null, null);
      return End_getGroupIdsJoined(asyncResult);

      #else
      send_getGroupIdsJoined();
      return recv_getGroupIdsJoined();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupIdsJoined(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.Call, seqid_));
      getGroupIdsJoined_args args = new getGroupIdsJoined_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupIdsJoined()
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.Call, seqid_));
      getGroupIdsJoined_args args = new getGroupIdsJoined_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getGroupIdsJoined()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupIdsJoined_result result = new getGroupIdsJoined_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupIdsJoined failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroups(AsyncCallback callback, object state, List<string> groupIds)
    {
      return send_getGroups(callback, state, groupIds);
    }

    public List<@Group> End_getGroups(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroups();
    }

    #endif

    public List<@Group> getGroups(List<string> groupIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroups(null, null, groupIds);
      return End_getGroups(asyncResult);

      #else
      send_getGroups(groupIds);
      return recv_getGroups();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroups(AsyncCallback callback, object state, List<string> groupIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroups", TMessageType.Call, seqid_));
      getGroups_args args = new getGroups_args();
      args.GroupIds = groupIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroups(List<string> groupIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroups", TMessageType.Call, seqid_));
      getGroups_args args = new getGroups_args();
      args.GroupIds = groupIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<@Group> recv_getGroups()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroups_result result = new getGroups_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroups failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getHiddenContactMids(AsyncCallback callback, object state)
    {
      return send_getHiddenContactMids(callback, state);
    }

    public List<string> End_getHiddenContactMids(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getHiddenContactMids();
    }

    #endif

    public List<string> getHiddenContactMids()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getHiddenContactMids(null, null);
      return End_getHiddenContactMids(asyncResult);

      #else
      send_getHiddenContactMids();
      return recv_getHiddenContactMids();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getHiddenContactMids(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getHiddenContactMids", TMessageType.Call, seqid_));
      getHiddenContactMids_args args = new getHiddenContactMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getHiddenContactMids()
    {
      oprot_.WriteMessageBegin(new TMessage("getHiddenContactMids", TMessageType.Call, seqid_));
      getHiddenContactMids_args args = new getHiddenContactMids_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getHiddenContactMids()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getHiddenContactMids_result result = new getHiddenContactMids_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getHiddenContactMids failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getIdentityIdentifier(AsyncCallback callback, object state)
    {
      return send_getIdentityIdentifier(callback, state);
    }

    public string End_getIdentityIdentifier(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getIdentityIdentifier();
    }

    #endif

    public string getIdentityIdentifier()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getIdentityIdentifier(null, null);
      return End_getIdentityIdentifier(asyncResult);

      #else
      send_getIdentityIdentifier();
      return recv_getIdentityIdentifier();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getIdentityIdentifier(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.Call, seqid_));
      getIdentityIdentifier_args args = new getIdentityIdentifier_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getIdentityIdentifier()
    {
      oprot_.WriteMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.Call, seqid_));
      getIdentityIdentifier_args args = new getIdentityIdentifier_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_getIdentityIdentifier()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getIdentityIdentifier_result result = new getIdentityIdentifier_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getIdentityIdentifier failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getLastAnnouncementIndex(AsyncCallback callback, object state)
    {
      return send_getLastAnnouncementIndex(callback, state);
    }

    public int End_getLastAnnouncementIndex(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getLastAnnouncementIndex();
    }

    #endif

    public int getLastAnnouncementIndex()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getLastAnnouncementIndex(null, null);
      return End_getLastAnnouncementIndex(asyncResult);

      #else
      send_getLastAnnouncementIndex();
      return recv_getLastAnnouncementIndex();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getLastAnnouncementIndex(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.Call, seqid_));
      getLastAnnouncementIndex_args args = new getLastAnnouncementIndex_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getLastAnnouncementIndex()
    {
      oprot_.WriteMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.Call, seqid_));
      getLastAnnouncementIndex_args args = new getLastAnnouncementIndex_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_getLastAnnouncementIndex()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getLastAnnouncementIndex_result result = new getLastAnnouncementIndex_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLastAnnouncementIndex failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getLastOpRevision(AsyncCallback callback, object state)
    {
      return send_getLastOpRevision(callback, state);
    }

    public long End_getLastOpRevision(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getLastOpRevision();
    }

    #endif

    public long getLastOpRevision()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getLastOpRevision(null, null);
      return End_getLastOpRevision(asyncResult);

      #else
      send_getLastOpRevision();
      return recv_getLastOpRevision();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getLastOpRevision(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getLastOpRevision", TMessageType.Call, seqid_));
      getLastOpRevision_args args = new getLastOpRevision_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getLastOpRevision()
    {
      oprot_.WriteMessageBegin(new TMessage("getLastOpRevision", TMessageType.Call, seqid_));
      getLastOpRevision_args args = new getLastOpRevision_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_getLastOpRevision()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getLastOpRevision_result result = new getLastOpRevision_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLastOpRevision failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSuggestRevisions(AsyncCallback callback, object state)
    {
      return send_getSuggestRevisions(callback, state);
    }

    public SuggestDictionaryRevisions End_getSuggestRevisions(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSuggestRevisions();
    }

    #endif

    public SuggestDictionaryRevisions getSuggestRevisions()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSuggestRevisions(null, null);
      return End_getSuggestRevisions(asyncResult);

      #else
      send_getSuggestRevisions();
      return recv_getSuggestRevisions();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSuggestRevisions(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getSuggestRevisions", TMessageType.Call, seqid_));
      getSuggestRevisions_args args = new getSuggestRevisions_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSuggestRevisions()
    {
      oprot_.WriteMessageBegin(new TMessage("getSuggestRevisions", TMessageType.Call, seqid_));
      getSuggestRevisions_args args = new getSuggestRevisions_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SuggestDictionaryRevisions recv_getSuggestRevisions()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSuggestRevisions_result result = new getSuggestRevisions_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSuggestRevisions failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPreviousMessagesV2WithReadCount(AsyncCallback callback, object state, string messageBoxId, MessageBoxV2MessageId endMessageId, int messagesCount)
    {
      return send_getPreviousMessagesV2WithReadCount(callback, state, messageBoxId, endMessageId, messagesCount);
    }

    public List<Message> End_getPreviousMessagesV2WithReadCount(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPreviousMessagesV2WithReadCount();
    }

    #endif

    public List<Message> getPreviousMessagesV2WithReadCount(string messageBoxId, MessageBoxV2MessageId endMessageId, int messagesCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPreviousMessagesV2WithReadCount(null, null, messageBoxId, endMessageId, messagesCount);
      return End_getPreviousMessagesV2WithReadCount(asyncResult);

      #else
      send_getPreviousMessagesV2WithReadCount(messageBoxId, endMessageId, messagesCount);
      return recv_getPreviousMessagesV2WithReadCount();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPreviousMessagesV2WithReadCount(AsyncCallback callback, object state, string messageBoxId, MessageBoxV2MessageId endMessageId, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.Call, seqid_));
      getPreviousMessagesV2WithReadCount_args args = new getPreviousMessagesV2WithReadCount_args();
      args.MessageBoxId = messageBoxId;
      args.EndMessageId = endMessageId;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPreviousMessagesV2WithReadCount(string messageBoxId, MessageBoxV2MessageId endMessageId, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.Call, seqid_));
      getPreviousMessagesV2WithReadCount_args args = new getPreviousMessagesV2WithReadCount_args();
      args.MessageBoxId = messageBoxId;
      args.EndMessageId = endMessageId;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Message> recv_getPreviousMessagesV2WithReadCount()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPreviousMessagesV2WithReadCount_result result = new getPreviousMessagesV2WithReadCount_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPreviousMessagesV2WithReadCount failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId, int lastMessagesCount)
    {
      return send_getMessageBox(callback, state, channelId, messageBoxId, lastMessagesCount);
    }

    public TMessageBox End_getMessageBox(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessageBox();
    }

    #endif

    public TMessageBox getMessageBox(string channelId, string messageBoxId, int lastMessagesCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessageBox(null, null, channelId, messageBoxId, lastMessagesCount);
      return End_getMessageBox(asyncResult);

      #else
      send_getMessageBox(channelId, messageBoxId, lastMessagesCount);
      return recv_getMessageBox();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessageBox(AsyncCallback callback, object state, string channelId, string messageBoxId, int lastMessagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBox", TMessageType.Call, seqid_));
      getMessageBox_args args = new getMessageBox_args();
      args.ChannelId = channelId;
      args.MessageBoxId = messageBoxId;
      args.LastMessagesCount = lastMessagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessageBox(string channelId, string messageBoxId, int lastMessagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBox", TMessageType.Call, seqid_));
      getMessageBox_args args = new getMessageBox_args();
      args.ChannelId = channelId;
      args.MessageBoxId = messageBoxId;
      args.LastMessagesCount = lastMessagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TMessageBox recv_getMessageBox()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessageBox_result result = new getMessageBox_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBox failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessageBoxCompactWrapUp(AsyncCallback callback, object state, string mid)
    {
      return send_getMessageBoxCompactWrapUp(callback, state, mid);
    }

    public TMessageBoxWrapUp End_getMessageBoxCompactWrapUp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessageBoxCompactWrapUp();
    }

    #endif

    public TMessageBoxWrapUp getMessageBoxCompactWrapUp(string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessageBoxCompactWrapUp(null, null, mid);
      return End_getMessageBoxCompactWrapUp(asyncResult);

      #else
      send_getMessageBoxCompactWrapUp(mid);
      return recv_getMessageBoxCompactWrapUp();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessageBoxCompactWrapUp(AsyncCallback callback, object state, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.Call, seqid_));
      getMessageBoxCompactWrapUp_args args = new getMessageBoxCompactWrapUp_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessageBoxCompactWrapUp(string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.Call, seqid_));
      getMessageBoxCompactWrapUp_args args = new getMessageBoxCompactWrapUp_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TMessageBoxWrapUp recv_getMessageBoxCompactWrapUp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessageBoxCompactWrapUp_result result = new getMessageBoxCompactWrapUp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxCompactWrapUp failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessageBoxCompactWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount)
    {
      return send_getMessageBoxCompactWrapUpList(callback, state, start, messageBoxCount);
    }

    public TMessageBoxWrapUpResponse End_getMessageBoxCompactWrapUpList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessageBoxCompactWrapUpList();
    }

    #endif

    public TMessageBoxWrapUpResponse getMessageBoxCompactWrapUpList(int start, int messageBoxCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessageBoxCompactWrapUpList(null, null, start, messageBoxCount);
      return End_getMessageBoxCompactWrapUpList(asyncResult);

      #else
      send_getMessageBoxCompactWrapUpList(start, messageBoxCount);
      return recv_getMessageBoxCompactWrapUpList();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessageBoxCompactWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.Call, seqid_));
      getMessageBoxCompactWrapUpList_args args = new getMessageBoxCompactWrapUpList_args();
      args.Start = start;
      args.MessageBoxCount = messageBoxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessageBoxCompactWrapUpList(int start, int messageBoxCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.Call, seqid_));
      getMessageBoxCompactWrapUpList_args args = new getMessageBoxCompactWrapUpList_args();
      args.Start = start;
      args.MessageBoxCount = messageBoxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TMessageBoxWrapUpResponse recv_getMessageBoxCompactWrapUpList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessageBoxCompactWrapUpList_result result = new getMessageBoxCompactWrapUpList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxCompactWrapUpList failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessageBoxList(AsyncCallback callback, object state, string channelId, int lastMessagesCount)
    {
      return send_getMessageBoxList(callback, state, channelId, lastMessagesCount);
    }

    public List<TMessageBox> End_getMessageBoxList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessageBoxList();
    }

    #endif

    public List<TMessageBox> getMessageBoxList(string channelId, int lastMessagesCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessageBoxList(null, null, channelId, lastMessagesCount);
      return End_getMessageBoxList(asyncResult);

      #else
      send_getMessageBoxList(channelId, lastMessagesCount);
      return recv_getMessageBoxList();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessageBoxList(AsyncCallback callback, object state, string channelId, int lastMessagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxList", TMessageType.Call, seqid_));
      getMessageBoxList_args args = new getMessageBoxList_args();
      args.ChannelId = channelId;
      args.LastMessagesCount = lastMessagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessageBoxList(string channelId, int lastMessagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxList", TMessageType.Call, seqid_));
      getMessageBoxList_args args = new getMessageBoxList_args();
      args.ChannelId = channelId;
      args.LastMessagesCount = lastMessagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<TMessageBox> recv_getMessageBoxList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessageBoxList_result result = new getMessageBoxList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxList failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessageBoxListByStatus(AsyncCallback callback, object state, string channelId, int lastMessagesCount, int status)
    {
      return send_getMessageBoxListByStatus(callback, state, channelId, lastMessagesCount, status);
    }

    public List<TMessageBox> End_getMessageBoxListByStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessageBoxListByStatus();
    }

    #endif

    public List<TMessageBox> getMessageBoxListByStatus(string channelId, int lastMessagesCount, int status)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessageBoxListByStatus(null, null, channelId, lastMessagesCount, status);
      return End_getMessageBoxListByStatus(asyncResult);

      #else
      send_getMessageBoxListByStatus(channelId, lastMessagesCount, status);
      return recv_getMessageBoxListByStatus();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessageBoxListByStatus(AsyncCallback callback, object state, string channelId, int lastMessagesCount, int status)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.Call, seqid_));
      getMessageBoxListByStatus_args args = new getMessageBoxListByStatus_args();
      args.ChannelId = channelId;
      args.LastMessagesCount = lastMessagesCount;
      args.Status = status;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessageBoxListByStatus(string channelId, int lastMessagesCount, int status)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.Call, seqid_));
      getMessageBoxListByStatus_args args = new getMessageBoxListByStatus_args();
      args.ChannelId = channelId;
      args.LastMessagesCount = lastMessagesCount;
      args.Status = status;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<TMessageBox> recv_getMessageBoxListByStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessageBoxListByStatus_result result = new getMessageBoxListByStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxListByStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessageBoxWrapUp(AsyncCallback callback, object state, string mid)
    {
      return send_getMessageBoxWrapUp(callback, state, mid);
    }

    public TMessageBoxWrapUp End_getMessageBoxWrapUp(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessageBoxWrapUp();
    }

    #endif

    public TMessageBoxWrapUp getMessageBoxWrapUp(string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessageBoxWrapUp(null, null, mid);
      return End_getMessageBoxWrapUp(asyncResult);

      #else
      send_getMessageBoxWrapUp(mid);
      return recv_getMessageBoxWrapUp();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessageBoxWrapUp(AsyncCallback callback, object state, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.Call, seqid_));
      getMessageBoxWrapUp_args args = new getMessageBoxWrapUp_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessageBoxWrapUp(string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.Call, seqid_));
      getMessageBoxWrapUp_args args = new getMessageBoxWrapUp_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TMessageBoxWrapUp recv_getMessageBoxWrapUp()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessageBoxWrapUp_result result = new getMessageBoxWrapUp_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxWrapUp failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessageBoxWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount)
    {
      return send_getMessageBoxWrapUpList(callback, state, start, messageBoxCount);
    }

    public TMessageBoxWrapUpResponse End_getMessageBoxWrapUpList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessageBoxWrapUpList();
    }

    #endif

    public TMessageBoxWrapUpResponse getMessageBoxWrapUpList(int start, int messageBoxCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessageBoxWrapUpList(null, null, start, messageBoxCount);
      return End_getMessageBoxWrapUpList(asyncResult);

      #else
      send_getMessageBoxWrapUpList(start, messageBoxCount);
      return recv_getMessageBoxWrapUpList();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessageBoxWrapUpList(AsyncCallback callback, object state, int start, int messageBoxCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.Call, seqid_));
      getMessageBoxWrapUpList_args args = new getMessageBoxWrapUpList_args();
      args.Start = start;
      args.MessageBoxCount = messageBoxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessageBoxWrapUpList(int start, int messageBoxCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.Call, seqid_));
      getMessageBoxWrapUpList_args args = new getMessageBoxWrapUpList_args();
      args.Start = start;
      args.MessageBoxCount = messageBoxCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TMessageBoxWrapUpResponse recv_getMessageBoxWrapUpList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessageBoxWrapUpList_result result = new getMessageBoxWrapUpList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxWrapUpList failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessagesBySequenceNumber(AsyncCallback callback, object state, string channelId, string messageBoxId, long startSeq, long endSeq)
    {
      return send_getMessagesBySequenceNumber(callback, state, channelId, messageBoxId, startSeq, endSeq);
    }

    public List<Message> End_getMessagesBySequenceNumber(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessagesBySequenceNumber();
    }

    #endif

    public List<Message> getMessagesBySequenceNumber(string channelId, string messageBoxId, long startSeq, long endSeq)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessagesBySequenceNumber(null, null, channelId, messageBoxId, startSeq, endSeq);
      return End_getMessagesBySequenceNumber(asyncResult);

      #else
      send_getMessagesBySequenceNumber(channelId, messageBoxId, startSeq, endSeq);
      return recv_getMessagesBySequenceNumber();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessagesBySequenceNumber(AsyncCallback callback, object state, string channelId, string messageBoxId, long startSeq, long endSeq)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.Call, seqid_));
      getMessagesBySequenceNumber_args args = new getMessagesBySequenceNumber_args();
      args.ChannelId = channelId;
      args.MessageBoxId = messageBoxId;
      args.StartSeq = startSeq;
      args.EndSeq = endSeq;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessagesBySequenceNumber(string channelId, string messageBoxId, long startSeq, long endSeq)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.Call, seqid_));
      getMessagesBySequenceNumber_args args = new getMessagesBySequenceNumber_args();
      args.ChannelId = channelId;
      args.MessageBoxId = messageBoxId;
      args.StartSeq = startSeq;
      args.EndSeq = endSeq;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Message> recv_getMessagesBySequenceNumber()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessagesBySequenceNumber_result result = new getMessagesBySequenceNumber_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessagesBySequenceNumber failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getNextMessages(AsyncCallback callback, object state, string messageBoxId, long startSeq, int messagesCount)
    {
      return send_getNextMessages(callback, state, messageBoxId, startSeq, messagesCount);
    }

    public List<Message> End_getNextMessages(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getNextMessages();
    }

    #endif

    public List<Message> getNextMessages(string messageBoxId, long startSeq, int messagesCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getNextMessages(null, null, messageBoxId, startSeq, messagesCount);
      return End_getNextMessages(asyncResult);

      #else
      send_getNextMessages(messageBoxId, startSeq, messagesCount);
      return recv_getNextMessages();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getNextMessages(AsyncCallback callback, object state, string messageBoxId, long startSeq, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getNextMessages", TMessageType.Call, seqid_));
      getNextMessages_args args = new getNextMessages_args();
      args.MessageBoxId = messageBoxId;
      args.StartSeq = startSeq;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getNextMessages(string messageBoxId, long startSeq, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getNextMessages", TMessageType.Call, seqid_));
      getNextMessages_args args = new getNextMessages_args();
      args.MessageBoxId = messageBoxId;
      args.StartSeq = startSeq;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Message> recv_getNextMessages()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getNextMessages_result result = new getNextMessages_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNextMessages failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getNotificationPolicy(AsyncCallback callback, object state, CarrierCode carrier)
    {
      return send_getNotificationPolicy(callback, state, carrier);
    }

    public List<NotificationType> End_getNotificationPolicy(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getNotificationPolicy();
    }

    #endif

    public List<NotificationType> getNotificationPolicy(CarrierCode carrier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getNotificationPolicy(null, null, carrier);
      return End_getNotificationPolicy(asyncResult);

      #else
      send_getNotificationPolicy(carrier);
      return recv_getNotificationPolicy();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getNotificationPolicy(AsyncCallback callback, object state, CarrierCode carrier)
    {
      oprot_.WriteMessageBegin(new TMessage("getNotificationPolicy", TMessageType.Call, seqid_));
      getNotificationPolicy_args args = new getNotificationPolicy_args();
      args.Carrier = carrier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getNotificationPolicy(CarrierCode carrier)
    {
      oprot_.WriteMessageBegin(new TMessage("getNotificationPolicy", TMessageType.Call, seqid_));
      getNotificationPolicy_args args = new getNotificationPolicy_args();
      args.Carrier = carrier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<NotificationType> recv_getNotificationPolicy()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getNotificationPolicy_result result = new getNotificationPolicy_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNotificationPolicy failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getPreviousMessages(AsyncCallback callback, object state, string messageBoxId, long endSeq, int messagesCount)
    {
      return send_getPreviousMessages(callback, state, messageBoxId, endSeq, messagesCount);
    }

    public List<Message> End_getPreviousMessages(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPreviousMessages();
    }

    #endif

    public List<Message> getPreviousMessages(string messageBoxId, long endSeq, int messagesCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getPreviousMessages(null, null, messageBoxId, endSeq, messagesCount);
      return End_getPreviousMessages(asyncResult);

      #else
      send_getPreviousMessages(messageBoxId, endSeq, messagesCount);
      return recv_getPreviousMessages();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPreviousMessages(AsyncCallback callback, object state, string messageBoxId, long endSeq, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getPreviousMessages", TMessageType.Call, seqid_));
      getPreviousMessages_args args = new getPreviousMessages_args();
      args.MessageBoxId = messageBoxId;
      args.EndSeq = endSeq;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getPreviousMessages(string messageBoxId, long endSeq, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getPreviousMessages", TMessageType.Call, seqid_));
      getPreviousMessages_args args = new getPreviousMessages_args();
      args.MessageBoxId = messageBoxId;
      args.EndSeq = endSeq;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Message> recv_getPreviousMessages()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPreviousMessages_result result = new getPreviousMessages_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPreviousMessages failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getProfile(AsyncCallback callback, object state)
    {
      return send_getProfile(callback, state);
    }

    public Profile End_getProfile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProfile();
    }

    #endif

    public Profile getProfile()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getProfile(null, null);
      return End_getProfile(asyncResult);

      #else
      send_getProfile();
      return recv_getProfile();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProfile(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getProfile", TMessageType.Call, seqid_));
      getProfile_args args = new getProfile_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getProfile()
    {
      oprot_.WriteMessageBegin(new TMessage("getProfile", TMessageType.Call, seqid_));
      getProfile_args args = new getProfile_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Profile recv_getProfile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProfile_result result = new getProfile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProfile failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getProximityMatchCandidateList(AsyncCallback callback, object state, string sessionId)
    {
      return send_getProximityMatchCandidateList(callback, state, sessionId);
    }

    public ProximityMatchCandidateResult End_getProximityMatchCandidateList(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProximityMatchCandidateList();
    }

    #endif

    public ProximityMatchCandidateResult getProximityMatchCandidateList(string sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getProximityMatchCandidateList(null, null, sessionId);
      return End_getProximityMatchCandidateList(asyncResult);

      #else
      send_getProximityMatchCandidateList(sessionId);
      return recv_getProximityMatchCandidateList();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProximityMatchCandidateList(AsyncCallback callback, object state, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.Call, seqid_));
      getProximityMatchCandidateList_args args = new getProximityMatchCandidateList_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getProximityMatchCandidateList(string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.Call, seqid_));
      getProximityMatchCandidateList_args args = new getProximityMatchCandidateList_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ProximityMatchCandidateResult recv_getProximityMatchCandidateList()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProximityMatchCandidateList_result result = new getProximityMatchCandidateList_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProximityMatchCandidateList failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getProximityMatchCandidates(AsyncCallback callback, object state, string sessionId)
    {
      return send_getProximityMatchCandidates(callback, state, sessionId);
    }

    public THashSet<Contact> End_getProximityMatchCandidates(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProximityMatchCandidates();
    }

    #endif

    public THashSet<Contact> getProximityMatchCandidates(string sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getProximityMatchCandidates(null, null, sessionId);
      return End_getProximityMatchCandidates(asyncResult);

      #else
      send_getProximityMatchCandidates(sessionId);
      return recv_getProximityMatchCandidates();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProximityMatchCandidates(AsyncCallback callback, object state, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.Call, seqid_));
      getProximityMatchCandidates_args args = new getProximityMatchCandidates_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getProximityMatchCandidates(string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.Call, seqid_));
      getProximityMatchCandidates_args args = new getProximityMatchCandidates_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public THashSet<Contact> recv_getProximityMatchCandidates()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProximityMatchCandidates_result result = new getProximityMatchCandidates_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProximityMatchCandidates failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRecentMessages(AsyncCallback callback, object state, string messageBoxId, int messagesCount)
    {
      return send_getRecentMessages(callback, state, messageBoxId, messagesCount);
    }

    public List<Message> End_getRecentMessages(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRecentMessages();
    }

    #endif

    public List<Message> getRecentMessages(string messageBoxId, int messagesCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRecentMessages(null, null, messageBoxId, messagesCount);
      return End_getRecentMessages(asyncResult);

      #else
      send_getRecentMessages(messageBoxId, messagesCount);
      return recv_getRecentMessages();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRecentMessages(AsyncCallback callback, object state, string messageBoxId, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getRecentMessages", TMessageType.Call, seqid_));
      getRecentMessages_args args = new getRecentMessages_args();
      args.MessageBoxId = messageBoxId;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRecentMessages(string messageBoxId, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getRecentMessages", TMessageType.Call, seqid_));
      getRecentMessages_args args = new getRecentMessages_args();
      args.MessageBoxId = messageBoxId;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Message> recv_getRecentMessages()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRecentMessages_result result = new getRecentMessages_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRecentMessages failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRecommendationIds(AsyncCallback callback, object state)
    {
      return send_getRecommendationIds(callback, state);
    }

    public List<string> End_getRecommendationIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRecommendationIds();
    }

    #endif

    public List<string> getRecommendationIds()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRecommendationIds(null, null);
      return End_getRecommendationIds(asyncResult);

      #else
      send_getRecommendationIds();
      return recv_getRecommendationIds();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRecommendationIds(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getRecommendationIds", TMessageType.Call, seqid_));
      getRecommendationIds_args args = new getRecommendationIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRecommendationIds()
    {
      oprot_.WriteMessageBegin(new TMessage("getRecommendationIds", TMessageType.Call, seqid_));
      getRecommendationIds_args args = new getRecommendationIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<string> recv_getRecommendationIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRecommendationIds_result result = new getRecommendationIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRecommendationIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRoom(AsyncCallback callback, object state, string roomId)
    {
      return send_getRoom(callback, state, roomId);
    }

    public Room End_getRoom(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRoom();
    }

    #endif

    public Room getRoom(string roomId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRoom(null, null, roomId);
      return End_getRoom(asyncResult);

      #else
      send_getRoom(roomId);
      return recv_getRoom();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRoom(AsyncCallback callback, object state, string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("getRoom", TMessageType.Call, seqid_));
      getRoom_args args = new getRoom_args();
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRoom(string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("getRoom", TMessageType.Call, seqid_));
      getRoom_args args = new getRoom_args();
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Room recv_getRoom()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRoom_result result = new getRoom_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRoom failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRSAKeyInfo(AsyncCallback callback, object state, IdentityProvider provider)
    {
      return send_getRSAKeyInfo(callback, state, provider);
    }

    public RSAKey End_getRSAKeyInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRSAKeyInfo();
    }

    #endif

    public RSAKey getRSAKeyInfo(IdentityProvider provider)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRSAKeyInfo(null, null, provider);
      return End_getRSAKeyInfo(asyncResult);

      #else
      send_getRSAKeyInfo(provider);
      return recv_getRSAKeyInfo();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRSAKeyInfo(AsyncCallback callback, object state, IdentityProvider provider)
    {
      oprot_.WriteMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.Call, seqid_));
      getRSAKeyInfo_args args = new getRSAKeyInfo_args();
      args.Provider = provider;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRSAKeyInfo(IdentityProvider provider)
    {
      oprot_.WriteMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.Call, seqid_));
      getRSAKeyInfo_args args = new getRSAKeyInfo_args();
      args.Provider = provider;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RSAKey recv_getRSAKeyInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRSAKeyInfo_result result = new getRSAKeyInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRSAKeyInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getServerTime(AsyncCallback callback, object state)
    {
      return send_getServerTime(callback, state);
    }

    public long End_getServerTime(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getServerTime();
    }

    #endif

    public long getServerTime()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getServerTime(null, null);
      return End_getServerTime(asyncResult);

      #else
      send_getServerTime();
      return recv_getServerTime();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getServerTime(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getServerTime", TMessageType.Call, seqid_));
      getServerTime_args args = new getServerTime_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getServerTime()
    {
      oprot_.WriteMessageBegin(new TMessage("getServerTime", TMessageType.Call, seqid_));
      getServerTime_args args = new getServerTime_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public long recv_getServerTime()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getServerTime_result result = new getServerTime_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getServerTime failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSessions(AsyncCallback callback, object state)
    {
      return send_getSessions(callback, state);
    }

    public List<LoginSession> End_getSessions(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSessions();
    }

    #endif

    public List<LoginSession> getSessions()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSessions(null, null);
      return End_getSessions(asyncResult);

      #else
      send_getSessions();
      return recv_getSessions();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSessions(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getSessions", TMessageType.Call, seqid_));
      getSessions_args args = new getSessions_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSessions()
    {
      oprot_.WriteMessageBegin(new TMessage("getSessions", TMessageType.Call, seqid_));
      getSessions_args args = new getSessions_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<LoginSession> recv_getSessions()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSessions_result result = new getSessions_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSessions failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSettings(AsyncCallback callback, object state)
    {
      return send_getSettings(callback, state);
    }

    public Settings End_getSettings(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSettings();
    }

    #endif

    public Settings getSettings()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSettings(null, null);
      return End_getSettings(asyncResult);

      #else
      send_getSettings();
      return recv_getSettings();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSettings(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getSettings", TMessageType.Call, seqid_));
      getSettings_args args = new getSettings_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSettings()
    {
      oprot_.WriteMessageBegin(new TMessage("getSettings", TMessageType.Call, seqid_));
      getSettings_args args = new getSettings_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Settings recv_getSettings()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSettings_result result = new getSettings_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettings failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getGroupsV2(AsyncCallback callback, object state, List<string> groupIds)
    {
      return send_getGroupsV2(callback, state, groupIds);
    }

    public List<@Group> End_getGroupsV2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getGroupsV2();
    }

    #endif

    public List<@Group> getGroupsV2(List<string> groupIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getGroupsV2(null, null, groupIds);
      return End_getGroupsV2(asyncResult);

      #else
      send_getGroupsV2(groupIds);
      return recv_getGroupsV2();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getGroupsV2(AsyncCallback callback, object state, List<string> groupIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupsV2", TMessageType.Call, seqid_));
      getGroupsV2_args args = new getGroupsV2_args();
      args.GroupIds = groupIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getGroupsV2(List<string> groupIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getGroupsV2", TMessageType.Call, seqid_));
      getGroupsV2_args args = new getGroupsV2_args();
      args.GroupIds = groupIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<@Group> recv_getGroupsV2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getGroupsV2_result result = new getGroupsV2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getGroupsV2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSettingsAttributes(AsyncCallback callback, object state, int attrBitset)
    {
      return send_getSettingsAttributes(callback, state, attrBitset);
    }

    public Settings End_getSettingsAttributes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSettingsAttributes();
    }

    #endif

    public Settings getSettingsAttributes(int attrBitset)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSettingsAttributes(null, null, attrBitset);
      return End_getSettingsAttributes(asyncResult);

      #else
      send_getSettingsAttributes(attrBitset);
      return recv_getSettingsAttributes();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSettingsAttributes(AsyncCallback callback, object state, int attrBitset)
    {
      oprot_.WriteMessageBegin(new TMessage("getSettingsAttributes", TMessageType.Call, seqid_));
      getSettingsAttributes_args args = new getSettingsAttributes_args();
      args.AttrBitset = attrBitset;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSettingsAttributes(int attrBitset)
    {
      oprot_.WriteMessageBegin(new TMessage("getSettingsAttributes", TMessageType.Call, seqid_));
      getSettingsAttributes_args args = new getSettingsAttributes_args();
      args.AttrBitset = attrBitset;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Settings recv_getSettingsAttributes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSettingsAttributes_result result = new getSettingsAttributes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSettingsAttributes failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getSystemConfiguration(AsyncCallback callback, object state)
    {
      return send_getSystemConfiguration(callback, state);
    }

    public SystemConfiguration End_getSystemConfiguration(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSystemConfiguration();
    }

    #endif

    public SystemConfiguration getSystemConfiguration()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getSystemConfiguration(null, null);
      return End_getSystemConfiguration(asyncResult);

      #else
      send_getSystemConfiguration();
      return recv_getSystemConfiguration();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSystemConfiguration(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getSystemConfiguration", TMessageType.Call, seqid_));
      getSystemConfiguration_args args = new getSystemConfiguration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getSystemConfiguration()
    {
      oprot_.WriteMessageBegin(new TMessage("getSystemConfiguration", TMessageType.Call, seqid_));
      getSystemConfiguration_args args = new getSystemConfiguration_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public SystemConfiguration recv_getSystemConfiguration()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSystemConfiguration_result result = new getSystemConfiguration_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSystemConfiguration failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getUserTicket(AsyncCallback callback, object state)
    {
      return send_getUserTicket(callback, state);
    }

    public Ticket End_getUserTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getUserTicket();
    }

    #endif

    public Ticket getUserTicket()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getUserTicket(null, null);
      return End_getUserTicket(asyncResult);

      #else
      send_getUserTicket();
      return recv_getUserTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getUserTicket(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getUserTicket", TMessageType.Call, seqid_));
      getUserTicket_args args = new getUserTicket_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getUserTicket()
    {
      oprot_.WriteMessageBegin(new TMessage("getUserTicket", TMessageType.Call, seqid_));
      getUserTicket_args args = new getUserTicket_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Ticket recv_getUserTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getUserTicket_result result = new getUserTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getUserTicket failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getWapInvitation(AsyncCallback callback, object state, string invitationHash)
    {
      return send_getWapInvitation(callback, state, invitationHash);
    }

    public WapInvitation End_getWapInvitation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getWapInvitation();
    }

    #endif

    public WapInvitation getWapInvitation(string invitationHash)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getWapInvitation(null, null, invitationHash);
      return End_getWapInvitation(asyncResult);

      #else
      send_getWapInvitation(invitationHash);
      return recv_getWapInvitation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getWapInvitation(AsyncCallback callback, object state, string invitationHash)
    {
      oprot_.WriteMessageBegin(new TMessage("getWapInvitation", TMessageType.Call, seqid_));
      getWapInvitation_args args = new getWapInvitation_args();
      args.InvitationHash = invitationHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getWapInvitation(string invitationHash)
    {
      oprot_.WriteMessageBegin(new TMessage("getWapInvitation", TMessageType.Call, seqid_));
      getWapInvitation_args args = new getWapInvitation_args();
      args.InvitationHash = invitationHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public WapInvitation recv_getWapInvitation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getWapInvitation_result result = new getWapInvitation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getWapInvitation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_invalidateUserTicket(AsyncCallback callback, object state)
    {
      return send_invalidateUserTicket(callback, state);
    }

    public void End_invalidateUserTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_invalidateUserTicket();
    }

    #endif

    public void invalidateUserTicket()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_invalidateUserTicket(null, null);
      End_invalidateUserTicket(asyncResult);

      #else
      send_invalidateUserTicket();
      recv_invalidateUserTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_invalidateUserTicket(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("invalidateUserTicket", TMessageType.Call, seqid_));
      invalidateUserTicket_args args = new invalidateUserTicket_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_invalidateUserTicket()
    {
      oprot_.WriteMessageBegin(new TMessage("invalidateUserTicket", TMessageType.Call, seqid_));
      invalidateUserTicket_args args = new invalidateUserTicket_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_invalidateUserTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      invalidateUserTicket_result result = new invalidateUserTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_inviteFriendsBySms(AsyncCallback callback, object state, List<string> phoneNumberList)
    {
      return send_inviteFriendsBySms(callback, state, phoneNumberList);
    }

    public void End_inviteFriendsBySms(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_inviteFriendsBySms();
    }

    #endif

    public void inviteFriendsBySms(List<string> phoneNumberList)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_inviteFriendsBySms(null, null, phoneNumberList);
      End_inviteFriendsBySms(asyncResult);

      #else
      send_inviteFriendsBySms(phoneNumberList);
      recv_inviteFriendsBySms();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_inviteFriendsBySms(AsyncCallback callback, object state, List<string> phoneNumberList)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.Call, seqid_));
      inviteFriendsBySms_args args = new inviteFriendsBySms_args();
      args.PhoneNumberList = phoneNumberList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_inviteFriendsBySms(List<string> phoneNumberList)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.Call, seqid_));
      inviteFriendsBySms_args args = new inviteFriendsBySms_args();
      args.PhoneNumberList = phoneNumberList;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_inviteFriendsBySms()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      inviteFriendsBySms_result result = new inviteFriendsBySms_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_inviteIntoGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
    {
      return send_inviteIntoGroup(callback, state, reqSeq, groupId, contactIds);
    }

    public void End_inviteIntoGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_inviteIntoGroup();
    }

    #endif

    public void inviteIntoGroup(int reqSeq, string groupId, List<string> contactIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_inviteIntoGroup(null, null, reqSeq, groupId, contactIds);
      End_inviteIntoGroup(asyncResult);

      #else
      send_inviteIntoGroup(reqSeq, groupId, contactIds);
      recv_inviteIntoGroup();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_inviteIntoGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteIntoGroup", TMessageType.Call, seqid_));
      inviteIntoGroup_args args = new inviteIntoGroup_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_inviteIntoGroup(int reqSeq, string groupId, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteIntoGroup", TMessageType.Call, seqid_));
      inviteIntoGroup_args args = new inviteIntoGroup_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_inviteIntoGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      inviteIntoGroup_result result = new inviteIntoGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_inviteIntoRoom(AsyncCallback callback, object state, int reqSeq, string roomId, List<string> contactIds)
    {
      return send_inviteIntoRoom(callback, state, reqSeq, roomId, contactIds);
    }

    public void End_inviteIntoRoom(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_inviteIntoRoom();
    }

    #endif

    public void inviteIntoRoom(int reqSeq, string roomId, List<string> contactIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_inviteIntoRoom(null, null, reqSeq, roomId, contactIds);
      End_inviteIntoRoom(asyncResult);

      #else
      send_inviteIntoRoom(reqSeq, roomId, contactIds);
      recv_inviteIntoRoom();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_inviteIntoRoom(AsyncCallback callback, object state, int reqSeq, string roomId, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteIntoRoom", TMessageType.Call, seqid_));
      inviteIntoRoom_args args = new inviteIntoRoom_args();
      args.ReqSeq = reqSeq;
      args.RoomId = roomId;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_inviteIntoRoom(int reqSeq, string roomId, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteIntoRoom", TMessageType.Call, seqid_));
      inviteIntoRoom_args args = new inviteIntoRoom_args();
      args.ReqSeq = reqSeq;
      args.RoomId = roomId;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_inviteIntoRoom()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      inviteIntoRoom_result result = new inviteIntoRoom_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_inviteViaEmail(AsyncCallback callback, object state, int reqSeq, string email, string name)
    {
      return send_inviteViaEmail(callback, state, reqSeq, email, name);
    }

    public void End_inviteViaEmail(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_inviteViaEmail();
    }

    #endif

    public void inviteViaEmail(int reqSeq, string email, string name)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_inviteViaEmail(null, null, reqSeq, email, name);
      End_inviteViaEmail(asyncResult);

      #else
      send_inviteViaEmail(reqSeq, email, name);
      recv_inviteViaEmail();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_inviteViaEmail(AsyncCallback callback, object state, int reqSeq, string email, string name)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteViaEmail", TMessageType.Call, seqid_));
      inviteViaEmail_args args = new inviteViaEmail_args();
      args.ReqSeq = reqSeq;
      args.Email = email;
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_inviteViaEmail(int reqSeq, string email, string name)
    {
      oprot_.WriteMessageBegin(new TMessage("inviteViaEmail", TMessageType.Call, seqid_));
      inviteViaEmail_args args = new inviteViaEmail_args();
      args.ReqSeq = reqSeq;
      args.Email = email;
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_inviteViaEmail()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      inviteViaEmail_result result = new inviteViaEmail_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_isIdentityIdentifierAvailable(AsyncCallback callback, object state, IdentityProvider provider, string identifier)
    {
      return send_isIdentityIdentifierAvailable(callback, state, provider, identifier);
    }

    public bool End_isIdentityIdentifierAvailable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isIdentityIdentifierAvailable();
    }

    #endif

    public bool isIdentityIdentifierAvailable(IdentityProvider provider, string identifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_isIdentityIdentifierAvailable(null, null, provider, identifier);
      return End_isIdentityIdentifierAvailable(asyncResult);

      #else
      send_isIdentityIdentifierAvailable(provider, identifier);
      return recv_isIdentityIdentifierAvailable();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_isIdentityIdentifierAvailable(AsyncCallback callback, object state, IdentityProvider provider, string identifier)
    {
      oprot_.WriteMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.Call, seqid_));
      isIdentityIdentifierAvailable_args args = new isIdentityIdentifierAvailable_args();
      args.Provider = provider;
      args.Identifier = identifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_isIdentityIdentifierAvailable(IdentityProvider provider, string identifier)
    {
      oprot_.WriteMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.Call, seqid_));
      isIdentityIdentifierAvailable_args args = new isIdentityIdentifierAvailable_args();
      args.Provider = provider;
      args.Identifier = identifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_isIdentityIdentifierAvailable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isIdentityIdentifierAvailable_result result = new isIdentityIdentifierAvailable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isIdentityIdentifierAvailable failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_isUseridAvailable(AsyncCallback callback, object state, string userid)
    {
      return send_isUseridAvailable(callback, state, userid);
    }

    public bool End_isUseridAvailable(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_isUseridAvailable();
    }

    #endif

    public bool isUseridAvailable(string userid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_isUseridAvailable(null, null, userid);
      return End_isUseridAvailable(asyncResult);

      #else
      send_isUseridAvailable(userid);
      return recv_isUseridAvailable();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_isUseridAvailable(AsyncCallback callback, object state, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("isUseridAvailable", TMessageType.Call, seqid_));
      isUseridAvailable_args args = new isUseridAvailable_args();
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_isUseridAvailable(string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("isUseridAvailable", TMessageType.Call, seqid_));
      isUseridAvailable_args args = new isUseridAvailable_args();
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_isUseridAvailable()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      isUseridAvailable_result result = new isUseridAvailable_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "isUseridAvailable failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_kickoutFromGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
    {
      return send_kickoutFromGroup(callback, state, reqSeq, groupId, contactIds);
    }

    public void End_kickoutFromGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_kickoutFromGroup();
    }

    #endif

    public void kickoutFromGroup(int reqSeq, string groupId, List<string> contactIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_kickoutFromGroup(null, null, reqSeq, groupId, contactIds);
      End_kickoutFromGroup(asyncResult);

      #else
      send_kickoutFromGroup(reqSeq, groupId, contactIds);
      recv_kickoutFromGroup();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_kickoutFromGroup(AsyncCallback callback, object state, int reqSeq, string groupId, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("kickoutFromGroup", TMessageType.Call, seqid_));
      kickoutFromGroup_args args = new kickoutFromGroup_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_kickoutFromGroup(int reqSeq, string groupId, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("kickoutFromGroup", TMessageType.Call, seqid_));
      kickoutFromGroup_args args = new kickoutFromGroup_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_kickoutFromGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      kickoutFromGroup_result result = new kickoutFromGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reissueGroupTicket(AsyncCallback callback, object state, string groupMid)
    {
      return send_reissueGroupTicket(callback, state, groupMid);
    }

    public string End_reissueGroupTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reissueGroupTicket();
    }

    #endif

    public string reissueGroupTicket(string groupMid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reissueGroupTicket(null, null, groupMid);
      return End_reissueGroupTicket(asyncResult);

      #else
      send_reissueGroupTicket(groupMid);
      return recv_reissueGroupTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reissueGroupTicket(AsyncCallback callback, object state, string groupMid)
    {
      oprot_.WriteMessageBegin(new TMessage("reissueGroupTicket", TMessageType.Call, seqid_));
      reissueGroupTicket_args args = new reissueGroupTicket_args();
      args.GroupMid = groupMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reissueGroupTicket(string groupMid)
    {
      oprot_.WriteMessageBegin(new TMessage("reissueGroupTicket", TMessageType.Call, seqid_));
      reissueGroupTicket_args args = new reissueGroupTicket_args();
      args.GroupMid = groupMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_reissueGroupTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reissueGroupTicket_result result = new reissueGroupTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reissueGroupTicket failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findGroupByTicket(AsyncCallback callback, object state, string ticketId)
    {
      return send_findGroupByTicket(callback, state, ticketId);
    }

    public @Group End_findGroupByTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findGroupByTicket();
    }

    #endif

    public @Group findGroupByTicket(string ticketId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findGroupByTicket(null, null, ticketId);
      return End_findGroupByTicket(asyncResult);

      #else
      send_findGroupByTicket(ticketId);
      return recv_findGroupByTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findGroupByTicket(AsyncCallback callback, object state, string ticketId)
    {
      oprot_.WriteMessageBegin(new TMessage("findGroupByTicket", TMessageType.Call, seqid_));
      findGroupByTicket_args args = new findGroupByTicket_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findGroupByTicket(string ticketId)
    {
      oprot_.WriteMessageBegin(new TMessage("findGroupByTicket", TMessageType.Call, seqid_));
      findGroupByTicket_args args = new findGroupByTicket_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public @Group recv_findGroupByTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findGroupByTicket_result result = new findGroupByTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findGroupByTicket failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_leaveGroup(AsyncCallback callback, object state, int reqSeq, string groupId)
    {
      return send_leaveGroup(callback, state, reqSeq, groupId);
    }

    public void End_leaveGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_leaveGroup();
    }

    #endif

    public void leaveGroup(int reqSeq, string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_leaveGroup(null, null, reqSeq, groupId);
      End_leaveGroup(asyncResult);

      #else
      send_leaveGroup(reqSeq, groupId);
      recv_leaveGroup();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_leaveGroup(AsyncCallback callback, object state, int reqSeq, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("leaveGroup", TMessageType.Call, seqid_));
      leaveGroup_args args = new leaveGroup_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_leaveGroup(int reqSeq, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("leaveGroup", TMessageType.Call, seqid_));
      leaveGroup_args args = new leaveGroup_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_leaveGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      leaveGroup_result result = new leaveGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_leaveRoom(AsyncCallback callback, object state, int reqSeq, string roomId)
    {
      return send_leaveRoom(callback, state, reqSeq, roomId);
    }

    public void End_leaveRoom(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_leaveRoom();
    }

    #endif

    public void leaveRoom(int reqSeq, string roomId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_leaveRoom(null, null, reqSeq, roomId);
      End_leaveRoom(asyncResult);

      #else
      send_leaveRoom(reqSeq, roomId);
      recv_leaveRoom();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_leaveRoom(AsyncCallback callback, object state, int reqSeq, string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("leaveRoom", TMessageType.Call, seqid_));
      leaveRoom_args args = new leaveRoom_args();
      args.ReqSeq = reqSeq;
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_leaveRoom(int reqSeq, string roomId)
    {
      oprot_.WriteMessageBegin(new TMessage("leaveRoom", TMessageType.Call, seqid_));
      leaveRoom_args args = new leaveRoom_args();
      args.ReqSeq = reqSeq;
      args.RoomId = roomId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_leaveRoom()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      leaveRoom_result result = new leaveRoom_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_loginWithIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
    {
      return send_loginWithIdentityCredential(callback, state, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
    }

    public string End_loginWithIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loginWithIdentityCredential();
    }

    #endif

    public string loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_loginWithIdentityCredential(null, null, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
      return End_loginWithIdentityCredential(asyncResult);

      #else
      send_loginWithIdentityCredential(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
      return recv_loginWithIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_loginWithIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.Call, seqid_));
      loginWithIdentityCredential_args args = new loginWithIdentityCredential_args();
      args.IdentityProvider = identityProvider;
      args.Identifier = identifier;
      args.Password = password;
      args.KeepLoggedIn = keepLoggedIn;
      args.AccessLocation = accessLocation;
      args.SystemName = systemName;
      args.Certificate = certificate;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_loginWithIdentityCredential(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.Call, seqid_));
      loginWithIdentityCredential_args args = new loginWithIdentityCredential_args();
      args.IdentityProvider = identityProvider;
      args.Identifier = identifier;
      args.Password = password;
      args.KeepLoggedIn = keepLoggedIn;
      args.AccessLocation = accessLocation;
      args.SystemName = systemName;
      args.Certificate = certificate;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_loginWithIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loginWithIdentityCredential_result result = new loginWithIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithIdentityCredential failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_loginWithIdentityCredentialForCertificate(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
    {
      return send_loginWithIdentityCredentialForCertificate(callback, state, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
    }

    public LoginResult End_loginWithIdentityCredentialForCertificate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loginWithIdentityCredentialForCertificate();
    }

    #endif

    public LoginResult loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_loginWithIdentityCredentialForCertificate(null, null, identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
      return End_loginWithIdentityCredentialForCertificate(asyncResult);

      #else
      send_loginWithIdentityCredentialForCertificate(identityProvider, identifier, password, keepLoggedIn, accessLocation, systemName, certificate);
      return recv_loginWithIdentityCredentialForCertificate();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_loginWithIdentityCredentialForCertificate(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.Call, seqid_));
      loginWithIdentityCredentialForCertificate_args args = new loginWithIdentityCredentialForCertificate_args();
      args.IdentityProvider = identityProvider;
      args.Identifier = identifier;
      args.Password = password;
      args.KeepLoggedIn = keepLoggedIn;
      args.AccessLocation = accessLocation;
      args.SystemName = systemName;
      args.Certificate = certificate;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_loginWithIdentityCredentialForCertificate(IdentityProvider identityProvider, string identifier, string password, bool keepLoggedIn, string accessLocation, string systemName, string certificate)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.Call, seqid_));
      loginWithIdentityCredentialForCertificate_args args = new loginWithIdentityCredentialForCertificate_args();
      args.IdentityProvider = identityProvider;
      args.Identifier = identifier;
      args.Password = password;
      args.KeepLoggedIn = keepLoggedIn;
      args.AccessLocation = accessLocation;
      args.SystemName = systemName;
      args.Certificate = certificate;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public LoginResult recv_loginWithIdentityCredentialForCertificate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loginWithIdentityCredentialForCertificate_result result = new loginWithIdentityCredentialForCertificate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithIdentityCredentialForCertificate failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_loginWithVerifier(AsyncCallback callback, object state, string verifier)
    {
      return send_loginWithVerifier(callback, state, verifier);
    }

    public string End_loginWithVerifier(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loginWithVerifier();
    }

    #endif

    public string loginWithVerifier(string verifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_loginWithVerifier(null, null, verifier);
      return End_loginWithVerifier(asyncResult);

      #else
      send_loginWithVerifier(verifier);
      return recv_loginWithVerifier();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_loginWithVerifier(AsyncCallback callback, object state, string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithVerifier", TMessageType.Call, seqid_));
      loginWithVerifier_args args = new loginWithVerifier_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_loginWithVerifier(string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithVerifier", TMessageType.Call, seqid_));
      loginWithVerifier_args args = new loginWithVerifier_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_loginWithVerifier()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loginWithVerifier_result result = new loginWithVerifier_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithVerifier failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_loginWithVerifierForCerificate(AsyncCallback callback, object state, string verifier)
    {
      return send_loginWithVerifierForCerificate(callback, state, verifier);
    }

    public LoginResult End_loginWithVerifierForCerificate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loginWithVerifierForCerificate();
    }

    #endif

    public LoginResult loginWithVerifierForCerificate(string verifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_loginWithVerifierForCerificate(null, null, verifier);
      return End_loginWithVerifierForCerificate(asyncResult);

      #else
      send_loginWithVerifierForCerificate(verifier);
      return recv_loginWithVerifierForCerificate();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_loginWithVerifierForCerificate(AsyncCallback callback, object state, string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.Call, seqid_));
      loginWithVerifierForCerificate_args args = new loginWithVerifierForCerificate_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_loginWithVerifierForCerificate(string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.Call, seqid_));
      loginWithVerifierForCerificate_args args = new loginWithVerifierForCerificate_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public LoginResult recv_loginWithVerifierForCerificate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loginWithVerifierForCerificate_result result = new loginWithVerifierForCerificate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithVerifierForCerificate failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_loginWithVerifierForCertificate(AsyncCallback callback, object state, string verifier)
    {
      return send_loginWithVerifierForCertificate(callback, state, verifier);
    }

    public LoginResult End_loginWithVerifierForCertificate(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_loginWithVerifierForCertificate();
    }

    #endif

    public LoginResult loginWithVerifierForCertificate(string verifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_loginWithVerifierForCertificate(null, null, verifier);
      return End_loginWithVerifierForCertificate(asyncResult);

      #else
      send_loginWithVerifierForCertificate(verifier);
      return recv_loginWithVerifierForCertificate();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_loginWithVerifierForCertificate(AsyncCallback callback, object state, string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.Call, seqid_));
      loginWithVerifierForCertificate_args args = new loginWithVerifierForCertificate_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_loginWithVerifierForCertificate(string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.Call, seqid_));
      loginWithVerifierForCertificate_args args = new loginWithVerifierForCertificate_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public LoginResult recv_loginWithVerifierForCertificate()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      loginWithVerifierForCertificate_result result = new loginWithVerifierForCertificate_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginWithVerifierForCertificate failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_logout(AsyncCallback callback, object state)
    {
      return send_logout(callback, state);
    }

    public void End_logout(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_logout();
    }

    #endif

    public void logout()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_logout(null, null);
      End_logout(asyncResult);

      #else
      send_logout();
      recv_logout();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_logout(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
      logout_args args = new logout_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_logout()
    {
      oprot_.WriteMessageBegin(new TMessage("logout", TMessageType.Call, seqid_));
      logout_args args = new logout_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_logout()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      logout_result result = new logout_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_logoutSession(AsyncCallback callback, object state, string tokenKey)
    {
      return send_logoutSession(callback, state, tokenKey);
    }

    public void End_logoutSession(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_logoutSession();
    }

    #endif

    public void logoutSession(string tokenKey)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_logoutSession(null, null, tokenKey);
      End_logoutSession(asyncResult);

      #else
      send_logoutSession(tokenKey);
      recv_logoutSession();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_logoutSession(AsyncCallback callback, object state, string tokenKey)
    {
      oprot_.WriteMessageBegin(new TMessage("logoutSession", TMessageType.Call, seqid_));
      logoutSession_args args = new logoutSession_args();
      args.TokenKey = tokenKey;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_logoutSession(string tokenKey)
    {
      oprot_.WriteMessageBegin(new TMessage("logoutSession", TMessageType.Call, seqid_));
      logoutSession_args args = new logoutSession_args();
      args.TokenKey = tokenKey;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_logoutSession()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      logoutSession_result result = new logoutSession_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_noop(AsyncCallback callback, object state)
    {
      return send_noop(callback, state);
    }

    public void End_noop(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_noop();
    }

    #endif

    public void noop()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_noop(null, null);
      End_noop(asyncResult);

      #else
      send_noop();
      recv_noop();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_noop(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("noop", TMessageType.Call, seqid_));
      noop_args args = new noop_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_noop()
    {
      oprot_.WriteMessageBegin(new TMessage("noop", TMessageType.Call, seqid_));
      noop_args args = new noop_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_noop()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      noop_result result = new noop_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_notifiedRedirect(AsyncCallback callback, object state, Dictionary<string, string> paramMap)
    {
      return send_notifiedRedirect(callback, state, paramMap);
    }

    public void End_notifiedRedirect(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_notifiedRedirect();
    }

    #endif

    public void notifiedRedirect(Dictionary<string, string> paramMap)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_notifiedRedirect(null, null, paramMap);
      End_notifiedRedirect(asyncResult);

      #else
      send_notifiedRedirect(paramMap);
      recv_notifiedRedirect();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_notifiedRedirect(AsyncCallback callback, object state, Dictionary<string, string> paramMap)
    {
      oprot_.WriteMessageBegin(new TMessage("notifiedRedirect", TMessageType.Call, seqid_));
      notifiedRedirect_args args = new notifiedRedirect_args();
      args.ParamMap = paramMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_notifiedRedirect(Dictionary<string, string> paramMap)
    {
      oprot_.WriteMessageBegin(new TMessage("notifiedRedirect", TMessageType.Call, seqid_));
      notifiedRedirect_args args = new notifiedRedirect_args();
      args.ParamMap = paramMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_notifiedRedirect()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      notifiedRedirect_result result = new notifiedRedirect_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_notifyBuddyOnAir(AsyncCallback callback, object state, int seq, List<string> receiverMids)
    {
      return send_notifyBuddyOnAir(callback, state, seq, receiverMids);
    }

    public Dictionary<string, string> End_notifyBuddyOnAir(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_notifyBuddyOnAir();
    }

    #endif

    public Dictionary<string, string> notifyBuddyOnAir(int seq, List<string> receiverMids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_notifyBuddyOnAir(null, null, seq, receiverMids);
      return End_notifyBuddyOnAir(asyncResult);

      #else
      send_notifyBuddyOnAir(seq, receiverMids);
      return recv_notifyBuddyOnAir();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_notifyBuddyOnAir(AsyncCallback callback, object state, int seq, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.Call, seqid_));
      notifyBuddyOnAir_args args = new notifyBuddyOnAir_args();
      args.Seq = seq;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_notifyBuddyOnAir(int seq, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.Call, seqid_));
      notifyBuddyOnAir_args args = new notifyBuddyOnAir_args();
      args.Seq = seq;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, string> recv_notifyBuddyOnAir()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      notifyBuddyOnAir_result result = new notifyBuddyOnAir_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "notifyBuddyOnAir failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_notifyIndividualEvent(AsyncCallback callback, object state, NotificationStatus notificationStatus, List<string> receiverMids)
    {
      return send_notifyIndividualEvent(callback, state, notificationStatus, receiverMids);
    }

    public void End_notifyIndividualEvent(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_notifyIndividualEvent();
    }

    #endif

    public void notifyIndividualEvent(NotificationStatus notificationStatus, List<string> receiverMids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_notifyIndividualEvent(null, null, notificationStatus, receiverMids);
      End_notifyIndividualEvent(asyncResult);

      #else
      send_notifyIndividualEvent(notificationStatus, receiverMids);
      recv_notifyIndividualEvent();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_notifyIndividualEvent(AsyncCallback callback, object state, NotificationStatus notificationStatus, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.Call, seqid_));
      notifyIndividualEvent_args args = new notifyIndividualEvent_args();
      args.NotificationStatus = notificationStatus;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_notifyIndividualEvent(NotificationStatus notificationStatus, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.Call, seqid_));
      notifyIndividualEvent_args args = new notifyIndividualEvent_args();
      args.NotificationStatus = notificationStatus;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_notifyIndividualEvent()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      notifyIndividualEvent_result result = new notifyIndividualEvent_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_notifyInstalled(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions)
    {
      return send_notifyInstalled(callback, state, udidHash, applicationTypeWithExtensions);
    }

    public void End_notifyInstalled(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_notifyInstalled();
    }

    #endif

    public void notifyInstalled(string udidHash, string applicationTypeWithExtensions)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_notifyInstalled(null, null, udidHash, applicationTypeWithExtensions);
      End_notifyInstalled(asyncResult);

      #else
      send_notifyInstalled(udidHash, applicationTypeWithExtensions);
      recv_notifyInstalled();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_notifyInstalled(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyInstalled", TMessageType.Call, seqid_));
      notifyInstalled_args args = new notifyInstalled_args();
      args.UdidHash = udidHash;
      args.ApplicationTypeWithExtensions = applicationTypeWithExtensions;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_notifyInstalled(string udidHash, string applicationTypeWithExtensions)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyInstalled", TMessageType.Call, seqid_));
      notifyInstalled_args args = new notifyInstalled_args();
      args.UdidHash = udidHash;
      args.ApplicationTypeWithExtensions = applicationTypeWithExtensions;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_notifyInstalled()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      notifyInstalled_result result = new notifyInstalled_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_notifyRegistrationComplete(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions)
    {
      return send_notifyRegistrationComplete(callback, state, udidHash, applicationTypeWithExtensions);
    }

    public void End_notifyRegistrationComplete(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_notifyRegistrationComplete();
    }

    #endif

    public void notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_notifyRegistrationComplete(null, null, udidHash, applicationTypeWithExtensions);
      End_notifyRegistrationComplete(asyncResult);

      #else
      send_notifyRegistrationComplete(udidHash, applicationTypeWithExtensions);
      recv_notifyRegistrationComplete();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_notifyRegistrationComplete(AsyncCallback callback, object state, string udidHash, string applicationTypeWithExtensions)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.Call, seqid_));
      notifyRegistrationComplete_args args = new notifyRegistrationComplete_args();
      args.UdidHash = udidHash;
      args.ApplicationTypeWithExtensions = applicationTypeWithExtensions;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_notifyRegistrationComplete(string udidHash, string applicationTypeWithExtensions)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.Call, seqid_));
      notifyRegistrationComplete_args args = new notifyRegistrationComplete_args();
      args.UdidHash = udidHash;
      args.ApplicationTypeWithExtensions = applicationTypeWithExtensions;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_notifyRegistrationComplete()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      notifyRegistrationComplete_result result = new notifyRegistrationComplete_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_notifySleep(AsyncCallback callback, object state, long lastRev, int badge)
    {
      return send_notifySleep(callback, state, lastRev, badge);
    }

    public void End_notifySleep(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_notifySleep();
    }

    #endif

    public void notifySleep(long lastRev, int badge)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_notifySleep(null, null, lastRev, badge);
      End_notifySleep(asyncResult);

      #else
      send_notifySleep(lastRev, badge);
      recv_notifySleep();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_notifySleep(AsyncCallback callback, object state, long lastRev, int badge)
    {
      oprot_.WriteMessageBegin(new TMessage("notifySleep", TMessageType.Call, seqid_));
      notifySleep_args args = new notifySleep_args();
      args.LastRev = lastRev;
      args.Badge = badge;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_notifySleep(long lastRev, int badge)
    {
      oprot_.WriteMessageBegin(new TMessage("notifySleep", TMessageType.Call, seqid_));
      notifySleep_args args = new notifySleep_args();
      args.LastRev = lastRev;
      args.Badge = badge;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_notifySleep()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      notifySleep_result result = new notifySleep_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_notifyUpdated(AsyncCallback callback, object state, long lastRev, DeviceInfo deviceInfo)
    {
      return send_notifyUpdated(callback, state, lastRev, deviceInfo);
    }

    public void End_notifyUpdated(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_notifyUpdated();
    }

    #endif

    public void notifyUpdated(long lastRev, DeviceInfo deviceInfo)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_notifyUpdated(null, null, lastRev, deviceInfo);
      End_notifyUpdated(asyncResult);

      #else
      send_notifyUpdated(lastRev, deviceInfo);
      recv_notifyUpdated();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_notifyUpdated(AsyncCallback callback, object state, long lastRev, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyUpdated", TMessageType.Call, seqid_));
      notifyUpdated_args args = new notifyUpdated_args();
      args.LastRev = lastRev;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_notifyUpdated(long lastRev, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("notifyUpdated", TMessageType.Call, seqid_));
      notifyUpdated_args args = new notifyUpdated_args();
      args.LastRev = lastRev;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_notifyUpdated()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      notifyUpdated_result result = new notifyUpdated_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_openProximityMatch(AsyncCallback callback, object state, Location location)
    {
      return send_openProximityMatch(callback, state, location);
    }

    public string End_openProximityMatch(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_openProximityMatch();
    }

    #endif

    public string openProximityMatch(Location location)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_openProximityMatch(null, null, location);
      return End_openProximityMatch(asyncResult);

      #else
      send_openProximityMatch(location);
      return recv_openProximityMatch();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_openProximityMatch(AsyncCallback callback, object state, Location location)
    {
      oprot_.WriteMessageBegin(new TMessage("openProximityMatch", TMessageType.Call, seqid_));
      openProximityMatch_args args = new openProximityMatch_args();
      args.Location = location;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_openProximityMatch(Location location)
    {
      oprot_.WriteMessageBegin(new TMessage("openProximityMatch", TMessageType.Call, seqid_));
      openProximityMatch_args args = new openProximityMatch_args();
      args.Location = location;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_openProximityMatch()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      openProximityMatch_result result = new openProximityMatch_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "openProximityMatch failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerBuddyUser(AsyncCallback callback, object state, string buddyId, string registrarPassword)
    {
      return send_registerBuddyUser(callback, state, buddyId, registrarPassword);
    }

    public string End_registerBuddyUser(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerBuddyUser();
    }

    #endif

    public string registerBuddyUser(string buddyId, string registrarPassword)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerBuddyUser(null, null, buddyId, registrarPassword);
      return End_registerBuddyUser(asyncResult);

      #else
      send_registerBuddyUser(buddyId, registrarPassword);
      return recv_registerBuddyUser();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerBuddyUser(AsyncCallback callback, object state, string buddyId, string registrarPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("registerBuddyUser", TMessageType.Call, seqid_));
      registerBuddyUser_args args = new registerBuddyUser_args();
      args.BuddyId = buddyId;
      args.RegistrarPassword = registrarPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerBuddyUser(string buddyId, string registrarPassword)
    {
      oprot_.WriteMessageBegin(new TMessage("registerBuddyUser", TMessageType.Call, seqid_));
      registerBuddyUser_args args = new registerBuddyUser_args();
      args.BuddyId = buddyId;
      args.RegistrarPassword = registrarPassword;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerBuddyUser()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerBuddyUser_result result = new registerBuddyUser_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerBuddyUser failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerBuddyUserid(AsyncCallback callback, object state, int seq, string userid)
    {
      return send_registerBuddyUserid(callback, state, seq, userid);
    }

    public void End_registerBuddyUserid(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_registerBuddyUserid();
    }

    #endif

    public void registerBuddyUserid(int seq, string userid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerBuddyUserid(null, null, seq, userid);
      End_registerBuddyUserid(asyncResult);

      #else
      send_registerBuddyUserid(seq, userid);
      recv_registerBuddyUserid();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerBuddyUserid(AsyncCallback callback, object state, int seq, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("registerBuddyUserid", TMessageType.Call, seqid_));
      registerBuddyUserid_args args = new registerBuddyUserid_args();
      args.Seq = seq;
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerBuddyUserid(int seq, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("registerBuddyUserid", TMessageType.Call, seqid_));
      registerBuddyUserid_args args = new registerBuddyUserid_args();
      args.Seq = seq;
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_registerBuddyUserid()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerBuddyUserid_result result = new registerBuddyUserid_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerDevice(AsyncCallback callback, object state, string sessionId)
    {
      return send_registerDevice(callback, state, sessionId);
    }

    public string End_registerDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerDevice();
    }

    #endif

    public string registerDevice(string sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerDevice(null, null, sessionId);
      return End_registerDevice(asyncResult);

      #else
      send_registerDevice(sessionId);
      return recv_registerDevice();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerDevice(AsyncCallback callback, object state, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Call, seqid_));
      registerDevice_args args = new registerDevice_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerDevice(string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Call, seqid_));
      registerDevice_args args = new registerDevice_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerDevice_result result = new registerDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDevice failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerDeviceWithIdentityCredential(AsyncCallback callback, object state, string sessionId, IdentityProvider provider, string identifier, string verifier)
    {
      return send_registerDeviceWithIdentityCredential(callback, state, sessionId, provider, identifier, verifier);
    }

    public string End_registerDeviceWithIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerDeviceWithIdentityCredential();
    }

    #endif

    public string registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerDeviceWithIdentityCredential(null, null, sessionId, provider, identifier, verifier);
      return End_registerDeviceWithIdentityCredential(asyncResult);

      #else
      send_registerDeviceWithIdentityCredential(sessionId, provider, identifier, verifier);
      return recv_registerDeviceWithIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerDeviceWithIdentityCredential(AsyncCallback callback, object state, string sessionId, IdentityProvider provider, string identifier, string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.Call, seqid_));
      registerDeviceWithIdentityCredential_args args = new registerDeviceWithIdentityCredential_args();
      args.SessionId = sessionId;
      args.Provider = provider;
      args.Identifier = identifier;
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerDeviceWithIdentityCredential(string sessionId, IdentityProvider provider, string identifier, string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.Call, seqid_));
      registerDeviceWithIdentityCredential_args args = new registerDeviceWithIdentityCredential_args();
      args.SessionId = sessionId;
      args.Provider = provider;
      args.Identifier = identifier;
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerDeviceWithIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerDeviceWithIdentityCredential_result result = new registerDeviceWithIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDeviceWithIdentityCredential failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerDeviceWithoutPhoneNumber(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo)
    {
      return send_registerDeviceWithoutPhoneNumber(callback, state, region, udidHash, deviceInfo);
    }

    public string End_registerDeviceWithoutPhoneNumber(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerDeviceWithoutPhoneNumber();
    }

    #endif

    public string registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerDeviceWithoutPhoneNumber(null, null, region, udidHash, deviceInfo);
      return End_registerDeviceWithoutPhoneNumber(asyncResult);

      #else
      send_registerDeviceWithoutPhoneNumber(region, udidHash, deviceInfo);
      return recv_registerDeviceWithoutPhoneNumber();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerDeviceWithoutPhoneNumber(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.Call, seqid_));
      registerDeviceWithoutPhoneNumber_args args = new registerDeviceWithoutPhoneNumber_args();
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerDeviceWithoutPhoneNumber(string region, string udidHash, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.Call, seqid_));
      registerDeviceWithoutPhoneNumber_args args = new registerDeviceWithoutPhoneNumber_args();
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerDeviceWithoutPhoneNumber()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerDeviceWithoutPhoneNumber_result result = new registerDeviceWithoutPhoneNumber_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDeviceWithoutPhoneNumber failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerDeviceWithoutPhoneNumberWithIdentityCredential(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid, string migrationPincodeSessionId)
    {
      return send_registerDeviceWithoutPhoneNumberWithIdentityCredential(callback, state, region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId);
    }

    public string End_registerDeviceWithoutPhoneNumberWithIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerDeviceWithoutPhoneNumberWithIdentityCredential();
    }

    #endif

    public string registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid, string migrationPincodeSessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerDeviceWithoutPhoneNumberWithIdentityCredential(null, null, region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId);
      return End_registerDeviceWithoutPhoneNumberWithIdentityCredential(asyncResult);

      #else
      send_registerDeviceWithoutPhoneNumberWithIdentityCredential(region, udidHash, deviceInfo, provider, identifier, verifier, mid, migrationPincodeSessionId);
      return recv_registerDeviceWithoutPhoneNumberWithIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerDeviceWithoutPhoneNumberWithIdentityCredential(AsyncCallback callback, object state, string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid, string migrationPincodeSessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.Call, seqid_));
      registerDeviceWithoutPhoneNumberWithIdentityCredential_args args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args();
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Provider = provider;
      args.Identifier = identifier;
      args.Verifier = verifier;
      args.Mid = mid;
      args.MigrationPincodeSessionId = migrationPincodeSessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerDeviceWithoutPhoneNumberWithIdentityCredential(string region, string udidHash, DeviceInfo deviceInfo, IdentityProvider provider, string identifier, string verifier, string mid, string migrationPincodeSessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.Call, seqid_));
      registerDeviceWithoutPhoneNumberWithIdentityCredential_args args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args();
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Provider = provider;
      args.Identifier = identifier;
      args.Verifier = verifier;
      args.Mid = mid;
      args.MigrationPincodeSessionId = migrationPincodeSessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerDeviceWithoutPhoneNumberWithIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerDeviceWithoutPhoneNumberWithIdentityCredential_result result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerDeviceWithoutPhoneNumberWithIdentityCredential failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerUserid(AsyncCallback callback, object state, int reqSeq, string userid)
    {
      return send_registerUserid(callback, state, reqSeq, userid);
    }

    public bool End_registerUserid(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerUserid();
    }

    #endif

    public bool registerUserid(int reqSeq, string userid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerUserid(null, null, reqSeq, userid);
      return End_registerUserid(asyncResult);

      #else
      send_registerUserid(reqSeq, userid);
      return recv_registerUserid();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerUserid(AsyncCallback callback, object state, int reqSeq, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("registerUserid", TMessageType.Call, seqid_));
      registerUserid_args args = new registerUserid_args();
      args.ReqSeq = reqSeq;
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerUserid(int reqSeq, string userid)
    {
      oprot_.WriteMessageBegin(new TMessage("registerUserid", TMessageType.Call, seqid_));
      registerUserid_args args = new registerUserid_args();
      args.ReqSeq = reqSeq;
      args.Userid = userid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_registerUserid()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerUserid_result result = new registerUserid_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerUserid failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerWapDevice(AsyncCallback callback, object state, string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)
    {
      return send_registerWapDevice(callback, state, invitationHash, guidHash, email, deviceInfo);
    }

    public string End_registerWapDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerWapDevice();
    }

    #endif

    public string registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerWapDevice(null, null, invitationHash, guidHash, email, deviceInfo);
      return End_registerWapDevice(asyncResult);

      #else
      send_registerWapDevice(invitationHash, guidHash, email, deviceInfo);
      return recv_registerWapDevice();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerWapDevice(AsyncCallback callback, object state, string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWapDevice", TMessageType.Call, seqid_));
      registerWapDevice_args args = new registerWapDevice_args();
      args.InvitationHash = invitationHash;
      args.GuidHash = guidHash;
      args.Email = email;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerWapDevice(string invitationHash, string guidHash, string email, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWapDevice", TMessageType.Call, seqid_));
      registerWapDevice_args args = new registerWapDevice_args();
      args.InvitationHash = invitationHash;
      args.GuidHash = guidHash;
      args.Email = email;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerWapDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerWapDevice_result result = new registerWapDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWapDevice failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerWithExistingSnsIdAndIdentityCredential(AsyncCallback callback, object state, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
    {
      return send_registerWithExistingSnsIdAndIdentityCredential(callback, state, identityCredential, region, udidHash, deviceInfo);
    }

    public string End_registerWithExistingSnsIdAndIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerWithExistingSnsIdAndIdentityCredential();
    }

    #endif

    public string registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerWithExistingSnsIdAndIdentityCredential(null, null, identityCredential, region, udidHash, deviceInfo);
      return End_registerWithExistingSnsIdAndIdentityCredential(asyncResult);

      #else
      send_registerWithExistingSnsIdAndIdentityCredential(identityCredential, region, udidHash, deviceInfo);
      return recv_registerWithExistingSnsIdAndIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerWithExistingSnsIdAndIdentityCredential(AsyncCallback callback, object state, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.Call, seqid_));
      registerWithExistingSnsIdAndIdentityCredential_args args = new registerWithExistingSnsIdAndIdentityCredential_args();
      args.IdentityCredential = identityCredential;
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerWithExistingSnsIdAndIdentityCredential(IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.Call, seqid_));
      registerWithExistingSnsIdAndIdentityCredential_args args = new registerWithExistingSnsIdAndIdentityCredential_args();
      args.IdentityCredential = identityCredential;
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerWithExistingSnsIdAndIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerWithExistingSnsIdAndIdentityCredential_result result = new registerWithExistingSnsIdAndIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWithExistingSnsIdAndIdentityCredential failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerWithSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)
    {
      return send_registerWithSnsId(callback, state, snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
    }

    public RegisterWithSnsIdResult End_registerWithSnsId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerWithSnsId();
    }

    #endif

    public RegisterWithSnsIdResult registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerWithSnsId(null, null, snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
      return End_registerWithSnsId(asyncResult);

      #else
      send_registerWithSnsId(snsIdType, snsAccessToken, region, udidHash, deviceInfo, mid);
      return recv_registerWithSnsId();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerWithSnsId(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithSnsId", TMessageType.Call, seqid_));
      registerWithSnsId_args args = new registerWithSnsId_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerWithSnsId(SnsIdType snsIdType, string snsAccessToken, string region, string udidHash, DeviceInfo deviceInfo, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithSnsId", TMessageType.Call, seqid_));
      registerWithSnsId_args args = new registerWithSnsId_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public RegisterWithSnsIdResult recv_registerWithSnsId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerWithSnsId_result result = new registerWithSnsId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWithSnsId failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerWithSnsIdAndIdentityCredential(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
    {
      return send_registerWithSnsIdAndIdentityCredential(callback, state, snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
    }

    public string End_registerWithSnsIdAndIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerWithSnsIdAndIdentityCredential();
    }

    #endif

    public string registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerWithSnsIdAndIdentityCredential(null, null, snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
      return End_registerWithSnsIdAndIdentityCredential(asyncResult);

      #else
      send_registerWithSnsIdAndIdentityCredential(snsIdType, snsAccessToken, identityCredential, region, udidHash, deviceInfo);
      return recv_registerWithSnsIdAndIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerWithSnsIdAndIdentityCredential(AsyncCallback callback, object state, SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.Call, seqid_));
      registerWithSnsIdAndIdentityCredential_args args = new registerWithSnsIdAndIdentityCredential_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.IdentityCredential = identityCredential;
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerWithSnsIdAndIdentityCredential(SnsIdType snsIdType, string snsAccessToken, IdentityCredential identityCredential, string region, string udidHash, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.Call, seqid_));
      registerWithSnsIdAndIdentityCredential_args args = new registerWithSnsIdAndIdentityCredential_args();
      args.SnsIdType = snsIdType;
      args.SnsAccessToken = snsAccessToken;
      args.IdentityCredential = identityCredential;
      args.Region = region;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_registerWithSnsIdAndIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerWithSnsIdAndIdentityCredential_result result = new registerWithSnsIdAndIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerWithSnsIdAndIdentityCredential failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reissueDeviceCredential(AsyncCallback callback, object state)
    {
      return send_reissueDeviceCredential(callback, state);
    }

    public string End_reissueDeviceCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reissueDeviceCredential();
    }

    #endif

    public string reissueDeviceCredential()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reissueDeviceCredential(null, null);
      return End_reissueDeviceCredential(asyncResult);

      #else
      send_reissueDeviceCredential();
      return recv_reissueDeviceCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reissueDeviceCredential(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.Call, seqid_));
      reissueDeviceCredential_args args = new reissueDeviceCredential_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reissueDeviceCredential()
    {
      oprot_.WriteMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.Call, seqid_));
      reissueDeviceCredential_args args = new reissueDeviceCredential_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_reissueDeviceCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reissueDeviceCredential_result result = new reissueDeviceCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reissueDeviceCredential failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reissueUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount)
    {
      return send_reissueUserTicket(callback, state, expirationTime, maxUseCount);
    }

    public string End_reissueUserTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reissueUserTicket();
    }

    #endif

    public string reissueUserTicket(long expirationTime, int maxUseCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reissueUserTicket(null, null, expirationTime, maxUseCount);
      return End_reissueUserTicket(asyncResult);

      #else
      send_reissueUserTicket(expirationTime, maxUseCount);
      return recv_reissueUserTicket();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reissueUserTicket(AsyncCallback callback, object state, long expirationTime, int maxUseCount)
    {
      oprot_.WriteMessageBegin(new TMessage("reissueUserTicket", TMessageType.Call, seqid_));
      reissueUserTicket_args args = new reissueUserTicket_args();
      args.ExpirationTime = expirationTime;
      args.MaxUseCount = maxUseCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reissueUserTicket(long expirationTime, int maxUseCount)
    {
      oprot_.WriteMessageBegin(new TMessage("reissueUserTicket", TMessageType.Call, seqid_));
      reissueUserTicket_args args = new reissueUserTicket_args();
      args.ExpirationTime = expirationTime;
      args.MaxUseCount = maxUseCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_reissueUserTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reissueUserTicket_result result = new reissueUserTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reissueUserTicket failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessageReadRange(AsyncCallback callback, object state, List<string> chatIds)
    {
      return send_getMessageReadRange(callback, state, chatIds);
    }

    public List<TMessageReadRange> End_getMessageReadRange(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessageReadRange();
    }

    #endif

    public List<TMessageReadRange> getMessageReadRange(List<string> chatIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessageReadRange(null, null, chatIds);
      return End_getMessageReadRange(asyncResult);

      #else
      send_getMessageReadRange(chatIds);
      return recv_getMessageReadRange();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessageReadRange(AsyncCallback callback, object state, List<string> chatIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageReadRange", TMessageType.Call, seqid_));
      getMessageReadRange_args args = new getMessageReadRange_args();
      args.ChatIds = chatIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessageReadRange(List<string> chatIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageReadRange", TMessageType.Call, seqid_));
      getMessageReadRange_args args = new getMessageReadRange_args();
      args.ChatIds = chatIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<TMessageReadRange> recv_getMessageReadRange()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessageReadRange_result result = new getMessageReadRange_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageReadRange failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_rejectGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId)
    {
      return send_rejectGroupInvitation(callback, state, reqSeq, groupId);
    }

    public void End_rejectGroupInvitation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_rejectGroupInvitation();
    }

    #endif

    public void rejectGroupInvitation(int reqSeq, string groupId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_rejectGroupInvitation(null, null, reqSeq, groupId);
      End_rejectGroupInvitation(asyncResult);

      #else
      send_rejectGroupInvitation(reqSeq, groupId);
      recv_rejectGroupInvitation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_rejectGroupInvitation(AsyncCallback callback, object state, int reqSeq, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.Call, seqid_));
      rejectGroupInvitation_args args = new rejectGroupInvitation_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_rejectGroupInvitation(int reqSeq, string groupId)
    {
      oprot_.WriteMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.Call, seqid_));
      rejectGroupInvitation_args args = new rejectGroupInvitation_args();
      args.ReqSeq = reqSeq;
      args.GroupId = groupId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_rejectGroupInvitation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      rejectGroupInvitation_result result = new rejectGroupInvitation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_releaseSession(AsyncCallback callback, object state)
    {
      return send_releaseSession(callback, state);
    }

    public void End_releaseSession(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_releaseSession();
    }

    #endif

    public void releaseSession()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_releaseSession(null, null);
      End_releaseSession(asyncResult);

      #else
      send_releaseSession();
      recv_releaseSession();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_releaseSession(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("releaseSession", TMessageType.Call, seqid_));
      releaseSession_args args = new releaseSession_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_releaseSession()
    {
      oprot_.WriteMessageBegin(new TMessage("releaseSession", TMessageType.Call, seqid_));
      releaseSession_args args = new releaseSession_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_releaseSession()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      releaseSession_result result = new releaseSession_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeAllMessages(AsyncCallback callback, object state, int seq, string lastMessageId)
    {
      return send_removeAllMessages(callback, state, seq, lastMessageId);
    }

    public void End_removeAllMessages(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_removeAllMessages();
    }

    #endif

    public void removeAllMessages(int seq, string lastMessageId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeAllMessages(null, null, seq, lastMessageId);
      End_removeAllMessages(asyncResult);

      #else
      send_removeAllMessages(seq, lastMessageId);
      recv_removeAllMessages();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeAllMessages(AsyncCallback callback, object state, int seq, string lastMessageId)
    {
      oprot_.WriteMessageBegin(new TMessage("removeAllMessages", TMessageType.Call, seqid_));
      removeAllMessages_args args = new removeAllMessages_args();
      args.Seq = seq;
      args.LastMessageId = lastMessageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeAllMessages(int seq, string lastMessageId)
    {
      oprot_.WriteMessageBegin(new TMessage("removeAllMessages", TMessageType.Call, seqid_));
      removeAllMessages_args args = new removeAllMessages_args();
      args.Seq = seq;
      args.LastMessageId = lastMessageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_removeAllMessages()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeAllMessages_result result = new removeAllMessages_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeBuddyLocation(AsyncCallback callback, object state, string mid, int index)
    {
      return send_removeBuddyLocation(callback, state, mid, index);
    }

    public void End_removeBuddyLocation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_removeBuddyLocation();
    }

    #endif

    public void removeBuddyLocation(string mid, int index)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeBuddyLocation(null, null, mid, index);
      End_removeBuddyLocation(asyncResult);

      #else
      send_removeBuddyLocation(mid, index);
      recv_removeBuddyLocation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeBuddyLocation(AsyncCallback callback, object state, string mid, int index)
    {
      oprot_.WriteMessageBegin(new TMessage("removeBuddyLocation", TMessageType.Call, seqid_));
      removeBuddyLocation_args args = new removeBuddyLocation_args();
      args.Mid = mid;
      args.Index = index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeBuddyLocation(string mid, int index)
    {
      oprot_.WriteMessageBegin(new TMessage("removeBuddyLocation", TMessageType.Call, seqid_));
      removeBuddyLocation_args args = new removeBuddyLocation_args();
      args.Mid = mid;
      args.Index = index;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_removeBuddyLocation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeBuddyLocation_result result = new removeBuddyLocation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeMessage(AsyncCallback callback, object state, string messageId)
    {
      return send_removeMessage(callback, state, messageId);
    }

    public bool End_removeMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_removeMessage();
    }

    #endif

    public bool removeMessage(string messageId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeMessage(null, null, messageId);
      return End_removeMessage(asyncResult);

      #else
      send_removeMessage(messageId);
      return recv_removeMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeMessage(AsyncCallback callback, object state, string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("removeMessage", TMessageType.Call, seqid_));
      removeMessage_args args = new removeMessage_args();
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeMessage(string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("removeMessage", TMessageType.Call, seqid_));
      removeMessage_args args = new removeMessage_args();
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_removeMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeMessage_result result = new removeMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_makeUserAddMyselfAsContact(AsyncCallback callback, object state, string contactOwnerMid)
    {
      return send_makeUserAddMyselfAsContact(callback, state, contactOwnerMid);
    }

    public ContactTransition End_makeUserAddMyselfAsContact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_makeUserAddMyselfAsContact();
    }

    #endif

    public ContactTransition makeUserAddMyselfAsContact(string contactOwnerMid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_makeUserAddMyselfAsContact(null, null, contactOwnerMid);
      return End_makeUserAddMyselfAsContact(asyncResult);

      #else
      send_makeUserAddMyselfAsContact(contactOwnerMid);
      return recv_makeUserAddMyselfAsContact();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_makeUserAddMyselfAsContact(AsyncCallback callback, object state, string contactOwnerMid)
    {
      oprot_.WriteMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.Call, seqid_));
      makeUserAddMyselfAsContact_args args = new makeUserAddMyselfAsContact_args();
      args.ContactOwnerMid = contactOwnerMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_makeUserAddMyselfAsContact(string contactOwnerMid)
    {
      oprot_.WriteMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.Call, seqid_));
      makeUserAddMyselfAsContact_args args = new makeUserAddMyselfAsContact_args();
      args.ContactOwnerMid = contactOwnerMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public ContactTransition recv_makeUserAddMyselfAsContact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      makeUserAddMyselfAsContact_result result = new makeUserAddMyselfAsContact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "makeUserAddMyselfAsContact failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeMessageFromMyHome(AsyncCallback callback, object state, string messageId)
    {
      return send_removeMessageFromMyHome(callback, state, messageId);
    }

    public bool End_removeMessageFromMyHome(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_removeMessageFromMyHome();
    }

    #endif

    public bool removeMessageFromMyHome(string messageId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeMessageFromMyHome(null, null, messageId);
      return End_removeMessageFromMyHome(asyncResult);

      #else
      send_removeMessageFromMyHome(messageId);
      return recv_removeMessageFromMyHome();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeMessageFromMyHome(AsyncCallback callback, object state, string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.Call, seqid_));
      removeMessageFromMyHome_args args = new removeMessageFromMyHome_args();
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeMessageFromMyHome(string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.Call, seqid_));
      removeMessageFromMyHome_args args = new removeMessageFromMyHome_args();
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public bool recv_removeMessageFromMyHome()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeMessageFromMyHome_result result = new removeMessageFromMyHome_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeMessageFromMyHome failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeSnsId(AsyncCallback callback, object state, SnsIdType snsIdType)
    {
      return send_removeSnsId(callback, state, snsIdType);
    }

    public string End_removeSnsId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_removeSnsId();
    }

    #endif

    public string removeSnsId(SnsIdType snsIdType)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeSnsId(null, null, snsIdType);
      return End_removeSnsId(asyncResult);

      #else
      send_removeSnsId(snsIdType);
      return recv_removeSnsId();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeSnsId(AsyncCallback callback, object state, SnsIdType snsIdType)
    {
      oprot_.WriteMessageBegin(new TMessage("removeSnsId", TMessageType.Call, seqid_));
      removeSnsId_args args = new removeSnsId_args();
      args.SnsIdType = snsIdType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeSnsId(SnsIdType snsIdType)
    {
      oprot_.WriteMessageBegin(new TMessage("removeSnsId", TMessageType.Call, seqid_));
      removeSnsId_args args = new removeSnsId_args();
      args.SnsIdType = snsIdType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_removeSnsId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeSnsId_result result = new removeSnsId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeSnsId failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_report(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, string report)
    {
      return send_report(callback, state, syncOpRevision, category, report);
    }

    public void End_report(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_report();
    }

    #endif

    public void report(long syncOpRevision, SyncCategory category, string report)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_report(null, null, syncOpRevision, category, report);
      End_report(asyncResult);

      #else
      send_report(syncOpRevision, category, report);
      recv_report();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_report(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, string report)
    {
      oprot_.WriteMessageBegin(new TMessage("report", TMessageType.Call, seqid_));
      report_args args = new report_args();
      args.SyncOpRevision = syncOpRevision;
      args.Category = category;
      args.Report = report;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_report(long syncOpRevision, SyncCategory category, string report)
    {
      oprot_.WriteMessageBegin(new TMessage("report", TMessageType.Call, seqid_));
      report_args args = new report_args();
      args.SyncOpRevision = syncOpRevision;
      args.Category = category;
      args.Report = report;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_report()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      report_result result = new report_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportContacts(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType)
    {
      return send_reportContacts(callback, state, syncOpRevision, category, contactReports, actionType);
    }

    public List<ContactReportResult> End_reportContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reportContacts();
    }

    #endif

    public List<ContactReportResult> reportContacts(long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportContacts(null, null, syncOpRevision, category, contactReports, actionType);
      return End_reportContacts(asyncResult);

      #else
      send_reportContacts(syncOpRevision, category, contactReports, actionType);
      return recv_reportContacts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportContacts(AsyncCallback callback, object state, long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType)
    {
      oprot_.WriteMessageBegin(new TMessage("reportContacts", TMessageType.Call, seqid_));
      reportContacts_args args = new reportContacts_args();
      args.SyncOpRevision = syncOpRevision;
      args.Category = category;
      args.ContactReports = contactReports;
      args.ActionType = actionType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportContacts(long syncOpRevision, SyncCategory category, List<ContactReport> contactReports, SyncActionType actionType)
    {
      oprot_.WriteMessageBegin(new TMessage("reportContacts", TMessageType.Call, seqid_));
      reportContacts_args args = new reportContacts_args();
      args.SyncOpRevision = syncOpRevision;
      args.Category = category;
      args.ContactReports = contactReports;
      args.ActionType = actionType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<ContactReportResult> recv_reportContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportContacts_result result = new reportContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reportContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportGroups(AsyncCallback callback, object state, long syncOpRevision, List<@Group> groups)
    {
      return send_reportGroups(callback, state, syncOpRevision, groups);
    }

    public void End_reportGroups(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_reportGroups();
    }

    #endif

    public void reportGroups(long syncOpRevision, List<@Group> groups)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportGroups(null, null, syncOpRevision, groups);
      End_reportGroups(asyncResult);

      #else
      send_reportGroups(syncOpRevision, groups);
      recv_reportGroups();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportGroups(AsyncCallback callback, object state, long syncOpRevision, List<@Group> groups)
    {
      oprot_.WriteMessageBegin(new TMessage("reportGroups", TMessageType.Call, seqid_));
      reportGroups_args args = new reportGroups_args();
      args.SyncOpRevision = syncOpRevision;
      args.Groups = groups;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportGroups(long syncOpRevision, List<@Group> groups)
    {
      oprot_.WriteMessageBegin(new TMessage("reportGroups", TMessageType.Call, seqid_));
      reportGroups_args args = new reportGroups_args();
      args.SyncOpRevision = syncOpRevision;
      args.Groups = groups;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_reportGroups()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportGroups_result result = new reportGroups_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportProfile(AsyncCallback callback, object state, long syncOpRevision, Profile profile)
    {
      return send_reportProfile(callback, state, syncOpRevision, profile);
    }

    public void End_reportProfile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_reportProfile();
    }

    #endif

    public void reportProfile(long syncOpRevision, Profile profile)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportProfile(null, null, syncOpRevision, profile);
      End_reportProfile(asyncResult);

      #else
      send_reportProfile(syncOpRevision, profile);
      recv_reportProfile();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportProfile(AsyncCallback callback, object state, long syncOpRevision, Profile profile)
    {
      oprot_.WriteMessageBegin(new TMessage("reportProfile", TMessageType.Call, seqid_));
      reportProfile_args args = new reportProfile_args();
      args.SyncOpRevision = syncOpRevision;
      args.Profile = profile;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportProfile(long syncOpRevision, Profile profile)
    {
      oprot_.WriteMessageBegin(new TMessage("reportProfile", TMessageType.Call, seqid_));
      reportProfile_args args = new reportProfile_args();
      args.SyncOpRevision = syncOpRevision;
      args.Profile = profile;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_reportProfile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportProfile_result result = new reportProfile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportRooms(AsyncCallback callback, object state, long syncOpRevision, List<Room> rooms)
    {
      return send_reportRooms(callback, state, syncOpRevision, rooms);
    }

    public void End_reportRooms(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_reportRooms();
    }

    #endif

    public void reportRooms(long syncOpRevision, List<Room> rooms)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportRooms(null, null, syncOpRevision, rooms);
      End_reportRooms(asyncResult);

      #else
      send_reportRooms(syncOpRevision, rooms);
      recv_reportRooms();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportRooms(AsyncCallback callback, object state, long syncOpRevision, List<Room> rooms)
    {
      oprot_.WriteMessageBegin(new TMessage("reportRooms", TMessageType.Call, seqid_));
      reportRooms_args args = new reportRooms_args();
      args.SyncOpRevision = syncOpRevision;
      args.Rooms = rooms;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportRooms(long syncOpRevision, List<Room> rooms)
    {
      oprot_.WriteMessageBegin(new TMessage("reportRooms", TMessageType.Call, seqid_));
      reportRooms_args args = new reportRooms_args();
      args.SyncOpRevision = syncOpRevision;
      args.Rooms = rooms;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_reportRooms()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportRooms_result result = new reportRooms_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findAndAddContactByMetaTag(AsyncCallback callback, object state, int reqSeq, string userid, string reference)
    {
      return send_findAndAddContactByMetaTag(callback, state, reqSeq, userid, reference);
    }

    public Contact End_findAndAddContactByMetaTag(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findAndAddContactByMetaTag();
    }

    #endif

    public Contact findAndAddContactByMetaTag(int reqSeq, string userid, string reference)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findAndAddContactByMetaTag(null, null, reqSeq, userid, reference);
      return End_findAndAddContactByMetaTag(asyncResult);

      #else
      send_findAndAddContactByMetaTag(reqSeq, userid, reference);
      return recv_findAndAddContactByMetaTag();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findAndAddContactByMetaTag(AsyncCallback callback, object state, int reqSeq, string userid, string reference)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.Call, seqid_));
      findAndAddContactByMetaTag_args args = new findAndAddContactByMetaTag_args();
      args.ReqSeq = reqSeq;
      args.Userid = userid;
      args.Reference = reference;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findAndAddContactByMetaTag(int reqSeq, string userid, string reference)
    {
      oprot_.WriteMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.Call, seqid_));
      findAndAddContactByMetaTag_args args = new findAndAddContactByMetaTag_args();
      args.ReqSeq = reqSeq;
      args.Userid = userid;
      args.Reference = reference;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Contact recv_findAndAddContactByMetaTag()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findAndAddContactByMetaTag_result result = new findAndAddContactByMetaTag_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findAndAddContactByMetaTag failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportSettings(AsyncCallback callback, object state, long syncOpRevision, Settings settings)
    {
      return send_reportSettings(callback, state, syncOpRevision, settings);
    }

    public void End_reportSettings(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_reportSettings();
    }

    #endif

    public void reportSettings(long syncOpRevision, Settings settings)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportSettings(null, null, syncOpRevision, settings);
      End_reportSettings(asyncResult);

      #else
      send_reportSettings(syncOpRevision, settings);
      recv_reportSettings();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportSettings(AsyncCallback callback, object state, long syncOpRevision, Settings settings)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSettings", TMessageType.Call, seqid_));
      reportSettings_args args = new reportSettings_args();
      args.SyncOpRevision = syncOpRevision;
      args.Settings = settings;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportSettings(long syncOpRevision, Settings settings)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSettings", TMessageType.Call, seqid_));
      reportSettings_args args = new reportSettings_args();
      args.SyncOpRevision = syncOpRevision;
      args.Settings = settings;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_reportSettings()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportSettings_result result = new reportSettings_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportSpam(AsyncCallback callback, object state, string chatMid, List<string> memberMids, List<SpammerReason> spammerReasons, List<string> senderMids, List<string> spamMessageIds, List<string> spamMessages)
    {
      return send_reportSpam(callback, state, chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages);
    }

    public void End_reportSpam(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_reportSpam();
    }

    #endif

    public void reportSpam(string chatMid, List<string> memberMids, List<SpammerReason> spammerReasons, List<string> senderMids, List<string> spamMessageIds, List<string> spamMessages)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportSpam(null, null, chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages);
      End_reportSpam(asyncResult);

      #else
      send_reportSpam(chatMid, memberMids, spammerReasons, senderMids, spamMessageIds, spamMessages);
      recv_reportSpam();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportSpam(AsyncCallback callback, object state, string chatMid, List<string> memberMids, List<SpammerReason> spammerReasons, List<string> senderMids, List<string> spamMessageIds, List<string> spamMessages)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSpam", TMessageType.Call, seqid_));
      reportSpam_args args = new reportSpam_args();
      args.ChatMid = chatMid;
      args.MemberMids = memberMids;
      args.SpammerReasons = spammerReasons;
      args.SenderMids = senderMids;
      args.SpamMessageIds = spamMessageIds;
      args.SpamMessages = spamMessages;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportSpam(string chatMid, List<string> memberMids, List<SpammerReason> spammerReasons, List<string> senderMids, List<string> spamMessageIds, List<string> spamMessages)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSpam", TMessageType.Call, seqid_));
      reportSpam_args args = new reportSpam_args();
      args.ChatMid = chatMid;
      args.MemberMids = memberMids;
      args.SpammerReasons = spammerReasons;
      args.SenderMids = senderMids;
      args.SpamMessageIds = spamMessageIds;
      args.SpamMessages = spamMessages;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_reportSpam()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportSpam_result result = new reportSpam_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_reportSpammer(AsyncCallback callback, object state, string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds)
    {
      return send_reportSpammer(callback, state, spammerMid, spammerReasons, spamMessageIds);
    }

    public void End_reportSpammer(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_reportSpammer();
    }

    #endif

    public void reportSpammer(string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_reportSpammer(null, null, spammerMid, spammerReasons, spamMessageIds);
      End_reportSpammer(asyncResult);

      #else
      send_reportSpammer(spammerMid, spammerReasons, spamMessageIds);
      recv_reportSpammer();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reportSpammer(AsyncCallback callback, object state, string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSpammer", TMessageType.Call, seqid_));
      reportSpammer_args args = new reportSpammer_args();
      args.SpammerMid = spammerMid;
      args.SpammerReasons = spammerReasons;
      args.SpamMessageIds = spamMessageIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_reportSpammer(string spammerMid, List<SpammerReason> spammerReasons, List<string> spamMessageIds)
    {
      oprot_.WriteMessageBegin(new TMessage("reportSpammer", TMessageType.Call, seqid_));
      reportSpammer_args args = new reportSpammer_args();
      args.SpammerMid = spammerMid;
      args.SpammerReasons = spammerReasons;
      args.SpamMessageIds = spamMessageIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_reportSpammer()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reportSpammer_result result = new reportSpammer_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_requestAccountPasswordReset(AsyncCallback callback, object state, IdentityProvider provider, string identifier, string locale)
    {
      return send_requestAccountPasswordReset(callback, state, provider, identifier, locale);
    }

    public void End_requestAccountPasswordReset(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_requestAccountPasswordReset();
    }

    #endif

    public void requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_requestAccountPasswordReset(null, null, provider, identifier, locale);
      End_requestAccountPasswordReset(asyncResult);

      #else
      send_requestAccountPasswordReset(provider, identifier, locale);
      recv_requestAccountPasswordReset();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_requestAccountPasswordReset(AsyncCallback callback, object state, IdentityProvider provider, string identifier, string locale)
    {
      oprot_.WriteMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.Call, seqid_));
      requestAccountPasswordReset_args args = new requestAccountPasswordReset_args();
      args.Provider = provider;
      args.Identifier = identifier;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_requestAccountPasswordReset(IdentityProvider provider, string identifier, string locale)
    {
      oprot_.WriteMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.Call, seqid_));
      requestAccountPasswordReset_args args = new requestAccountPasswordReset_args();
      args.Provider = provider;
      args.Identifier = identifier;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_requestAccountPasswordReset()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      requestAccountPasswordReset_result result = new requestAccountPasswordReset_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_requestEmailConfirmation(AsyncCallback callback, object state, EmailConfirmation emailConfirmation)
    {
      return send_requestEmailConfirmation(callback, state, emailConfirmation);
    }

    public EmailConfirmationSession End_requestEmailConfirmation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_requestEmailConfirmation();
    }

    #endif

    public EmailConfirmationSession requestEmailConfirmation(EmailConfirmation emailConfirmation)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_requestEmailConfirmation(null, null, emailConfirmation);
      return End_requestEmailConfirmation(asyncResult);

      #else
      send_requestEmailConfirmation(emailConfirmation);
      return recv_requestEmailConfirmation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_requestEmailConfirmation(AsyncCallback callback, object state, EmailConfirmation emailConfirmation)
    {
      oprot_.WriteMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.Call, seqid_));
      requestEmailConfirmation_args args = new requestEmailConfirmation_args();
      args.EmailConfirmation = emailConfirmation;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_requestEmailConfirmation(EmailConfirmation emailConfirmation)
    {
      oprot_.WriteMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.Call, seqid_));
      requestEmailConfirmation_args args = new requestEmailConfirmation_args();
      args.EmailConfirmation = emailConfirmation;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public EmailConfirmationSession recv_requestEmailConfirmation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      requestEmailConfirmation_result result = new requestEmailConfirmation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "requestEmailConfirmation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_requestIdentityUnbind(AsyncCallback callback, object state, IdentityProvider provider, string identifier)
    {
      return send_requestIdentityUnbind(callback, state, provider, identifier);
    }

    public void End_requestIdentityUnbind(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_requestIdentityUnbind();
    }

    #endif

    public void requestIdentityUnbind(IdentityProvider provider, string identifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_requestIdentityUnbind(null, null, provider, identifier);
      End_requestIdentityUnbind(asyncResult);

      #else
      send_requestIdentityUnbind(provider, identifier);
      recv_requestIdentityUnbind();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_requestIdentityUnbind(AsyncCallback callback, object state, IdentityProvider provider, string identifier)
    {
      oprot_.WriteMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.Call, seqid_));
      requestIdentityUnbind_args args = new requestIdentityUnbind_args();
      args.Provider = provider;
      args.Identifier = identifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_requestIdentityUnbind(IdentityProvider provider, string identifier)
    {
      oprot_.WriteMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.Call, seqid_));
      requestIdentityUnbind_args args = new requestIdentityUnbind_args();
      args.Provider = provider;
      args.Identifier = identifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_requestIdentityUnbind()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      requestIdentityUnbind_result result = new requestIdentityUnbind_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_resendEmailConfirmation(AsyncCallback callback, object state, string verifier)
    {
      return send_resendEmailConfirmation(callback, state, verifier);
    }

    public EmailConfirmationSession End_resendEmailConfirmation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_resendEmailConfirmation();
    }

    #endif

    public EmailConfirmationSession resendEmailConfirmation(string verifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_resendEmailConfirmation(null, null, verifier);
      return End_resendEmailConfirmation(asyncResult);

      #else
      send_resendEmailConfirmation(verifier);
      return recv_resendEmailConfirmation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_resendEmailConfirmation(AsyncCallback callback, object state, string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.Call, seqid_));
      resendEmailConfirmation_args args = new resendEmailConfirmation_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_resendEmailConfirmation(string verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.Call, seqid_));
      resendEmailConfirmation_args args = new resendEmailConfirmation_args();
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public EmailConfirmationSession recv_resendEmailConfirmation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      resendEmailConfirmation_result result = new resendEmailConfirmation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "resendEmailConfirmation failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_resendPinCode(AsyncCallback callback, object state, string sessionId)
    {
      return send_resendPinCode(callback, state, sessionId);
    }

    public void End_resendPinCode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_resendPinCode();
    }

    #endif

    public void resendPinCode(string sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_resendPinCode(null, null, sessionId);
      End_resendPinCode(asyncResult);

      #else
      send_resendPinCode(sessionId);
      recv_resendPinCode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_resendPinCode(AsyncCallback callback, object state, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("resendPinCode", TMessageType.Call, seqid_));
      resendPinCode_args args = new resendPinCode_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_resendPinCode(string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("resendPinCode", TMessageType.Call, seqid_));
      resendPinCode_args args = new resendPinCode_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_resendPinCode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      resendPinCode_result result = new resendPinCode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_resendPinCodeBySMS(AsyncCallback callback, object state, string sessionId)
    {
      return send_resendPinCodeBySMS(callback, state, sessionId);
    }

    public void End_resendPinCodeBySMS(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_resendPinCodeBySMS();
    }

    #endif

    public void resendPinCodeBySMS(string sessionId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_resendPinCodeBySMS(null, null, sessionId);
      End_resendPinCodeBySMS(asyncResult);

      #else
      send_resendPinCodeBySMS(sessionId);
      recv_resendPinCodeBySMS();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_resendPinCodeBySMS(AsyncCallback callback, object state, string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.Call, seqid_));
      resendPinCodeBySMS_args args = new resendPinCodeBySMS_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_resendPinCodeBySMS(string sessionId)
    {
      oprot_.WriteMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.Call, seqid_));
      resendPinCodeBySMS_args args = new resendPinCodeBySMS_args();
      args.SessionId = sessionId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_resendPinCodeBySMS()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      resendPinCodeBySMS_result result = new resendPinCodeBySMS_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendChatChecked(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId)
    {
      return send_sendChatChecked(callback, state, seq, consumer, lastMessageId);
    }

    public void End_sendChatChecked(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendChatChecked();
    }

    #endif

    public void sendChatChecked(int seq, string consumer, string lastMessageId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendChatChecked(null, null, seq, consumer, lastMessageId);
      End_sendChatChecked(asyncResult);

      #else
      send_sendChatChecked(seq, consumer, lastMessageId);
      recv_sendChatChecked();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendChatChecked(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId)
    {
      oprot_.WriteMessageBegin(new TMessage("sendChatChecked", TMessageType.Call, seqid_));
      sendChatChecked_args args = new sendChatChecked_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.LastMessageId = lastMessageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendChatChecked(int seq, string consumer, string lastMessageId)
    {
      oprot_.WriteMessageBegin(new TMessage("sendChatChecked", TMessageType.Call, seqid_));
      sendChatChecked_args args = new sendChatChecked_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.LastMessageId = lastMessageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendChatChecked()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendChatChecked_result result = new sendChatChecked_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessageAwaitCommit(AsyncCallback callback, object state, int seq, Message message)
    {
      return send_sendMessageAwaitCommit(callback, state, seq, message);
    }

    public CommitMessageResult End_sendMessageAwaitCommit(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendMessageAwaitCommit();
    }

    #endif

    public CommitMessageResult sendMessageAwaitCommit(int seq, Message message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessageAwaitCommit(null, null, seq, message);
      return End_sendMessageAwaitCommit(asyncResult);

      #else
      send_sendMessageAwaitCommit(seq, message);
      return recv_sendMessageAwaitCommit();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessageAwaitCommit(AsyncCallback callback, object state, int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.Call, seqid_));
      sendMessageAwaitCommit_args args = new sendMessageAwaitCommit_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessageAwaitCommit(int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.Call, seqid_));
      sendMessageAwaitCommit_args args = new sendMessageAwaitCommit_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public CommitMessageResult recv_sendMessageAwaitCommit()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessageAwaitCommit_result result = new sendMessageAwaitCommit_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessageAwaitCommit failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendChatRemoved(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId)
    {
      return send_sendChatRemoved(callback, state, seq, consumer, lastMessageId);
    }

    public void End_sendChatRemoved(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendChatRemoved();
    }

    #endif

    public void sendChatRemoved(int seq, string consumer, string lastMessageId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendChatRemoved(null, null, seq, consumer, lastMessageId);
      End_sendChatRemoved(asyncResult);

      #else
      send_sendChatRemoved(seq, consumer, lastMessageId);
      recv_sendChatRemoved();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendChatRemoved(AsyncCallback callback, object state, int seq, string consumer, string lastMessageId)
    {
      oprot_.WriteMessageBegin(new TMessage("sendChatRemoved", TMessageType.Call, seqid_));
      sendChatRemoved_args args = new sendChatRemoved_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.LastMessageId = lastMessageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendChatRemoved(int seq, string consumer, string lastMessageId)
    {
      oprot_.WriteMessageBegin(new TMessage("sendChatRemoved", TMessageType.Call, seqid_));
      sendChatRemoved_args args = new sendChatRemoved_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.LastMessageId = lastMessageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendChatRemoved()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendChatRemoved_result result = new sendChatRemoved_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendContentPreviewUpdated(AsyncCallback callback, object state, int esq, string messageId, List<string> receiverMids)
    {
      return send_sendContentPreviewUpdated(callback, state, esq, messageId, receiverMids);
    }

    public Dictionary<string, string> End_sendContentPreviewUpdated(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendContentPreviewUpdated();
    }

    #endif

    public Dictionary<string, string> sendContentPreviewUpdated(int esq, string messageId, List<string> receiverMids)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendContentPreviewUpdated(null, null, esq, messageId, receiverMids);
      return End_sendContentPreviewUpdated(asyncResult);

      #else
      send_sendContentPreviewUpdated(esq, messageId, receiverMids);
      return recv_sendContentPreviewUpdated();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendContentPreviewUpdated(AsyncCallback callback, object state, int esq, string messageId, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.Call, seqid_));
      sendContentPreviewUpdated_args args = new sendContentPreviewUpdated_args();
      args.Esq = esq;
      args.MessageId = messageId;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendContentPreviewUpdated(int esq, string messageId, List<string> receiverMids)
    {
      oprot_.WriteMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.Call, seqid_));
      sendContentPreviewUpdated_args args = new sendContentPreviewUpdated_args();
      args.Esq = esq;
      args.MessageId = messageId;
      args.ReceiverMids = receiverMids;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, string> recv_sendContentPreviewUpdated()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendContentPreviewUpdated_result result = new sendContentPreviewUpdated_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendContentPreviewUpdated failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendContentReceipt(AsyncCallback callback, object state, int seq, string consumer, string messageId)
    {
      return send_sendContentReceipt(callback, state, seq, consumer, messageId);
    }

    public void End_sendContentReceipt(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendContentReceipt();
    }

    #endif

    public void sendContentReceipt(int seq, string consumer, string messageId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendContentReceipt(null, null, seq, consumer, messageId);
      End_sendContentReceipt(asyncResult);

      #else
      send_sendContentReceipt(seq, consumer, messageId);
      recv_sendContentReceipt();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendContentReceipt(AsyncCallback callback, object state, int seq, string consumer, string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("sendContentReceipt", TMessageType.Call, seqid_));
      sendContentReceipt_args args = new sendContentReceipt_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendContentReceipt(int seq, string consumer, string messageId)
    {
      oprot_.WriteMessageBegin(new TMessage("sendContentReceipt", TMessageType.Call, seqid_));
      sendContentReceipt_args args = new sendContentReceipt_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.MessageId = messageId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendContentReceipt()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendContentReceipt_result result = new sendContentReceipt_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendDummyPush(AsyncCallback callback, object state)
    {
      return send_sendDummyPush(callback, state);
    }

    public void End_sendDummyPush(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendDummyPush();
    }

    #endif

    public void sendDummyPush()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendDummyPush(null, null);
      End_sendDummyPush(asyncResult);

      #else
      send_sendDummyPush();
      recv_sendDummyPush();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendDummyPush(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("sendDummyPush", TMessageType.Call, seqid_));
      sendDummyPush_args args = new sendDummyPush_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendDummyPush()
    {
      oprot_.WriteMessageBegin(new TMessage("sendDummyPush", TMessageType.Call, seqid_));
      sendDummyPush_args args = new sendDummyPush_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendDummyPush()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendDummyPush_result result = new sendDummyPush_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_removeE2EEPublicKey(AsyncCallback callback, object state, E2EEPublicKey publicKey)
    {
      return send_removeE2EEPublicKey(callback, state, publicKey);
    }

    public void End_removeE2EEPublicKey(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_removeE2EEPublicKey();
    }

    #endif

    public void removeE2EEPublicKey(E2EEPublicKey publicKey)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_removeE2EEPublicKey(null, null, publicKey);
      End_removeE2EEPublicKey(asyncResult);

      #else
      send_removeE2EEPublicKey(publicKey);
      recv_removeE2EEPublicKey();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeE2EEPublicKey(AsyncCallback callback, object state, E2EEPublicKey publicKey)
    {
      oprot_.WriteMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.Call, seqid_));
      removeE2EEPublicKey_args args = new removeE2EEPublicKey_args();
      args.PublicKey = publicKey;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_removeE2EEPublicKey(E2EEPublicKey publicKey)
    {
      oprot_.WriteMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.Call, seqid_));
      removeE2EEPublicKey_args args = new removeE2EEPublicKey_args();
      args.PublicKey = publicKey;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_removeE2EEPublicKey()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeE2EEPublicKey_result result = new removeE2EEPublicKey_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_negotiateE2EEPublicKey(AsyncCallback callback, object state, string mid)
    {
      return send_negotiateE2EEPublicKey(callback, state, mid);
    }

    public E2EENegotiationResult End_negotiateE2EEPublicKey(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_negotiateE2EEPublicKey();
    }

    #endif

    public E2EENegotiationResult negotiateE2EEPublicKey(string mid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_negotiateE2EEPublicKey(null, null, mid);
      return End_negotiateE2EEPublicKey(asyncResult);

      #else
      send_negotiateE2EEPublicKey(mid);
      return recv_negotiateE2EEPublicKey();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_negotiateE2EEPublicKey(AsyncCallback callback, object state, string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.Call, seqid_));
      negotiateE2EEPublicKey_args args = new negotiateE2EEPublicKey_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_negotiateE2EEPublicKey(string mid)
    {
      oprot_.WriteMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.Call, seqid_));
      negotiateE2EEPublicKey_args args = new negotiateE2EEPublicKey_args();
      args.Mid = mid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public E2EENegotiationResult recv_negotiateE2EEPublicKey()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      negotiateE2EEPublicKey_result result = new negotiateE2EEPublicKey_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "negotiateE2EEPublicKey failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getE2EEPublicKey(AsyncCallback callback, object state, string mid, int version, int keyId)
    {
      return send_getE2EEPublicKey(callback, state, mid, version, keyId);
    }

    public E2EEPublicKey End_getE2EEPublicKey(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getE2EEPublicKey();
    }

    #endif

    public E2EEPublicKey getE2EEPublicKey(string mid, int version, int keyId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getE2EEPublicKey(null, null, mid, version, keyId);
      return End_getE2EEPublicKey(asyncResult);

      #else
      send_getE2EEPublicKey(mid, version, keyId);
      return recv_getE2EEPublicKey();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getE2EEPublicKey(AsyncCallback callback, object state, string mid, int version, int keyId)
    {
      oprot_.WriteMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.Call, seqid_));
      getE2EEPublicKey_args args = new getE2EEPublicKey_args();
      args.Mid = mid;
      args.Version = version;
      args.KeyId = keyId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getE2EEPublicKey(string mid, int version, int keyId)
    {
      oprot_.WriteMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.Call, seqid_));
      getE2EEPublicKey_args args = new getE2EEPublicKey_args();
      args.Mid = mid;
      args.Version = version;
      args.KeyId = keyId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public E2EEPublicKey recv_getE2EEPublicKey()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getE2EEPublicKey_result result = new getE2EEPublicKey_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getE2EEPublicKey failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_requestE2EEKeyExchange(AsyncCallback callback, object state, int reqSeq, byte[] temporalPublicKey, E2EEPublicKey publicKey, byte[] verifier)
    {
      return send_requestE2EEKeyExchange(callback, state, reqSeq, temporalPublicKey, publicKey, verifier);
    }

    public void End_requestE2EEKeyExchange(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_requestE2EEKeyExchange();
    }

    #endif

    public void requestE2EEKeyExchange(int reqSeq, byte[] temporalPublicKey, E2EEPublicKey publicKey, byte[] verifier)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_requestE2EEKeyExchange(null, null, reqSeq, temporalPublicKey, publicKey, verifier);
      End_requestE2EEKeyExchange(asyncResult);

      #else
      send_requestE2EEKeyExchange(reqSeq, temporalPublicKey, publicKey, verifier);
      recv_requestE2EEKeyExchange();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_requestE2EEKeyExchange(AsyncCallback callback, object state, int reqSeq, byte[] temporalPublicKey, E2EEPublicKey publicKey, byte[] verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.Call, seqid_));
      requestE2EEKeyExchange_args args = new requestE2EEKeyExchange_args();
      args.ReqSeq = reqSeq;
      args.TemporalPublicKey = temporalPublicKey;
      args.PublicKey = publicKey;
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_requestE2EEKeyExchange(int reqSeq, byte[] temporalPublicKey, E2EEPublicKey publicKey, byte[] verifier)
    {
      oprot_.WriteMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.Call, seqid_));
      requestE2EEKeyExchange_args args = new requestE2EEKeyExchange_args();
      args.ReqSeq = reqSeq;
      args.TemporalPublicKey = temporalPublicKey;
      args.PublicKey = publicKey;
      args.Verifier = verifier;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_requestE2EEKeyExchange()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      requestE2EEKeyExchange_result result = new requestE2EEKeyExchange_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getLastE2EEPublicKeys(AsyncCallback callback, object state, string chatMid)
    {
      return send_getLastE2EEPublicKeys(callback, state, chatMid);
    }

    public Dictionary<string, E2EEPublicKey> End_getLastE2EEPublicKeys(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getLastE2EEPublicKeys();
    }

    #endif

    public Dictionary<string, E2EEPublicKey> getLastE2EEPublicKeys(string chatMid)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getLastE2EEPublicKeys(null, null, chatMid);
      return End_getLastE2EEPublicKeys(asyncResult);

      #else
      send_getLastE2EEPublicKeys(chatMid);
      return recv_getLastE2EEPublicKeys();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getLastE2EEPublicKeys(AsyncCallback callback, object state, string chatMid)
    {
      oprot_.WriteMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.Call, seqid_));
      getLastE2EEPublicKeys_args args = new getLastE2EEPublicKeys_args();
      args.ChatMid = chatMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getLastE2EEPublicKeys(string chatMid)
    {
      oprot_.WriteMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.Call, seqid_));
      getLastE2EEPublicKeys_args args = new getLastE2EEPublicKeys_args();
      args.ChatMid = chatMid;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, E2EEPublicKey> recv_getLastE2EEPublicKeys()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getLastE2EEPublicKeys_result result = new getLastE2EEPublicKeys_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLastE2EEPublicKeys failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_registerE2EEPublicKey(AsyncCallback callback, object state, int reqSeq, E2EEPublicKey publicKey)
    {
      return send_registerE2EEPublicKey(callback, state, reqSeq, publicKey);
    }

    public E2EEPublicKey End_registerE2EEPublicKey(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_registerE2EEPublicKey();
    }

    #endif

    public E2EEPublicKey registerE2EEPublicKey(int reqSeq, E2EEPublicKey publicKey)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_registerE2EEPublicKey(null, null, reqSeq, publicKey);
      return End_registerE2EEPublicKey(asyncResult);

      #else
      send_registerE2EEPublicKey(reqSeq, publicKey);
      return recv_registerE2EEPublicKey();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_registerE2EEPublicKey(AsyncCallback callback, object state, int reqSeq, E2EEPublicKey publicKey)
    {
      oprot_.WriteMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.Call, seqid_));
      registerE2EEPublicKey_args args = new registerE2EEPublicKey_args();
      args.ReqSeq = reqSeq;
      args.PublicKey = publicKey;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_registerE2EEPublicKey(int reqSeq, E2EEPublicKey publicKey)
    {
      oprot_.WriteMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.Call, seqid_));
      registerE2EEPublicKey_args args = new registerE2EEPublicKey_args();
      args.ReqSeq = reqSeq;
      args.PublicKey = publicKey;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public E2EEPublicKey recv_registerE2EEPublicKey()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      registerE2EEPublicKey_result result = new registerE2EEPublicKey_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "registerE2EEPublicKey failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getE2EEPublicKeys(AsyncCallback callback, object state)
    {
      return send_getE2EEPublicKeys(callback, state);
    }

    public List<E2EEPublicKey> End_getE2EEPublicKeys(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getE2EEPublicKeys();
    }

    #endif

    public List<E2EEPublicKey> getE2EEPublicKeys()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getE2EEPublicKeys(null, null);
      return End_getE2EEPublicKeys(asyncResult);

      #else
      send_getE2EEPublicKeys();
      return recv_getE2EEPublicKeys();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getE2EEPublicKeys(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.Call, seqid_));
      getE2EEPublicKeys_args args = new getE2EEPublicKeys_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getE2EEPublicKeys()
    {
      oprot_.WriteMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.Call, seqid_));
      getE2EEPublicKeys_args args = new getE2EEPublicKeys_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<E2EEPublicKey> recv_getE2EEPublicKeys()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getE2EEPublicKeys_result result = new getE2EEPublicKeys_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getE2EEPublicKeys failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getE2EEPublicKeysEx(AsyncCallback callback, object state, bool ignoreE2EEStatus)
    {
      return send_getE2EEPublicKeysEx(callback, state, ignoreE2EEStatus);
    }

    public List<E2EEPublicKey> End_getE2EEPublicKeysEx(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getE2EEPublicKeysEx();
    }

    #endif

    public List<E2EEPublicKey> getE2EEPublicKeysEx(bool ignoreE2EEStatus)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getE2EEPublicKeysEx(null, null, ignoreE2EEStatus);
      return End_getE2EEPublicKeysEx(asyncResult);

      #else
      send_getE2EEPublicKeysEx(ignoreE2EEStatus);
      return recv_getE2EEPublicKeysEx();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getE2EEPublicKeysEx(AsyncCallback callback, object state, bool ignoreE2EEStatus)
    {
      oprot_.WriteMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.Call, seqid_));
      getE2EEPublicKeysEx_args args = new getE2EEPublicKeysEx_args();
      args.IgnoreE2EEStatus = ignoreE2EEStatus;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getE2EEPublicKeysEx(bool ignoreE2EEStatus)
    {
      oprot_.WriteMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.Call, seqid_));
      getE2EEPublicKeysEx_args args = new getE2EEPublicKeysEx_args();
      args.IgnoreE2EEStatus = ignoreE2EEStatus;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<E2EEPublicKey> recv_getE2EEPublicKeysEx()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getE2EEPublicKeysEx_result result = new getE2EEPublicKeysEx_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getE2EEPublicKeysEx failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getReadMessageOpsInBulk(AsyncCallback callback, object state, List<string> chatIds)
    {
      return send_getReadMessageOpsInBulk(callback, state, chatIds);
    }

    public List<Operation> End_getReadMessageOpsInBulk(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getReadMessageOpsInBulk();
    }

    #endif

    public List<Operation> getReadMessageOpsInBulk(List<string> chatIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getReadMessageOpsInBulk(null, null, chatIds);
      return End_getReadMessageOpsInBulk(asyncResult);

      #else
      send_getReadMessageOpsInBulk(chatIds);
      return recv_getReadMessageOpsInBulk();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getReadMessageOpsInBulk(AsyncCallback callback, object state, List<string> chatIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.Call, seqid_));
      getReadMessageOpsInBulk_args args = new getReadMessageOpsInBulk_args();
      args.ChatIds = chatIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getReadMessageOpsInBulk(List<string> chatIds)
    {
      oprot_.WriteMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.Call, seqid_));
      getReadMessageOpsInBulk_args args = new getReadMessageOpsInBulk_args();
      args.ChatIds = chatIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Operation> recv_getReadMessageOpsInBulk()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getReadMessageOpsInBulk_result result = new getReadMessageOpsInBulk_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getReadMessageOpsInBulk failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendEvent(AsyncCallback callback, object state, int seq, Message message)
    {
      return send_sendEvent(callback, state, seq, message);
    }

    public Message End_sendEvent(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendEvent();
    }

    #endif

    public Message sendEvent(int seq, Message message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendEvent(null, null, seq, message);
      return End_sendEvent(asyncResult);

      #else
      send_sendEvent(seq, message);
      return recv_sendEvent();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendEvent(AsyncCallback callback, object state, int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendEvent", TMessageType.Call, seqid_));
      sendEvent_args args = new sendEvent_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendEvent(int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendEvent", TMessageType.Call, seqid_));
      sendEvent_args args = new sendEvent_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Message recv_sendEvent()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendEvent_result result = new sendEvent_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendEvent failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessage(AsyncCallback callback, object state, int seq, Message message)
    {
      return send_sendMessage(callback, state, seq, message);
    }

    public Message End_sendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendMessage();
    }

    #endif

    public Message sendMessage(int seq, Message message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessage(null, null, seq, message);
      return End_sendMessage(asyncResult);

      #else
      send_sendMessage(seq, message);
      return recv_sendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessage(AsyncCallback callback, object state, int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
      sendMessage_args args = new sendMessage_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessage(int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Call, seqid_));
      sendMessage_args args = new sendMessage_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Message recv_sendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessage_result result = new sendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessageIgnored(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds)
    {
      return send_sendMessageIgnored(callback, state, seq, consumer, messageIds);
    }

    public void End_sendMessageIgnored(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendMessageIgnored();
    }

    #endif

    public void sendMessageIgnored(int seq, string consumer, List<string> messageIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessageIgnored(null, null, seq, consumer, messageIds);
      End_sendMessageIgnored(asyncResult);

      #else
      send_sendMessageIgnored(seq, consumer, messageIds);
      recv_sendMessageIgnored();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessageIgnored(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageIgnored", TMessageType.Call, seqid_));
      sendMessageIgnored_args args = new sendMessageIgnored_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.MessageIds = messageIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessageIgnored(int seq, string consumer, List<string> messageIds)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageIgnored", TMessageType.Call, seqid_));
      sendMessageIgnored_args args = new sendMessageIgnored_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.MessageIds = messageIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendMessageIgnored()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessageIgnored_result result = new sendMessageIgnored_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessageReceipt(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds)
    {
      return send_sendMessageReceipt(callback, state, seq, consumer, messageIds);
    }

    public void End_sendMessageReceipt(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_sendMessageReceipt();
    }

    #endif

    public void sendMessageReceipt(int seq, string consumer, List<string> messageIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessageReceipt(null, null, seq, consumer, messageIds);
      End_sendMessageReceipt(asyncResult);

      #else
      send_sendMessageReceipt(seq, consumer, messageIds);
      recv_sendMessageReceipt();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessageReceipt(AsyncCallback callback, object state, int seq, string consumer, List<string> messageIds)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageReceipt", TMessageType.Call, seqid_));
      sendMessageReceipt_args args = new sendMessageReceipt_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.MessageIds = messageIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessageReceipt(int seq, string consumer, List<string> messageIds)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageReceipt", TMessageType.Call, seqid_));
      sendMessageReceipt_args args = new sendMessageReceipt_args();
      args.Seq = seq;
      args.Consumer = consumer;
      args.MessageIds = messageIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_sendMessageReceipt()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessageReceipt_result result = new sendMessageReceipt_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_findContactByMetaTag(AsyncCallback callback, object state, string userid, string reference)
    {
      return send_findContactByMetaTag(callback, state, userid, reference);
    }

    public Contact End_findContactByMetaTag(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_findContactByMetaTag();
    }

    #endif

    public Contact findContactByMetaTag(string userid, string reference)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_findContactByMetaTag(null, null, userid, reference);
      return End_findContactByMetaTag(asyncResult);

      #else
      send_findContactByMetaTag(userid, reference);
      return recv_findContactByMetaTag();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_findContactByMetaTag(AsyncCallback callback, object state, string userid, string reference)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByMetaTag", TMessageType.Call, seqid_));
      findContactByMetaTag_args args = new findContactByMetaTag_args();
      args.Userid = userid;
      args.Reference = reference;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_findContactByMetaTag(string userid, string reference)
    {
      oprot_.WriteMessageBegin(new TMessage("findContactByMetaTag", TMessageType.Call, seqid_));
      findContactByMetaTag_args args = new findContactByMetaTag_args();
      args.Userid = userid;
      args.Reference = reference;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Contact recv_findContactByMetaTag()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      findContactByMetaTag_result result = new findContactByMetaTag_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "findContactByMetaTag failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_sendMessageToMyHome(AsyncCallback callback, object state, int seq, Message message)
    {
      return send_sendMessageToMyHome(callback, state, seq, message);
    }

    public Message End_sendMessageToMyHome(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_sendMessageToMyHome();
    }

    #endif

    public Message sendMessageToMyHome(int seq, Message message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_sendMessageToMyHome(null, null, seq, message);
      return End_sendMessageToMyHome(asyncResult);

      #else
      send_sendMessageToMyHome(seq, message);
      return recv_sendMessageToMyHome();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_sendMessageToMyHome(AsyncCallback callback, object state, int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.Call, seqid_));
      sendMessageToMyHome_args args = new sendMessageToMyHome_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_sendMessageToMyHome(int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.Call, seqid_));
      sendMessageToMyHome_args args = new sendMessageToMyHome_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Message recv_sendMessageToMyHome()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      sendMessageToMyHome_result result = new sendMessageToMyHome_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sendMessageToMyHome failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setBuddyLocation(AsyncCallback callback, object state, string mid, int index, Geolocation location)
    {
      return send_setBuddyLocation(callback, state, mid, index, location);
    }

    public void End_setBuddyLocation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setBuddyLocation();
    }

    #endif

    public void setBuddyLocation(string mid, int index, Geolocation location)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setBuddyLocation(null, null, mid, index, location);
      End_setBuddyLocation(asyncResult);

      #else
      send_setBuddyLocation(mid, index, location);
      recv_setBuddyLocation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setBuddyLocation(AsyncCallback callback, object state, string mid, int index, Geolocation location)
    {
      oprot_.WriteMessageBegin(new TMessage("setBuddyLocation", TMessageType.Call, seqid_));
      setBuddyLocation_args args = new setBuddyLocation_args();
      args.Mid = mid;
      args.Index = index;
      args.Location = location;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setBuddyLocation(string mid, int index, Geolocation location)
    {
      oprot_.WriteMessageBegin(new TMessage("setBuddyLocation", TMessageType.Call, seqid_));
      setBuddyLocation_args args = new setBuddyLocation_args();
      args.Mid = mid;
      args.Index = index;
      args.Location = location;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_setBuddyLocation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setBuddyLocation_result result = new setBuddyLocation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setIdentityCredential(AsyncCallback callback, object state, string identifier, string verifier, IdentityProvider provider)
    {
      return send_setIdentityCredential(callback, state, identifier, verifier, provider);
    }

    public void End_setIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setIdentityCredential();
    }

    #endif

    public void setIdentityCredential(string identifier, string verifier, IdentityProvider provider)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setIdentityCredential(null, null, identifier, verifier, provider);
      End_setIdentityCredential(asyncResult);

      #else
      send_setIdentityCredential(identifier, verifier, provider);
      recv_setIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setIdentityCredential(AsyncCallback callback, object state, string identifier, string verifier, IdentityProvider provider)
    {
      oprot_.WriteMessageBegin(new TMessage("setIdentityCredential", TMessageType.Call, seqid_));
      setIdentityCredential_args args = new setIdentityCredential_args();
      args.Identifier = identifier;
      args.Verifier = verifier;
      args.Provider = provider;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setIdentityCredential(string identifier, string verifier, IdentityProvider provider)
    {
      oprot_.WriteMessageBegin(new TMessage("setIdentityCredential", TMessageType.Call, seqid_));
      setIdentityCredential_args args = new setIdentityCredential_args();
      args.Identifier = identifier;
      args.Verifier = verifier;
      args.Provider = provider;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_setIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setIdentityCredential_result result = new setIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_setNotificationsEnabled(AsyncCallback callback, object state, int reqSeq, MIDType type, string target, bool enablement)
    {
      return send_setNotificationsEnabled(callback, state, reqSeq, type, target, enablement);
    }

    public void End_setNotificationsEnabled(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_setNotificationsEnabled();
    }

    #endif

    public void setNotificationsEnabled(int reqSeq, MIDType type, string target, bool enablement)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_setNotificationsEnabled(null, null, reqSeq, type, target, enablement);
      End_setNotificationsEnabled(asyncResult);

      #else
      send_setNotificationsEnabled(reqSeq, type, target, enablement);
      recv_setNotificationsEnabled();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setNotificationsEnabled(AsyncCallback callback, object state, int reqSeq, MIDType type, string target, bool enablement)
    {
      oprot_.WriteMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.Call, seqid_));
      setNotificationsEnabled_args args = new setNotificationsEnabled_args();
      args.ReqSeq = reqSeq;
      args.Type = type;
      args.Target = target;
      args.Enablement = enablement;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_setNotificationsEnabled(int reqSeq, MIDType type, string target, bool enablement)
    {
      oprot_.WriteMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.Call, seqid_));
      setNotificationsEnabled_args args = new setNotificationsEnabled_args();
      args.ReqSeq = reqSeq;
      args.Type = type;
      args.Target = target;
      args.Enablement = enablement;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_setNotificationsEnabled()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setNotificationsEnabled_result result = new setNotificationsEnabled_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_startUpdateVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)
    {
      return send_startUpdateVerification(callback, state, region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
    }

    public VerificationSessionData End_startUpdateVerification(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_startUpdateVerification();
    }

    #endif

    public VerificationSessionData startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_startUpdateVerification(null, null, region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
      return End_startUpdateVerification(asyncResult);

      #else
      send_startUpdateVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, locale);
      return recv_startUpdateVerification();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_startUpdateVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)
    {
      oprot_.WriteMessageBegin(new TMessage("startUpdateVerification", TMessageType.Call, seqid_));
      startUpdateVerification_args args = new startUpdateVerification_args();
      args.Region = region;
      args.Carrier = carrier;
      args.Phone = phone;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.NetworkCode = networkCode;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_startUpdateVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string locale)
    {
      oprot_.WriteMessageBegin(new TMessage("startUpdateVerification", TMessageType.Call, seqid_));
      startUpdateVerification_args args = new startUpdateVerification_args();
      args.Region = region;
      args.Carrier = carrier;
      args.Phone = phone;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.NetworkCode = networkCode;
      args.Locale = locale;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public VerificationSessionData recv_startUpdateVerification()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      startUpdateVerification_result result = new startUpdateVerification_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "startUpdateVerification failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_startVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash)
    {
      return send_startVerification(callback, state, region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash);
    }

    public VerificationSessionData End_startVerification(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_startVerification();
    }

    #endif

    public VerificationSessionData startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_startVerification(null, null, region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash);
      return End_startVerification(asyncResult);

      #else
      send_startVerification(region, carrier, phone, udidHash, deviceInfo, networkCode, mid, locale, simInfo, oldUdidHash);
      return recv_startVerification();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_startVerification(AsyncCallback callback, object state, string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash)
    {
      oprot_.WriteMessageBegin(new TMessage("startVerification", TMessageType.Call, seqid_));
      startVerification_args args = new startVerification_args();
      args.Region = region;
      args.Carrier = carrier;
      args.Phone = phone;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.NetworkCode = networkCode;
      args.Mid = mid;
      args.Locale = locale;
      args.SimInfo = simInfo;
      args.OldUdidHash = oldUdidHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_startVerification(string region, CarrierCode carrier, string phone, string udidHash, DeviceInfo deviceInfo, string networkCode, string mid, string locale, SIMInfo simInfo, string oldUdidHash)
    {
      oprot_.WriteMessageBegin(new TMessage("startVerification", TMessageType.Call, seqid_));
      startVerification_args args = new startVerification_args();
      args.Region = region;
      args.Carrier = carrier;
      args.Phone = phone;
      args.UdidHash = udidHash;
      args.DeviceInfo = deviceInfo;
      args.NetworkCode = networkCode;
      args.Mid = mid;
      args.Locale = locale;
      args.SimInfo = simInfo;
      args.OldUdidHash = oldUdidHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public VerificationSessionData recv_startVerification()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      startVerification_result result = new startVerification_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "startVerification failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateGroupPreferenceAttribute(AsyncCallback callback, object state, int reqSeq, string groupMid, Dictionary<GroupPreferenceAttribute, string> updatedAttrs)
    {
      return send_updateGroupPreferenceAttribute(callback, state, reqSeq, groupMid, updatedAttrs);
    }

    public void End_updateGroupPreferenceAttribute(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateGroupPreferenceAttribute();
    }

    #endif

    public void updateGroupPreferenceAttribute(int reqSeq, string groupMid, Dictionary<GroupPreferenceAttribute, string> updatedAttrs)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateGroupPreferenceAttribute(null, null, reqSeq, groupMid, updatedAttrs);
      End_updateGroupPreferenceAttribute(asyncResult);

      #else
      send_updateGroupPreferenceAttribute(reqSeq, groupMid, updatedAttrs);
      recv_updateGroupPreferenceAttribute();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateGroupPreferenceAttribute(AsyncCallback callback, object state, int reqSeq, string groupMid, Dictionary<GroupPreferenceAttribute, string> updatedAttrs)
    {
      oprot_.WriteMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.Call, seqid_));
      updateGroupPreferenceAttribute_args args = new updateGroupPreferenceAttribute_args();
      args.ReqSeq = reqSeq;
      args.GroupMid = groupMid;
      args.UpdatedAttrs = updatedAttrs;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateGroupPreferenceAttribute(int reqSeq, string groupMid, Dictionary<GroupPreferenceAttribute, string> updatedAttrs)
    {
      oprot_.WriteMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.Call, seqid_));
      updateGroupPreferenceAttribute_args args = new updateGroupPreferenceAttribute_args();
      args.ReqSeq = reqSeq;
      args.GroupMid = groupMid;
      args.UpdatedAttrs = updatedAttrs;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateGroupPreferenceAttribute()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateGroupPreferenceAttribute_result result = new updateGroupPreferenceAttribute_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_createRoomV2(AsyncCallback callback, object state, int reqSeq, List<string> contactIds)
    {
      return send_createRoomV2(callback, state, reqSeq, contactIds);
    }

    public Room End_createRoomV2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createRoomV2();
    }

    #endif

    public Room createRoomV2(int reqSeq, List<string> contactIds)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_createRoomV2(null, null, reqSeq, contactIds);
      return End_createRoomV2(asyncResult);

      #else
      send_createRoomV2(reqSeq, contactIds);
      return recv_createRoomV2();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createRoomV2(AsyncCallback callback, object state, int reqSeq, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("createRoomV2", TMessageType.Call, seqid_));
      createRoomV2_args args = new createRoomV2_args();
      args.ReqSeq = reqSeq;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_createRoomV2(int reqSeq, List<string> contactIds)
    {
      oprot_.WriteMessageBegin(new TMessage("createRoomV2", TMessageType.Call, seqid_));
      createRoomV2_args args = new createRoomV2_args();
      args.ReqSeq = reqSeq;
      args.ContactIds = contactIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Room recv_createRoomV2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createRoomV2_result result = new createRoomV2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createRoomV2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_storeUpdateProfileAttribute(AsyncCallback callback, object state, int seq, ProfileAttribute profileAttribute, string @value)
    {
      return send_storeUpdateProfileAttribute(callback, state, seq, profileAttribute, @value);
    }

    public void End_storeUpdateProfileAttribute(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_storeUpdateProfileAttribute();
    }

    #endif

    public void storeUpdateProfileAttribute(int seq, ProfileAttribute profileAttribute, string @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_storeUpdateProfileAttribute(null, null, seq, profileAttribute, @value);
      End_storeUpdateProfileAttribute(asyncResult);

      #else
      send_storeUpdateProfileAttribute(seq, profileAttribute, @value);
      recv_storeUpdateProfileAttribute();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_storeUpdateProfileAttribute(AsyncCallback callback, object state, int seq, ProfileAttribute profileAttribute, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.Call, seqid_));
      storeUpdateProfileAttribute_args args = new storeUpdateProfileAttribute_args();
      args.Seq = seq;
      args.ProfileAttribute = profileAttribute;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_storeUpdateProfileAttribute(int seq, ProfileAttribute profileAttribute, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.Call, seqid_));
      storeUpdateProfileAttribute_args args = new storeUpdateProfileAttribute_args();
      args.Seq = seq;
      args.ProfileAttribute = profileAttribute;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_storeUpdateProfileAttribute()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      storeUpdateProfileAttribute_result result = new storeUpdateProfileAttribute_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_syncContactBySnsIds(AsyncCallback callback, object state, int reqSeq, List<SnsFriendModification> modifications)
    {
      return send_syncContactBySnsIds(callback, state, reqSeq, modifications);
    }

    public List<SnsFriendContactRegistration> End_syncContactBySnsIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_syncContactBySnsIds();
    }

    #endif

    public List<SnsFriendContactRegistration> syncContactBySnsIds(int reqSeq, List<SnsFriendModification> modifications)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_syncContactBySnsIds(null, null, reqSeq, modifications);
      return End_syncContactBySnsIds(asyncResult);

      #else
      send_syncContactBySnsIds(reqSeq, modifications);
      return recv_syncContactBySnsIds();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_syncContactBySnsIds(AsyncCallback callback, object state, int reqSeq, List<SnsFriendModification> modifications)
    {
      oprot_.WriteMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.Call, seqid_));
      syncContactBySnsIds_args args = new syncContactBySnsIds_args();
      args.ReqSeq = reqSeq;
      args.Modifications = modifications;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_syncContactBySnsIds(int reqSeq, List<SnsFriendModification> modifications)
    {
      oprot_.WriteMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.Call, seqid_));
      syncContactBySnsIds_args args = new syncContactBySnsIds_args();
      args.ReqSeq = reqSeq;
      args.Modifications = modifications;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<SnsFriendContactRegistration> recv_syncContactBySnsIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      syncContactBySnsIds_result result = new syncContactBySnsIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "syncContactBySnsIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_syncContacts(AsyncCallback callback, object state, int reqSeq, List<ContactModification> localContacts)
    {
      return send_syncContacts(callback, state, reqSeq, localContacts);
    }

    public Dictionary<string, ContactRegistration> End_syncContacts(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_syncContacts();
    }

    #endif

    public Dictionary<string, ContactRegistration> syncContacts(int reqSeq, List<ContactModification> localContacts)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_syncContacts(null, null, reqSeq, localContacts);
      return End_syncContacts(asyncResult);

      #else
      send_syncContacts(reqSeq, localContacts);
      return recv_syncContacts();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_syncContacts(AsyncCallback callback, object state, int reqSeq, List<ContactModification> localContacts)
    {
      oprot_.WriteMessageBegin(new TMessage("syncContacts", TMessageType.Call, seqid_));
      syncContacts_args args = new syncContacts_args();
      args.ReqSeq = reqSeq;
      args.LocalContacts = localContacts;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_syncContacts(int reqSeq, List<ContactModification> localContacts)
    {
      oprot_.WriteMessageBegin(new TMessage("syncContacts", TMessageType.Call, seqid_));
      syncContacts_args args = new syncContacts_args();
      args.ReqSeq = reqSeq;
      args.LocalContacts = localContacts;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, ContactRegistration> recv_syncContacts()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      syncContacts_result result = new syncContacts_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "syncContacts failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_trySendMessage(AsyncCallback callback, object state, int seq, Message message)
    {
      return send_trySendMessage(callback, state, seq, message);
    }

    public Message End_trySendMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_trySendMessage();
    }

    #endif

    public Message trySendMessage(int seq, Message message)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_trySendMessage(null, null, seq, message);
      return End_trySendMessage(asyncResult);

      #else
      send_trySendMessage(seq, message);
      return recv_trySendMessage();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_trySendMessage(AsyncCallback callback, object state, int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("trySendMessage", TMessageType.Call, seqid_));
      trySendMessage_args args = new trySendMessage_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_trySendMessage(int seq, Message message)
    {
      oprot_.WriteMessageBegin(new TMessage("trySendMessage", TMessageType.Call, seqid_));
      trySendMessage_args args = new trySendMessage_args();
      args.Seq = seq;
      args.Message = message;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Message recv_trySendMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      trySendMessage_result result = new trySendMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "trySendMessage failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getNextMessagesV2(AsyncCallback callback, object state, string messageBoxId, MessageBoxV2MessageId startMessageId, int messagesCount)
    {
      return send_getNextMessagesV2(callback, state, messageBoxId, startMessageId, messagesCount);
    }

    public List<Message> End_getNextMessagesV2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getNextMessagesV2();
    }

    #endif

    public List<Message> getNextMessagesV2(string messageBoxId, MessageBoxV2MessageId startMessageId, int messagesCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getNextMessagesV2(null, null, messageBoxId, startMessageId, messagesCount);
      return End_getNextMessagesV2(asyncResult);

      #else
      send_getNextMessagesV2(messageBoxId, startMessageId, messagesCount);
      return recv_getNextMessagesV2();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getNextMessagesV2(AsyncCallback callback, object state, string messageBoxId, MessageBoxV2MessageId startMessageId, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getNextMessagesV2", TMessageType.Call, seqid_));
      getNextMessagesV2_args args = new getNextMessagesV2_args();
      args.MessageBoxId = messageBoxId;
      args.StartMessageId = startMessageId;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getNextMessagesV2(string messageBoxId, MessageBoxV2MessageId startMessageId, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getNextMessagesV2", TMessageType.Call, seqid_));
      getNextMessagesV2_args args = new getNextMessagesV2_args();
      args.MessageBoxId = messageBoxId;
      args.StartMessageId = startMessageId;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Message> recv_getNextMessagesV2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getNextMessagesV2_result result = new getNextMessagesV2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getNextMessagesV2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getMessageBoxCompactWrapUpV2(AsyncCallback callback, object state, string messageBoxId)
    {
      return send_getMessageBoxCompactWrapUpV2(callback, state, messageBoxId);
    }

    public TMessageBoxWrapUp End_getMessageBoxCompactWrapUpV2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getMessageBoxCompactWrapUpV2();
    }

    #endif

    public TMessageBoxWrapUp getMessageBoxCompactWrapUpV2(string messageBoxId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getMessageBoxCompactWrapUpV2(null, null, messageBoxId);
      return End_getMessageBoxCompactWrapUpV2(asyncResult);

      #else
      send_getMessageBoxCompactWrapUpV2(messageBoxId);
      return recv_getMessageBoxCompactWrapUpV2();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getMessageBoxCompactWrapUpV2(AsyncCallback callback, object state, string messageBoxId)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.Call, seqid_));
      getMessageBoxCompactWrapUpV2_args args = new getMessageBoxCompactWrapUpV2_args();
      args.MessageBoxId = messageBoxId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getMessageBoxCompactWrapUpV2(string messageBoxId)
    {
      oprot_.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.Call, seqid_));
      getMessageBoxCompactWrapUpV2_args args = new getMessageBoxCompactWrapUpV2_args();
      args.MessageBoxId = messageBoxId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public TMessageBoxWrapUp recv_getMessageBoxCompactWrapUpV2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getMessageBoxCompactWrapUpV2_result result = new getMessageBoxCompactWrapUpV2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getMessageBoxCompactWrapUpV2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_getRecentMessagesV2(AsyncCallback callback, object state, string messageBoxId, int messagesCount)
    {
      return send_getRecentMessagesV2(callback, state, messageBoxId, messagesCount);
    }

    public List<Message> End_getRecentMessagesV2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getRecentMessagesV2();
    }

    #endif

    public List<Message> getRecentMessagesV2(string messageBoxId, int messagesCount)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_getRecentMessagesV2(null, null, messageBoxId, messagesCount);
      return End_getRecentMessagesV2(asyncResult);

      #else
      send_getRecentMessagesV2(messageBoxId, messagesCount);
      return recv_getRecentMessagesV2();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getRecentMessagesV2(AsyncCallback callback, object state, string messageBoxId, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.Call, seqid_));
      getRecentMessagesV2_args args = new getRecentMessagesV2_args();
      args.MessageBoxId = messageBoxId;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_getRecentMessagesV2(string messageBoxId, int messagesCount)
    {
      oprot_.WriteMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.Call, seqid_));
      getRecentMessagesV2_args args = new getRecentMessagesV2_args();
      args.MessageBoxId = messageBoxId;
      args.MessagesCount = messagesCount;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public List<Message> recv_getRecentMessagesV2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getRecentMessagesV2_result result = new getRecentMessagesV2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRecentMessagesV2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_validateContactsOnBot(AsyncCallback callback, object state, List<string> contacts)
    {
      return send_validateContactsOnBot(callback, state, contacts);
    }

    public Dictionary<string, string> End_validateContactsOnBot(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_validateContactsOnBot();
    }

    #endif

    public Dictionary<string, string> validateContactsOnBot(List<string> contacts)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_validateContactsOnBot(null, null, contacts);
      return End_validateContactsOnBot(asyncResult);

      #else
      send_validateContactsOnBot(contacts);
      return recv_validateContactsOnBot();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_validateContactsOnBot(AsyncCallback callback, object state, List<string> contacts)
    {
      oprot_.WriteMessageBegin(new TMessage("validateContactsOnBot", TMessageType.Call, seqid_));
      validateContactsOnBot_args args = new validateContactsOnBot_args();
      args.Contacts = contacts;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_validateContactsOnBot(List<string> contacts)
    {
      oprot_.WriteMessageBegin(new TMessage("validateContactsOnBot", TMessageType.Call, seqid_));
      validateContactsOnBot_args args = new validateContactsOnBot_args();
      args.Contacts = contacts;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public Dictionary<string, string> recv_validateContactsOnBot()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      validateContactsOnBot_result result = new validateContactsOnBot_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "validateContactsOnBot failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_tryFriendRequest(AsyncCallback callback, object state, string midOrEMid, FriendRequestMethod method, string friendRequestParams)
    {
      return send_tryFriendRequest(callback, state, midOrEMid, method, friendRequestParams);
    }

    public void End_tryFriendRequest(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_tryFriendRequest();
    }

    #endif

    public void tryFriendRequest(string midOrEMid, FriendRequestMethod method, string friendRequestParams)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_tryFriendRequest(null, null, midOrEMid, method, friendRequestParams);
      End_tryFriendRequest(asyncResult);

      #else
      send_tryFriendRequest(midOrEMid, method, friendRequestParams);
      recv_tryFriendRequest();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_tryFriendRequest(AsyncCallback callback, object state, string midOrEMid, FriendRequestMethod method, string friendRequestParams)
    {
      oprot_.WriteMessageBegin(new TMessage("tryFriendRequest", TMessageType.Call, seqid_));
      tryFriendRequest_args args = new tryFriendRequest_args();
      args.MidOrEMid = midOrEMid;
      args.Method = method;
      args.FriendRequestParams = friendRequestParams;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_tryFriendRequest(string midOrEMid, FriendRequestMethod method, string friendRequestParams)
    {
      oprot_.WriteMessageBegin(new TMessage("tryFriendRequest", TMessageType.Call, seqid_));
      tryFriendRequest_args args = new tryFriendRequest_args();
      args.MidOrEMid = midOrEMid;
      args.Method = method;
      args.FriendRequestParams = friendRequestParams;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_tryFriendRequest()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      tryFriendRequest_result result = new tryFriendRequest_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_unblockContact(AsyncCallback callback, object state, int reqSeq, string id)
    {
      return send_unblockContact(callback, state, reqSeq, id);
    }

    public void End_unblockContact(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_unblockContact();
    }

    #endif

    public void unblockContact(int reqSeq, string id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_unblockContact(null, null, reqSeq, id);
      End_unblockContact(asyncResult);

      #else
      send_unblockContact(reqSeq, id);
      recv_unblockContact();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_unblockContact(AsyncCallback callback, object state, int reqSeq, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("unblockContact", TMessageType.Call, seqid_));
      unblockContact_args args = new unblockContact_args();
      args.ReqSeq = reqSeq;
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_unblockContact(int reqSeq, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("unblockContact", TMessageType.Call, seqid_));
      unblockContact_args args = new unblockContact_args();
      args.ReqSeq = reqSeq;
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_unblockContact()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      unblockContact_result result = new unblockContact_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_unblockRecommendation(AsyncCallback callback, object state, int reqSeq, string id)
    {
      return send_unblockRecommendation(callback, state, reqSeq, id);
    }

    public void End_unblockRecommendation(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_unblockRecommendation();
    }

    #endif

    public void unblockRecommendation(int reqSeq, string id)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_unblockRecommendation(null, null, reqSeq, id);
      End_unblockRecommendation(asyncResult);

      #else
      send_unblockRecommendation(reqSeq, id);
      recv_unblockRecommendation();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_unblockRecommendation(AsyncCallback callback, object state, int reqSeq, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("unblockRecommendation", TMessageType.Call, seqid_));
      unblockRecommendation_args args = new unblockRecommendation_args();
      args.ReqSeq = reqSeq;
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_unblockRecommendation(int reqSeq, string id)
    {
      oprot_.WriteMessageBegin(new TMessage("unblockRecommendation", TMessageType.Call, seqid_));
      unblockRecommendation_args args = new unblockRecommendation_args();
      args.ReqSeq = reqSeq;
      args.Id = id;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_unblockRecommendation()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      unblockRecommendation_result result = new unblockRecommendation_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_unregisterUserAndDevice(AsyncCallback callback, object state)
    {
      return send_unregisterUserAndDevice(callback, state);
    }

    public string End_unregisterUserAndDevice(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_unregisterUserAndDevice();
    }

    #endif

    public string unregisterUserAndDevice()
    {
      #if SILVERLIGHT
      var asyncResult = Begin_unregisterUserAndDevice(null, null);
      return End_unregisterUserAndDevice(asyncResult);

      #else
      send_unregisterUserAndDevice();
      return recv_unregisterUserAndDevice();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_unregisterUserAndDevice(AsyncCallback callback, object state)
    {
      oprot_.WriteMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.Call, seqid_));
      unregisterUserAndDevice_args args = new unregisterUserAndDevice_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_unregisterUserAndDevice()
    {
      oprot_.WriteMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.Call, seqid_));
      unregisterUserAndDevice_args args = new unregisterUserAndDevice_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_unregisterUserAndDevice()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      unregisterUserAndDevice_result result = new unregisterUserAndDevice_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "unregisterUserAndDevice failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateApnsDeviceToken(AsyncCallback callback, object state, byte[] apnsDeviceToken)
    {
      return send_updateApnsDeviceToken(callback, state, apnsDeviceToken);
    }

    public void End_updateApnsDeviceToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateApnsDeviceToken();
    }

    #endif

    public void updateApnsDeviceToken(byte[] apnsDeviceToken)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateApnsDeviceToken(null, null, apnsDeviceToken);
      End_updateApnsDeviceToken(asyncResult);

      #else
      send_updateApnsDeviceToken(apnsDeviceToken);
      recv_updateApnsDeviceToken();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateApnsDeviceToken(AsyncCallback callback, object state, byte[] apnsDeviceToken)
    {
      oprot_.WriteMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.Call, seqid_));
      updateApnsDeviceToken_args args = new updateApnsDeviceToken_args();
      args.ApnsDeviceToken = apnsDeviceToken;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateApnsDeviceToken(byte[] apnsDeviceToken)
    {
      oprot_.WriteMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.Call, seqid_));
      updateApnsDeviceToken_args args = new updateApnsDeviceToken_args();
      args.ApnsDeviceToken = apnsDeviceToken;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateApnsDeviceToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateApnsDeviceToken_result result = new updateApnsDeviceToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateBuddySetting(AsyncCallback callback, object state, string key, string @value)
    {
      return send_updateBuddySetting(callback, state, key, @value);
    }

    public void End_updateBuddySetting(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateBuddySetting();
    }

    #endif

    public void updateBuddySetting(string key, string @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateBuddySetting(null, null, key, @value);
      End_updateBuddySetting(asyncResult);

      #else
      send_updateBuddySetting(key, @value);
      recv_updateBuddySetting();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateBuddySetting(AsyncCallback callback, object state, string key, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateBuddySetting", TMessageType.Call, seqid_));
      updateBuddySetting_args args = new updateBuddySetting_args();
      args.Key = key;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateBuddySetting(string key, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateBuddySetting", TMessageType.Call, seqid_));
      updateBuddySetting_args args = new updateBuddySetting_args();
      args.Key = key;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateBuddySetting()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateBuddySetting_result result = new updateBuddySetting_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateC2DMRegistrationId(AsyncCallback callback, object state, string registrationId)
    {
      return send_updateC2DMRegistrationId(callback, state, registrationId);
    }

    public void End_updateC2DMRegistrationId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateC2DMRegistrationId();
    }

    #endif

    public void updateC2DMRegistrationId(string registrationId)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateC2DMRegistrationId(null, null, registrationId);
      End_updateC2DMRegistrationId(asyncResult);

      #else
      send_updateC2DMRegistrationId(registrationId);
      recv_updateC2DMRegistrationId();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateC2DMRegistrationId(AsyncCallback callback, object state, string registrationId)
    {
      oprot_.WriteMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.Call, seqid_));
      updateC2DMRegistrationId_args args = new updateC2DMRegistrationId_args();
      args.RegistrationId = registrationId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateC2DMRegistrationId(string registrationId)
    {
      oprot_.WriteMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.Call, seqid_));
      updateC2DMRegistrationId_args args = new updateC2DMRegistrationId_args();
      args.RegistrationId = registrationId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateC2DMRegistrationId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateC2DMRegistrationId_result result = new updateC2DMRegistrationId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateContactSetting(AsyncCallback callback, object state, int reqSeq, string mid, ContactSetting flag, string @value)
    {
      return send_updateContactSetting(callback, state, reqSeq, mid, flag, @value);
    }

    public void End_updateContactSetting(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateContactSetting();
    }

    #endif

    public void updateContactSetting(int reqSeq, string mid, ContactSetting flag, string @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateContactSetting(null, null, reqSeq, mid, flag, @value);
      End_updateContactSetting(asyncResult);

      #else
      send_updateContactSetting(reqSeq, mid, flag, @value);
      recv_updateContactSetting();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateContactSetting(AsyncCallback callback, object state, int reqSeq, string mid, ContactSetting flag, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateContactSetting", TMessageType.Call, seqid_));
      updateContactSetting_args args = new updateContactSetting_args();
      args.ReqSeq = reqSeq;
      args.Mid = mid;
      args.Flag = flag;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateContactSetting(int reqSeq, string mid, ContactSetting flag, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateContactSetting", TMessageType.Call, seqid_));
      updateContactSetting_args args = new updateContactSetting_args();
      args.ReqSeq = reqSeq;
      args.Mid = mid;
      args.Flag = flag;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateContactSetting()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateContactSetting_result result = new updateContactSetting_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateCustomModeSettings(AsyncCallback callback, object state, CustomMode customMode, Dictionary<string, string> paramMap)
    {
      return send_updateCustomModeSettings(callback, state, customMode, paramMap);
    }

    public void End_updateCustomModeSettings(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateCustomModeSettings();
    }

    #endif

    public void updateCustomModeSettings(CustomMode customMode, Dictionary<string, string> paramMap)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateCustomModeSettings(null, null, customMode, paramMap);
      End_updateCustomModeSettings(asyncResult);

      #else
      send_updateCustomModeSettings(customMode, paramMap);
      recv_updateCustomModeSettings();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateCustomModeSettings(AsyncCallback callback, object state, CustomMode customMode, Dictionary<string, string> paramMap)
    {
      oprot_.WriteMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.Call, seqid_));
      updateCustomModeSettings_args args = new updateCustomModeSettings_args();
      args.CustomMode = customMode;
      args.ParamMap = paramMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateCustomModeSettings(CustomMode customMode, Dictionary<string, string> paramMap)
    {
      oprot_.WriteMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.Call, seqid_));
      updateCustomModeSettings_args args = new updateCustomModeSettings_args();
      args.CustomMode = customMode;
      args.ParamMap = paramMap;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateCustomModeSettings()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateCustomModeSettings_result result = new updateCustomModeSettings_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateDeviceInfo(AsyncCallback callback, object state, string deviceUid, DeviceInfo deviceInfo)
    {
      return send_updateDeviceInfo(callback, state, deviceUid, deviceInfo);
    }

    public void End_updateDeviceInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateDeviceInfo();
    }

    #endif

    public void updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateDeviceInfo(null, null, deviceUid, deviceInfo);
      End_updateDeviceInfo(asyncResult);

      #else
      send_updateDeviceInfo(deviceUid, deviceInfo);
      recv_updateDeviceInfo();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateDeviceInfo(AsyncCallback callback, object state, string deviceUid, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("updateDeviceInfo", TMessageType.Call, seqid_));
      updateDeviceInfo_args args = new updateDeviceInfo_args();
      args.DeviceUid = deviceUid;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateDeviceInfo(string deviceUid, DeviceInfo deviceInfo)
    {
      oprot_.WriteMessageBegin(new TMessage("updateDeviceInfo", TMessageType.Call, seqid_));
      updateDeviceInfo_args args = new updateDeviceInfo_args();
      args.DeviceUid = deviceUid;
      args.DeviceInfo = deviceInfo;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateDeviceInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateDeviceInfo_result result = new updateDeviceInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateGroup(AsyncCallback callback, object state, int reqSeq, @Group @group)
    {
      return send_updateGroup(callback, state, reqSeq, @group);
    }

    public void End_updateGroup(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateGroup();
    }

    #endif

    public void updateGroup(int reqSeq, @Group @group)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateGroup(null, null, reqSeq, @group);
      End_updateGroup(asyncResult);

      #else
      send_updateGroup(reqSeq, @group);
      recv_updateGroup();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateGroup(AsyncCallback callback, object state, int reqSeq, @Group @group)
    {
      oprot_.WriteMessageBegin(new TMessage("updateGroup", TMessageType.Call, seqid_));
      updateGroup_args args = new updateGroup_args();
      args.ReqSeq = reqSeq;
      args.Group = @group;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateGroup(int reqSeq, @Group @group)
    {
      oprot_.WriteMessageBegin(new TMessage("updateGroup", TMessageType.Call, seqid_));
      updateGroup_args args = new updateGroup_args();
      args.ReqSeq = reqSeq;
      args.Group = @group;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateGroup()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateGroup_result result = new updateGroup_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateNotificationToken(AsyncCallback callback, object state, NotificationType type, string token)
    {
      return send_updateNotificationToken(callback, state, type, token);
    }

    public void End_updateNotificationToken(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateNotificationToken();
    }

    #endif

    public void updateNotificationToken(NotificationType type, string token)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateNotificationToken(null, null, type, token);
      End_updateNotificationToken(asyncResult);

      #else
      send_updateNotificationToken(type, token);
      recv_updateNotificationToken();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateNotificationToken(AsyncCallback callback, object state, NotificationType type, string token)
    {
      oprot_.WriteMessageBegin(new TMessage("updateNotificationToken", TMessageType.Call, seqid_));
      updateNotificationToken_args args = new updateNotificationToken_args();
      args.Type = type;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateNotificationToken(NotificationType type, string token)
    {
      oprot_.WriteMessageBegin(new TMessage("updateNotificationToken", TMessageType.Call, seqid_));
      updateNotificationToken_args args = new updateNotificationToken_args();
      args.Type = type;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateNotificationToken()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateNotificationToken_result result = new updateNotificationToken_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateNotificationTokenWithBytes(AsyncCallback callback, object state, NotificationType type, byte[] token)
    {
      return send_updateNotificationTokenWithBytes(callback, state, type, token);
    }

    public void End_updateNotificationTokenWithBytes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateNotificationTokenWithBytes();
    }

    #endif

    public void updateNotificationTokenWithBytes(NotificationType type, byte[] token)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateNotificationTokenWithBytes(null, null, type, token);
      End_updateNotificationTokenWithBytes(asyncResult);

      #else
      send_updateNotificationTokenWithBytes(type, token);
      recv_updateNotificationTokenWithBytes();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateNotificationTokenWithBytes(AsyncCallback callback, object state, NotificationType type, byte[] token)
    {
      oprot_.WriteMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.Call, seqid_));
      updateNotificationTokenWithBytes_args args = new updateNotificationTokenWithBytes_args();
      args.Type = type;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateNotificationTokenWithBytes(NotificationType type, byte[] token)
    {
      oprot_.WriteMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.Call, seqid_));
      updateNotificationTokenWithBytes_args args = new updateNotificationTokenWithBytes_args();
      args.Type = type;
      args.Token = token;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateNotificationTokenWithBytes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateNotificationTokenWithBytes_result result = new updateNotificationTokenWithBytes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateProfile(AsyncCallback callback, object state, int reqSeq, Profile profile)
    {
      return send_updateProfile(callback, state, reqSeq, profile);
    }

    public void End_updateProfile(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateProfile();
    }

    #endif

    public void updateProfile(int reqSeq, Profile profile)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateProfile(null, null, reqSeq, profile);
      End_updateProfile(asyncResult);

      #else
      send_updateProfile(reqSeq, profile);
      recv_updateProfile();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateProfile(AsyncCallback callback, object state, int reqSeq, Profile profile)
    {
      oprot_.WriteMessageBegin(new TMessage("updateProfile", TMessageType.Call, seqid_));
      updateProfile_args args = new updateProfile_args();
      args.ReqSeq = reqSeq;
      args.Profile = profile;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateProfile(int reqSeq, Profile profile)
    {
      oprot_.WriteMessageBegin(new TMessage("updateProfile", TMessageType.Call, seqid_));
      updateProfile_args args = new updateProfile_args();
      args.ReqSeq = reqSeq;
      args.Profile = profile;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateProfile()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateProfile_result result = new updateProfile_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateProfileAttribute(AsyncCallback callback, object state, int reqSeq, ProfileAttribute attr, string @value)
    {
      return send_updateProfileAttribute(callback, state, reqSeq, attr, @value);
    }

    public void End_updateProfileAttribute(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateProfileAttribute();
    }

    #endif

    public void updateProfileAttribute(int reqSeq, ProfileAttribute attr, string @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateProfileAttribute(null, null, reqSeq, attr, @value);
      End_updateProfileAttribute(asyncResult);

      #else
      send_updateProfileAttribute(reqSeq, attr, @value);
      recv_updateProfileAttribute();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateProfileAttribute(AsyncCallback callback, object state, int reqSeq, ProfileAttribute attr, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateProfileAttribute", TMessageType.Call, seqid_));
      updateProfileAttribute_args args = new updateProfileAttribute_args();
      args.ReqSeq = reqSeq;
      args.Attr = attr;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateProfileAttribute(int reqSeq, ProfileAttribute attr, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateProfileAttribute", TMessageType.Call, seqid_));
      updateProfileAttribute_args args = new updateProfileAttribute_args();
      args.ReqSeq = reqSeq;
      args.Attr = attr;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateProfileAttribute()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateProfileAttribute_result result = new updateProfileAttribute_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateRegion(AsyncCallback callback, object state, string region)
    {
      return send_updateRegion(callback, state, region);
    }

    public void End_updateRegion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateRegion();
    }

    #endif

    public void updateRegion(string region)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateRegion(null, null, region);
      End_updateRegion(asyncResult);

      #else
      send_updateRegion(region);
      recv_updateRegion();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateRegion(AsyncCallback callback, object state, string region)
    {
      oprot_.WriteMessageBegin(new TMessage("updateRegion", TMessageType.Call, seqid_));
      updateRegion_args args = new updateRegion_args();
      args.Region = region;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateRegion(string region)
    {
      oprot_.WriteMessageBegin(new TMessage("updateRegion", TMessageType.Call, seqid_));
      updateRegion_args args = new updateRegion_args();
      args.Region = region;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateRegion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateRegion_result result = new updateRegion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSettings(AsyncCallback callback, object state, int reqSeq, Settings settings)
    {
      return send_updateSettings(callback, state, reqSeq, settings);
    }

    public void End_updateSettings(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateSettings();
    }

    #endif

    public void updateSettings(int reqSeq, Settings settings)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSettings(null, null, reqSeq, settings);
      End_updateSettings(asyncResult);

      #else
      send_updateSettings(reqSeq, settings);
      recv_updateSettings();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSettings(AsyncCallback callback, object state, int reqSeq, Settings settings)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSettings", TMessageType.Call, seqid_));
      updateSettings_args args = new updateSettings_args();
      args.ReqSeq = reqSeq;
      args.Settings = settings;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSettings(int reqSeq, Settings settings)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSettings", TMessageType.Call, seqid_));
      updateSettings_args args = new updateSettings_args();
      args.ReqSeq = reqSeq;
      args.Settings = settings;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateSettings()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSettings_result result = new updateSettings_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSettings2(AsyncCallback callback, object state, int reqSeq, Settings settings)
    {
      return send_updateSettings2(callback, state, reqSeq, settings);
    }

    public int End_updateSettings2(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSettings2();
    }

    #endif

    public int updateSettings2(int reqSeq, Settings settings)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSettings2(null, null, reqSeq, settings);
      return End_updateSettings2(asyncResult);

      #else
      send_updateSettings2(reqSeq, settings);
      return recv_updateSettings2();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSettings2(AsyncCallback callback, object state, int reqSeq, Settings settings)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSettings2", TMessageType.Call, seqid_));
      updateSettings2_args args = new updateSettings2_args();
      args.ReqSeq = reqSeq;
      args.Settings = settings;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSettings2(int reqSeq, Settings settings)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSettings2", TMessageType.Call, seqid_));
      updateSettings2_args args = new updateSettings2_args();
      args.ReqSeq = reqSeq;
      args.Settings = settings;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_updateSettings2()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSettings2_result result = new updateSettings2_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSettings2 failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSettingsAttribute(AsyncCallback callback, object state, int reqSeq, SettingsAttribute attr, string @value)
    {
      return send_updateSettingsAttribute(callback, state, reqSeq, attr, @value);
    }

    public void End_updateSettingsAttribute(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_updateSettingsAttribute();
    }

    #endif

    public void updateSettingsAttribute(int reqSeq, SettingsAttribute attr, string @value)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSettingsAttribute(null, null, reqSeq, attr, @value);
      End_updateSettingsAttribute(asyncResult);

      #else
      send_updateSettingsAttribute(reqSeq, attr, @value);
      recv_updateSettingsAttribute();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSettingsAttribute(AsyncCallback callback, object state, int reqSeq, SettingsAttribute attr, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.Call, seqid_));
      updateSettingsAttribute_args args = new updateSettingsAttribute_args();
      args.ReqSeq = reqSeq;
      args.Attr = attr;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSettingsAttribute(int reqSeq, SettingsAttribute attr, string @value)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.Call, seqid_));
      updateSettingsAttribute_args args = new updateSettingsAttribute_args();
      args.ReqSeq = reqSeq;
      args.Attr = attr;
      args.Value = @value;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_updateSettingsAttribute()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSettingsAttribute_result result = new updateSettingsAttribute_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_updateSettingsAttributes(AsyncCallback callback, object state, int reqSeq, int attrBitset, Settings settings)
    {
      return send_updateSettingsAttributes(callback, state, reqSeq, attrBitset, settings);
    }

    public int End_updateSettingsAttributes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateSettingsAttributes();
    }

    #endif

    public int updateSettingsAttributes(int reqSeq, int attrBitset, Settings settings)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_updateSettingsAttributes(null, null, reqSeq, attrBitset, settings);
      return End_updateSettingsAttributes(asyncResult);

      #else
      send_updateSettingsAttributes(reqSeq, attrBitset, settings);
      return recv_updateSettingsAttributes();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateSettingsAttributes(AsyncCallback callback, object state, int reqSeq, int attrBitset, Settings settings)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.Call, seqid_));
      updateSettingsAttributes_args args = new updateSettingsAttributes_args();
      args.ReqSeq = reqSeq;
      args.AttrBitset = attrBitset;
      args.Settings = settings;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_updateSettingsAttributes(int reqSeq, int attrBitset, Settings settings)
    {
      oprot_.WriteMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.Call, seqid_));
      updateSettingsAttributes_args args = new updateSettingsAttributes_args();
      args.ReqSeq = reqSeq;
      args.AttrBitset = attrBitset;
      args.Settings = settings;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public int recv_updateSettingsAttributes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateSettingsAttributes_result result = new updateSettingsAttributes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateSettingsAttributes failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_verifyIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password)
    {
      return send_verifyIdentityCredential(callback, state, identityProvider, identifier, password);
    }

    public void End_verifyIdentityCredential(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      recv_verifyIdentityCredential();
    }

    #endif

    public void verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_verifyIdentityCredential(null, null, identityProvider, identifier, password);
      End_verifyIdentityCredential(asyncResult);

      #else
      send_verifyIdentityCredential(identityProvider, identifier, password);
      recv_verifyIdentityCredential();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_verifyIdentityCredential(AsyncCallback callback, object state, IdentityProvider identityProvider, string identifier, string password)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.Call, seqid_));
      verifyIdentityCredential_args args = new verifyIdentityCredential_args();
      args.IdentityProvider = identityProvider;
      args.Identifier = identifier;
      args.Password = password;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_verifyIdentityCredential(IdentityProvider identityProvider, string identifier, string password)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.Call, seqid_));
      verifyIdentityCredential_args args = new verifyIdentityCredential_args();
      args.IdentityProvider = identityProvider;
      args.Identifier = identifier;
      args.Password = password;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public void recv_verifyIdentityCredential()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      verifyIdentityCredential_result result = new verifyIdentityCredential_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.e) {
        throw result.E;
      }
      return;
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_verifyIdentityCredentialWithResult(AsyncCallback callback, object state, IdentityCredential identityCredential)
    {
      return send_verifyIdentityCredentialWithResult(callback, state, identityCredential);
    }

    public UserAuthStatus End_verifyIdentityCredentialWithResult(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_verifyIdentityCredentialWithResult();
    }

    #endif

    public UserAuthStatus verifyIdentityCredentialWithResult(IdentityCredential identityCredential)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_verifyIdentityCredentialWithResult(null, null, identityCredential);
      return End_verifyIdentityCredentialWithResult(asyncResult);

      #else
      send_verifyIdentityCredentialWithResult(identityCredential);
      return recv_verifyIdentityCredentialWithResult();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_verifyIdentityCredentialWithResult(AsyncCallback callback, object state, IdentityCredential identityCredential)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.Call, seqid_));
      verifyIdentityCredentialWithResult_args args = new verifyIdentityCredentialWithResult_args();
      args.IdentityCredential = identityCredential;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_verifyIdentityCredentialWithResult(IdentityCredential identityCredential)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.Call, seqid_));
      verifyIdentityCredentialWithResult_args args = new verifyIdentityCredentialWithResult_args();
      args.IdentityCredential = identityCredential;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public UserAuthStatus recv_verifyIdentityCredentialWithResult()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      verifyIdentityCredentialWithResult_result result = new verifyIdentityCredentialWithResult_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyIdentityCredentialWithResult failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_verifyPhone(AsyncCallback callback, object state, string sessionId, string pinCode, string udidHash)
    {
      return send_verifyPhone(callback, state, sessionId, pinCode, udidHash);
    }

    public VerificationResult End_verifyPhone(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_verifyPhone();
    }

    #endif

    public VerificationResult verifyPhone(string sessionId, string pinCode, string udidHash)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_verifyPhone(null, null, sessionId, pinCode, udidHash);
      return End_verifyPhone(asyncResult);

      #else
      send_verifyPhone(sessionId, pinCode, udidHash);
      return recv_verifyPhone();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_verifyPhone(AsyncCallback callback, object state, string sessionId, string pinCode, string udidHash)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyPhone", TMessageType.Call, seqid_));
      verifyPhone_args args = new verifyPhone_args();
      args.SessionId = sessionId;
      args.PinCode = pinCode;
      args.UdidHash = udidHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_verifyPhone(string sessionId, string pinCode, string udidHash)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyPhone", TMessageType.Call, seqid_));
      verifyPhone_args args = new verifyPhone_args();
      args.SessionId = sessionId;
      args.PinCode = pinCode;
      args.UdidHash = udidHash;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public VerificationResult recv_verifyPhone()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      verifyPhone_result result = new verifyPhone_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyPhone failed: unknown result");
    }

    
    #if SILVERLIGHT
    
    public IAsyncResult Begin_verifyQrcode(AsyncCallback callback, object state, string verifier, string pinCode)
    {
      return send_verifyQrcode(callback, state, verifier, pinCode);
    }

    public string End_verifyQrcode(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_verifyQrcode();
    }

    #endif

    public string verifyQrcode(string verifier, string pinCode)
    {
      #if SILVERLIGHT
      var asyncResult = Begin_verifyQrcode(null, null, verifier, pinCode);
      return End_verifyQrcode(asyncResult);

      #else
      send_verifyQrcode(verifier, pinCode);
      return recv_verifyQrcode();

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_verifyQrcode(AsyncCallback callback, object state, string verifier, string pinCode)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyQrcode", TMessageType.Call, seqid_));
      verifyQrcode_args args = new verifyQrcode_args();
      args.Verifier = verifier;
      args.PinCode = pinCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      return oprot_.Transport.BeginFlush(callback, state);
    }

    #else

    public void send_verifyQrcode(string verifier, string pinCode)
    {
      oprot_.WriteMessageBegin(new TMessage("verifyQrcode", TMessageType.Call, seqid_));
      verifyQrcode_args args = new verifyQrcode_args();
      args.Verifier = verifier;
      args.PinCode = pinCode;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      oprot_.Transport.Flush();
    }
    #endif

    public string recv_verifyQrcode()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      verifyQrcode_result result = new verifyQrcode_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "verifyQrcode failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getChatRoomAnnouncementsBulk"] = getChatRoomAnnouncementsBulk_Process;
      processMap_["getChatRoomAnnouncements"] = getChatRoomAnnouncements_Process;
      processMap_["createChatRoomAnnouncement"] = createChatRoomAnnouncement_Process;
      processMap_["removeChatRoomAnnouncement"] = removeChatRoomAnnouncement_Process;
      processMap_["unsendMessage"] = unsendMessage_Process;
      processMap_["getGroupWithoutMembers"] = getGroupWithoutMembers_Process;
      processMap_["requestResendMessage"] = requestResendMessage_Process;
      processMap_["respondResendMessage"] = respondResendMessage_Process;
      processMap_["acceptGroupInvitation"] = acceptGroupInvitation_Process;
      processMap_["acceptGroupInvitationByTicket"] = acceptGroupInvitationByTicket_Process;
      processMap_["acceptProximityMatches"] = acceptProximityMatches_Process;
      processMap_["acquireCallRoute"] = acquireCallRoute_Process;
      processMap_["acquireCallTicket"] = acquireCallTicket_Process;
      processMap_["acquireEncryptedAccessToken"] = acquireEncryptedAccessToken_Process;
      processMap_["addSnsId"] = addSnsId_Process;
      processMap_["blockContact"] = blockContact_Process;
      processMap_["blockRecommendation"] = blockRecommendation_Process;
      processMap_["cancelGroupInvitation"] = cancelGroupInvitation_Process;
      processMap_["changeVerificationMethod"] = changeVerificationMethod_Process;
      processMap_["clearIdentityCredential"] = clearIdentityCredential_Process;
      processMap_["clearMessageBox"] = clearMessageBox_Process;
      processMap_["closeProximityMatch"] = closeProximityMatch_Process;
      processMap_["commitSendMessage"] = commitSendMessage_Process;
      processMap_["commitSendMessages"] = commitSendMessages_Process;
      processMap_["commitUpdateProfile"] = commitUpdateProfile_Process;
      processMap_["confirmEmail"] = confirmEmail_Process;
      processMap_["createGroup"] = createGroup_Process;
      processMap_["createQrcodeBase64Image"] = createQrcodeBase64Image_Process;
      processMap_["createRoom"] = createRoom_Process;
      processMap_["createSession"] = createSession_Process;
      processMap_["fetchAnnouncements"] = fetchAnnouncements_Process;
      processMap_["fetchMessages"] = fetchMessages_Process;
      processMap_["fetchOperations"] = fetchOperations_Process;
      processMap_["fetchOps"] = fetchOps_Process;
      processMap_["findAndAddContactsByEmail"] = findAndAddContactsByEmail_Process;
      processMap_["findAndAddContactsByMid"] = findAndAddContactsByMid_Process;
      processMap_["findGroupByTicketV2"] = findGroupByTicketV2_Process;
      processMap_["findAndAddContactsByPhone"] = findAndAddContactsByPhone_Process;
      processMap_["getFriendRequests"] = getFriendRequests_Process;
      processMap_["removeFriendRequest"] = removeFriendRequest_Process;
      processMap_["findAndAddContactsByUserid"] = findAndAddContactsByUserid_Process;
      processMap_["findContactByUserid"] = findContactByUserid_Process;
      processMap_["findContactByUserTicket"] = findContactByUserTicket_Process;
      processMap_["findContactsByEmail"] = findContactsByEmail_Process;
      processMap_["findContactsByPhone"] = findContactsByPhone_Process;
      processMap_["findSnsIdUserStatus"] = findSnsIdUserStatus_Process;
      processMap_["finishUpdateVerification"] = finishUpdateVerification_Process;
      processMap_["generateUserTicket"] = generateUserTicket_Process;
      processMap_["destroyMessage"] = destroyMessage_Process;
      processMap_["getAcceptedProximityMatches"] = getAcceptedProximityMatches_Process;
      processMap_["getActiveBuddySubscriberIds"] = getActiveBuddySubscriberIds_Process;
      processMap_["getAllContactIds"] = getAllContactIds_Process;
      processMap_["getAuthQrcode"] = getAuthQrcode_Process;
      processMap_["getBlockedContactIds"] = getBlockedContactIds_Process;
      processMap_["registerWithPhoneNumber"] = registerWithPhoneNumber_Process;
      processMap_["registerWithPhoneNumberAndPassword"] = registerWithPhoneNumberAndPassword_Process;
      processMap_["getAnalyticsInfo"] = getAnalyticsInfo_Process;
      processMap_["reportClientStatistics"] = reportClientStatistics_Process;
      processMap_["verifyPhoneNumberForLogin"] = verifyPhoneNumberForLogin_Process;
      processMap_["verifyPhoneNumber"] = verifyPhoneNumber_Process;
      processMap_["getBlockedContactIdsByRange"] = getBlockedContactIdsByRange_Process;
      processMap_["getBlockedRecommendationIds"] = getBlockedRecommendationIds_Process;
      processMap_["getBuddyBlockerIds"] = getBuddyBlockerIds_Process;
      processMap_["getBuddyLocation"] = getBuddyLocation_Process;
      processMap_["getCompactContactsModifiedSince"] = getCompactContactsModifiedSince_Process;
      processMap_["getCompactGroup"] = getCompactGroup_Process;
      processMap_["getCompactRoom"] = getCompactRoom_Process;
      processMap_["getContact"] = getContact_Process;
      processMap_["getContacts"] = getContacts_Process;
      processMap_["getContactWithFriendRequestStatus"] = getContactWithFriendRequestStatus_Process;
      processMap_["getCountryWithRequestIp"] = getCountryWithRequestIp_Process;
      processMap_["getFavoriteMids"] = getFavoriteMids_Process;
      processMap_["getGroup"] = getGroup_Process;
      processMap_["getGroupIdsInvited"] = getGroupIdsInvited_Process;
      processMap_["getGroupIdsJoined"] = getGroupIdsJoined_Process;
      processMap_["getGroups"] = getGroups_Process;
      processMap_["getHiddenContactMids"] = getHiddenContactMids_Process;
      processMap_["getIdentityIdentifier"] = getIdentityIdentifier_Process;
      processMap_["getLastAnnouncementIndex"] = getLastAnnouncementIndex_Process;
      processMap_["getLastOpRevision"] = getLastOpRevision_Process;
      processMap_["getSuggestRevisions"] = getSuggestRevisions_Process;
      processMap_["getPreviousMessagesV2WithReadCount"] = getPreviousMessagesV2WithReadCount_Process;
      processMap_["getMessageBox"] = getMessageBox_Process;
      processMap_["getMessageBoxCompactWrapUp"] = getMessageBoxCompactWrapUp_Process;
      processMap_["getMessageBoxCompactWrapUpList"] = getMessageBoxCompactWrapUpList_Process;
      processMap_["getMessageBoxList"] = getMessageBoxList_Process;
      processMap_["getMessageBoxListByStatus"] = getMessageBoxListByStatus_Process;
      processMap_["getMessageBoxWrapUp"] = getMessageBoxWrapUp_Process;
      processMap_["getMessageBoxWrapUpList"] = getMessageBoxWrapUpList_Process;
      processMap_["getMessagesBySequenceNumber"] = getMessagesBySequenceNumber_Process;
      processMap_["getNextMessages"] = getNextMessages_Process;
      processMap_["getNotificationPolicy"] = getNotificationPolicy_Process;
      processMap_["getPreviousMessages"] = getPreviousMessages_Process;
      processMap_["getProfile"] = getProfile_Process;
      processMap_["getProximityMatchCandidateList"] = getProximityMatchCandidateList_Process;
      processMap_["getProximityMatchCandidates"] = getProximityMatchCandidates_Process;
      processMap_["getRecentMessages"] = getRecentMessages_Process;
      processMap_["getRecommendationIds"] = getRecommendationIds_Process;
      processMap_["getRoom"] = getRoom_Process;
      processMap_["getRSAKeyInfo"] = getRSAKeyInfo_Process;
      processMap_["getServerTime"] = getServerTime_Process;
      processMap_["getSessions"] = getSessions_Process;
      processMap_["getSettings"] = getSettings_Process;
      processMap_["getGroupsV2"] = getGroupsV2_Process;
      processMap_["getSettingsAttributes"] = getSettingsAttributes_Process;
      processMap_["getSystemConfiguration"] = getSystemConfiguration_Process;
      processMap_["getUserTicket"] = getUserTicket_Process;
      processMap_["getWapInvitation"] = getWapInvitation_Process;
      processMap_["invalidateUserTicket"] = invalidateUserTicket_Process;
      processMap_["inviteFriendsBySms"] = inviteFriendsBySms_Process;
      processMap_["inviteIntoGroup"] = inviteIntoGroup_Process;
      processMap_["inviteIntoRoom"] = inviteIntoRoom_Process;
      processMap_["inviteViaEmail"] = inviteViaEmail_Process;
      processMap_["isIdentityIdentifierAvailable"] = isIdentityIdentifierAvailable_Process;
      processMap_["isUseridAvailable"] = isUseridAvailable_Process;
      processMap_["kickoutFromGroup"] = kickoutFromGroup_Process;
      processMap_["reissueGroupTicket"] = reissueGroupTicket_Process;
      processMap_["findGroupByTicket"] = findGroupByTicket_Process;
      processMap_["leaveGroup"] = leaveGroup_Process;
      processMap_["leaveRoom"] = leaveRoom_Process;
      processMap_["loginWithIdentityCredential"] = loginWithIdentityCredential_Process;
      processMap_["loginWithIdentityCredentialForCertificate"] = loginWithIdentityCredentialForCertificate_Process;
      processMap_["loginWithVerifier"] = loginWithVerifier_Process;
      processMap_["loginWithVerifierForCerificate"] = loginWithVerifierForCerificate_Process;
      processMap_["loginWithVerifierForCertificate"] = loginWithVerifierForCertificate_Process;
      processMap_["logout"] = logout_Process;
      processMap_["logoutSession"] = logoutSession_Process;
      processMap_["noop"] = noop_Process;
      processMap_["notifiedRedirect"] = notifiedRedirect_Process;
      processMap_["notifyBuddyOnAir"] = notifyBuddyOnAir_Process;
      processMap_["notifyIndividualEvent"] = notifyIndividualEvent_Process;
      processMap_["notifyInstalled"] = notifyInstalled_Process;
      processMap_["notifyRegistrationComplete"] = notifyRegistrationComplete_Process;
      processMap_["notifySleep"] = notifySleep_Process;
      processMap_["notifyUpdated"] = notifyUpdated_Process;
      processMap_["openProximityMatch"] = openProximityMatch_Process;
      processMap_["registerBuddyUser"] = registerBuddyUser_Process;
      processMap_["registerBuddyUserid"] = registerBuddyUserid_Process;
      processMap_["registerDevice"] = registerDevice_Process;
      processMap_["registerDeviceWithIdentityCredential"] = registerDeviceWithIdentityCredential_Process;
      processMap_["registerDeviceWithoutPhoneNumber"] = registerDeviceWithoutPhoneNumber_Process;
      processMap_["registerDeviceWithoutPhoneNumberWithIdentityCredential"] = registerDeviceWithoutPhoneNumberWithIdentityCredential_Process;
      processMap_["registerUserid"] = registerUserid_Process;
      processMap_["registerWapDevice"] = registerWapDevice_Process;
      processMap_["registerWithExistingSnsIdAndIdentityCredential"] = registerWithExistingSnsIdAndIdentityCredential_Process;
      processMap_["registerWithSnsId"] = registerWithSnsId_Process;
      processMap_["registerWithSnsIdAndIdentityCredential"] = registerWithSnsIdAndIdentityCredential_Process;
      processMap_["reissueDeviceCredential"] = reissueDeviceCredential_Process;
      processMap_["reissueUserTicket"] = reissueUserTicket_Process;
      processMap_["getMessageReadRange"] = getMessageReadRange_Process;
      processMap_["rejectGroupInvitation"] = rejectGroupInvitation_Process;
      processMap_["releaseSession"] = releaseSession_Process;
      processMap_["removeAllMessages"] = removeAllMessages_Process;
      processMap_["removeBuddyLocation"] = removeBuddyLocation_Process;
      processMap_["removeMessage"] = removeMessage_Process;
      processMap_["makeUserAddMyselfAsContact"] = makeUserAddMyselfAsContact_Process;
      processMap_["removeMessageFromMyHome"] = removeMessageFromMyHome_Process;
      processMap_["removeSnsId"] = removeSnsId_Process;
      processMap_["report"] = report_Process;
      processMap_["reportContacts"] = reportContacts_Process;
      processMap_["reportGroups"] = reportGroups_Process;
      processMap_["reportProfile"] = reportProfile_Process;
      processMap_["reportRooms"] = reportRooms_Process;
      processMap_["findAndAddContactByMetaTag"] = findAndAddContactByMetaTag_Process;
      processMap_["reportSettings"] = reportSettings_Process;
      processMap_["reportSpam"] = reportSpam_Process;
      processMap_["reportSpammer"] = reportSpammer_Process;
      processMap_["requestAccountPasswordReset"] = requestAccountPasswordReset_Process;
      processMap_["requestEmailConfirmation"] = requestEmailConfirmation_Process;
      processMap_["requestIdentityUnbind"] = requestIdentityUnbind_Process;
      processMap_["resendEmailConfirmation"] = resendEmailConfirmation_Process;
      processMap_["resendPinCode"] = resendPinCode_Process;
      processMap_["resendPinCodeBySMS"] = resendPinCodeBySMS_Process;
      processMap_["sendChatChecked"] = sendChatChecked_Process;
      processMap_["sendMessageAwaitCommit"] = sendMessageAwaitCommit_Process;
      processMap_["sendChatRemoved"] = sendChatRemoved_Process;
      processMap_["sendContentPreviewUpdated"] = sendContentPreviewUpdated_Process;
      processMap_["sendContentReceipt"] = sendContentReceipt_Process;
      processMap_["sendDummyPush"] = sendDummyPush_Process;
      processMap_["removeE2EEPublicKey"] = removeE2EEPublicKey_Process;
      processMap_["negotiateE2EEPublicKey"] = negotiateE2EEPublicKey_Process;
      processMap_["getE2EEPublicKey"] = getE2EEPublicKey_Process;
      processMap_["requestE2EEKeyExchange"] = requestE2EEKeyExchange_Process;
      processMap_["getLastE2EEPublicKeys"] = getLastE2EEPublicKeys_Process;
      processMap_["registerE2EEPublicKey"] = registerE2EEPublicKey_Process;
      processMap_["getE2EEPublicKeys"] = getE2EEPublicKeys_Process;
      processMap_["getE2EEPublicKeysEx"] = getE2EEPublicKeysEx_Process;
      processMap_["getReadMessageOpsInBulk"] = getReadMessageOpsInBulk_Process;
      processMap_["sendEvent"] = sendEvent_Process;
      processMap_["sendMessage"] = sendMessage_Process;
      processMap_["sendMessageIgnored"] = sendMessageIgnored_Process;
      processMap_["sendMessageReceipt"] = sendMessageReceipt_Process;
      processMap_["findContactByMetaTag"] = findContactByMetaTag_Process;
      processMap_["sendMessageToMyHome"] = sendMessageToMyHome_Process;
      processMap_["setBuddyLocation"] = setBuddyLocation_Process;
      processMap_["setIdentityCredential"] = setIdentityCredential_Process;
      processMap_["setNotificationsEnabled"] = setNotificationsEnabled_Process;
      processMap_["startUpdateVerification"] = startUpdateVerification_Process;
      processMap_["startVerification"] = startVerification_Process;
      processMap_["updateGroupPreferenceAttribute"] = updateGroupPreferenceAttribute_Process;
      processMap_["createRoomV2"] = createRoomV2_Process;
      processMap_["storeUpdateProfileAttribute"] = storeUpdateProfileAttribute_Process;
      processMap_["syncContactBySnsIds"] = syncContactBySnsIds_Process;
      processMap_["syncContacts"] = syncContacts_Process;
      processMap_["trySendMessage"] = trySendMessage_Process;
      processMap_["getNextMessagesV2"] = getNextMessagesV2_Process;
      processMap_["getMessageBoxCompactWrapUpV2"] = getMessageBoxCompactWrapUpV2_Process;
      processMap_["getRecentMessagesV2"] = getRecentMessagesV2_Process;
      processMap_["validateContactsOnBot"] = validateContactsOnBot_Process;
      processMap_["tryFriendRequest"] = tryFriendRequest_Process;
      processMap_["unblockContact"] = unblockContact_Process;
      processMap_["unblockRecommendation"] = unblockRecommendation_Process;
      processMap_["unregisterUserAndDevice"] = unregisterUserAndDevice_Process;
      processMap_["updateApnsDeviceToken"] = updateApnsDeviceToken_Process;
      processMap_["updateBuddySetting"] = updateBuddySetting_Process;
      processMap_["updateC2DMRegistrationId"] = updateC2DMRegistrationId_Process;
      processMap_["updateContactSetting"] = updateContactSetting_Process;
      processMap_["updateCustomModeSettings"] = updateCustomModeSettings_Process;
      processMap_["updateDeviceInfo"] = updateDeviceInfo_Process;
      processMap_["updateGroup"] = updateGroup_Process;
      processMap_["updateNotificationToken"] = updateNotificationToken_Process;
      processMap_["updateNotificationTokenWithBytes"] = updateNotificationTokenWithBytes_Process;
      processMap_["updateProfile"] = updateProfile_Process;
      processMap_["updateProfileAttribute"] = updateProfileAttribute_Process;
      processMap_["updateRegion"] = updateRegion_Process;
      processMap_["updateSettings"] = updateSettings_Process;
      processMap_["updateSettings2"] = updateSettings2_Process;
      processMap_["updateSettingsAttribute"] = updateSettingsAttribute_Process;
      processMap_["updateSettingsAttributes"] = updateSettingsAttributes_Process;
      processMap_["verifyIdentityCredential"] = verifyIdentityCredential_Process;
      processMap_["verifyIdentityCredentialWithResult"] = verifyIdentityCredentialWithResult_Process;
      processMap_["verifyPhone"] = verifyPhone_Process;
      processMap_["verifyQrcode"] = verifyQrcode_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getChatRoomAnnouncementsBulk_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getChatRoomAnnouncementsBulk_args args = new getChatRoomAnnouncementsBulk_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getChatRoomAnnouncementsBulk_result result = new getChatRoomAnnouncementsBulk_result();
      try
      {
        try
        {
          result.Success = iface_.getChatRoomAnnouncementsBulk(args.ChatRoomMids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getChatRoomAnnouncementsBulk", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getChatRoomAnnouncements_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getChatRoomAnnouncements_args args = new getChatRoomAnnouncements_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getChatRoomAnnouncements_result result = new getChatRoomAnnouncements_result();
      try
      {
        try
        {
          result.Success = iface_.getChatRoomAnnouncements(args.ChatRoomMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getChatRoomAnnouncements", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createChatRoomAnnouncement_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createChatRoomAnnouncement_args args = new createChatRoomAnnouncement_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createChatRoomAnnouncement_result result = new createChatRoomAnnouncement_result();
      try
      {
        try
        {
          result.Success = iface_.createChatRoomAnnouncement(args.ReqSeq, args.ChatRoomMid, args.Type, args.Contents);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createChatRoomAnnouncement", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeChatRoomAnnouncement_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeChatRoomAnnouncement_args args = new removeChatRoomAnnouncement_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeChatRoomAnnouncement_result result = new removeChatRoomAnnouncement_result();
      try
      {
        try
        {
          iface_.removeChatRoomAnnouncement(args.ReqSeq, args.ChatRoomMid, args.AnnouncementSeq);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeChatRoomAnnouncement", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void unsendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unsendMessage_args args = new unsendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unsendMessage_result result = new unsendMessage_result();
      try
      {
        try
        {
          iface_.unsendMessage(args.Seq, args.MessageId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("unsendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("unsendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupWithoutMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupWithoutMembers_args args = new getGroupWithoutMembers_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupWithoutMembers_result result = new getGroupWithoutMembers_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupWithoutMembers(args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupWithoutMembers", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void requestResendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      requestResendMessage_args args = new requestResendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      requestResendMessage_result result = new requestResendMessage_result();
      try
      {
        try
        {
          iface_.requestResendMessage(args.ReqSeq, args.SenderMid, args.MessageId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestResendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("requestResendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void respondResendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      respondResendMessage_args args = new respondResendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      respondResendMessage_result result = new respondResendMessage_result();
      try
      {
        try
        {
          iface_.respondResendMessage(args.ReqSeq, args.ReceiverMid, args.OriginalMessageId, args.ResendMessage, args.ErrorCode);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("respondResendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("respondResendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void acceptGroupInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      acceptGroupInvitation_args args = new acceptGroupInvitation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      acceptGroupInvitation_result result = new acceptGroupInvitation_result();
      try
      {
        try
        {
          iface_.acceptGroupInvitation(args.ReqSeq, args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("acceptGroupInvitation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void acceptGroupInvitationByTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      acceptGroupInvitationByTicket_args args = new acceptGroupInvitationByTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      acceptGroupInvitationByTicket_result result = new acceptGroupInvitationByTicket_result();
      try
      {
        try
        {
          iface_.acceptGroupInvitationByTicket(args.ReqSeq, args.GroupMid, args.TicketId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("acceptGroupInvitationByTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void acceptProximityMatches_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      acceptProximityMatches_args args = new acceptProximityMatches_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      acceptProximityMatches_result result = new acceptProximityMatches_result();
      try
      {
        try
        {
          iface_.acceptProximityMatches(args.SessionId, args.Ids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acceptProximityMatches", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("acceptProximityMatches", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void acquireCallRoute_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      acquireCallRoute_args args = new acquireCallRoute_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      acquireCallRoute_result result = new acquireCallRoute_result();
      try
      {
        try
        {
          result.Success = iface_.acquireCallRoute(args.To);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acquireCallRoute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("acquireCallRoute", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void acquireCallTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      acquireCallTicket_args args = new acquireCallTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      acquireCallTicket_result result = new acquireCallTicket_result();
      try
      {
        try
        {
          result.Success = iface_.acquireCallTicket(args.To);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acquireCallTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("acquireCallTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void acquireEncryptedAccessToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      acquireEncryptedAccessToken_args args = new acquireEncryptedAccessToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      acquireEncryptedAccessToken_result result = new acquireEncryptedAccessToken_result();
      try
      {
        try
        {
          result.Success = iface_.acquireEncryptedAccessToken(args.FeatureType);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("acquireEncryptedAccessToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addSnsId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addSnsId_args args = new addSnsId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addSnsId_result result = new addSnsId_result();
      try
      {
        try
        {
          result.Success = iface_.addSnsId(args.SnsIdType, args.SnsAccessToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("addSnsId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addSnsId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void blockContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      blockContact_args args = new blockContact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      blockContact_result result = new blockContact_result();
      try
      {
        try
        {
          iface_.blockContact(args.ReqSeq, args.Id);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("blockContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("blockContact", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void blockRecommendation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      blockRecommendation_args args = new blockRecommendation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      blockRecommendation_result result = new blockRecommendation_result();
      try
      {
        try
        {
          iface_.blockRecommendation(args.ReqSeq, args.Id);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("blockRecommendation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("blockRecommendation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void cancelGroupInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      cancelGroupInvitation_args args = new cancelGroupInvitation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      cancelGroupInvitation_result result = new cancelGroupInvitation_result();
      try
      {
        try
        {
          iface_.cancelGroupInvitation(args.ReqSeq, args.GroupId, args.ContactIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("cancelGroupInvitation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void changeVerificationMethod_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      changeVerificationMethod_args args = new changeVerificationMethod_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      changeVerificationMethod_result result = new changeVerificationMethod_result();
      try
      {
        try
        {
          result.Success = iface_.changeVerificationMethod(args.SessionId, args.Method);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("changeVerificationMethod", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("changeVerificationMethod", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void clearIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      clearIdentityCredential_args args = new clearIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      clearIdentityCredential_result result = new clearIdentityCredential_result();
      try
      {
        try
        {
          iface_.clearIdentityCredential();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("clearIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("clearIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void clearMessageBox_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      clearMessageBox_args args = new clearMessageBox_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      clearMessageBox_result result = new clearMessageBox_result();
      try
      {
        try
        {
          iface_.clearMessageBox(args.ChannelId, args.MessageBoxId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("clearMessageBox", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("clearMessageBox", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void closeProximityMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      closeProximityMatch_args args = new closeProximityMatch_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      closeProximityMatch_result result = new closeProximityMatch_result();
      try
      {
        try
        {
          iface_.closeProximityMatch(args.SessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("closeProximityMatch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("closeProximityMatch", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void commitSendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      commitSendMessage_args args = new commitSendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      commitSendMessage_result result = new commitSendMessage_result();
      try
      {
        try
        {
          result.Success = iface_.commitSendMessage(args.Seq, args.MessageId, args.ReceiverMids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("commitSendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("commitSendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void commitSendMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      commitSendMessages_args args = new commitSendMessages_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      commitSendMessages_result result = new commitSendMessages_result();
      try
      {
        try
        {
          result.Success = iface_.commitSendMessages(args.Seq, args.MessageIds, args.ReceiverMids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("commitSendMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("commitSendMessages", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void commitUpdateProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      commitUpdateProfile_args args = new commitUpdateProfile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      commitUpdateProfile_result result = new commitUpdateProfile_result();
      try
      {
        try
        {
          result.Success = iface_.commitUpdateProfile(args.Seq, args.Attrs, args.ReceiverMids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("commitUpdateProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("commitUpdateProfile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void confirmEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      confirmEmail_args args = new confirmEmail_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      confirmEmail_result result = new confirmEmail_result();
      try
      {
        try
        {
          iface_.confirmEmail(args.Verifier, args.PinCode);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("confirmEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("confirmEmail", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createGroup_args args = new createGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createGroup_result result = new createGroup_result();
      try
      {
        try
        {
          result.Success = iface_.createGroup(args.Seq, args.Name, args.ContactIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createQrcodeBase64Image_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createQrcodeBase64Image_args args = new createQrcodeBase64Image_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createQrcodeBase64Image_result result = new createQrcodeBase64Image_result();
      try
      {
        try
        {
          result.Success = iface_.createQrcodeBase64Image(args.Url, args.CharacterSet, args.ImageSize, args.X, args.Y, args.Width, args.Height);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createQrcodeBase64Image", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createRoom_args args = new createRoom_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createRoom_result result = new createRoom_result();
      try
      {
        try
        {
          result.Success = iface_.createRoom(args.ReqSeq, args.ContactIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createRoom", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createSession_args args = new createSession_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createSession_result result = new createSession_result();
      try
      {
        try
        {
          result.Success = iface_.createSession();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createSession", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fetchAnnouncements_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchAnnouncements_args args = new fetchAnnouncements_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchAnnouncements_result result = new fetchAnnouncements_result();
      try
      {
        try
        {
          result.Success = iface_.fetchAnnouncements(args.LastFetchedIndex);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchAnnouncements", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchAnnouncements", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fetchMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchMessages_args args = new fetchMessages_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchMessages_result result = new fetchMessages_result();
      try
      {
        try
        {
          result.Success = iface_.fetchMessages(args.LocalTs, args.Count);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchMessages", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fetchOperations_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchOperations_args args = new fetchOperations_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchOperations_result result = new fetchOperations_result();
      try
      {
        try
        {
          result.Success = iface_.fetchOperations(args.LocalRev, args.Count);
        }
        catch (ShouldSyncException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchOperations", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchOperations", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void fetchOps_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchOps_args args = new fetchOps_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchOps_result result = new fetchOps_result();
      try
      {
        try
        {
          result.Success = iface_.fetchOps(args.LocalRev, args.Count, args.GlobalRev, args.IndividualRev);
        }
        catch (ShouldSyncException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchOps", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchOps", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findAndAddContactsByEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findAndAddContactsByEmail_args args = new findAndAddContactsByEmail_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findAndAddContactsByEmail_result result = new findAndAddContactsByEmail_result();
      try
      {
        try
        {
          result.Success = iface_.findAndAddContactsByEmail(args.ReqSeq, args.Emails);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByEmail", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findAndAddContactsByMid_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findAndAddContactsByMid_args args = new findAndAddContactsByMid_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findAndAddContactsByMid_result result = new findAndAddContactsByMid_result();
      try
      {
        try
        {
          result.Success = iface_.findAndAddContactsByMid(args.ReqSeq, args.Mid, args.Type, args.Reference);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByMid", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findGroupByTicketV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findGroupByTicketV2_args args = new findGroupByTicketV2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findGroupByTicketV2_result result = new findGroupByTicketV2_result();
      try
      {
        try
        {
          result.Success = iface_.findGroupByTicketV2(args.TicketId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findGroupByTicketV2", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findAndAddContactsByPhone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findAndAddContactsByPhone_args args = new findAndAddContactsByPhone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findAndAddContactsByPhone_result result = new findAndAddContactsByPhone_result();
      try
      {
        try
        {
          result.Success = iface_.findAndAddContactsByPhone(args.ReqSeq, args.Phones);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByPhone", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFriendRequests_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFriendRequests_args args = new getFriendRequests_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFriendRequests_result result = new getFriendRequests_result();
      try
      {
        try
        {
          result.Success = iface_.getFriendRequests(args.Direction, args.LastSeenSeqId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getFriendRequests", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFriendRequests", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeFriendRequest_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeFriendRequest_args args = new removeFriendRequest_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeFriendRequest_result result = new removeFriendRequest_result();
      try
      {
        try
        {
          iface_.removeFriendRequest(args.Direction, args.MidOrEMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeFriendRequest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeFriendRequest", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findAndAddContactsByUserid_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findAndAddContactsByUserid_args args = new findAndAddContactsByUserid_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findAndAddContactsByUserid_result result = new findAndAddContactsByUserid_result();
      try
      {
        try
        {
          result.Success = iface_.findAndAddContactsByUserid(args.ReqSeq, args.Userid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findAndAddContactsByUserid", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findContactByUserid_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findContactByUserid_args args = new findContactByUserid_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findContactByUserid_result result = new findContactByUserid_result();
      try
      {
        try
        {
          result.Success = iface_.findContactByUserid(args.Userid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactByUserid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findContactByUserid", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findContactByUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findContactByUserTicket_args args = new findContactByUserTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findContactByUserTicket_result result = new findContactByUserTicket_result();
      try
      {
        try
        {
          result.Success = iface_.findContactByUserTicket(args.TicketIdWithTag);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactByUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findContactByUserTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findContactsByEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findContactsByEmail_args args = new findContactsByEmail_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findContactsByEmail_result result = new findContactsByEmail_result();
      try
      {
        try
        {
          result.Success = iface_.findContactsByEmail(args.Emails);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactsByEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findContactsByEmail", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findContactsByPhone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findContactsByPhone_args args = new findContactsByPhone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findContactsByPhone_result result = new findContactsByPhone_result();
      try
      {
        try
        {
          result.Success = iface_.findContactsByPhone(args.Phones);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactsByPhone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findContactsByPhone", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findSnsIdUserStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findSnsIdUserStatus_args args = new findSnsIdUserStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findSnsIdUserStatus_result result = new findSnsIdUserStatus_result();
      try
      {
        try
        {
          result.Success = iface_.findSnsIdUserStatus(args.SnsIdType, args.SnsAccessToken, args.UdidHash);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findSnsIdUserStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void finishUpdateVerification_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      finishUpdateVerification_args args = new finishUpdateVerification_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      finishUpdateVerification_result result = new finishUpdateVerification_result();
      try
      {
        try
        {
          iface_.finishUpdateVerification(args.SessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("finishUpdateVerification", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("finishUpdateVerification", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void generateUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      generateUserTicket_args args = new generateUserTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      generateUserTicket_result result = new generateUserTicket_result();
      try
      {
        try
        {
          result.Success = iface_.generateUserTicket(args.ExpirationTime, args.MaxUseCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("generateUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("generateUserTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void destroyMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      destroyMessage_args args = new destroyMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      destroyMessage_result result = new destroyMessage_result();
      try
      {
        try
        {
          iface_.destroyMessage(args.Seq, args.ChatId, args.MessageId, args.SessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("destroyMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("destroyMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAcceptedProximityMatches_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAcceptedProximityMatches_args args = new getAcceptedProximityMatches_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAcceptedProximityMatches_result result = new getAcceptedProximityMatches_result();
      try
      {
        try
        {
          result.Success = iface_.getAcceptedProximityMatches(args.SessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAcceptedProximityMatches", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getActiveBuddySubscriberIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getActiveBuddySubscriberIds_args args = new getActiveBuddySubscriberIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getActiveBuddySubscriberIds_result result = new getActiveBuddySubscriberIds_result();
      try
      {
        try
        {
          result.Success = iface_.getActiveBuddySubscriberIds();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getActiveBuddySubscriberIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAllContactIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllContactIds_args args = new getAllContactIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllContactIds_result result = new getAllContactIds_result();
      try
      {
        try
        {
          result.Success = iface_.getAllContactIds();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAllContactIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAllContactIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAuthQrcode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAuthQrcode_args args = new getAuthQrcode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAuthQrcode_result result = new getAuthQrcode_result();
      try
      {
        try
        {
          result.Success = iface_.getAuthQrcode(args.KeepLoggedIn, args.SystemName);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAuthQrcode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAuthQrcode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getBlockedContactIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBlockedContactIds_args args = new getBlockedContactIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBlockedContactIds_result result = new getBlockedContactIds_result();
      try
      {
        try
        {
          result.Success = iface_.getBlockedContactIds();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBlockedContactIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getBlockedContactIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerWithPhoneNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerWithPhoneNumber_args args = new registerWithPhoneNumber_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerWithPhoneNumber_result result = new registerWithPhoneNumber_result();
      try
      {
        try
        {
          result.Success = iface_.registerWithPhoneNumber(args.SessionId, args.MigrationPincodeSessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerWithPhoneNumber", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerWithPhoneNumberAndPassword_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerWithPhoneNumberAndPassword_args args = new registerWithPhoneNumberAndPassword_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerWithPhoneNumberAndPassword_result result = new registerWithPhoneNumberAndPassword_result();
      try
      {
        try
        {
          result.Success = iface_.registerWithPhoneNumberAndPassword(args.SessionId, args.Keynm, args.Encrypted);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerWithPhoneNumberAndPassword", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAnalyticsInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAnalyticsInfo_args args = new getAnalyticsInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAnalyticsInfo_result result = new getAnalyticsInfo_result();
      try
      {
        try
        {
          result.Success = iface_.getAnalyticsInfo();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAnalyticsInfo", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportClientStatistics_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportClientStatistics_args args = new reportClientStatistics_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportClientStatistics_result result = new reportClientStatistics_result();
      try
      {
        try
        {
          iface_.reportClientStatistics(args.ReqSeq, args.Category, args.Count);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportClientStatistics", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportClientStatistics", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void verifyPhoneNumberForLogin_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      verifyPhoneNumberForLogin_args args = new verifyPhoneNumberForLogin_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      verifyPhoneNumberForLogin_result result = new verifyPhoneNumberForLogin_result();
      try
      {
        try
        {
          result.Success = iface_.verifyPhoneNumberForLogin(args.VerifierFromPhone, args.PinCodeForPhone, args.VerifierFromLogin);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("verifyPhoneNumberForLogin", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void verifyPhoneNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      verifyPhoneNumber_args args = new verifyPhoneNumber_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      verifyPhoneNumber_result result = new verifyPhoneNumber_result();
      try
      {
        try
        {
          result.Success = iface_.verifyPhoneNumber(args.SessionId, args.PinCode, args.UdidHash, args.MigrationPincodeSessionId, args.OldUdidHash);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("verifyPhoneNumber", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getBlockedContactIdsByRange_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBlockedContactIdsByRange_args args = new getBlockedContactIdsByRange_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBlockedContactIdsByRange_result result = new getBlockedContactIdsByRange_result();
      try
      {
        try
        {
          result.Success = iface_.getBlockedContactIdsByRange(args.Start, args.Count);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getBlockedContactIdsByRange", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getBlockedRecommendationIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBlockedRecommendationIds_args args = new getBlockedRecommendationIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBlockedRecommendationIds_result result = new getBlockedRecommendationIds_result();
      try
      {
        try
        {
          result.Success = iface_.getBlockedRecommendationIds();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getBlockedRecommendationIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getBuddyBlockerIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBuddyBlockerIds_args args = new getBuddyBlockerIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBuddyBlockerIds_result result = new getBuddyBlockerIds_result();
      try
      {
        try
        {
          result.Success = iface_.getBuddyBlockerIds();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getBuddyBlockerIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getBuddyLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getBuddyLocation_args args = new getBuddyLocation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getBuddyLocation_result result = new getBuddyLocation_result();
      try
      {
        try
        {
          result.Success = iface_.getBuddyLocation(args.Mid, args.Index);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getBuddyLocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getBuddyLocation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCompactContactsModifiedSince_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCompactContactsModifiedSince_args args = new getCompactContactsModifiedSince_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCompactContactsModifiedSince_result result = new getCompactContactsModifiedSince_result();
      try
      {
        try
        {
          result.Success = iface_.getCompactContactsModifiedSince(args.Timestamp);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCompactContactsModifiedSince", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCompactGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCompactGroup_args args = new getCompactGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCompactGroup_result result = new getCompactGroup_result();
      try
      {
        try
        {
          result.Success = iface_.getCompactGroup(args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCompactGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCompactGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCompactRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCompactRoom_args args = new getCompactRoom_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCompactRoom_result result = new getCompactRoom_result();
      try
      {
        try
        {
          result.Success = iface_.getCompactRoom(args.RoomId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCompactRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCompactRoom", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getContact_args args = new getContact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getContact_result result = new getContact_result();
      try
      {
        try
        {
          result.Success = iface_.getContact(args.Id);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getContact", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getContacts_args args = new getContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getContacts_result result = new getContacts_result();
      try
      {
        try
        {
          result.Success = iface_.getContacts(args.Ids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getContactWithFriendRequestStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getContactWithFriendRequestStatus_args args = new getContactWithFriendRequestStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getContactWithFriendRequestStatus_result result = new getContactWithFriendRequestStatus_result();
      try
      {
        try
        {
          result.Success = iface_.getContactWithFriendRequestStatus(args.Id);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getContactWithFriendRequestStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getCountryWithRequestIp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getCountryWithRequestIp_args args = new getCountryWithRequestIp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getCountryWithRequestIp_result result = new getCountryWithRequestIp_result();
      try
      {
        try
        {
          result.Success = iface_.getCountryWithRequestIp();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getCountryWithRequestIp", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFavoriteMids_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFavoriteMids_args args = new getFavoriteMids_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFavoriteMids_result result = new getFavoriteMids_result();
      try
      {
        try
        {
          result.Success = iface_.getFavoriteMids();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getFavoriteMids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFavoriteMids", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroup_args args = new getGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroup_result result = new getGroup_result();
      try
      {
        try
        {
          result.Success = iface_.getGroup(args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupIdsInvited_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupIdsInvited_args args = new getGroupIdsInvited_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupIdsInvited_result result = new getGroupIdsInvited_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupIdsInvited();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupIdsInvited", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupIdsJoined_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupIdsJoined_args args = new getGroupIdsJoined_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupIdsJoined_result result = new getGroupIdsJoined_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupIdsJoined();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupIdsJoined", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroups_args args = new getGroups_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroups_result result = new getGroups_result();
      try
      {
        try
        {
          result.Success = iface_.getGroups(args.GroupIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroups", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getHiddenContactMids_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getHiddenContactMids_args args = new getHiddenContactMids_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getHiddenContactMids_result result = new getHiddenContactMids_result();
      try
      {
        try
        {
          result.Success = iface_.getHiddenContactMids();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getHiddenContactMids", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getHiddenContactMids", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getIdentityIdentifier_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getIdentityIdentifier_args args = new getIdentityIdentifier_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getIdentityIdentifier_result result = new getIdentityIdentifier_result();
      try
      {
        try
        {
          result.Success = iface_.getIdentityIdentifier();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getIdentityIdentifier", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getLastAnnouncementIndex_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getLastAnnouncementIndex_args args = new getLastAnnouncementIndex_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getLastAnnouncementIndex_result result = new getLastAnnouncementIndex_result();
      try
      {
        try
        {
          result.Success = iface_.getLastAnnouncementIndex();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getLastAnnouncementIndex", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getLastOpRevision_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getLastOpRevision_args args = new getLastOpRevision_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getLastOpRevision_result result = new getLastOpRevision_result();
      try
      {
        try
        {
          result.Success = iface_.getLastOpRevision();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getLastOpRevision", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getLastOpRevision", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSuggestRevisions_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSuggestRevisions_args args = new getSuggestRevisions_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSuggestRevisions_result result = new getSuggestRevisions_result();
      try
      {
        try
        {
          result.Success = iface_.getSuggestRevisions();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSuggestRevisions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSuggestRevisions", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPreviousMessagesV2WithReadCount_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPreviousMessagesV2WithReadCount_args args = new getPreviousMessagesV2WithReadCount_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPreviousMessagesV2WithReadCount_result result = new getPreviousMessagesV2WithReadCount_result();
      try
      {
        try
        {
          result.Success = iface_.getPreviousMessagesV2WithReadCount(args.MessageBoxId, args.EndMessageId, args.MessagesCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPreviousMessagesV2WithReadCount", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessageBox_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessageBox_args args = new getMessageBox_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessageBox_result result = new getMessageBox_result();
      try
      {
        try
        {
          result.Success = iface_.getMessageBox(args.ChannelId, args.MessageBoxId, args.LastMessagesCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBox", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessageBox", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessageBoxCompactWrapUp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessageBoxCompactWrapUp_args args = new getMessageBoxCompactWrapUp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessageBoxCompactWrapUp_result result = new getMessageBoxCompactWrapUp_result();
      try
      {
        try
        {
          result.Success = iface_.getMessageBoxCompactWrapUp(args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUp", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessageBoxCompactWrapUpList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessageBoxCompactWrapUpList_args args = new getMessageBoxCompactWrapUpList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessageBoxCompactWrapUpList_result result = new getMessageBoxCompactWrapUpList_result();
      try
      {
        try
        {
          result.Success = iface_.getMessageBoxCompactWrapUpList(args.Start, args.MessageBoxCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessageBoxList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessageBoxList_args args = new getMessageBoxList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessageBoxList_result result = new getMessageBoxList_result();
      try
      {
        try
        {
          result.Success = iface_.getMessageBoxList(args.ChannelId, args.LastMessagesCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessageBoxList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessageBoxListByStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessageBoxListByStatus_args args = new getMessageBoxListByStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessageBoxListByStatus_result result = new getMessageBoxListByStatus_result();
      try
      {
        try
        {
          result.Success = iface_.getMessageBoxListByStatus(args.ChannelId, args.LastMessagesCount, args.Status);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessageBoxListByStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessageBoxWrapUp_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessageBoxWrapUp_args args = new getMessageBoxWrapUp_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessageBoxWrapUp_result result = new getMessageBoxWrapUp_result();
      try
      {
        try
        {
          result.Success = iface_.getMessageBoxWrapUp(args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessageBoxWrapUp", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessageBoxWrapUpList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessageBoxWrapUpList_args args = new getMessageBoxWrapUpList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessageBoxWrapUpList_result result = new getMessageBoxWrapUpList_result();
      try
      {
        try
        {
          result.Success = iface_.getMessageBoxWrapUpList(args.Start, args.MessageBoxCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessageBoxWrapUpList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessagesBySequenceNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessagesBySequenceNumber_args args = new getMessagesBySequenceNumber_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessagesBySequenceNumber_result result = new getMessagesBySequenceNumber_result();
      try
      {
        try
        {
          result.Success = iface_.getMessagesBySequenceNumber(args.ChannelId, args.MessageBoxId, args.StartSeq, args.EndSeq);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessagesBySequenceNumber", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getNextMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getNextMessages_args args = new getNextMessages_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getNextMessages_result result = new getNextMessages_result();
      try
      {
        try
        {
          result.Success = iface_.getNextMessages(args.MessageBoxId, args.StartSeq, args.MessagesCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getNextMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getNextMessages", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getNotificationPolicy_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getNotificationPolicy_args args = new getNotificationPolicy_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getNotificationPolicy_result result = new getNotificationPolicy_result();
      try
      {
        try
        {
          result.Success = iface_.getNotificationPolicy(args.Carrier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getNotificationPolicy", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getNotificationPolicy", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPreviousMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPreviousMessages_args args = new getPreviousMessages_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPreviousMessages_result result = new getPreviousMessages_result();
      try
      {
        try
        {
          result.Success = iface_.getPreviousMessages(args.MessageBoxId, args.EndSeq, args.MessagesCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getPreviousMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPreviousMessages", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProfile_args args = new getProfile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProfile_result result = new getProfile_result();
      try
      {
        try
        {
          result.Success = iface_.getProfile();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProfile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProximityMatchCandidateList_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProximityMatchCandidateList_args args = new getProximityMatchCandidateList_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProximityMatchCandidateList_result result = new getProximityMatchCandidateList_result();
      try
      {
        try
        {
          result.Success = iface_.getProximityMatchCandidateList(args.SessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProximityMatchCandidateList", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProximityMatchCandidates_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProximityMatchCandidates_args args = new getProximityMatchCandidates_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProximityMatchCandidates_result result = new getProximityMatchCandidates_result();
      try
      {
        try
        {
          result.Success = iface_.getProximityMatchCandidates(args.SessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProximityMatchCandidates", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRecentMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRecentMessages_args args = new getRecentMessages_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRecentMessages_result result = new getRecentMessages_result();
      try
      {
        try
        {
          result.Success = iface_.getRecentMessages(args.MessageBoxId, args.MessagesCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRecentMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRecentMessages", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRecommendationIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRecommendationIds_args args = new getRecommendationIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRecommendationIds_result result = new getRecommendationIds_result();
      try
      {
        try
        {
          result.Success = iface_.getRecommendationIds();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRecommendationIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRecommendationIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRoom_args args = new getRoom_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRoom_result result = new getRoom_result();
      try
      {
        try
        {
          result.Success = iface_.getRoom(args.RoomId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRoom", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRSAKeyInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRSAKeyInfo_args args = new getRSAKeyInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRSAKeyInfo_result result = new getRSAKeyInfo_result();
      try
      {
        try
        {
          result.Success = iface_.getRSAKeyInfo(args.Provider);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRSAKeyInfo", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getServerTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getServerTime_args args = new getServerTime_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getServerTime_result result = new getServerTime_result();
      try
      {
        try
        {
          result.Success = iface_.getServerTime();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getServerTime", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getServerTime", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSessions_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSessions_args args = new getSessions_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSessions_result result = new getSessions_result();
      try
      {
        try
        {
          result.Success = iface_.getSessions();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSessions", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSessions", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSettings_args args = new getSettings_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSettings_result result = new getSettings_result();
      try
      {
        try
        {
          result.Success = iface_.getSettings();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSettings", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getGroupsV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getGroupsV2_args args = new getGroupsV2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getGroupsV2_result result = new getGroupsV2_result();
      try
      {
        try
        {
          result.Success = iface_.getGroupsV2(args.GroupIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getGroupsV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getGroupsV2", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSettingsAttributes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSettingsAttributes_args args = new getSettingsAttributes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSettingsAttributes_result result = new getSettingsAttributes_result();
      try
      {
        try
        {
          result.Success = iface_.getSettingsAttributes(args.AttrBitset);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSettingsAttributes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSettingsAttributes", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSystemConfiguration_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSystemConfiguration_args args = new getSystemConfiguration_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSystemConfiguration_result result = new getSystemConfiguration_result();
      try
      {
        try
        {
          result.Success = iface_.getSystemConfiguration();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getSystemConfiguration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSystemConfiguration", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getUserTicket_args args = new getUserTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getUserTicket_result result = new getUserTicket_result();
      try
      {
        try
        {
          result.Success = iface_.getUserTicket();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getUserTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getWapInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getWapInvitation_args args = new getWapInvitation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getWapInvitation_result result = new getWapInvitation_result();
      try
      {
        try
        {
          result.Success = iface_.getWapInvitation(args.InvitationHash);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getWapInvitation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getWapInvitation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void invalidateUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      invalidateUserTicket_args args = new invalidateUserTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      invalidateUserTicket_result result = new invalidateUserTicket_result();
      try
      {
        try
        {
          iface_.invalidateUserTicket();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("invalidateUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("invalidateUserTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void inviteFriendsBySms_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      inviteFriendsBySms_args args = new inviteFriendsBySms_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      inviteFriendsBySms_result result = new inviteFriendsBySms_result();
      try
      {
        try
        {
          iface_.inviteFriendsBySms(args.PhoneNumberList);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("inviteFriendsBySms", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void inviteIntoGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      inviteIntoGroup_args args = new inviteIntoGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      inviteIntoGroup_result result = new inviteIntoGroup_result();
      try
      {
        try
        {
          iface_.inviteIntoGroup(args.ReqSeq, args.GroupId, args.ContactIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteIntoGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("inviteIntoGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void inviteIntoRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      inviteIntoRoom_args args = new inviteIntoRoom_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      inviteIntoRoom_result result = new inviteIntoRoom_result();
      try
      {
        try
        {
          iface_.inviteIntoRoom(args.ReqSeq, args.RoomId, args.ContactIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteIntoRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("inviteIntoRoom", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void inviteViaEmail_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      inviteViaEmail_args args = new inviteViaEmail_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      inviteViaEmail_result result = new inviteViaEmail_result();
      try
      {
        try
        {
          iface_.inviteViaEmail(args.ReqSeq, args.Email, args.Name);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("inviteViaEmail", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("inviteViaEmail", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isIdentityIdentifierAvailable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isIdentityIdentifierAvailable_args args = new isIdentityIdentifierAvailable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isIdentityIdentifierAvailable_result result = new isIdentityIdentifierAvailable_result();
      try
      {
        try
        {
          result.Success = iface_.isIdentityIdentifierAvailable(args.Provider, args.Identifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isIdentityIdentifierAvailable", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void isUseridAvailable_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      isUseridAvailable_args args = new isUseridAvailable_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      isUseridAvailable_result result = new isUseridAvailable_result();
      try
      {
        try
        {
          result.Success = iface_.isUseridAvailable(args.Userid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("isUseridAvailable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("isUseridAvailable", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void kickoutFromGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      kickoutFromGroup_args args = new kickoutFromGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      kickoutFromGroup_result result = new kickoutFromGroup_result();
      try
      {
        try
        {
          iface_.kickoutFromGroup(args.ReqSeq, args.GroupId, args.ContactIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("kickoutFromGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("kickoutFromGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reissueGroupTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reissueGroupTicket_args args = new reissueGroupTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reissueGroupTicket_result result = new reissueGroupTicket_result();
      try
      {
        try
        {
          result.Success = iface_.reissueGroupTicket(args.GroupMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reissueGroupTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reissueGroupTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findGroupByTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findGroupByTicket_args args = new findGroupByTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findGroupByTicket_result result = new findGroupByTicket_result();
      try
      {
        try
        {
          result.Success = iface_.findGroupByTicket(args.TicketId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findGroupByTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findGroupByTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void leaveGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      leaveGroup_args args = new leaveGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      leaveGroup_result result = new leaveGroup_result();
      try
      {
        try
        {
          iface_.leaveGroup(args.ReqSeq, args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("leaveGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("leaveGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void leaveRoom_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      leaveRoom_args args = new leaveRoom_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      leaveRoom_result result = new leaveRoom_result();
      try
      {
        try
        {
          iface_.leaveRoom(args.ReqSeq, args.RoomId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("leaveRoom", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("leaveRoom", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loginWithIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loginWithIdentityCredential_args args = new loginWithIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loginWithIdentityCredential_result result = new loginWithIdentityCredential_result();
      try
      {
        try
        {
          result.Success = iface_.loginWithIdentityCredential(args.IdentityProvider, args.Identifier, args.Password, args.KeepLoggedIn, args.AccessLocation, args.SystemName, args.Certificate);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loginWithIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loginWithIdentityCredentialForCertificate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loginWithIdentityCredentialForCertificate_args args = new loginWithIdentityCredentialForCertificate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loginWithIdentityCredentialForCertificate_result result = new loginWithIdentityCredentialForCertificate_result();
      try
      {
        try
        {
          result.Success = iface_.loginWithIdentityCredentialForCertificate(args.IdentityProvider, args.Identifier, args.Password, args.KeepLoggedIn, args.AccessLocation, args.SystemName, args.Certificate);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loginWithIdentityCredentialForCertificate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loginWithVerifier_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loginWithVerifier_args args = new loginWithVerifier_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loginWithVerifier_result result = new loginWithVerifier_result();
      try
      {
        try
        {
          result.Success = iface_.loginWithVerifier(args.Verifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithVerifier", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loginWithVerifier", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loginWithVerifierForCerificate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loginWithVerifierForCerificate_args args = new loginWithVerifierForCerificate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loginWithVerifierForCerificate_result result = new loginWithVerifierForCerificate_result();
      try
      {
        try
        {
          result.Success = iface_.loginWithVerifierForCerificate(args.Verifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loginWithVerifierForCerificate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void loginWithVerifierForCertificate_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      loginWithVerifierForCertificate_args args = new loginWithVerifierForCertificate_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      loginWithVerifierForCertificate_result result = new loginWithVerifierForCertificate_result();
      try
      {
        try
        {
          result.Success = iface_.loginWithVerifierForCertificate(args.Verifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("loginWithVerifierForCertificate", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void logout_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      logout_args args = new logout_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      logout_result result = new logout_result();
      try
      {
        try
        {
          iface_.logout();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("logout", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void logoutSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      logoutSession_args args = new logoutSession_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      logoutSession_result result = new logoutSession_result();
      try
      {
        try
        {
          iface_.logoutSession(args.TokenKey);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("logoutSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("logoutSession", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void noop_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      noop_args args = new noop_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      noop_result result = new noop_result();
      try
      {
        try
        {
          iface_.noop();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("noop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("noop", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void notifiedRedirect_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      notifiedRedirect_args args = new notifiedRedirect_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      notifiedRedirect_result result = new notifiedRedirect_result();
      try
      {
        try
        {
          iface_.notifiedRedirect(args.ParamMap);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifiedRedirect", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("notifiedRedirect", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void notifyBuddyOnAir_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      notifyBuddyOnAir_args args = new notifyBuddyOnAir_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      notifyBuddyOnAir_result result = new notifyBuddyOnAir_result();
      try
      {
        try
        {
          result.Success = iface_.notifyBuddyOnAir(args.Seq, args.ReceiverMids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("notifyBuddyOnAir", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void notifyIndividualEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      notifyIndividualEvent_args args = new notifyIndividualEvent_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      notifyIndividualEvent_result result = new notifyIndividualEvent_result();
      try
      {
        try
        {
          iface_.notifyIndividualEvent(args.NotificationStatus, args.ReceiverMids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("notifyIndividualEvent", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void notifyInstalled_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      notifyInstalled_args args = new notifyInstalled_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      notifyInstalled_result result = new notifyInstalled_result();
      try
      {
        try
        {
          iface_.notifyInstalled(args.UdidHash, args.ApplicationTypeWithExtensions);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyInstalled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("notifyInstalled", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void notifyRegistrationComplete_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      notifyRegistrationComplete_args args = new notifyRegistrationComplete_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      notifyRegistrationComplete_result result = new notifyRegistrationComplete_result();
      try
      {
        try
        {
          iface_.notifyRegistrationComplete(args.UdidHash, args.ApplicationTypeWithExtensions);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("notifyRegistrationComplete", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void notifySleep_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      notifySleep_args args = new notifySleep_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      notifySleep_result result = new notifySleep_result();
      try
      {
        try
        {
          iface_.notifySleep(args.LastRev, args.Badge);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifySleep", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("notifySleep", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void notifyUpdated_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      notifyUpdated_args args = new notifyUpdated_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      notifyUpdated_result result = new notifyUpdated_result();
      try
      {
        try
        {
          iface_.notifyUpdated(args.LastRev, args.DeviceInfo);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("notifyUpdated", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("notifyUpdated", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void openProximityMatch_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      openProximityMatch_args args = new openProximityMatch_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      openProximityMatch_result result = new openProximityMatch_result();
      try
      {
        try
        {
          result.Success = iface_.openProximityMatch(args.Location);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("openProximityMatch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("openProximityMatch", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerBuddyUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerBuddyUser_args args = new registerBuddyUser_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerBuddyUser_result result = new registerBuddyUser_result();
      try
      {
        try
        {
          result.Success = iface_.registerBuddyUser(args.BuddyId, args.RegistrarPassword);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerBuddyUser", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerBuddyUser", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerBuddyUserid_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerBuddyUserid_args args = new registerBuddyUserid_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerBuddyUserid_result result = new registerBuddyUserid_result();
      try
      {
        try
        {
          iface_.registerBuddyUserid(args.Seq, args.Userid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerBuddyUserid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerBuddyUserid", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerDevice_args args = new registerDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerDevice_result result = new registerDevice_result();
      try
      {
        try
        {
          result.Success = iface_.registerDevice(args.SessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerDeviceWithIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerDeviceWithIdentityCredential_args args = new registerDeviceWithIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerDeviceWithIdentityCredential_result result = new registerDeviceWithIdentityCredential_result();
      try
      {
        try
        {
          result.Success = iface_.registerDeviceWithIdentityCredential(args.SessionId, args.Provider, args.Identifier, args.Verifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerDeviceWithIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerDeviceWithoutPhoneNumber_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerDeviceWithoutPhoneNumber_args args = new registerDeviceWithoutPhoneNumber_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerDeviceWithoutPhoneNumber_result result = new registerDeviceWithoutPhoneNumber_result();
      try
      {
        try
        {
          result.Success = iface_.registerDeviceWithoutPhoneNumber(args.Region, args.UdidHash, args.DeviceInfo);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumber", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerDeviceWithoutPhoneNumberWithIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerDeviceWithoutPhoneNumberWithIdentityCredential_args args = new registerDeviceWithoutPhoneNumberWithIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerDeviceWithoutPhoneNumberWithIdentityCredential_result result = new registerDeviceWithoutPhoneNumberWithIdentityCredential_result();
      try
      {
        try
        {
          result.Success = iface_.registerDeviceWithoutPhoneNumberWithIdentityCredential(args.Region, args.UdidHash, args.DeviceInfo, args.Provider, args.Identifier, args.Verifier, args.Mid, args.MigrationPincodeSessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerDeviceWithoutPhoneNumberWithIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerUserid_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerUserid_args args = new registerUserid_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerUserid_result result = new registerUserid_result();
      try
      {
        try
        {
          result.Success = iface_.registerUserid(args.ReqSeq, args.Userid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerUserid", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerUserid", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerWapDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerWapDevice_args args = new registerWapDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerWapDevice_result result = new registerWapDevice_result();
      try
      {
        try
        {
          result.Success = iface_.registerWapDevice(args.InvitationHash, args.GuidHash, args.Email, args.DeviceInfo);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWapDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerWapDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerWithExistingSnsIdAndIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerWithExistingSnsIdAndIdentityCredential_args args = new registerWithExistingSnsIdAndIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerWithExistingSnsIdAndIdentityCredential_result result = new registerWithExistingSnsIdAndIdentityCredential_result();
      try
      {
        try
        {
          result.Success = iface_.registerWithExistingSnsIdAndIdentityCredential(args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerWithExistingSnsIdAndIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerWithSnsId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerWithSnsId_args args = new registerWithSnsId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerWithSnsId_result result = new registerWithSnsId_result();
      try
      {
        try
        {
          result.Success = iface_.registerWithSnsId(args.SnsIdType, args.SnsAccessToken, args.Region, args.UdidHash, args.DeviceInfo, args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWithSnsId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerWithSnsId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerWithSnsIdAndIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerWithSnsIdAndIdentityCredential_args args = new registerWithSnsIdAndIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerWithSnsIdAndIdentityCredential_result result = new registerWithSnsIdAndIdentityCredential_result();
      try
      {
        try
        {
          result.Success = iface_.registerWithSnsIdAndIdentityCredential(args.SnsIdType, args.SnsAccessToken, args.IdentityCredential, args.Region, args.UdidHash, args.DeviceInfo);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerWithSnsIdAndIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reissueDeviceCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reissueDeviceCredential_args args = new reissueDeviceCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reissueDeviceCredential_result result = new reissueDeviceCredential_result();
      try
      {
        try
        {
          result.Success = iface_.reissueDeviceCredential();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reissueDeviceCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reissueUserTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reissueUserTicket_args args = new reissueUserTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reissueUserTicket_result result = new reissueUserTicket_result();
      try
      {
        try
        {
          result.Success = iface_.reissueUserTicket(args.ExpirationTime, args.MaxUseCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reissueUserTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reissueUserTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessageReadRange_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessageReadRange_args args = new getMessageReadRange_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessageReadRange_result result = new getMessageReadRange_result();
      try
      {
        try
        {
          result.Success = iface_.getMessageReadRange(args.ChatIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageReadRange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessageReadRange", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void rejectGroupInvitation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      rejectGroupInvitation_args args = new rejectGroupInvitation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      rejectGroupInvitation_result result = new rejectGroupInvitation_result();
      try
      {
        try
        {
          iface_.rejectGroupInvitation(args.ReqSeq, args.GroupId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("rejectGroupInvitation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void releaseSession_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      releaseSession_args args = new releaseSession_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      releaseSession_result result = new releaseSession_result();
      try
      {
        try
        {
          iface_.releaseSession();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("releaseSession", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("releaseSession", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeAllMessages_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeAllMessages_args args = new removeAllMessages_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeAllMessages_result result = new removeAllMessages_result();
      try
      {
        try
        {
          iface_.removeAllMessages(args.Seq, args.LastMessageId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeAllMessages", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeAllMessages", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeBuddyLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeBuddyLocation_args args = new removeBuddyLocation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeBuddyLocation_result result = new removeBuddyLocation_result();
      try
      {
        try
        {
          iface_.removeBuddyLocation(args.Mid, args.Index);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeBuddyLocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeBuddyLocation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeMessage_args args = new removeMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeMessage_result result = new removeMessage_result();
      try
      {
        try
        {
          result.Success = iface_.removeMessage(args.MessageId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void makeUserAddMyselfAsContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      makeUserAddMyselfAsContact_args args = new makeUserAddMyselfAsContact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      makeUserAddMyselfAsContact_result result = new makeUserAddMyselfAsContact_result();
      try
      {
        try
        {
          result.Success = iface_.makeUserAddMyselfAsContact(args.ContactOwnerMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("makeUserAddMyselfAsContact", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeMessageFromMyHome_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeMessageFromMyHome_args args = new removeMessageFromMyHome_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeMessageFromMyHome_result result = new removeMessageFromMyHome_result();
      try
      {
        try
        {
          result.Success = iface_.removeMessageFromMyHome(args.MessageId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeMessageFromMyHome", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeSnsId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeSnsId_args args = new removeSnsId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeSnsId_result result = new removeSnsId_result();
      try
      {
        try
        {
          result.Success = iface_.removeSnsId(args.SnsIdType);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeSnsId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeSnsId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void report_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      report_args args = new report_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      report_result result = new report_result();
      try
      {
        try
        {
          iface_.report(args.SyncOpRevision, args.Category, args.Report);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("report", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("report", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportContacts_args args = new reportContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportContacts_result result = new reportContacts_result();
      try
      {
        try
        {
          result.Success = iface_.reportContacts(args.SyncOpRevision, args.Category, args.ContactReports, args.ActionType);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportGroups_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportGroups_args args = new reportGroups_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportGroups_result result = new reportGroups_result();
      try
      {
        try
        {
          iface_.reportGroups(args.SyncOpRevision, args.Groups);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportGroups", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportGroups", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportProfile_args args = new reportProfile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportProfile_result result = new reportProfile_result();
      try
      {
        try
        {
          iface_.reportProfile(args.SyncOpRevision, args.Profile);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportProfile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportRooms_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportRooms_args args = new reportRooms_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportRooms_result result = new reportRooms_result();
      try
      {
        try
        {
          iface_.reportRooms(args.SyncOpRevision, args.Rooms);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportRooms", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportRooms", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findAndAddContactByMetaTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findAndAddContactByMetaTag_args args = new findAndAddContactByMetaTag_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findAndAddContactByMetaTag_result result = new findAndAddContactByMetaTag_result();
      try
      {
        try
        {
          result.Success = iface_.findAndAddContactByMetaTag(args.ReqSeq, args.Userid, args.Reference);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findAndAddContactByMetaTag", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportSettings_args args = new reportSettings_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportSettings_result result = new reportSettings_result();
      try
      {
        try
        {
          iface_.reportSettings(args.SyncOpRevision, args.Settings);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportSettings", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportSpam_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportSpam_args args = new reportSpam_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportSpam_result result = new reportSpam_result();
      try
      {
        try
        {
          iface_.reportSpam(args.ChatMid, args.MemberMids, args.SpammerReasons, args.SenderMids, args.SpamMessageIds, args.SpamMessages);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportSpam", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportSpam", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reportSpammer_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reportSpammer_args args = new reportSpammer_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reportSpammer_result result = new reportSpammer_result();
      try
      {
        try
        {
          iface_.reportSpammer(args.SpammerMid, args.SpammerReasons, args.SpamMessageIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("reportSpammer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reportSpammer", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void requestAccountPasswordReset_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      requestAccountPasswordReset_args args = new requestAccountPasswordReset_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      requestAccountPasswordReset_result result = new requestAccountPasswordReset_result();
      try
      {
        try
        {
          iface_.requestAccountPasswordReset(args.Provider, args.Identifier, args.Locale);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("requestAccountPasswordReset", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void requestEmailConfirmation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      requestEmailConfirmation_args args = new requestEmailConfirmation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      requestEmailConfirmation_result result = new requestEmailConfirmation_result();
      try
      {
        try
        {
          result.Success = iface_.requestEmailConfirmation(args.EmailConfirmation);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("requestEmailConfirmation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void requestIdentityUnbind_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      requestIdentityUnbind_args args = new requestIdentityUnbind_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      requestIdentityUnbind_result result = new requestIdentityUnbind_result();
      try
      {
        try
        {
          iface_.requestIdentityUnbind(args.Provider, args.Identifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("requestIdentityUnbind", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void resendEmailConfirmation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      resendEmailConfirmation_args args = new resendEmailConfirmation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      resendEmailConfirmation_result result = new resendEmailConfirmation_result();
      try
      {
        try
        {
          result.Success = iface_.resendEmailConfirmation(args.Verifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("resendEmailConfirmation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void resendPinCode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      resendPinCode_args args = new resendPinCode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      resendPinCode_result result = new resendPinCode_result();
      try
      {
        try
        {
          iface_.resendPinCode(args.SessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("resendPinCode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("resendPinCode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void resendPinCodeBySMS_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      resendPinCodeBySMS_args args = new resendPinCodeBySMS_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      resendPinCodeBySMS_result result = new resendPinCodeBySMS_result();
      try
      {
        try
        {
          iface_.resendPinCodeBySMS(args.SessionId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("resendPinCodeBySMS", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendChatChecked_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendChatChecked_args args = new sendChatChecked_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendChatChecked_result result = new sendChatChecked_result();
      try
      {
        try
        {
          iface_.sendChatChecked(args.Seq, args.Consumer, args.LastMessageId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendChatChecked", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendChatChecked", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessageAwaitCommit_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessageAwaitCommit_args args = new sendMessageAwaitCommit_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessageAwaitCommit_result result = new sendMessageAwaitCommit_result();
      try
      {
        try
        {
          result.Success = iface_.sendMessageAwaitCommit(args.Seq, args.Message);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessageAwaitCommit", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendChatRemoved_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendChatRemoved_args args = new sendChatRemoved_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendChatRemoved_result result = new sendChatRemoved_result();
      try
      {
        try
        {
          iface_.sendChatRemoved(args.Seq, args.Consumer, args.LastMessageId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendChatRemoved", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendChatRemoved", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendContentPreviewUpdated_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendContentPreviewUpdated_args args = new sendContentPreviewUpdated_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendContentPreviewUpdated_result result = new sendContentPreviewUpdated_result();
      try
      {
        try
        {
          result.Success = iface_.sendContentPreviewUpdated(args.Esq, args.MessageId, args.ReceiverMids);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendContentPreviewUpdated", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendContentReceipt_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendContentReceipt_args args = new sendContentReceipt_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendContentReceipt_result result = new sendContentReceipt_result();
      try
      {
        try
        {
          iface_.sendContentReceipt(args.Seq, args.Consumer, args.MessageId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendContentReceipt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendContentReceipt", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendDummyPush_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendDummyPush_args args = new sendDummyPush_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendDummyPush_result result = new sendDummyPush_result();
      try
      {
        try
        {
          iface_.sendDummyPush();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendDummyPush", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendDummyPush", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeE2EEPublicKey_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeE2EEPublicKey_args args = new removeE2EEPublicKey_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeE2EEPublicKey_result result = new removeE2EEPublicKey_result();
      try
      {
        try
        {
          iface_.removeE2EEPublicKey(args.PublicKey);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeE2EEPublicKey", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void negotiateE2EEPublicKey_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      negotiateE2EEPublicKey_args args = new negotiateE2EEPublicKey_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      negotiateE2EEPublicKey_result result = new negotiateE2EEPublicKey_result();
      try
      {
        try
        {
          result.Success = iface_.negotiateE2EEPublicKey(args.Mid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("negotiateE2EEPublicKey", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getE2EEPublicKey_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getE2EEPublicKey_args args = new getE2EEPublicKey_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getE2EEPublicKey_result result = new getE2EEPublicKey_result();
      try
      {
        try
        {
          result.Success = iface_.getE2EEPublicKey(args.Mid, args.Version, args.KeyId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getE2EEPublicKey", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void requestE2EEKeyExchange_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      requestE2EEKeyExchange_args args = new requestE2EEKeyExchange_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      requestE2EEKeyExchange_result result = new requestE2EEKeyExchange_result();
      try
      {
        try
        {
          iface_.requestE2EEKeyExchange(args.ReqSeq, args.TemporalPublicKey, args.PublicKey, args.Verifier);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("requestE2EEKeyExchange", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getLastE2EEPublicKeys_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getLastE2EEPublicKeys_args args = new getLastE2EEPublicKeys_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getLastE2EEPublicKeys_result result = new getLastE2EEPublicKeys_result();
      try
      {
        try
        {
          result.Success = iface_.getLastE2EEPublicKeys(args.ChatMid);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getLastE2EEPublicKeys", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void registerE2EEPublicKey_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      registerE2EEPublicKey_args args = new registerE2EEPublicKey_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      registerE2EEPublicKey_result result = new registerE2EEPublicKey_result();
      try
      {
        try
        {
          result.Success = iface_.registerE2EEPublicKey(args.ReqSeq, args.PublicKey);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("registerE2EEPublicKey", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getE2EEPublicKeys_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getE2EEPublicKeys_args args = new getE2EEPublicKeys_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getE2EEPublicKeys_result result = new getE2EEPublicKeys_result();
      try
      {
        try
        {
          result.Success = iface_.getE2EEPublicKeys();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getE2EEPublicKeys", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getE2EEPublicKeysEx_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getE2EEPublicKeysEx_args args = new getE2EEPublicKeysEx_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getE2EEPublicKeysEx_result result = new getE2EEPublicKeysEx_result();
      try
      {
        try
        {
          result.Success = iface_.getE2EEPublicKeysEx(args.IgnoreE2EEStatus);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getE2EEPublicKeysEx", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getReadMessageOpsInBulk_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getReadMessageOpsInBulk_args args = new getReadMessageOpsInBulk_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getReadMessageOpsInBulk_result result = new getReadMessageOpsInBulk_result();
      try
      {
        try
        {
          result.Success = iface_.getReadMessageOpsInBulk(args.ChatIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getReadMessageOpsInBulk", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendEvent_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendEvent_args args = new sendEvent_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendEvent_result result = new sendEvent_result();
      try
      {
        try
        {
          result.Success = iface_.sendEvent(args.Seq, args.Message);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendEvent", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendEvent", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessage_args args = new sendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessage_result result = new sendMessage_result();
      try
      {
        try
        {
          result.Success = iface_.sendMessage(args.Seq, args.Message);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessageIgnored_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessageIgnored_args args = new sendMessageIgnored_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessageIgnored_result result = new sendMessageIgnored_result();
      try
      {
        try
        {
          iface_.sendMessageIgnored(args.Seq, args.Consumer, args.MessageIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageIgnored", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessageIgnored", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessageReceipt_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessageReceipt_args args = new sendMessageReceipt_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessageReceipt_result result = new sendMessageReceipt_result();
      try
      {
        try
        {
          iface_.sendMessageReceipt(args.Seq, args.Consumer, args.MessageIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageReceipt", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessageReceipt", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void findContactByMetaTag_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      findContactByMetaTag_args args = new findContactByMetaTag_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      findContactByMetaTag_result result = new findContactByMetaTag_result();
      try
      {
        try
        {
          result.Success = iface_.findContactByMetaTag(args.Userid, args.Reference);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("findContactByMetaTag", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("findContactByMetaTag", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void sendMessageToMyHome_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      sendMessageToMyHome_args args = new sendMessageToMyHome_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      sendMessageToMyHome_result result = new sendMessageToMyHome_result();
      try
      {
        try
        {
          result.Success = iface_.sendMessageToMyHome(args.Seq, args.Message);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("sendMessageToMyHome", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setBuddyLocation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setBuddyLocation_args args = new setBuddyLocation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setBuddyLocation_result result = new setBuddyLocation_result();
      try
      {
        try
        {
          iface_.setBuddyLocation(args.Mid, args.Index, args.Location);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("setBuddyLocation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setBuddyLocation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setIdentityCredential_args args = new setIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setIdentityCredential_result result = new setIdentityCredential_result();
      try
      {
        try
        {
          iface_.setIdentityCredential(args.Identifier, args.Verifier, args.Provider);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("setIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void setNotificationsEnabled_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setNotificationsEnabled_args args = new setNotificationsEnabled_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setNotificationsEnabled_result result = new setNotificationsEnabled_result();
      try
      {
        try
        {
          iface_.setNotificationsEnabled(args.ReqSeq, args.Type, args.Target, args.Enablement);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setNotificationsEnabled", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void startUpdateVerification_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      startUpdateVerification_args args = new startUpdateVerification_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      startUpdateVerification_result result = new startUpdateVerification_result();
      try
      {
        try
        {
          result.Success = iface_.startUpdateVerification(args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Locale);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("startUpdateVerification", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("startUpdateVerification", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void startVerification_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      startVerification_args args = new startVerification_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      startVerification_result result = new startVerification_result();
      try
      {
        try
        {
          result.Success = iface_.startVerification(args.Region, args.Carrier, args.Phone, args.UdidHash, args.DeviceInfo, args.NetworkCode, args.Mid, args.Locale, args.SimInfo, args.OldUdidHash);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("startVerification", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("startVerification", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateGroupPreferenceAttribute_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateGroupPreferenceAttribute_args args = new updateGroupPreferenceAttribute_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateGroupPreferenceAttribute_result result = new updateGroupPreferenceAttribute_result();
      try
      {
        try
        {
          iface_.updateGroupPreferenceAttribute(args.ReqSeq, args.GroupMid, args.UpdatedAttrs);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateGroupPreferenceAttribute", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createRoomV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createRoomV2_args args = new createRoomV2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createRoomV2_result result = new createRoomV2_result();
      try
      {
        try
        {
          result.Success = iface_.createRoomV2(args.ReqSeq, args.ContactIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("createRoomV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createRoomV2", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void storeUpdateProfileAttribute_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      storeUpdateProfileAttribute_args args = new storeUpdateProfileAttribute_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      storeUpdateProfileAttribute_result result = new storeUpdateProfileAttribute_result();
      try
      {
        try
        {
          iface_.storeUpdateProfileAttribute(args.Seq, args.ProfileAttribute, args.Value);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("storeUpdateProfileAttribute", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void syncContactBySnsIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      syncContactBySnsIds_args args = new syncContactBySnsIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      syncContactBySnsIds_result result = new syncContactBySnsIds_result();
      try
      {
        try
        {
          result.Success = iface_.syncContactBySnsIds(args.ReqSeq, args.Modifications);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("syncContactBySnsIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void syncContacts_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      syncContacts_args args = new syncContacts_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      syncContacts_result result = new syncContacts_result();
      try
      {
        try
        {
          result.Success = iface_.syncContacts(args.ReqSeq, args.LocalContacts);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("syncContacts", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("syncContacts", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void trySendMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      trySendMessage_args args = new trySendMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      trySendMessage_result result = new trySendMessage_result();
      try
      {
        try
        {
          result.Success = iface_.trySendMessage(args.Seq, args.Message);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("trySendMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("trySendMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getNextMessagesV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getNextMessagesV2_args args = new getNextMessagesV2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getNextMessagesV2_result result = new getNextMessagesV2_result();
      try
      {
        try
        {
          result.Success = iface_.getNextMessagesV2(args.MessageBoxId, args.StartMessageId, args.MessagesCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getNextMessagesV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getNextMessagesV2", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getMessageBoxCompactWrapUpV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getMessageBoxCompactWrapUpV2_args args = new getMessageBoxCompactWrapUpV2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getMessageBoxCompactWrapUpV2_result result = new getMessageBoxCompactWrapUpV2_result();
      try
      {
        try
        {
          result.Success = iface_.getMessageBoxCompactWrapUpV2(args.MessageBoxId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getMessageBoxCompactWrapUpV2", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getRecentMessagesV2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getRecentMessagesV2_args args = new getRecentMessagesV2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getRecentMessagesV2_result result = new getRecentMessagesV2_result();
      try
      {
        try
        {
          result.Success = iface_.getRecentMessagesV2(args.MessageBoxId, args.MessagesCount);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getRecentMessagesV2", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void validateContactsOnBot_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      validateContactsOnBot_args args = new validateContactsOnBot_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      validateContactsOnBot_result result = new validateContactsOnBot_result();
      try
      {
        try
        {
          result.Success = iface_.validateContactsOnBot(args.Contacts);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("validateContactsOnBot", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("validateContactsOnBot", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void tryFriendRequest_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      tryFriendRequest_args args = new tryFriendRequest_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      tryFriendRequest_result result = new tryFriendRequest_result();
      try
      {
        try
        {
          iface_.tryFriendRequest(args.MidOrEMid, args.Method, args.FriendRequestParams);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("tryFriendRequest", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("tryFriendRequest", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void unblockContact_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unblockContact_args args = new unblockContact_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unblockContact_result result = new unblockContact_result();
      try
      {
        try
        {
          iface_.unblockContact(args.ReqSeq, args.Id);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("unblockContact", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("unblockContact", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void unblockRecommendation_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unblockRecommendation_args args = new unblockRecommendation_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unblockRecommendation_result result = new unblockRecommendation_result();
      try
      {
        try
        {
          iface_.unblockRecommendation(args.ReqSeq, args.Id);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("unblockRecommendation", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("unblockRecommendation", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void unregisterUserAndDevice_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      unregisterUserAndDevice_args args = new unregisterUserAndDevice_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      unregisterUserAndDevice_result result = new unregisterUserAndDevice_result();
      try
      {
        try
        {
          result.Success = iface_.unregisterUserAndDevice();
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("unregisterUserAndDevice", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateApnsDeviceToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateApnsDeviceToken_args args = new updateApnsDeviceToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateApnsDeviceToken_result result = new updateApnsDeviceToken_result();
      try
      {
        try
        {
          iface_.updateApnsDeviceToken(args.ApnsDeviceToken);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateApnsDeviceToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateBuddySetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateBuddySetting_args args = new updateBuddySetting_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateBuddySetting_result result = new updateBuddySetting_result();
      try
      {
        try
        {
          iface_.updateBuddySetting(args.Key, args.Value);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateBuddySetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateBuddySetting", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateC2DMRegistrationId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateC2DMRegistrationId_args args = new updateC2DMRegistrationId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateC2DMRegistrationId_result result = new updateC2DMRegistrationId_result();
      try
      {
        try
        {
          iface_.updateC2DMRegistrationId(args.RegistrationId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateC2DMRegistrationId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateContactSetting_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateContactSetting_args args = new updateContactSetting_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateContactSetting_result result = new updateContactSetting_result();
      try
      {
        try
        {
          iface_.updateContactSetting(args.ReqSeq, args.Mid, args.Flag, args.Value);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateContactSetting", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateContactSetting", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateCustomModeSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateCustomModeSettings_args args = new updateCustomModeSettings_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateCustomModeSettings_result result = new updateCustomModeSettings_result();
      try
      {
        try
        {
          iface_.updateCustomModeSettings(args.CustomMode, args.ParamMap);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateCustomModeSettings", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateDeviceInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateDeviceInfo_args args = new updateDeviceInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateDeviceInfo_result result = new updateDeviceInfo_result();
      try
      {
        try
        {
          iface_.updateDeviceInfo(args.DeviceUid, args.DeviceInfo);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateDeviceInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateDeviceInfo", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateGroup_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateGroup_args args = new updateGroup_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateGroup_result result = new updateGroup_result();
      try
      {
        try
        {
          iface_.updateGroup(args.ReqSeq, args.Group);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateGroup", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateGroup", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateNotificationToken_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateNotificationToken_args args = new updateNotificationToken_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateNotificationToken_result result = new updateNotificationToken_result();
      try
      {
        try
        {
          iface_.updateNotificationToken(args.Type, args.Token);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateNotificationToken", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateNotificationToken", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateNotificationTokenWithBytes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateNotificationTokenWithBytes_args args = new updateNotificationTokenWithBytes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateNotificationTokenWithBytes_result result = new updateNotificationTokenWithBytes_result();
      try
      {
        try
        {
          iface_.updateNotificationTokenWithBytes(args.Type, args.Token);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateNotificationTokenWithBytes", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateProfile_args args = new updateProfile_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateProfile_result result = new updateProfile_result();
      try
      {
        try
        {
          iface_.updateProfile(args.ReqSeq, args.Profile);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateProfile", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateProfileAttribute_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateProfileAttribute_args args = new updateProfileAttribute_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateProfileAttribute_result result = new updateProfileAttribute_result();
      try
      {
        try
        {
          iface_.updateProfileAttribute(args.ReqSeq, args.Attr, args.Value);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateProfileAttribute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateProfileAttribute", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateRegion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateRegion_args args = new updateRegion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateRegion_result result = new updateRegion_result();
      try
      {
        try
        {
          iface_.updateRegion(args.Region);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateRegion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateRegion", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSettings_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSettings_args args = new updateSettings_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSettings_result result = new updateSettings_result();
      try
      {
        try
        {
          iface_.updateSettings(args.ReqSeq, args.Settings);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSettings", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSettings", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSettings2_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSettings2_args args = new updateSettings2_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSettings2_result result = new updateSettings2_result();
      try
      {
        try
        {
          result.Success = iface_.updateSettings2(args.ReqSeq, args.Settings);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSettings2", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSettings2", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSettingsAttribute_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSettingsAttribute_args args = new updateSettingsAttribute_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSettingsAttribute_result result = new updateSettingsAttribute_result();
      try
      {
        try
        {
          iface_.updateSettingsAttribute(args.ReqSeq, args.Attr, args.Value);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSettingsAttribute", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateSettingsAttributes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateSettingsAttributes_args args = new updateSettingsAttributes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateSettingsAttributes_result result = new updateSettingsAttributes_result();
      try
      {
        try
        {
          result.Success = iface_.updateSettingsAttributes(args.ReqSeq, args.AttrBitset, args.Settings);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateSettingsAttributes", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void verifyIdentityCredential_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      verifyIdentityCredential_args args = new verifyIdentityCredential_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      verifyIdentityCredential_result result = new verifyIdentityCredential_result();
      try
      {
        try
        {
          iface_.verifyIdentityCredential(args.IdentityProvider, args.Identifier, args.Password);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("verifyIdentityCredential", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void verifyIdentityCredentialWithResult_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      verifyIdentityCredentialWithResult_args args = new verifyIdentityCredentialWithResult_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      verifyIdentityCredentialWithResult_result result = new verifyIdentityCredentialWithResult_result();
      try
      {
        try
        {
          result.Success = iface_.verifyIdentityCredentialWithResult(args.IdentityCredential);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("verifyIdentityCredentialWithResult", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void verifyPhone_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      verifyPhone_args args = new verifyPhone_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      verifyPhone_result result = new verifyPhone_result();
      try
      {
        try
        {
          result.Success = iface_.verifyPhone(args.SessionId, args.PinCode, args.UdidHash);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyPhone", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("verifyPhone", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void verifyQrcode_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      verifyQrcode_args args = new verifyQrcode_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      verifyQrcode_result result = new verifyQrcode_result();
      try
      {
        try
        {
          result.Success = iface_.verifyQrcode(args.Verifier, args.PinCode);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("verifyQrcode", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("verifyQrcode", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChatRoomAnnouncementsBulk_args : TBase
  {
    private List<string> _chatRoomMids;

    public List<string> ChatRoomMids
    {
      get
      {
        return _chatRoomMids;
      }
      set
      {
        __isset.chatRoomMids = true;
        this._chatRoomMids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatRoomMids;
    }

    public getChatRoomAnnouncementsBulk_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  ChatRoomMids = new List<string>();
                  TList _list765 = iprot.ReadListBegin();
                  for( int _i766 = 0; _i766 < _list765.Count; ++_i766)
                  {
                    string _elem767;
                    _elem767 = iprot.ReadString();
                    ChatRoomMids.Add(_elem767);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChatRoomAnnouncementsBulk_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatRoomMids != null && __isset.chatRoomMids) {
          field.Name = "chatRoomMids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ChatRoomMids.Count));
            foreach (string _iter768 in ChatRoomMids)
            {
              oprot.WriteString(_iter768);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChatRoomAnnouncementsBulk_args(");
      bool __first = true;
      if (ChatRoomMids != null && __isset.chatRoomMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatRoomMids: ");
        __sb.Append(ChatRoomMids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChatRoomAnnouncementsBulk_result : TBase
  {
    private Dictionary<string, List<ChatRoomAnnouncement>> _success;
    private TalkException _e;

    public Dictionary<string, List<ChatRoomAnnouncement>> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getChatRoomAnnouncementsBulk_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, List<ChatRoomAnnouncement>>();
                  TMap _map769 = iprot.ReadMapBegin();
                  for( int _i770 = 0; _i770 < _map769.Count; ++_i770)
                  {
                    string _key771;
                    List<ChatRoomAnnouncement> _val772;
                    _key771 = iprot.ReadString();
                    {
                      _val772 = new List<ChatRoomAnnouncement>();
                      TList _list773 = iprot.ReadListBegin();
                      for( int _i774 = 0; _i774 < _list773.Count; ++_i774)
                      {
                        ChatRoomAnnouncement _elem775;
                        _elem775 = new ChatRoomAnnouncement();
                        _elem775.Read(iprot);
                        _val772.Add(_elem775);
                      }
                      iprot.ReadListEnd();
                    }
                    Success[_key771] = _val772;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChatRoomAnnouncementsBulk_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.List, Success.Count));
              foreach (string _iter776 in Success.Keys)
              {
                oprot.WriteString(_iter776);
                {
                  oprot.WriteListBegin(new TList(TType.Struct, Success[_iter776].Count));
                  foreach (ChatRoomAnnouncement _iter777 in Success[_iter776])
                  {
                    _iter777.Write(oprot);
                  }
                  oprot.WriteListEnd();
                }
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChatRoomAnnouncementsBulk_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChatRoomAnnouncements_args : TBase
  {
    private string _chatRoomMid;

    public string ChatRoomMid
    {
      get
      {
        return _chatRoomMid;
      }
      set
      {
        __isset.chatRoomMid = true;
        this._chatRoomMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatRoomMid;
    }

    public getChatRoomAnnouncements_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChatRoomMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChatRoomAnnouncements_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatRoomMid != null && __isset.chatRoomMid) {
          field.Name = "chatRoomMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatRoomMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChatRoomAnnouncements_args(");
      bool __first = true;
      if (ChatRoomMid != null && __isset.chatRoomMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatRoomMid: ");
        __sb.Append(ChatRoomMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getChatRoomAnnouncements_result : TBase
  {
    private List<ChatRoomAnnouncement> _success;
    private TalkException _e;

    public List<ChatRoomAnnouncement> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getChatRoomAnnouncements_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ChatRoomAnnouncement>();
                  TList _list778 = iprot.ReadListBegin();
                  for( int _i779 = 0; _i779 < _list778.Count; ++_i779)
                  {
                    ChatRoomAnnouncement _elem780;
                    _elem780 = new ChatRoomAnnouncement();
                    _elem780.Read(iprot);
                    Success.Add(_elem780);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getChatRoomAnnouncements_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ChatRoomAnnouncement _iter781 in Success)
              {
                _iter781.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getChatRoomAnnouncements_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createChatRoomAnnouncement_args : TBase
  {
    private int _reqSeq;
    private string _chatRoomMid;
    private ChatRoomAnnouncementType _type;
    private ChatRoomAnnouncementContents _contents;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string ChatRoomMid
    {
      get
      {
        return _chatRoomMid;
      }
      set
      {
        __isset.chatRoomMid = true;
        this._chatRoomMid = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ChatRoomAnnouncementType"/>
    /// </summary>
    public ChatRoomAnnouncementType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public ChatRoomAnnouncementContents Contents
    {
      get
      {
        return _contents;
      }
      set
      {
        __isset.contents = true;
        this._contents = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool chatRoomMid;
      public bool type;
      public bool contents;
    }

    public createChatRoomAnnouncement_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ChatRoomMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = (ChatRoomAnnouncementType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Contents = new ChatRoomAnnouncementContents();
                Contents.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createChatRoomAnnouncement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (ChatRoomMid != null && __isset.chatRoomMid) {
          field.Name = "chatRoomMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatRoomMid);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        if (Contents != null && __isset.contents) {
          field.Name = "contents";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Contents.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createChatRoomAnnouncement_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (ChatRoomMid != null && __isset.chatRoomMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatRoomMid: ");
        __sb.Append(ChatRoomMid);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Contents != null && __isset.contents) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Contents: ");
        __sb.Append(Contents== null ? "<null>" : Contents.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createChatRoomAnnouncement_result : TBase
  {
    private ChatRoomAnnouncement _success;
    private TalkException _e;

    public ChatRoomAnnouncement Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createChatRoomAnnouncement_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ChatRoomAnnouncement();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createChatRoomAnnouncement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createChatRoomAnnouncement_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeChatRoomAnnouncement_args : TBase
  {
    private int _reqSeq;
    private string _chatRoomMid;
    private long _announcementSeq;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string ChatRoomMid
    {
      get
      {
        return _chatRoomMid;
      }
      set
      {
        __isset.chatRoomMid = true;
        this._chatRoomMid = value;
      }
    }

    public long AnnouncementSeq
    {
      get
      {
        return _announcementSeq;
      }
      set
      {
        __isset.announcementSeq = true;
        this._announcementSeq = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool chatRoomMid;
      public bool announcementSeq;
    }

    public removeChatRoomAnnouncement_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ChatRoomMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                AnnouncementSeq = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeChatRoomAnnouncement_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (ChatRoomMid != null && __isset.chatRoomMid) {
          field.Name = "chatRoomMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatRoomMid);
          oprot.WriteFieldEnd();
        }
        if (__isset.announcementSeq) {
          field.Name = "announcementSeq";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AnnouncementSeq);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeChatRoomAnnouncement_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (ChatRoomMid != null && __isset.chatRoomMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatRoomMid: ");
        __sb.Append(ChatRoomMid);
      }
      if (__isset.announcementSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AnnouncementSeq: ");
        __sb.Append(AnnouncementSeq);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeChatRoomAnnouncement_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public removeChatRoomAnnouncement_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeChatRoomAnnouncement_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeChatRoomAnnouncement_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unsendMessage_args : TBase
  {
    private int _seq;
    private string _messageId;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool messageId;
    }

    public unsendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unsendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unsendMessage_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (MessageId != null && __isset.messageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageId: ");
        __sb.Append(MessageId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unsendMessage_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public unsendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unsendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unsendMessage_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupWithoutMembers_args : TBase
  {
    private string _groupId;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
    }

    public getGroupWithoutMembers_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupWithoutMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupWithoutMembers_args(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupWithoutMembers_result : TBase
  {
    private @Group _success;
    private TalkException _e;

    public @Group Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupWithoutMembers_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new @Group();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupWithoutMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupWithoutMembers_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestResendMessage_args : TBase
  {
    private int _reqSeq;
    private string _senderMid;
    private string _messageId;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string SenderMid
    {
      get
      {
        return _senderMid;
      }
      set
      {
        __isset.senderMid = true;
        this._senderMid = value;
      }
    }

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool senderMid;
      public bool messageId;
    }

    public requestResendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                SenderMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestResendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (SenderMid != null && __isset.senderMid) {
          field.Name = "senderMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SenderMid);
          oprot.WriteFieldEnd();
        }
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestResendMessage_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (SenderMid != null && __isset.senderMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SenderMid: ");
        __sb.Append(SenderMid);
      }
      if (MessageId != null && __isset.messageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageId: ");
        __sb.Append(MessageId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestResendMessage_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public requestResendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestResendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestResendMessage_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class respondResendMessage_args : TBase
  {
    private int _reqSeq;
    private string _receiverMid;
    private string _originalMessageId;
    private Message _resendMessage;
    private ErrorCode _errorCode;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string ReceiverMid
    {
      get
      {
        return _receiverMid;
      }
      set
      {
        __isset.receiverMid = true;
        this._receiverMid = value;
      }
    }

    public string OriginalMessageId
    {
      get
      {
        return _originalMessageId;
      }
      set
      {
        __isset.originalMessageId = true;
        this._originalMessageId = value;
      }
    }

    public Message ResendMessage
    {
      get
      {
        return _resendMessage;
      }
      set
      {
        __isset.resendMessage = true;
        this._resendMessage = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ErrorCode"/>
    /// </summary>
    public ErrorCode ErrorCode
    {
      get
      {
        return _errorCode;
      }
      set
      {
        __isset.errorCode = true;
        this._errorCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool receiverMid;
      public bool originalMessageId;
      public bool resendMessage;
      public bool errorCode;
    }

    public respondResendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ReceiverMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                OriginalMessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                ResendMessage = new Message();
                ResendMessage.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                ErrorCode = (ErrorCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("respondResendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (ReceiverMid != null && __isset.receiverMid) {
          field.Name = "receiverMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ReceiverMid);
          oprot.WriteFieldEnd();
        }
        if (OriginalMessageId != null && __isset.originalMessageId) {
          field.Name = "originalMessageId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OriginalMessageId);
          oprot.WriteFieldEnd();
        }
        if (ResendMessage != null && __isset.resendMessage) {
          field.Name = "resendMessage";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          ResendMessage.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.errorCode) {
          field.Name = "errorCode";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ErrorCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("respondResendMessage_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (ReceiverMid != null && __isset.receiverMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReceiverMid: ");
        __sb.Append(ReceiverMid);
      }
      if (OriginalMessageId != null && __isset.originalMessageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OriginalMessageId: ");
        __sb.Append(OriginalMessageId);
      }
      if (ResendMessage != null && __isset.resendMessage) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ResendMessage: ");
        __sb.Append(ResendMessage== null ? "<null>" : ResendMessage.ToString());
      }
      if (__isset.errorCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ErrorCode: ");
        __sb.Append(ErrorCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class respondResendMessage_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public respondResendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("respondResendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("respondResendMessage_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acceptGroupInvitation_args : TBase
  {
    private int _reqSeq;
    private string _groupId;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool groupId;
    }

    public acceptGroupInvitation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acceptGroupInvitation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acceptGroupInvitation_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acceptGroupInvitation_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public acceptGroupInvitation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acceptGroupInvitation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acceptGroupInvitation_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acceptGroupInvitationByTicket_args : TBase
  {
    private int _reqSeq;
    private string _GroupMid;
    private string _ticketId;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string GroupMid
    {
      get
      {
        return _GroupMid;
      }
      set
      {
        __isset.GroupMid = true;
        this._GroupMid = value;
      }
    }

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool GroupMid;
      public bool ticketId;
    }

    public acceptGroupInvitationByTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acceptGroupInvitationByTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupMid != null && __isset.GroupMid) {
          field.Name = "GroupMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupMid);
          oprot.WriteFieldEnd();
        }
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acceptGroupInvitationByTicket_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (GroupMid != null && __isset.GroupMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupMid: ");
        __sb.Append(GroupMid);
      }
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acceptGroupInvitationByTicket_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public acceptGroupInvitationByTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acceptGroupInvitationByTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acceptGroupInvitationByTicket_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acceptProximityMatches_args : TBase
  {
    private string _sessionId;
    private THashSet<string> _ids;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public THashSet<string> Ids
    {
      get
      {
        return _ids;
      }
      set
      {
        __isset.ids = true;
        this._ids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool ids;
    }

    public acceptProximityMatches_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Set) {
                {
                  Ids = new THashSet<string>();
                  TSet _set782 = iprot.ReadSetBegin();
                  for( int _i783 = 0; _i783 < _set782.Count; ++_i783)
                  {
                    string _elem784;
                    _elem784 = iprot.ReadString();
                    Ids.Add(_elem784);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acceptProximityMatches_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (Ids != null && __isset.ids) {
          field.Name = "ids";
          field.Type = TType.Set;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Ids.Count));
            foreach (string _iter785 in Ids)
            {
              oprot.WriteString(_iter785);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acceptProximityMatches_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (Ids != null && __isset.ids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ids: ");
        __sb.Append(Ids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acceptProximityMatches_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public acceptProximityMatches_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acceptProximityMatches_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acceptProximityMatches_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquireCallRoute_args : TBase
  {
    private string _to;

    public string To
    {
      get
      {
        return _to;
      }
      set
      {
        __isset.to = true;
        this._to = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool to;
    }

    public acquireCallRoute_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                To = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquireCallRoute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (To != null && __isset.to) {
          field.Name = "to";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(To);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquireCallRoute_args(");
      bool __first = true;
      if (To != null && __isset.to) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("To: ");
        __sb.Append(To);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquireCallRoute_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public acquireCallRoute_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list786 = iprot.ReadListBegin();
                  for( int _i787 = 0; _i787 < _list786.Count; ++_i787)
                  {
                    string _elem788;
                    _elem788 = iprot.ReadString();
                    Success.Add(_elem788);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquireCallRoute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter789 in Success)
              {
                oprot.WriteString(_iter789);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquireCallRoute_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquireCallTicket_args : TBase
  {
    private string _to;

    public string To
    {
      get
      {
        return _to;
      }
      set
      {
        __isset.to = true;
        this._to = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool to;
    }

    public acquireCallTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                To = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquireCallTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (To != null && __isset.to) {
          field.Name = "to";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(To);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquireCallTicket_args(");
      bool __first = true;
      if (To != null && __isset.to) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("To: ");
        __sb.Append(To);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquireCallTicket_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public acquireCallTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquireCallTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquireCallTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquireEncryptedAccessToken_args : TBase
  {
    private FeatureType _featureType;

    /// <summary>
    /// 
    /// <seealso cref="FeatureType"/>
    /// </summary>
    public FeatureType FeatureType
    {
      get
      {
        return _featureType;
      }
      set
      {
        __isset.featureType = true;
        this._featureType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool featureType;
    }

    public acquireEncryptedAccessToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                FeatureType = (FeatureType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquireEncryptedAccessToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.featureType) {
          field.Name = "featureType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)FeatureType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquireEncryptedAccessToken_args(");
      bool __first = true;
      if (__isset.featureType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FeatureType: ");
        __sb.Append(FeatureType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class acquireEncryptedAccessToken_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public acquireEncryptedAccessToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("acquireEncryptedAccessToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("acquireEncryptedAccessToken_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addSnsId_args : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snsIdType;
      public bool snsAccessToken;
    }

    public addSnsId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addSnsId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addSnsId_args(");
      bool __first = true;
      if (__isset.snsIdType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsIdType: ");
        __sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsAccessToken: ");
        __sb.Append(SnsAccessToken);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addSnsId_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public addSnsId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addSnsId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addSnsId_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class blockContact_args : TBase
  {
    private int _reqSeq;
    private string _id;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool id;
    }

    public blockContact_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("blockContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("blockContact_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class blockContact_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public blockContact_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("blockContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("blockContact_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class blockRecommendation_args : TBase
  {
    private int _reqSeq;
    private string _id;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool id;
    }

    public blockRecommendation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("blockRecommendation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("blockRecommendation_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class blockRecommendation_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public blockRecommendation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("blockRecommendation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("blockRecommendation_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelGroupInvitation_args : TBase
  {
    private int _reqSeq;
    private string _groupId;
    private List<string> _contactIds;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }

    public List<string> ContactIds
    {
      get
      {
        return _contactIds;
      }
      set
      {
        __isset.contactIds = true;
        this._contactIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool groupId;
      public bool contactIds;
    }

    public cancelGroupInvitation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list790 = iprot.ReadListBegin();
                  for( int _i791 = 0; _i791 < _list790.Count; ++_i791)
                  {
                    string _elem792;
                    _elem792 = iprot.ReadString();
                    ContactIds.Add(_elem792);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cancelGroupInvitation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter793 in ContactIds)
            {
              oprot.WriteString(_iter793);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cancelGroupInvitation_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      if (ContactIds != null && __isset.contactIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactIds: ");
        __sb.Append(ContactIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelGroupInvitation_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public cancelGroupInvitation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cancelGroupInvitation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cancelGroupInvitation_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class changeVerificationMethod_args : TBase
  {
    private string _sessionId;
    private VerificationMethod _method;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="VerificationMethod"/>
    /// </summary>
    public VerificationMethod Method
    {
      get
      {
        return _method;
      }
      set
      {
        __isset.method = true;
        this._method = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool method;
    }

    public changeVerificationMethod_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Method = (VerificationMethod)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("changeVerificationMethod_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (__isset.method) {
          field.Name = "method";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Method);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("changeVerificationMethod_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (__isset.method) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Method: ");
        __sb.Append(Method);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class changeVerificationMethod_result : TBase
  {
    private VerificationSessionData _success;
    private TalkException _e;

    public VerificationSessionData Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public changeVerificationMethod_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new VerificationSessionData();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("changeVerificationMethod_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("changeVerificationMethod_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clearIdentityCredential_args : TBase
  {

    public clearIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("clearIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("clearIdentityCredential_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clearIdentityCredential_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public clearIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("clearIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("clearIdentityCredential_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clearMessageBox_args : TBase
  {
    private string _channelId;
    private string _messageBoxId;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool messageBoxId;
    }

    public clearMessageBox_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("clearMessageBox_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("clearMessageBox_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class clearMessageBox_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public clearMessageBox_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("clearMessageBox_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("clearMessageBox_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeProximityMatch_args : TBase
  {
    private string _sessionId;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public closeProximityMatch_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("closeProximityMatch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("closeProximityMatch_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class closeProximityMatch_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public closeProximityMatch_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("closeProximityMatch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("closeProximityMatch_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class commitSendMessage_args : TBase
  {
    private int _seq;
    private string _messageId;
    private List<string> _receiverMids;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }

    public List<string> ReceiverMids
    {
      get
      {
        return _receiverMids;
      }
      set
      {
        __isset.receiverMids = true;
        this._receiverMids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool messageId;
      public bool receiverMids;
    }

    public commitSendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list794 = iprot.ReadListBegin();
                  for( int _i795 = 0; _i795 < _list794.Count; ++_i795)
                  {
                    string _elem796;
                    _elem796 = iprot.ReadString();
                    ReceiverMids.Add(_elem796);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("commitSendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter797 in ReceiverMids)
            {
              oprot.WriteString(_iter797);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("commitSendMessage_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (MessageId != null && __isset.messageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageId: ");
        __sb.Append(MessageId);
      }
      if (ReceiverMids != null && __isset.receiverMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReceiverMids: ");
        __sb.Append(ReceiverMids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class commitSendMessage_result : TBase
  {
    private Dictionary<string, string> _success;
    private TalkException _e;

    public Dictionary<string, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public commitSendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map798 = iprot.ReadMapBegin();
                  for( int _i799 = 0; _i799 < _map798.Count; ++_i799)
                  {
                    string _key800;
                    string _val801;
                    _key800 = iprot.ReadString();
                    _val801 = iprot.ReadString();
                    Success[_key800] = _val801;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("commitSendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter802 in Success.Keys)
              {
                oprot.WriteString(_iter802);
                oprot.WriteString(Success[_iter802]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("commitSendMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class commitSendMessages_args : TBase
  {
    private int _seq;
    private List<string> _messageIds;
    private List<string> _receiverMids;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public List<string> MessageIds
    {
      get
      {
        return _messageIds;
      }
      set
      {
        __isset.messageIds = true;
        this._messageIds = value;
      }
    }

    public List<string> ReceiverMids
    {
      get
      {
        return _receiverMids;
      }
      set
      {
        __isset.receiverMids = true;
        this._receiverMids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool messageIds;
      public bool receiverMids;
    }

    public commitSendMessages_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  MessageIds = new List<string>();
                  TList _list803 = iprot.ReadListBegin();
                  for( int _i804 = 0; _i804 < _list803.Count; ++_i804)
                  {
                    string _elem805;
                    _elem805 = iprot.ReadString();
                    MessageIds.Add(_elem805);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list806 = iprot.ReadListBegin();
                  for( int _i807 = 0; _i807 < _list806.Count; ++_i807)
                  {
                    string _elem808;
                    _elem808 = iprot.ReadString();
                    ReceiverMids.Add(_elem808);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("commitSendMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (MessageIds != null && __isset.messageIds) {
          field.Name = "messageIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MessageIds.Count));
            foreach (string _iter809 in MessageIds)
            {
              oprot.WriteString(_iter809);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter810 in ReceiverMids)
            {
              oprot.WriteString(_iter810);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("commitSendMessages_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (MessageIds != null && __isset.messageIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageIds: ");
        __sb.Append(MessageIds);
      }
      if (ReceiverMids != null && __isset.receiverMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReceiverMids: ");
        __sb.Append(ReceiverMids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class commitSendMessages_result : TBase
  {
    private Dictionary<string, string> _success;
    private TalkException _e;

    public Dictionary<string, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public commitSendMessages_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map811 = iprot.ReadMapBegin();
                  for( int _i812 = 0; _i812 < _map811.Count; ++_i812)
                  {
                    string _key813;
                    string _val814;
                    _key813 = iprot.ReadString();
                    _val814 = iprot.ReadString();
                    Success[_key813] = _val814;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("commitSendMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter815 in Success.Keys)
              {
                oprot.WriteString(_iter815);
                oprot.WriteString(Success[_iter815]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("commitSendMessages_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class commitUpdateProfile_args : TBase
  {
    private int _seq;
    private List<ProfileAttribute> _attrs;
    private List<string> _receiverMids;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public List<ProfileAttribute> Attrs
    {
      get
      {
        return _attrs;
      }
      set
      {
        __isset.attrs = true;
        this._attrs = value;
      }
    }

    public List<string> ReceiverMids
    {
      get
      {
        return _receiverMids;
      }
      set
      {
        __isset.receiverMids = true;
        this._receiverMids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool attrs;
      public bool receiverMids;
    }

    public commitUpdateProfile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Attrs = new List<ProfileAttribute>();
                  TList _list816 = iprot.ReadListBegin();
                  for( int _i817 = 0; _i817 < _list816.Count; ++_i817)
                  {
                    ProfileAttribute _elem818;
                    _elem818 = (ProfileAttribute)iprot.ReadI32();
                    Attrs.Add(_elem818);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list819 = iprot.ReadListBegin();
                  for( int _i820 = 0; _i820 < _list819.Count; ++_i820)
                  {
                    string _elem821;
                    _elem821 = iprot.ReadString();
                    ReceiverMids.Add(_elem821);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("commitUpdateProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Attrs != null && __isset.attrs) {
          field.Name = "attrs";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, Attrs.Count));
            foreach (ProfileAttribute _iter822 in Attrs)
            {
              oprot.WriteI32((int)_iter822);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter823 in ReceiverMids)
            {
              oprot.WriteString(_iter823);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("commitUpdateProfile_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Attrs != null && __isset.attrs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attrs: ");
        __sb.Append(Attrs);
      }
      if (ReceiverMids != null && __isset.receiverMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReceiverMids: ");
        __sb.Append(ReceiverMids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class commitUpdateProfile_result : TBase
  {
    private Dictionary<string, string> _success;
    private TalkException _e;

    public Dictionary<string, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public commitUpdateProfile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map824 = iprot.ReadMapBegin();
                  for( int _i825 = 0; _i825 < _map824.Count; ++_i825)
                  {
                    string _key826;
                    string _val827;
                    _key826 = iprot.ReadString();
                    _val827 = iprot.ReadString();
                    Success[_key826] = _val827;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("commitUpdateProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter828 in Success.Keys)
              {
                oprot.WriteString(_iter828);
                oprot.WriteString(Success[_iter828]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("commitUpdateProfile_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmEmail_args : TBase
  {
    private string _verifier;
    private string _pinCode;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public string PinCode
    {
      get
      {
        return _pinCode;
      }
      set
      {
        __isset.pinCode = true;
        this._pinCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
      public bool pinCode;
    }

    public confirmEmail_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PinCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (PinCode != null && __isset.pinCode) {
          field.Name = "pinCode";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PinCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmEmail_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      if (PinCode != null && __isset.pinCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PinCode: ");
        __sb.Append(PinCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class confirmEmail_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public confirmEmail_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("confirmEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("confirmEmail_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createGroup_args : TBase
  {
    private int _seq;
    private string _name;
    private List<string> _contactIds;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public List<string> ContactIds
    {
      get
      {
        return _contactIds;
      }
      set
      {
        __isset.contactIds = true;
        this._contactIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool name;
      public bool contactIds;
    }

    public createGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list829 = iprot.ReadListBegin();
                  for( int _i830 = 0; _i830 < _list829.Count; ++_i830)
                  {
                    string _elem831;
                    _elem831 = iprot.ReadString();
                    ContactIds.Add(_elem831);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter832 in ContactIds)
            {
              oprot.WriteString(_iter832);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createGroup_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (ContactIds != null && __isset.contactIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactIds: ");
        __sb.Append(ContactIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createGroup_result : TBase
  {
    private @Group _success;
    private TalkException _e;

    public @Group Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new @Group();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createGroup_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createQrcodeBase64Image_args : TBase
  {
    private string _url;
    private string _characterSet;
    private int _imageSize;
    private int _x;
    private int _y;
    private int _width;
    private int _height;

    public string Url
    {
      get
      {
        return _url;
      }
      set
      {
        __isset.url = true;
        this._url = value;
      }
    }

    public string CharacterSet
    {
      get
      {
        return _characterSet;
      }
      set
      {
        __isset.characterSet = true;
        this._characterSet = value;
      }
    }

    public int ImageSize
    {
      get
      {
        return _imageSize;
      }
      set
      {
        __isset.imageSize = true;
        this._imageSize = value;
      }
    }

    public int X
    {
      get
      {
        return _x;
      }
      set
      {
        __isset.x = true;
        this._x = value;
      }
    }

    public int Y
    {
      get
      {
        return _y;
      }
      set
      {
        __isset.y = true;
        this._y = value;
      }
    }

    public int Width
    {
      get
      {
        return _width;
      }
      set
      {
        __isset.width = true;
        this._width = value;
      }
    }

    public int Height
    {
      get
      {
        return _height;
      }
      set
      {
        __isset.height = true;
        this._height = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool url;
      public bool characterSet;
      public bool imageSize;
      public bool x;
      public bool y;
      public bool width;
      public bool height;
    }

    public createQrcodeBase64Image_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Url = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CharacterSet = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                ImageSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                X = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I32) {
                Y = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I32) {
                Width = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I32) {
                Height = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createQrcodeBase64Image_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Url != null && __isset.url) {
          field.Name = "url";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Url);
          oprot.WriteFieldEnd();
        }
        if (CharacterSet != null && __isset.characterSet) {
          field.Name = "characterSet";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CharacterSet);
          oprot.WriteFieldEnd();
        }
        if (__isset.imageSize) {
          field.Name = "imageSize";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ImageSize);
          oprot.WriteFieldEnd();
        }
        if (__isset.x) {
          field.Name = "x";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(X);
          oprot.WriteFieldEnd();
        }
        if (__isset.y) {
          field.Name = "y";
          field.Type = TType.I32;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Y);
          oprot.WriteFieldEnd();
        }
        if (__isset.width) {
          field.Name = "width";
          field.Type = TType.I32;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Width);
          oprot.WriteFieldEnd();
        }
        if (__isset.height) {
          field.Name = "height";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Height);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createQrcodeBase64Image_args(");
      bool __first = true;
      if (Url != null && __isset.url) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Url: ");
        __sb.Append(Url);
      }
      if (CharacterSet != null && __isset.characterSet) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CharacterSet: ");
        __sb.Append(CharacterSet);
      }
      if (__isset.imageSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ImageSize: ");
        __sb.Append(ImageSize);
      }
      if (__isset.x) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("X: ");
        __sb.Append(X);
      }
      if (__isset.y) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Y: ");
        __sb.Append(Y);
      }
      if (__isset.width) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Width: ");
        __sb.Append(Width);
      }
      if (__isset.height) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Height: ");
        __sb.Append(Height);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createQrcodeBase64Image_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createQrcodeBase64Image_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createQrcodeBase64Image_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createQrcodeBase64Image_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createRoom_args : TBase
  {
    private int _reqSeq;
    private List<string> _contactIds;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public List<string> ContactIds
    {
      get
      {
        return _contactIds;
      }
      set
      {
        __isset.contactIds = true;
        this._contactIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool contactIds;
    }

    public createRoom_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list833 = iprot.ReadListBegin();
                  for( int _i834 = 0; _i834 < _list833.Count; ++_i834)
                  {
                    string _elem835;
                    _elem835 = iprot.ReadString();
                    ContactIds.Add(_elem835);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter836 in ContactIds)
            {
              oprot.WriteString(_iter836);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createRoom_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (ContactIds != null && __isset.contactIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactIds: ");
        __sb.Append(ContactIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createRoom_result : TBase
  {
    private Room _success;
    private TalkException _e;

    public Room Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createRoom_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Room();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createRoom_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSession_args : TBase
  {

    public createSession_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSession_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSession_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSession_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createSession_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSession_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchAnnouncements_args : TBase
  {
    private int _lastFetchedIndex;

    public int LastFetchedIndex
    {
      get
      {
        return _lastFetchedIndex;
      }
      set
      {
        __isset.lastFetchedIndex = true;
        this._lastFetchedIndex = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastFetchedIndex;
    }

    public fetchAnnouncements_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                LastFetchedIndex = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchAnnouncements_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastFetchedIndex) {
          field.Name = "lastFetchedIndex";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastFetchedIndex);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchAnnouncements_args(");
      bool __first = true;
      if (__isset.lastFetchedIndex) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastFetchedIndex: ");
        __sb.Append(LastFetchedIndex);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchAnnouncements_result : TBase
  {
    private List<Announcement> _success;
    private TalkException _e;

    public List<Announcement> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public fetchAnnouncements_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Announcement>();
                  TList _list837 = iprot.ReadListBegin();
                  for( int _i838 = 0; _i838 < _list837.Count; ++_i838)
                  {
                    Announcement _elem839;
                    _elem839 = new Announcement();
                    _elem839.Read(iprot);
                    Success.Add(_elem839);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchAnnouncements_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Announcement _iter840 in Success)
              {
                _iter840.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchAnnouncements_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchMessages_args : TBase
  {
    private long _localTs;
    private int _count;

    public long LocalTs
    {
      get
      {
        return _localTs;
      }
      set
      {
        __isset.localTs = true;
        this._localTs = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool localTs;
      public bool count;
    }

    public fetchMessages_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LocalTs = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.localTs) {
          field.Name = "localTs";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalTs);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchMessages_args(");
      bool __first = true;
      if (__isset.localTs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalTs: ");
        __sb.Append(LocalTs);
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchMessages_result : TBase
  {
    private List<Message> _success;
    private TalkException _e;

    public List<Message> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public fetchMessages_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list841 = iprot.ReadListBegin();
                  for( int _i842 = 0; _i842 < _list841.Count; ++_i842)
                  {
                    Message _elem843;
                    _elem843 = new Message();
                    _elem843.Read(iprot);
                    Success.Add(_elem843);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter844 in Success)
              {
                _iter844.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchMessages_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchOperations_args : TBase
  {
    private long _localRev;
    private int _count;

    public long LocalRev
    {
      get
      {
        return _localRev;
      }
      set
      {
        __isset.localRev = true;
        this._localRev = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool localRev;
      public bool count;
    }

    public fetchOperations_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LocalRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchOperations_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.localRev) {
          field.Name = "localRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalRev);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchOperations_args(");
      bool __first = true;
      if (__isset.localRev) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalRev: ");
        __sb.Append(LocalRev);
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchOperations_result : TBase
  {
    private List<Operation> _success;
    private ShouldSyncException _e;

    public List<Operation> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ShouldSyncException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public fetchOperations_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Operation>();
                  TList _list845 = iprot.ReadListBegin();
                  for( int _i846 = 0; _i846 < _list845.Count; ++_i846)
                  {
                    Operation _elem847;
                    _elem847 = new Operation();
                    _elem847.Read(iprot);
                    Success.Add(_elem847);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ShouldSyncException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchOperations_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Operation _iter848 in Success)
              {
                _iter848.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchOperations_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchOps_args : TBase
  {
    private long _localRev;
    private int _count;
    private long _globalRev;
    private long _individualRev;

    public long LocalRev
    {
      get
      {
        return _localRev;
      }
      set
      {
        __isset.localRev = true;
        this._localRev = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }

    public long GlobalRev
    {
      get
      {
        return _globalRev;
      }
      set
      {
        __isset.globalRev = true;
        this._globalRev = value;
      }
    }

    public long IndividualRev
    {
      get
      {
        return _individualRev;
      }
      set
      {
        __isset.individualRev = true;
        this._individualRev = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool localRev;
      public bool count;
      public bool globalRev;
      public bool individualRev;
    }

    public fetchOps_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LocalRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                GlobalRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                IndividualRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchOps_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.localRev) {
          field.Name = "localRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalRev);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        if (__isset.globalRev) {
          field.Name = "globalRev";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(GlobalRev);
          oprot.WriteFieldEnd();
        }
        if (__isset.individualRev) {
          field.Name = "individualRev";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(IndividualRev);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchOps_args(");
      bool __first = true;
      if (__isset.localRev) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalRev: ");
        __sb.Append(LocalRev);
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      if (__isset.globalRev) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GlobalRev: ");
        __sb.Append(GlobalRev);
      }
      if (__isset.individualRev) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IndividualRev: ");
        __sb.Append(IndividualRev);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchOps_result : TBase
  {
    private List<Operation> _success;
    private ShouldSyncException _e;

    public List<Operation> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public ShouldSyncException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public fetchOps_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Operation>();
                  TList _list849 = iprot.ReadListBegin();
                  for( int _i850 = 0; _i850 < _list849.Count; ++_i850)
                  {
                    Operation _elem851;
                    _elem851 = new Operation();
                    _elem851.Read(iprot);
                    Success.Add(_elem851);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new ShouldSyncException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchOps_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Operation _iter852 in Success)
              {
                _iter852.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchOps_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactsByEmail_args : TBase
  {
    private int _reqSeq;
    private THashSet<string> _emails;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public THashSet<string> Emails
    {
      get
      {
        return _emails;
      }
      set
      {
        __isset.emails = true;
        this._emails = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool emails;
    }

    public findAndAddContactsByEmail_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  Emails = new THashSet<string>();
                  TSet _set853 = iprot.ReadSetBegin();
                  for( int _i854 = 0; _i854 < _set853.Count; ++_i854)
                  {
                    string _elem855;
                    _elem855 = iprot.ReadString();
                    Emails.Add(_elem855);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactsByEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Emails != null && __isset.emails) {
          field.Name = "emails";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Emails.Count));
            foreach (string _iter856 in Emails)
            {
              oprot.WriteString(_iter856);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactsByEmail_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Emails != null && __isset.emails) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Emails: ");
        __sb.Append(Emails);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactsByEmail_result : TBase
  {
    private Dictionary<string, Contact> _success;
    private TalkException _e;

    public Dictionary<string, Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findAndAddContactsByEmail_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map857 = iprot.ReadMapBegin();
                  for( int _i858 = 0; _i858 < _map857.Count; ++_i858)
                  {
                    string _key859;
                    Contact _val860;
                    _key859 = iprot.ReadString();
                    _val860 = new Contact();
                    _val860.Read(iprot);
                    Success[_key859] = _val860;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactsByEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter861 in Success.Keys)
              {
                oprot.WriteString(_iter861);
                Success[_iter861].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactsByEmail_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactsByMid_args : TBase
  {
    private int _reqSeq;
    private string _mid;
    private ContactType _type;
    private string _reference;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ContactType"/>
    /// </summary>
    public ContactType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string Reference
    {
      get
      {
        return _reference;
      }
      set
      {
        __isset.reference = true;
        this._reference = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool mid;
      public bool type;
      public bool reference;
    }

    public findAndAddContactsByMid_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Type = (ContactType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Reference = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactsByMid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        if (Reference != null && __isset.reference) {
          field.Name = "reference";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Reference);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactsByMid_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Reference != null && __isset.reference) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Reference: ");
        __sb.Append(Reference);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactsByMid_result : TBase
  {
    private Dictionary<string, Contact> _success;
    private TalkException _e;

    public Dictionary<string, Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findAndAddContactsByMid_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map862 = iprot.ReadMapBegin();
                  for( int _i863 = 0; _i863 < _map862.Count; ++_i863)
                  {
                    string _key864;
                    Contact _val865;
                    _key864 = iprot.ReadString();
                    _val865 = new Contact();
                    _val865.Read(iprot);
                    Success[_key864] = _val865;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactsByMid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter866 in Success.Keys)
              {
                oprot.WriteString(_iter866);
                Success[_iter866].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactsByMid_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findGroupByTicketV2_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public findGroupByTicketV2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findGroupByTicketV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findGroupByTicketV2_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findGroupByTicketV2_result : TBase
  {
    private @Group _success;
    private TalkException _e;

    public @Group Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findGroupByTicketV2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new @Group();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findGroupByTicketV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findGroupByTicketV2_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactsByPhone_args : TBase
  {
    private int _reqSeq;
    private THashSet<string> _phones;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public THashSet<string> Phones
    {
      get
      {
        return _phones;
      }
      set
      {
        __isset.phones = true;
        this._phones = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool phones;
    }

    public findAndAddContactsByPhone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Set) {
                {
                  Phones = new THashSet<string>();
                  TSet _set867 = iprot.ReadSetBegin();
                  for( int _i868 = 0; _i868 < _set867.Count; ++_i868)
                  {
                    string _elem869;
                    _elem869 = iprot.ReadString();
                    Phones.Add(_elem869);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactsByPhone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Phones != null && __isset.phones) {
          field.Name = "phones";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Phones.Count));
            foreach (string _iter870 in Phones)
            {
              oprot.WriteString(_iter870);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactsByPhone_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Phones != null && __isset.phones) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Phones: ");
        __sb.Append(Phones);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactsByPhone_result : TBase
  {
    private Dictionary<string, Contact> _success;
    private TalkException _e;

    public Dictionary<string, Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findAndAddContactsByPhone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map871 = iprot.ReadMapBegin();
                  for( int _i872 = 0; _i872 < _map871.Count; ++_i872)
                  {
                    string _key873;
                    Contact _val874;
                    _key873 = iprot.ReadString();
                    _val874 = new Contact();
                    _val874.Read(iprot);
                    Success[_key873] = _val874;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactsByPhone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter875 in Success.Keys)
              {
                oprot.WriteString(_iter875);
                Success[_iter875].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactsByPhone_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFriendRequests_args : TBase
  {
    private FriendRequestDirection _direction;
    private long _lastSeenSeqId;

    /// <summary>
    /// 
    /// <seealso cref="FriendRequestDirection"/>
    /// </summary>
    public FriendRequestDirection Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        this._direction = value;
      }
    }

    public long LastSeenSeqId
    {
      get
      {
        return _lastSeenSeqId;
      }
      set
      {
        __isset.lastSeenSeqId = true;
        this._lastSeenSeqId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool direction;
      public bool lastSeenSeqId;
    }

    public getFriendRequests_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Direction = (FriendRequestDirection)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                LastSeenSeqId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFriendRequests_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.direction) {
          field.Name = "direction";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Direction);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastSeenSeqId) {
          field.Name = "lastSeenSeqId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastSeenSeqId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFriendRequests_args(");
      bool __first = true;
      if (__isset.direction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Direction: ");
        __sb.Append(Direction);
      }
      if (__isset.lastSeenSeqId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastSeenSeqId: ");
        __sb.Append(LastSeenSeqId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFriendRequests_result : TBase
  {
    private List<FriendRequest> _success;
    private TalkException _e;

    public List<FriendRequest> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getFriendRequests_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<FriendRequest>();
                  TList _list876 = iprot.ReadListBegin();
                  for( int _i877 = 0; _i877 < _list876.Count; ++_i877)
                  {
                    FriendRequest _elem878;
                    _elem878 = new FriendRequest();
                    _elem878.Read(iprot);
                    Success.Add(_elem878);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFriendRequests_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (FriendRequest _iter879 in Success)
              {
                _iter879.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFriendRequests_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeFriendRequest_args : TBase
  {
    private FriendRequestDirection _direction;
    private string _midOrEMid;

    /// <summary>
    /// 
    /// <seealso cref="FriendRequestDirection"/>
    /// </summary>
    public FriendRequestDirection Direction
    {
      get
      {
        return _direction;
      }
      set
      {
        __isset.direction = true;
        this._direction = value;
      }
    }

    public string MidOrEMid
    {
      get
      {
        return _midOrEMid;
      }
      set
      {
        __isset.midOrEMid = true;
        this._midOrEMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool direction;
      public bool midOrEMid;
    }

    public removeFriendRequest_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Direction = (FriendRequestDirection)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MidOrEMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeFriendRequest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.direction) {
          field.Name = "direction";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Direction);
          oprot.WriteFieldEnd();
        }
        if (MidOrEMid != null && __isset.midOrEMid) {
          field.Name = "midOrEMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MidOrEMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeFriendRequest_args(");
      bool __first = true;
      if (__isset.direction) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Direction: ");
        __sb.Append(Direction);
      }
      if (MidOrEMid != null && __isset.midOrEMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MidOrEMid: ");
        __sb.Append(MidOrEMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeFriendRequest_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public removeFriendRequest_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeFriendRequest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeFriendRequest_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactsByUserid_args : TBase
  {
    private int _reqSeq;
    private string _userid;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Userid
    {
      get
      {
        return _userid;
      }
      set
      {
        __isset.userid = true;
        this._userid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool userid;
    }

    public findAndAddContactsByUserid_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactsByUserid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactsByUserid_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Userid != null && __isset.userid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Userid: ");
        __sb.Append(Userid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactsByUserid_result : TBase
  {
    private Dictionary<string, Contact> _success;
    private TalkException _e;

    public Dictionary<string, Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findAndAddContactsByUserid_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map880 = iprot.ReadMapBegin();
                  for( int _i881 = 0; _i881 < _map880.Count; ++_i881)
                  {
                    string _key882;
                    Contact _val883;
                    _key882 = iprot.ReadString();
                    _val883 = new Contact();
                    _val883.Read(iprot);
                    Success[_key882] = _val883;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactsByUserid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter884 in Success.Keys)
              {
                oprot.WriteString(_iter884);
                Success[_iter884].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactsByUserid_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByUserid_args : TBase
  {
    private string _userid;

    public string Userid
    {
      get
      {
        return _userid;
      }
      set
      {
        __isset.userid = true;
        this._userid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userid;
    }

    public findContactByUserid_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByUserid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByUserid_args(");
      bool __first = true;
      if (Userid != null && __isset.userid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Userid: ");
        __sb.Append(Userid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByUserid_result : TBase
  {
    private Contact _success;
    private TalkException _e;

    public Contact Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findContactByUserid_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByUserid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByUserid_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByUserTicket_args : TBase
  {
    private string _ticketIdWithTag;

    public string TicketIdWithTag
    {
      get
      {
        return _ticketIdWithTag;
      }
      set
      {
        __isset.ticketIdWithTag = true;
        this._ticketIdWithTag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketIdWithTag;
    }

    public findContactByUserTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                TicketIdWithTag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByUserTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketIdWithTag != null && __isset.ticketIdWithTag) {
          field.Name = "ticketIdWithTag";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketIdWithTag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByUserTicket_args(");
      bool __first = true;
      if (TicketIdWithTag != null && __isset.ticketIdWithTag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketIdWithTag: ");
        __sb.Append(TicketIdWithTag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByUserTicket_result : TBase
  {
    private Contact _success;
    private TalkException _e;

    public Contact Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findContactByUserTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByUserTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactsByEmail_args : TBase
  {
    private THashSet<string> _emails;

    public THashSet<string> Emails
    {
      get
      {
        return _emails;
      }
      set
      {
        __isset.emails = true;
        this._emails = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool emails;
    }

    public findContactsByEmail_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Set) {
                {
                  Emails = new THashSet<string>();
                  TSet _set885 = iprot.ReadSetBegin();
                  for( int _i886 = 0; _i886 < _set885.Count; ++_i886)
                  {
                    string _elem887;
                    _elem887 = iprot.ReadString();
                    Emails.Add(_elem887);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactsByEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Emails != null && __isset.emails) {
          field.Name = "emails";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Emails.Count));
            foreach (string _iter888 in Emails)
            {
              oprot.WriteString(_iter888);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactsByEmail_args(");
      bool __first = true;
      if (Emails != null && __isset.emails) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Emails: ");
        __sb.Append(Emails);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactsByEmail_result : TBase
  {
    private Dictionary<string, Contact> _success;
    private TalkException _e;

    public Dictionary<string, Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findContactsByEmail_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map889 = iprot.ReadMapBegin();
                  for( int _i890 = 0; _i890 < _map889.Count; ++_i890)
                  {
                    string _key891;
                    Contact _val892;
                    _key891 = iprot.ReadString();
                    _val892 = new Contact();
                    _val892.Read(iprot);
                    Success[_key891] = _val892;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactsByEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter893 in Success.Keys)
              {
                oprot.WriteString(_iter893);
                Success[_iter893].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactsByEmail_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactsByPhone_args : TBase
  {
    private THashSet<string> _phones;

    public THashSet<string> Phones
    {
      get
      {
        return _phones;
      }
      set
      {
        __isset.phones = true;
        this._phones = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool phones;
    }

    public findContactsByPhone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Set) {
                {
                  Phones = new THashSet<string>();
                  TSet _set894 = iprot.ReadSetBegin();
                  for( int _i895 = 0; _i895 < _set894.Count; ++_i895)
                  {
                    string _elem896;
                    _elem896 = iprot.ReadString();
                    Phones.Add(_elem896);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactsByPhone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Phones != null && __isset.phones) {
          field.Name = "phones";
          field.Type = TType.Set;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteSetBegin(new TSet(TType.String, Phones.Count));
            foreach (string _iter897 in Phones)
            {
              oprot.WriteString(_iter897);
            }
            oprot.WriteSetEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactsByPhone_args(");
      bool __first = true;
      if (Phones != null && __isset.phones) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Phones: ");
        __sb.Append(Phones);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactsByPhone_result : TBase
  {
    private Dictionary<string, Contact> _success;
    private TalkException _e;

    public Dictionary<string, Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findContactsByPhone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, Contact>();
                  TMap _map898 = iprot.ReadMapBegin();
                  for( int _i899 = 0; _i899 < _map898.Count; ++_i899)
                  {
                    string _key900;
                    Contact _val901;
                    _key900 = iprot.ReadString();
                    _val901 = new Contact();
                    _val901.Read(iprot);
                    Success[_key900] = _val901;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactsByPhone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter902 in Success.Keys)
              {
                oprot.WriteString(_iter902);
                Success[_iter902].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactsByPhone_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findSnsIdUserStatus_args : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;
    private string _udidHash;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snsIdType;
      public bool snsAccessToken;
      public bool udidHash;
    }

    public findSnsIdUserStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findSnsIdUserStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findSnsIdUserStatus_args(");
      bool __first = true;
      if (__isset.snsIdType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsIdType: ");
        __sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsAccessToken: ");
        __sb.Append(SnsAccessToken);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findSnsIdUserStatus_result : TBase
  {
    private SnsIdUserStatus _success;
    private TalkException _e;

    public SnsIdUserStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findSnsIdUserStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SnsIdUserStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findSnsIdUserStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findSnsIdUserStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class finishUpdateVerification_args : TBase
  {
    private string _sessionId;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public finishUpdateVerification_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("finishUpdateVerification_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("finishUpdateVerification_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class finishUpdateVerification_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public finishUpdateVerification_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("finishUpdateVerification_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("finishUpdateVerification_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class generateUserTicket_args : TBase
  {
    private long _expirationTime;
    private int _maxUseCount;

    public long ExpirationTime
    {
      get
      {
        return _expirationTime;
      }
      set
      {
        __isset.expirationTime = true;
        this._expirationTime = value;
      }
    }

    public int MaxUseCount
    {
      get
      {
        return _maxUseCount;
      }
      set
      {
        __isset.maxUseCount = true;
        this._maxUseCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool expirationTime;
      public bool maxUseCount;
    }

    public generateUserTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I64) {
                ExpirationTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MaxUseCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("generateUserTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.expirationTime) {
          field.Name = "expirationTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ExpirationTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxUseCount) {
          field.Name = "maxUseCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxUseCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("generateUserTicket_args(");
      bool __first = true;
      if (__isset.expirationTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpirationTime: ");
        __sb.Append(ExpirationTime);
      }
      if (__isset.maxUseCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxUseCount: ");
        __sb.Append(MaxUseCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class generateUserTicket_result : TBase
  {
    private Ticket _success;
    private TalkException _e;

    public Ticket Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public generateUserTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Ticket();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("generateUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("generateUserTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class destroyMessage_args : TBase
  {
    private int _seq;
    private string _chatId;
    private string _messageId;
    private sbyte _sessionId;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string ChatId
    {
      get
      {
        return _chatId;
      }
      set
      {
        __isset.chatId = true;
        this._chatId = value;
      }
    }

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }

    public sbyte SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool chatId;
      public bool messageId;
      public bool sessionId;
    }

    public destroyMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ChatId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Byte) {
                SessionId = iprot.ReadByte();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("destroyMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (ChatId != null && __isset.chatId) {
          field.Name = "chatId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatId);
          oprot.WriteFieldEnd();
        }
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        if (__isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.Byte;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteByte(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("destroyMessage_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (ChatId != null && __isset.chatId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatId: ");
        __sb.Append(ChatId);
      }
      if (MessageId != null && __isset.messageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageId: ");
        __sb.Append(MessageId);
      }
      if (__isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class destroyMessage_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public destroyMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("destroyMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("destroyMessage_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAcceptedProximityMatches_args : TBase
  {
    private string _sessionId;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public getAcceptedProximityMatches_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAcceptedProximityMatches_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAcceptedProximityMatches_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAcceptedProximityMatches_result : TBase
  {
    private THashSet<string> _success;
    private TalkException _e;

    public THashSet<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getAcceptedProximityMatches_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<string>();
                  TSet _set903 = iprot.ReadSetBegin();
                  for( int _i904 = 0; _i904 < _set903.Count; ++_i904)
                  {
                    string _elem905;
                    _elem905 = iprot.ReadString();
                    Success.Add(_elem905);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAcceptedProximityMatches_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.String, Success.Count));
              foreach (string _iter906 in Success)
              {
                oprot.WriteString(_iter906);
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAcceptedProximityMatches_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getActiveBuddySubscriberIds_args : TBase
  {

    public getActiveBuddySubscriberIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getActiveBuddySubscriberIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getActiveBuddySubscriberIds_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getActiveBuddySubscriberIds_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getActiveBuddySubscriberIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list907 = iprot.ReadListBegin();
                  for( int _i908 = 0; _i908 < _list907.Count; ++_i908)
                  {
                    string _elem909;
                    _elem909 = iprot.ReadString();
                    Success.Add(_elem909);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getActiveBuddySubscriberIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter910 in Success)
              {
                oprot.WriteString(_iter910);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getActiveBuddySubscriberIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllContactIds_args : TBase
  {

    public getAllContactIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllContactIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllContactIds_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllContactIds_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getAllContactIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list911 = iprot.ReadListBegin();
                  for( int _i912 = 0; _i912 < _list911.Count; ++_i912)
                  {
                    string _elem913;
                    _elem913 = iprot.ReadString();
                    Success.Add(_elem913);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllContactIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter914 in Success)
              {
                oprot.WriteString(_iter914);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllContactIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAuthQrcode_args : TBase
  {
    private bool _keepLoggedIn;
    private string _systemName;

    public bool KeepLoggedIn
    {
      get
      {
        return _keepLoggedIn;
      }
      set
      {
        __isset.keepLoggedIn = true;
        this._keepLoggedIn = value;
      }
    }

    public string SystemName
    {
      get
      {
        return _systemName;
      }
      set
      {
        __isset.systemName = true;
        this._systemName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool keepLoggedIn;
      public bool systemName;
    }

    public getAuthQrcode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Bool) {
                KeepLoggedIn = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SystemName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAuthQrcode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.keepLoggedIn) {
          field.Name = "keepLoggedIn";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(KeepLoggedIn);
          oprot.WriteFieldEnd();
        }
        if (SystemName != null && __isset.systemName) {
          field.Name = "systemName";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SystemName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAuthQrcode_args(");
      bool __first = true;
      if (__isset.keepLoggedIn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeepLoggedIn: ");
        __sb.Append(KeepLoggedIn);
      }
      if (SystemName != null && __isset.systemName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SystemName: ");
        __sb.Append(SystemName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAuthQrcode_result : TBase
  {
    private AuthQrcode _success;
    private TalkException _e;

    public AuthQrcode Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getAuthQrcode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AuthQrcode();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAuthQrcode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAuthQrcode_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBlockedContactIds_args : TBase
  {

    public getBlockedContactIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBlockedContactIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBlockedContactIds_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBlockedContactIds_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getBlockedContactIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list915 = iprot.ReadListBegin();
                  for( int _i916 = 0; _i916 < _list915.Count; ++_i916)
                  {
                    string _elem917;
                    _elem917 = iprot.ReadString();
                    Success.Add(_elem917);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBlockedContactIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter918 in Success)
              {
                oprot.WriteString(_iter918);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBlockedContactIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithPhoneNumber_args : TBase
  {
    private string _sessionId;
    private string _migrationPincodeSessionId;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public string MigrationPincodeSessionId
    {
      get
      {
        return _migrationPincodeSessionId;
      }
      set
      {
        __isset.migrationPincodeSessionId = true;
        this._migrationPincodeSessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool migrationPincodeSessionId;
    }

    public registerWithPhoneNumber_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MigrationPincodeSessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithPhoneNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (MigrationPincodeSessionId != null && __isset.migrationPincodeSessionId) {
          field.Name = "migrationPincodeSessionId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MigrationPincodeSessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithPhoneNumber_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (MigrationPincodeSessionId != null && __isset.migrationPincodeSessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MigrationPincodeSessionId: ");
        __sb.Append(MigrationPincodeSessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithPhoneNumber_result : TBase
  {
    private RegisterWithPhoneNumberResult _success;
    private TalkException _e;

    public RegisterWithPhoneNumberResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerWithPhoneNumber_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RegisterWithPhoneNumberResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithPhoneNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithPhoneNumber_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithPhoneNumberAndPassword_args : TBase
  {
    private string _sessionId;
    private string _keynm;
    private string _encrypted;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public string Keynm
    {
      get
      {
        return _keynm;
      }
      set
      {
        __isset.keynm = true;
        this._keynm = value;
      }
    }

    public string Encrypted
    {
      get
      {
        return _encrypted;
      }
      set
      {
        __isset.encrypted = true;
        this._encrypted = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool keynm;
      public bool encrypted;
    }

    public registerWithPhoneNumberAndPassword_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Keynm = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Encrypted = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithPhoneNumberAndPassword_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (Keynm != null && __isset.keynm) {
          field.Name = "keynm";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Keynm);
          oprot.WriteFieldEnd();
        }
        if (Encrypted != null && __isset.encrypted) {
          field.Name = "encrypted";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Encrypted);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithPhoneNumberAndPassword_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (Keynm != null && __isset.keynm) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Keynm: ");
        __sb.Append(Keynm);
      }
      if (Encrypted != null && __isset.encrypted) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Encrypted: ");
        __sb.Append(Encrypted);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithPhoneNumberAndPassword_result : TBase
  {
    private RegisterWithPhoneNumberResult _success;
    private TalkException _e;

    public RegisterWithPhoneNumberResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerWithPhoneNumberAndPassword_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RegisterWithPhoneNumberResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithPhoneNumberAndPassword_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithPhoneNumberAndPassword_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAnalyticsInfo_args : TBase
  {

    public getAnalyticsInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAnalyticsInfo_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAnalyticsInfo_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAnalyticsInfo_result : TBase
  {
    private AnalyticsInfo _success;
    private TalkException _e;

    public AnalyticsInfo Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getAnalyticsInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new AnalyticsInfo();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAnalyticsInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAnalyticsInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportClientStatistics_args : TBase
  {
    private int _reqSeq;
    private ReportCategory _category;
    private int _count;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ReportCategory"/>
    /// </summary>
    public ReportCategory Category
    {
      get
      {
        return _category;
      }
      set
      {
        __isset.category = true;
        this._category = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool category;
      public bool count;
    }

    public reportClientStatistics_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Category = (ReportCategory)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportClientStatistics_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.category) {
          field.Name = "category";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Category);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportClientStatistics_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (__isset.category) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Category: ");
        __sb.Append(Category);
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportClientStatistics_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public reportClientStatistics_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportClientStatistics_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportClientStatistics_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyPhoneNumberForLogin_args : TBase
  {
    private string _verifierFromPhone;
    private string _pinCodeForPhone;
    private string _verifierFromLogin;

    public string VerifierFromPhone
    {
      get
      {
        return _verifierFromPhone;
      }
      set
      {
        __isset.verifierFromPhone = true;
        this._verifierFromPhone = value;
      }
    }

    public string PinCodeForPhone
    {
      get
      {
        return _pinCodeForPhone;
      }
      set
      {
        __isset.pinCodeForPhone = true;
        this._pinCodeForPhone = value;
      }
    }

    public string VerifierFromLogin
    {
      get
      {
        return _verifierFromLogin;
      }
      set
      {
        __isset.verifierFromLogin = true;
        this._verifierFromLogin = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifierFromPhone;
      public bool pinCodeForPhone;
      public bool verifierFromLogin;
    }

    public verifyPhoneNumberForLogin_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                VerifierFromPhone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PinCodeForPhone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                VerifierFromLogin = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyPhoneNumberForLogin_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (VerifierFromPhone != null && __isset.verifierFromPhone) {
          field.Name = "verifierFromPhone";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VerifierFromPhone);
          oprot.WriteFieldEnd();
        }
        if (PinCodeForPhone != null && __isset.pinCodeForPhone) {
          field.Name = "pinCodeForPhone";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PinCodeForPhone);
          oprot.WriteFieldEnd();
        }
        if (VerifierFromLogin != null && __isset.verifierFromLogin) {
          field.Name = "verifierFromLogin";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(VerifierFromLogin);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyPhoneNumberForLogin_args(");
      bool __first = true;
      if (VerifierFromPhone != null && __isset.verifierFromPhone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VerifierFromPhone: ");
        __sb.Append(VerifierFromPhone);
      }
      if (PinCodeForPhone != null && __isset.pinCodeForPhone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PinCodeForPhone: ");
        __sb.Append(PinCodeForPhone);
      }
      if (VerifierFromLogin != null && __isset.verifierFromLogin) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("VerifierFromLogin: ");
        __sb.Append(VerifierFromLogin);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyPhoneNumberForLogin_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public verifyPhoneNumberForLogin_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyPhoneNumberForLogin_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyPhoneNumberForLogin_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyPhoneNumber_args : TBase
  {
    private string _sessionId;
    private string _pinCode;
    private string _udidHash;
    private string _migrationPincodeSessionId;
    private string _oldUdidHash;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public string PinCode
    {
      get
      {
        return _pinCode;
      }
      set
      {
        __isset.pinCode = true;
        this._pinCode = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public string MigrationPincodeSessionId
    {
      get
      {
        return _migrationPincodeSessionId;
      }
      set
      {
        __isset.migrationPincodeSessionId = true;
        this._migrationPincodeSessionId = value;
      }
    }

    public string OldUdidHash
    {
      get
      {
        return _oldUdidHash;
      }
      set
      {
        __isset.oldUdidHash = true;
        this._oldUdidHash = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool pinCode;
      public bool udidHash;
      public bool migrationPincodeSessionId;
      public bool oldUdidHash;
    }

    public verifyPhoneNumber_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PinCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                MigrationPincodeSessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                OldUdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyPhoneNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (PinCode != null && __isset.pinCode) {
          field.Name = "pinCode";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PinCode);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (MigrationPincodeSessionId != null && __isset.migrationPincodeSessionId) {
          field.Name = "migrationPincodeSessionId";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MigrationPincodeSessionId);
          oprot.WriteFieldEnd();
        }
        if (OldUdidHash != null && __isset.oldUdidHash) {
          field.Name = "oldUdidHash";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OldUdidHash);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyPhoneNumber_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (PinCode != null && __isset.pinCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PinCode: ");
        __sb.Append(PinCode);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (MigrationPincodeSessionId != null && __isset.migrationPincodeSessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MigrationPincodeSessionId: ");
        __sb.Append(MigrationPincodeSessionId);
      }
      if (OldUdidHash != null && __isset.oldUdidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OldUdidHash: ");
        __sb.Append(OldUdidHash);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyPhoneNumber_result : TBase
  {
    private PhoneVerificationResult _success;
    private TalkException _e;

    public PhoneVerificationResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public verifyPhoneNumber_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new PhoneVerificationResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyPhoneNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyPhoneNumber_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBlockedContactIdsByRange_args : TBase
  {
    private int _start;
    private int _count;

    public int Start
    {
      get
      {
        return _start;
      }
      set
      {
        __isset.start = true;
        this._start = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool start;
      public bool count;
    }

    public getBlockedContactIdsByRange_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Start = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBlockedContactIdsByRange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBlockedContactIdsByRange_args(");
      bool __first = true;
      if (__isset.start) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Start: ");
        __sb.Append(Start);
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBlockedContactIdsByRange_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getBlockedContactIdsByRange_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list919 = iprot.ReadListBegin();
                  for( int _i920 = 0; _i920 < _list919.Count; ++_i920)
                  {
                    string _elem921;
                    _elem921 = iprot.ReadString();
                    Success.Add(_elem921);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBlockedContactIdsByRange_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter922 in Success)
              {
                oprot.WriteString(_iter922);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBlockedContactIdsByRange_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBlockedRecommendationIds_args : TBase
  {

    public getBlockedRecommendationIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBlockedRecommendationIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBlockedRecommendationIds_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBlockedRecommendationIds_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getBlockedRecommendationIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list923 = iprot.ReadListBegin();
                  for( int _i924 = 0; _i924 < _list923.Count; ++_i924)
                  {
                    string _elem925;
                    _elem925 = iprot.ReadString();
                    Success.Add(_elem925);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBlockedRecommendationIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter926 in Success)
              {
                oprot.WriteString(_iter926);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBlockedRecommendationIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyBlockerIds_args : TBase
  {

    public getBuddyBlockerIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyBlockerIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyBlockerIds_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyBlockerIds_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getBuddyBlockerIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list927 = iprot.ReadListBegin();
                  for( int _i928 = 0; _i928 < _list927.Count; ++_i928)
                  {
                    string _elem929;
                    _elem929 = iprot.ReadString();
                    Success.Add(_elem929);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyBlockerIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter930 in Success)
              {
                oprot.WriteString(_iter930);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyBlockerIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyLocation_args : TBase
  {
    private string _mid;
    private int _index;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
      public bool index;
    }

    public getBuddyLocation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyLocation_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      if (__isset.index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Index: ");
        __sb.Append(Index);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getBuddyLocation_result : TBase
  {
    private Geolocation _success;
    private TalkException _e;

    public Geolocation Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getBuddyLocation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Geolocation();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getBuddyLocation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getBuddyLocation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactContactsModifiedSince_args : TBase
  {
    private long _timestamp;

    public long Timestamp
    {
      get
      {
        return _timestamp;
      }
      set
      {
        __isset.timestamp = true;
        this._timestamp = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool timestamp;
    }

    public getCompactContactsModifiedSince_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                Timestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactContactsModifiedSince_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.timestamp) {
          field.Name = "timestamp";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Timestamp);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactContactsModifiedSince_args(");
      bool __first = true;
      if (__isset.timestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Timestamp: ");
        __sb.Append(Timestamp);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactContactsModifiedSince_result : TBase
  {
    private List<CompactContact> _success;
    private TalkException _e;

    public List<CompactContact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCompactContactsModifiedSince_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<CompactContact>();
                  TList _list931 = iprot.ReadListBegin();
                  for( int _i932 = 0; _i932 < _list931.Count; ++_i932)
                  {
                    CompactContact _elem933;
                    _elem933 = new CompactContact();
                    _elem933.Read(iprot);
                    Success.Add(_elem933);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactContactsModifiedSince_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (CompactContact _iter934 in Success)
              {
                _iter934.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactContactsModifiedSince_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactGroup_args : TBase
  {
    private string _groupId;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
    }

    public getCompactGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactGroup_args(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactGroup_result : TBase
  {
    private @Group _success;
    private TalkException _e;

    public @Group Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCompactGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new @Group();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactGroup_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactRoom_args : TBase
  {
    private string _roomId;

    public string RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool roomId;
    }

    public getCompactRoom_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactRoom_args(");
      bool __first = true;
      if (RoomId != null && __isset.roomId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoomId: ");
        __sb.Append(RoomId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCompactRoom_result : TBase
  {
    private Room _success;
    private TalkException _e;

    public Room Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCompactRoom_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Room();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCompactRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCompactRoom_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContact_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public getContact_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContact_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContact_result : TBase
  {
    private Contact _success;
    private TalkException _e;

    public Contact Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getContact_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContact_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContacts_args : TBase
  {
    private List<string> _ids;

    public List<string> Ids
    {
      get
      {
        return _ids;
      }
      set
      {
        __isset.ids = true;
        this._ids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ids;
    }

    public getContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  Ids = new List<string>();
                  TList _list935 = iprot.ReadListBegin();
                  for( int _i936 = 0; _i936 < _list935.Count; ++_i936)
                  {
                    string _elem937;
                    _elem937 = iprot.ReadString();
                    Ids.Add(_elem937);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Ids != null && __isset.ids) {
          field.Name = "ids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Ids.Count));
            foreach (string _iter938 in Ids)
            {
              oprot.WriteString(_iter938);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContacts_args(");
      bool __first = true;
      if (Ids != null && __isset.ids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Ids: ");
        __sb.Append(Ids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContacts_result : TBase
  {
    private List<Contact> _success;
    private TalkException _e;

    public List<Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Contact>();
                  TList _list939 = iprot.ReadListBegin();
                  for( int _i940 = 0; _i940 < _list939.Count; ++_i940)
                  {
                    Contact _elem941;
                    _elem941 = new Contact();
                    _elem941.Read(iprot);
                    Success.Add(_elem941);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Contact _iter942 in Success)
              {
                _iter942.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContactWithFriendRequestStatus_args : TBase
  {
    private string _id;

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
    }

    public getContactWithFriendRequestStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContactWithFriendRequestStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContactWithFriendRequestStatus_args(");
      bool __first = true;
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getContactWithFriendRequestStatus_result : TBase
  {
    private Contact _success;
    private TalkException _e;

    public Contact Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getContactWithFriendRequestStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getContactWithFriendRequestStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getContactWithFriendRequestStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCountryWithRequestIp_args : TBase
  {

    public getCountryWithRequestIp_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCountryWithRequestIp_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCountryWithRequestIp_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getCountryWithRequestIp_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getCountryWithRequestIp_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getCountryWithRequestIp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getCountryWithRequestIp_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFavoriteMids_args : TBase
  {

    public getFavoriteMids_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFavoriteMids_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFavoriteMids_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFavoriteMids_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getFavoriteMids_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list943 = iprot.ReadListBegin();
                  for( int _i944 = 0; _i944 < _list943.Count; ++_i944)
                  {
                    string _elem945;
                    _elem945 = iprot.ReadString();
                    Success.Add(_elem945);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFavoriteMids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter946 in Success)
              {
                oprot.WriteString(_iter946);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFavoriteMids_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroup_args : TBase
  {
    private string _groupId;

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupId;
    }

    public getGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroup_args(");
      bool __first = true;
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroup_result : TBase
  {
    private @Group _success;
    private TalkException _e;

    public @Group Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new @Group();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroup_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupIdsInvited_args : TBase
  {

    public getGroupIdsInvited_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupIdsInvited_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupIdsInvited_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupIdsInvited_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupIdsInvited_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list947 = iprot.ReadListBegin();
                  for( int _i948 = 0; _i948 < _list947.Count; ++_i948)
                  {
                    string _elem949;
                    _elem949 = iprot.ReadString();
                    Success.Add(_elem949);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupIdsInvited_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter950 in Success)
              {
                oprot.WriteString(_iter950);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupIdsInvited_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupIdsJoined_args : TBase
  {

    public getGroupIdsJoined_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupIdsJoined_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupIdsJoined_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupIdsJoined_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupIdsJoined_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list951 = iprot.ReadListBegin();
                  for( int _i952 = 0; _i952 < _list951.Count; ++_i952)
                  {
                    string _elem953;
                    _elem953 = iprot.ReadString();
                    Success.Add(_elem953);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupIdsJoined_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter954 in Success)
              {
                oprot.WriteString(_iter954);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupIdsJoined_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroups_args : TBase
  {
    private List<string> _groupIds;

    public List<string> GroupIds
    {
      get
      {
        return _groupIds;
      }
      set
      {
        __isset.groupIds = true;
        this._groupIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupIds;
    }

    public getGroups_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  GroupIds = new List<string>();
                  TList _list955 = iprot.ReadListBegin();
                  for( int _i956 = 0; _i956 < _list955.Count; ++_i956)
                  {
                    string _elem957;
                    _elem957 = iprot.ReadString();
                    GroupIds.Add(_elem957);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroups_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupIds != null && __isset.groupIds) {
          field.Name = "groupIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, GroupIds.Count));
            foreach (string _iter958 in GroupIds)
            {
              oprot.WriteString(_iter958);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroups_args(");
      bool __first = true;
      if (GroupIds != null && __isset.groupIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupIds: ");
        __sb.Append(GroupIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroups_result : TBase
  {
    private List<@Group> _success;
    private TalkException _e;

    public List<@Group> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroups_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<@Group>();
                  TList _list959 = iprot.ReadListBegin();
                  for( int _i960 = 0; _i960 < _list959.Count; ++_i960)
                  {
                    @Group _elem961;
                    _elem961 = new @Group();
                    _elem961.Read(iprot);
                    Success.Add(_elem961);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (@Group _iter962 in Success)
              {
                _iter962.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroups_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getHiddenContactMids_args : TBase
  {

    public getHiddenContactMids_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getHiddenContactMids_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getHiddenContactMids_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getHiddenContactMids_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getHiddenContactMids_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list963 = iprot.ReadListBegin();
                  for( int _i964 = 0; _i964 < _list963.Count; ++_i964)
                  {
                    string _elem965;
                    _elem965 = iprot.ReadString();
                    Success.Add(_elem965);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getHiddenContactMids_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter966 in Success)
              {
                oprot.WriteString(_iter966);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getHiddenContactMids_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getIdentityIdentifier_args : TBase
  {

    public getIdentityIdentifier_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getIdentityIdentifier_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getIdentityIdentifier_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getIdentityIdentifier_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getIdentityIdentifier_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getIdentityIdentifier_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getIdentityIdentifier_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLastAnnouncementIndex_args : TBase
  {

    public getLastAnnouncementIndex_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLastAnnouncementIndex_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLastAnnouncementIndex_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLastAnnouncementIndex_result : TBase
  {
    private int _success;
    private TalkException _e;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getLastAnnouncementIndex_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLastAnnouncementIndex_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLastAnnouncementIndex_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLastOpRevision_args : TBase
  {

    public getLastOpRevision_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLastOpRevision_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLastOpRevision_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLastOpRevision_result : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getLastOpRevision_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLastOpRevision_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLastOpRevision_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSuggestRevisions_args : TBase
  {

    public getSuggestRevisions_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSuggestRevisions_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSuggestRevisions_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSuggestRevisions_result : TBase
  {
    private SuggestDictionaryRevisions _success;
    private TalkException _e;

    public SuggestDictionaryRevisions Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSuggestRevisions_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SuggestDictionaryRevisions();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSuggestRevisions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSuggestRevisions_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPreviousMessagesV2WithReadCount_args : TBase
  {
    private string _messageBoxId;
    private MessageBoxV2MessageId _endMessageId;
    private int _messagesCount;

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }

    public MessageBoxV2MessageId EndMessageId
    {
      get
      {
        return _endMessageId;
      }
      set
      {
        __isset.endMessageId = true;
        this._endMessageId = value;
      }
    }

    public int MessagesCount
    {
      get
      {
        return _messagesCount;
      }
      set
      {
        __isset.messagesCount = true;
        this._messagesCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageBoxId;
      public bool endMessageId;
      public bool messagesCount;
    }

    public getPreviousMessagesV2WithReadCount_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                EndMessageId = new MessageBoxV2MessageId();
                EndMessageId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPreviousMessagesV2WithReadCount_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (EndMessageId != null && __isset.endMessageId) {
          field.Name = "endMessageId";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          EndMessageId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.messagesCount) {
          field.Name = "messagesCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPreviousMessagesV2WithReadCount_args(");
      bool __first = true;
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      if (EndMessageId != null && __isset.endMessageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EndMessageId: ");
        __sb.Append(EndMessageId== null ? "<null>" : EndMessageId.ToString());
      }
      if (__isset.messagesCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessagesCount: ");
        __sb.Append(MessagesCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPreviousMessagesV2WithReadCount_result : TBase
  {
    private List<Message> _success;
    private TalkException _e;

    public List<Message> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPreviousMessagesV2WithReadCount_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list967 = iprot.ReadListBegin();
                  for( int _i968 = 0; _i968 < _list967.Count; ++_i968)
                  {
                    Message _elem969;
                    _elem969 = new Message();
                    _elem969.Read(iprot);
                    Success.Add(_elem969);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPreviousMessagesV2WithReadCount_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter970 in Success)
              {
                _iter970.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPreviousMessagesV2WithReadCount_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBox_args : TBase
  {
    private string _channelId;
    private string _messageBoxId;
    private int _lastMessagesCount;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }

    public int LastMessagesCount
    {
      get
      {
        return _lastMessagesCount;
      }
      set
      {
        __isset.lastMessagesCount = true;
        this._lastMessagesCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool messageBoxId;
      public bool lastMessagesCount;
    }

    public getMessageBox_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                LastMessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBox_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastMessagesCount) {
          field.Name = "lastMessagesCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastMessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBox_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      if (__isset.lastMessagesCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastMessagesCount: ");
        __sb.Append(LastMessagesCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBox_result : TBase
  {
    private TMessageBox _success;
    private TalkException _e;

    public TMessageBox Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessageBox_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBox();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBox_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBox_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxCompactWrapUp_args : TBase
  {
    private string _mid;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
    }

    public getMessageBoxCompactWrapUp_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxCompactWrapUp_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxCompactWrapUp_result : TBase
  {
    private TMessageBoxWrapUp _success;
    private TalkException _e;

    public TMessageBoxWrapUp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessageBoxCompactWrapUp_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBoxWrapUp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxCompactWrapUp_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxCompactWrapUpList_args : TBase
  {
    private int _start;
    private int _messageBoxCount;

    public int Start
    {
      get
      {
        return _start;
      }
      set
      {
        __isset.start = true;
        this._start = value;
      }
    }

    public int MessageBoxCount
    {
      get
      {
        return _messageBoxCount;
      }
      set
      {
        __isset.messageBoxCount = true;
        this._messageBoxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool start;
      public bool messageBoxCount;
    }

    public getMessageBoxCompactWrapUpList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Start = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MessageBoxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUpList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.messageBoxCount) {
          field.Name = "messageBoxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessageBoxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxCompactWrapUpList_args(");
      bool __first = true;
      if (__isset.start) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Start: ");
        __sb.Append(Start);
      }
      if (__isset.messageBoxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxCount: ");
        __sb.Append(MessageBoxCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxCompactWrapUpList_result : TBase
  {
    private TMessageBoxWrapUpResponse _success;
    private TalkException _e;

    public TMessageBoxWrapUpResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessageBoxCompactWrapUpList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBoxWrapUpResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUpList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxCompactWrapUpList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxList_args : TBase
  {
    private string _channelId;
    private int _lastMessagesCount;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public int LastMessagesCount
    {
      get
      {
        return _lastMessagesCount;
      }
      set
      {
        __isset.lastMessagesCount = true;
        this._lastMessagesCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool lastMessagesCount;
    }

    public getMessageBoxList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                LastMessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastMessagesCount) {
          field.Name = "lastMessagesCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastMessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxList_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (__isset.lastMessagesCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastMessagesCount: ");
        __sb.Append(LastMessagesCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxList_result : TBase
  {
    private List<TMessageBox> _success;
    private TalkException _e;

    public List<TMessageBox> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessageBoxList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TMessageBox>();
                  TList _list971 = iprot.ReadListBegin();
                  for( int _i972 = 0; _i972 < _list971.Count; ++_i972)
                  {
                    TMessageBox _elem973;
                    _elem973 = new TMessageBox();
                    _elem973.Read(iprot);
                    Success.Add(_elem973);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TMessageBox _iter974 in Success)
              {
                _iter974.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxListByStatus_args : TBase
  {
    private string _channelId;
    private int _lastMessagesCount;
    private int _status;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public int LastMessagesCount
    {
      get
      {
        return _lastMessagesCount;
      }
      set
      {
        __isset.lastMessagesCount = true;
        this._lastMessagesCount = value;
      }
    }

    public int Status
    {
      get
      {
        return _status;
      }
      set
      {
        __isset.status = true;
        this._status = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool lastMessagesCount;
      public bool status;
    }

    public getMessageBoxListByStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                LastMessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Status = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxListByStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastMessagesCount) {
          field.Name = "lastMessagesCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(LastMessagesCount);
          oprot.WriteFieldEnd();
        }
        if (__isset.status) {
          field.Name = "status";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Status);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxListByStatus_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (__isset.lastMessagesCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastMessagesCount: ");
        __sb.Append(LastMessagesCount);
      }
      if (__isset.status) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Status: ");
        __sb.Append(Status);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxListByStatus_result : TBase
  {
    private List<TMessageBox> _success;
    private TalkException _e;

    public List<TMessageBox> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessageBoxListByStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TMessageBox>();
                  TList _list975 = iprot.ReadListBegin();
                  for( int _i976 = 0; _i976 < _list975.Count; ++_i976)
                  {
                    TMessageBox _elem977;
                    _elem977 = new TMessageBox();
                    _elem977.Read(iprot);
                    Success.Add(_elem977);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxListByStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TMessageBox _iter978 in Success)
              {
                _iter978.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxListByStatus_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxWrapUp_args : TBase
  {
    private string _mid;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
    }

    public getMessageBoxWrapUp_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxWrapUp_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxWrapUp_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxWrapUp_result : TBase
  {
    private TMessageBoxWrapUp _success;
    private TalkException _e;

    public TMessageBoxWrapUp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessageBoxWrapUp_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBoxWrapUp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxWrapUp_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxWrapUp_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxWrapUpList_args : TBase
  {
    private int _start;
    private int _messageBoxCount;

    public int Start
    {
      get
      {
        return _start;
      }
      set
      {
        __isset.start = true;
        this._start = value;
      }
    }

    public int MessageBoxCount
    {
      get
      {
        return _messageBoxCount;
      }
      set
      {
        __isset.messageBoxCount = true;
        this._messageBoxCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool start;
      public bool messageBoxCount;
    }

    public getMessageBoxWrapUpList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Start = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MessageBoxCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxWrapUpList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.start) {
          field.Name = "start";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Start);
          oprot.WriteFieldEnd();
        }
        if (__isset.messageBoxCount) {
          field.Name = "messageBoxCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessageBoxCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxWrapUpList_args(");
      bool __first = true;
      if (__isset.start) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Start: ");
        __sb.Append(Start);
      }
      if (__isset.messageBoxCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxCount: ");
        __sb.Append(MessageBoxCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxWrapUpList_result : TBase
  {
    private TMessageBoxWrapUpResponse _success;
    private TalkException _e;

    public TMessageBoxWrapUpResponse Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessageBoxWrapUpList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBoxWrapUpResponse();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxWrapUpList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxWrapUpList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessagesBySequenceNumber_args : TBase
  {
    private string _channelId;
    private string _messageBoxId;
    private long _startSeq;
    private long _endSeq;

    public string ChannelId
    {
      get
      {
        return _channelId;
      }
      set
      {
        __isset.channelId = true;
        this._channelId = value;
      }
    }

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }

    public long StartSeq
    {
      get
      {
        return _startSeq;
      }
      set
      {
        __isset.startSeq = true;
        this._startSeq = value;
      }
    }

    public long EndSeq
    {
      get
      {
        return _endSeq;
      }
      set
      {
        __isset.endSeq = true;
        this._endSeq = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool channelId;
      public bool messageBoxId;
      public bool startSeq;
      public bool endSeq;
    }

    public getMessagesBySequenceNumber_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChannelId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                StartSeq = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                EndSeq = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessagesBySequenceNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChannelId != null && __isset.channelId) {
          field.Name = "channelId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChannelId);
          oprot.WriteFieldEnd();
        }
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.startSeq) {
          field.Name = "startSeq";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.endSeq) {
          field.Name = "endSeq";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndSeq);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessagesBySequenceNumber_args(");
      bool __first = true;
      if (ChannelId != null && __isset.channelId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChannelId: ");
        __sb.Append(ChannelId);
      }
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      if (__isset.startSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StartSeq: ");
        __sb.Append(StartSeq);
      }
      if (__isset.endSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EndSeq: ");
        __sb.Append(EndSeq);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessagesBySequenceNumber_result : TBase
  {
    private List<Message> _success;
    private TalkException _e;

    public List<Message> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessagesBySequenceNumber_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list979 = iprot.ReadListBegin();
                  for( int _i980 = 0; _i980 < _list979.Count; ++_i980)
                  {
                    Message _elem981;
                    _elem981 = new Message();
                    _elem981.Read(iprot);
                    Success.Add(_elem981);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessagesBySequenceNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter982 in Success)
              {
                _iter982.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessagesBySequenceNumber_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNextMessages_args : TBase
  {
    private string _messageBoxId;
    private long _startSeq;
    private int _messagesCount;

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }

    public long StartSeq
    {
      get
      {
        return _startSeq;
      }
      set
      {
        __isset.startSeq = true;
        this._startSeq = value;
      }
    }

    public int MessagesCount
    {
      get
      {
        return _messagesCount;
      }
      set
      {
        __isset.messagesCount = true;
        this._messagesCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageBoxId;
      public bool startSeq;
      public bool messagesCount;
    }

    public getNextMessages_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                StartSeq = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNextMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.startSeq) {
          field.Name = "startSeq";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(StartSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.messagesCount) {
          field.Name = "messagesCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNextMessages_args(");
      bool __first = true;
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      if (__isset.startSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StartSeq: ");
        __sb.Append(StartSeq);
      }
      if (__isset.messagesCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessagesCount: ");
        __sb.Append(MessagesCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNextMessages_result : TBase
  {
    private List<Message> _success;
    private TalkException _e;

    public List<Message> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getNextMessages_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list983 = iprot.ReadListBegin();
                  for( int _i984 = 0; _i984 < _list983.Count; ++_i984)
                  {
                    Message _elem985;
                    _elem985 = new Message();
                    _elem985.Read(iprot);
                    Success.Add(_elem985);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNextMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter986 in Success)
              {
                _iter986.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNextMessages_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNotificationPolicy_args : TBase
  {
    private CarrierCode _carrier;

    /// <summary>
    /// 
    /// <seealso cref="CarrierCode"/>
    /// </summary>
    public CarrierCode Carrier
    {
      get
      {
        return _carrier;
      }
      set
      {
        __isset.carrier = true;
        this._carrier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool carrier;
    }

    public getNotificationPolicy_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Carrier = (CarrierCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNotificationPolicy_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.carrier) {
          field.Name = "carrier";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Carrier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNotificationPolicy_args(");
      bool __first = true;
      if (__isset.carrier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Carrier: ");
        __sb.Append(Carrier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNotificationPolicy_result : TBase
  {
    private List<NotificationType> _success;
    private TalkException _e;

    public List<NotificationType> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getNotificationPolicy_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<NotificationType>();
                  TList _list987 = iprot.ReadListBegin();
                  for( int _i988 = 0; _i988 < _list987.Count; ++_i988)
                  {
                    NotificationType _elem989;
                    _elem989 = (NotificationType)iprot.ReadI32();
                    Success.Add(_elem989);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNotificationPolicy_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.I32, Success.Count));
              foreach (NotificationType _iter990 in Success)
              {
                oprot.WriteI32((int)_iter990);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNotificationPolicy_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPreviousMessages_args : TBase
  {
    private string _messageBoxId;
    private long _endSeq;
    private int _messagesCount;

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }

    public long EndSeq
    {
      get
      {
        return _endSeq;
      }
      set
      {
        __isset.endSeq = true;
        this._endSeq = value;
      }
    }

    public int MessagesCount
    {
      get
      {
        return _messagesCount;
      }
      set
      {
        __isset.messagesCount = true;
        this._messagesCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageBoxId;
      public bool endSeq;
      public bool messagesCount;
    }

    public getPreviousMessages_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                EndSeq = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPreviousMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.endSeq) {
          field.Name = "endSeq";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EndSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.messagesCount) {
          field.Name = "messagesCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPreviousMessages_args(");
      bool __first = true;
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      if (__isset.endSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EndSeq: ");
        __sb.Append(EndSeq);
      }
      if (__isset.messagesCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessagesCount: ");
        __sb.Append(MessagesCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPreviousMessages_result : TBase
  {
    private List<Message> _success;
    private TalkException _e;

    public List<Message> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getPreviousMessages_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list991 = iprot.ReadListBegin();
                  for( int _i992 = 0; _i992 < _list991.Count; ++_i992)
                  {
                    Message _elem993;
                    _elem993 = new Message();
                    _elem993.Read(iprot);
                    Success.Add(_elem993);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPreviousMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter994 in Success)
              {
                _iter994.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPreviousMessages_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProfile_args : TBase
  {

    public getProfile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProfile_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProfile_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProfile_result : TBase
  {
    private Profile _success;
    private TalkException _e;

    public Profile Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getProfile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Profile();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProfile_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProximityMatchCandidateList_args : TBase
  {
    private string _sessionId;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public getProximityMatchCandidateList_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProximityMatchCandidateList_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProximityMatchCandidateList_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProximityMatchCandidateList_result : TBase
  {
    private ProximityMatchCandidateResult _success;
    private TalkException _e;

    public ProximityMatchCandidateResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getProximityMatchCandidateList_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ProximityMatchCandidateResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProximityMatchCandidateList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProximityMatchCandidateList_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProximityMatchCandidates_args : TBase
  {
    private string _sessionId;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public getProximityMatchCandidates_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProximityMatchCandidates_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProximityMatchCandidates_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProximityMatchCandidates_result : TBase
  {
    private THashSet<Contact> _success;
    private TalkException _e;

    public THashSet<Contact> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getProximityMatchCandidates_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Set) {
                {
                  Success = new THashSet<Contact>();
                  TSet _set995 = iprot.ReadSetBegin();
                  for( int _i996 = 0; _i996 < _set995.Count; ++_i996)
                  {
                    Contact _elem997;
                    _elem997 = new Contact();
                    _elem997.Read(iprot);
                    Success.Add(_elem997);
                  }
                  iprot.ReadSetEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProximityMatchCandidates_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Set;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteSetBegin(new TSet(TType.Struct, Success.Count));
              foreach (Contact _iter998 in Success)
              {
                _iter998.Write(oprot);
              }
              oprot.WriteSetEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProximityMatchCandidates_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRecentMessages_args : TBase
  {
    private string _messageBoxId;
    private int _messagesCount;

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }

    public int MessagesCount
    {
      get
      {
        return _messagesCount;
      }
      set
      {
        __isset.messagesCount = true;
        this._messagesCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageBoxId;
      public bool messagesCount;
    }

    public getRecentMessages_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRecentMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.messagesCount) {
          field.Name = "messagesCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRecentMessages_args(");
      bool __first = true;
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      if (__isset.messagesCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessagesCount: ");
        __sb.Append(MessagesCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRecentMessages_result : TBase
  {
    private List<Message> _success;
    private TalkException _e;

    public List<Message> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getRecentMessages_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list999 = iprot.ReadListBegin();
                  for( int _i1000 = 0; _i1000 < _list999.Count; ++_i1000)
                  {
                    Message _elem1001;
                    _elem1001 = new Message();
                    _elem1001.Read(iprot);
                    Success.Add(_elem1001);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRecentMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter1002 in Success)
              {
                _iter1002.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRecentMessages_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRecommendationIds_args : TBase
  {

    public getRecommendationIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRecommendationIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRecommendationIds_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRecommendationIds_result : TBase
  {
    private List<string> _success;
    private TalkException _e;

    public List<string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getRecommendationIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<string>();
                  TList _list1003 = iprot.ReadListBegin();
                  for( int _i1004 = 0; _i1004 < _list1003.Count; ++_i1004)
                  {
                    string _elem1005;
                    _elem1005 = iprot.ReadString();
                    Success.Add(_elem1005);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRecommendationIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.String, Success.Count));
              foreach (string _iter1006 in Success)
              {
                oprot.WriteString(_iter1006);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRecommendationIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRoom_args : TBase
  {
    private string _roomId;

    public string RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool roomId;
    }

    public getRoom_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRoom_args(");
      bool __first = true;
      if (RoomId != null && __isset.roomId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoomId: ");
        __sb.Append(RoomId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRoom_result : TBase
  {
    private Room _success;
    private TalkException _e;

    public Room Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getRoom_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Room();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRoom_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRSAKeyInfo_args : TBase
  {
    private IdentityProvider _provider;

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider Provider
    {
      get
      {
        return _provider;
      }
      set
      {
        __isset.provider = true;
        this._provider = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool provider;
    }

    public getRSAKeyInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRSAKeyInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRSAKeyInfo_args(");
      bool __first = true;
      if (__isset.provider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Provider: ");
        __sb.Append(Provider);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRSAKeyInfo_result : TBase
  {
    private RSAKey _success;
    private TalkException _e;

    public RSAKey Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getRSAKeyInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RSAKey();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRSAKeyInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRSAKeyInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getServerTime_args : TBase
  {

    public getServerTime_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getServerTime_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getServerTime_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getServerTime_result : TBase
  {
    private long _success;
    private TalkException _e;

    public long Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getServerTime_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getServerTime_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getServerTime_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSessions_args : TBase
  {

    public getSessions_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSessions_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSessions_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSessions_result : TBase
  {
    private List<LoginSession> _success;
    private TalkException _e;

    public List<LoginSession> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSessions_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LoginSession>();
                  TList _list1007 = iprot.ReadListBegin();
                  for( int _i1008 = 0; _i1008 < _list1007.Count; ++_i1008)
                  {
                    LoginSession _elem1009;
                    _elem1009 = new LoginSession();
                    _elem1009.Read(iprot);
                    Success.Add(_elem1009);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSessions_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (LoginSession _iter1010 in Success)
              {
                _iter1010.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSessions_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSettings_args : TBase
  {

    public getSettings_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSettings_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSettings_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSettings_result : TBase
  {
    private Settings _success;
    private TalkException _e;

    public Settings Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSettings_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Settings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSettings_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupsV2_args : TBase
  {
    private List<string> _groupIds;

    public List<string> GroupIds
    {
      get
      {
        return _groupIds;
      }
      set
      {
        __isset.groupIds = true;
        this._groupIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupIds;
    }

    public getGroupsV2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  GroupIds = new List<string>();
                  TList _list1011 = iprot.ReadListBegin();
                  for( int _i1012 = 0; _i1012 < _list1011.Count; ++_i1012)
                  {
                    string _elem1013;
                    _elem1013 = iprot.ReadString();
                    GroupIds.Add(_elem1013);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupsV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupIds != null && __isset.groupIds) {
          field.Name = "groupIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, GroupIds.Count));
            foreach (string _iter1014 in GroupIds)
            {
              oprot.WriteString(_iter1014);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupsV2_args(");
      bool __first = true;
      if (GroupIds != null && __isset.groupIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupIds: ");
        __sb.Append(GroupIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getGroupsV2_result : TBase
  {
    private List<@Group> _success;
    private TalkException _e;

    public List<@Group> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getGroupsV2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<@Group>();
                  TList _list1015 = iprot.ReadListBegin();
                  for( int _i1016 = 0; _i1016 < _list1015.Count; ++_i1016)
                  {
                    @Group _elem1017;
                    _elem1017 = new @Group();
                    _elem1017.Read(iprot);
                    Success.Add(_elem1017);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getGroupsV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (@Group _iter1018 in Success)
              {
                _iter1018.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getGroupsV2_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSettingsAttributes_args : TBase
  {
    private int _attrBitset;

    public int AttrBitset
    {
      get
      {
        return _attrBitset;
      }
      set
      {
        __isset.attrBitset = true;
        this._attrBitset = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool attrBitset;
    }

    public getSettingsAttributes_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                AttrBitset = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSettingsAttributes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.attrBitset) {
          field.Name = "attrBitset";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(AttrBitset);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSettingsAttributes_args(");
      bool __first = true;
      if (__isset.attrBitset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AttrBitset: ");
        __sb.Append(AttrBitset);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSettingsAttributes_result : TBase
  {
    private Settings _success;
    private TalkException _e;

    public Settings Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSettingsAttributes_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Settings();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSettingsAttributes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSettingsAttributes_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSystemConfiguration_args : TBase
  {

    public getSystemConfiguration_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSystemConfiguration_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSystemConfiguration_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSystemConfiguration_result : TBase
  {
    private SystemConfiguration _success;
    private TalkException _e;

    public SystemConfiguration Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getSystemConfiguration_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new SystemConfiguration();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSystemConfiguration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSystemConfiguration_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserTicket_args : TBase
  {

    public getUserTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserTicket_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserTicket_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getUserTicket_result : TBase
  {
    private Ticket _success;
    private TalkException _e;

    public Ticket Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getUserTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Ticket();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getUserTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getWapInvitation_args : TBase
  {
    private string _invitationHash;

    public string InvitationHash
    {
      get
      {
        return _invitationHash;
      }
      set
      {
        __isset.invitationHash = true;
        this._invitationHash = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool invitationHash;
    }

    public getWapInvitation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                InvitationHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getWapInvitation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InvitationHash != null && __isset.invitationHash) {
          field.Name = "invitationHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvitationHash);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getWapInvitation_args(");
      bool __first = true;
      if (InvitationHash != null && __isset.invitationHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InvitationHash: ");
        __sb.Append(InvitationHash);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getWapInvitation_result : TBase
  {
    private WapInvitation _success;
    private TalkException _e;

    public WapInvitation Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getWapInvitation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new WapInvitation();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getWapInvitation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getWapInvitation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class invalidateUserTicket_args : TBase
  {

    public invalidateUserTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("invalidateUserTicket_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("invalidateUserTicket_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class invalidateUserTicket_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public invalidateUserTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("invalidateUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("invalidateUserTicket_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteFriendsBySms_args : TBase
  {
    private List<string> _phoneNumberList;

    public List<string> PhoneNumberList
    {
      get
      {
        return _phoneNumberList;
      }
      set
      {
        __isset.phoneNumberList = true;
        this._phoneNumberList = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool phoneNumberList;
    }

    public inviteFriendsBySms_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  PhoneNumberList = new List<string>();
                  TList _list1019 = iprot.ReadListBegin();
                  for( int _i1020 = 0; _i1020 < _list1019.Count; ++_i1020)
                  {
                    string _elem1021;
                    _elem1021 = iprot.ReadString();
                    PhoneNumberList.Add(_elem1021);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteFriendsBySms_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PhoneNumberList != null && __isset.phoneNumberList) {
          field.Name = "phoneNumberList";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, PhoneNumberList.Count));
            foreach (string _iter1022 in PhoneNumberList)
            {
              oprot.WriteString(_iter1022);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteFriendsBySms_args(");
      bool __first = true;
      if (PhoneNumberList != null && __isset.phoneNumberList) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PhoneNumberList: ");
        __sb.Append(PhoneNumberList);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteFriendsBySms_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public inviteFriendsBySms_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteFriendsBySms_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteFriendsBySms_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteIntoGroup_args : TBase
  {
    private int _reqSeq;
    private string _groupId;
    private List<string> _contactIds;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }

    public List<string> ContactIds
    {
      get
      {
        return _contactIds;
      }
      set
      {
        __isset.contactIds = true;
        this._contactIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool groupId;
      public bool contactIds;
    }

    public inviteIntoGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list1023 = iprot.ReadListBegin();
                  for( int _i1024 = 0; _i1024 < _list1023.Count; ++_i1024)
                  {
                    string _elem1025;
                    _elem1025 = iprot.ReadString();
                    ContactIds.Add(_elem1025);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteIntoGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter1026 in ContactIds)
            {
              oprot.WriteString(_iter1026);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteIntoGroup_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      if (ContactIds != null && __isset.contactIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactIds: ");
        __sb.Append(ContactIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteIntoGroup_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public inviteIntoGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteIntoGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteIntoGroup_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteIntoRoom_args : TBase
  {
    private int _reqSeq;
    private string _roomId;
    private List<string> _contactIds;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }

    public List<string> ContactIds
    {
      get
      {
        return _contactIds;
      }
      set
      {
        __isset.contactIds = true;
        this._contactIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool roomId;
      public bool contactIds;
    }

    public inviteIntoRoom_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list1027 = iprot.ReadListBegin();
                  for( int _i1028 = 0; _i1028 < _list1027.Count; ++_i1028)
                  {
                    string _elem1029;
                    _elem1029 = iprot.ReadString();
                    ContactIds.Add(_elem1029);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteIntoRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter1030 in ContactIds)
            {
              oprot.WriteString(_iter1030);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteIntoRoom_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (RoomId != null && __isset.roomId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoomId: ");
        __sb.Append(RoomId);
      }
      if (ContactIds != null && __isset.contactIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactIds: ");
        __sb.Append(ContactIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteIntoRoom_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public inviteIntoRoom_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteIntoRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteIntoRoom_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteViaEmail_args : TBase
  {
    private int _reqSeq;
    private string _email;
    private string _name;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool email;
      public bool name;
    }

    public inviteViaEmail_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteViaEmail_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteViaEmail_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Email != null && __isset.email) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Email: ");
        __sb.Append(Email);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class inviteViaEmail_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public inviteViaEmail_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("inviteViaEmail_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("inviteViaEmail_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isIdentityIdentifierAvailable_args : TBase
  {
    private IdentityProvider _provider;
    private string _identifier;

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider Provider
    {
      get
      {
        return _provider;
      }
      set
      {
        __isset.provider = true;
        this._provider = value;
      }
    }

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool provider;
      public bool identifier;
    }

    public isIdentityIdentifierAvailable_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isIdentityIdentifierAvailable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isIdentityIdentifierAvailable_args(");
      bool __first = true;
      if (__isset.provider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Provider: ");
        __sb.Append(Provider);
      }
      if (Identifier != null && __isset.identifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identifier: ");
        __sb.Append(Identifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isIdentityIdentifierAvailable_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public isIdentityIdentifierAvailable_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isIdentityIdentifierAvailable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isIdentityIdentifierAvailable_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isUseridAvailable_args : TBase
  {
    private string _userid;

    public string Userid
    {
      get
      {
        return _userid;
      }
      set
      {
        __isset.userid = true;
        this._userid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userid;
    }

    public isUseridAvailable_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isUseridAvailable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isUseridAvailable_args(");
      bool __first = true;
      if (Userid != null && __isset.userid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Userid: ");
        __sb.Append(Userid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class isUseridAvailable_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public isUseridAvailable_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("isUseridAvailable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("isUseridAvailable_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class kickoutFromGroup_args : TBase
  {
    private int _reqSeq;
    private string _groupId;
    private List<string> _contactIds;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }

    public List<string> ContactIds
    {
      get
      {
        return _contactIds;
      }
      set
      {
        __isset.contactIds = true;
        this._contactIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool groupId;
      public bool contactIds;
    }

    public kickoutFromGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list1031 = iprot.ReadListBegin();
                  for( int _i1032 = 0; _i1032 < _list1031.Count; ++_i1032)
                  {
                    string _elem1033;
                    _elem1033 = iprot.ReadString();
                    ContactIds.Add(_elem1033);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("kickoutFromGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter1034 in ContactIds)
            {
              oprot.WriteString(_iter1034);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("kickoutFromGroup_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      if (ContactIds != null && __isset.contactIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactIds: ");
        __sb.Append(ContactIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class kickoutFromGroup_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public kickoutFromGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("kickoutFromGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("kickoutFromGroup_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reissueGroupTicket_args : TBase
  {
    private string _groupMid;

    public string GroupMid
    {
      get
      {
        return _groupMid;
      }
      set
      {
        __isset.groupMid = true;
        this._groupMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool groupMid;
    }

    public reissueGroupTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                GroupMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reissueGroupTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (GroupMid != null && __isset.groupMid) {
          field.Name = "groupMid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reissueGroupTicket_args(");
      bool __first = true;
      if (GroupMid != null && __isset.groupMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupMid: ");
        __sb.Append(GroupMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reissueGroupTicket_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reissueGroupTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reissueGroupTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reissueGroupTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findGroupByTicket_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public findGroupByTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findGroupByTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findGroupByTicket_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findGroupByTicket_result : TBase
  {
    private @Group _success;
    private TalkException _e;

    public @Group Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findGroupByTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new @Group();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findGroupByTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findGroupByTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class leaveGroup_args : TBase
  {
    private int _reqSeq;
    private string _groupId;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool groupId;
    }

    public leaveGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("leaveGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("leaveGroup_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class leaveGroup_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public leaveGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("leaveGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("leaveGroup_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class leaveRoom_args : TBase
  {
    private int _reqSeq;
    private string _roomId;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string RoomId
    {
      get
      {
        return _roomId;
      }
      set
      {
        __isset.roomId = true;
        this._roomId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool roomId;
    }

    public leaveRoom_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                RoomId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("leaveRoom_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (RoomId != null && __isset.roomId) {
          field.Name = "roomId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RoomId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("leaveRoom_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (RoomId != null && __isset.roomId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RoomId: ");
        __sb.Append(RoomId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class leaveRoom_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public leaveRoom_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("leaveRoom_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("leaveRoom_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithIdentityCredential_args : TBase
  {
    private IdentityProvider _identityProvider;
    private string _identifier;
    private string _password;
    private bool _keepLoggedIn;
    private string _accessLocation;
    private string _systemName;
    private string _certificate;

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider IdentityProvider
    {
      get
      {
        return _identityProvider;
      }
      set
      {
        __isset.identityProvider = true;
        this._identityProvider = value;
      }
    }

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public bool KeepLoggedIn
    {
      get
      {
        return _keepLoggedIn;
      }
      set
      {
        __isset.keepLoggedIn = true;
        this._keepLoggedIn = value;
      }
    }

    public string AccessLocation
    {
      get
      {
        return _accessLocation;
      }
      set
      {
        __isset.accessLocation = true;
        this._accessLocation = value;
      }
    }

    public string SystemName
    {
      get
      {
        return _systemName;
      }
      set
      {
        __isset.systemName = true;
        this._systemName = value;
      }
    }

    public string Certificate
    {
      get
      {
        return _certificate;
      }
      set
      {
        __isset.certificate = true;
        this._certificate = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool identityProvider;
      public bool identifier;
      public bool password;
      public bool keepLoggedIn;
      public bool accessLocation;
      public bool systemName;
      public bool certificate;
    }

    public loginWithIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 8:
              if (field.Type == TType.I32) {
                IdentityProvider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                KeepLoggedIn = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                AccessLocation = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                SystemName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Certificate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (__isset.keepLoggedIn) {
          field.Name = "keepLoggedIn";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(KeepLoggedIn);
          oprot.WriteFieldEnd();
        }
        if (AccessLocation != null && __isset.accessLocation) {
          field.Name = "accessLocation";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessLocation);
          oprot.WriteFieldEnd();
        }
        if (SystemName != null && __isset.systemName) {
          field.Name = "systemName";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SystemName);
          oprot.WriteFieldEnd();
        }
        if (__isset.identityProvider) {
          field.Name = "identityProvider";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)IdentityProvider);
          oprot.WriteFieldEnd();
        }
        if (Certificate != null && __isset.certificate) {
          field.Name = "certificate";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Certificate);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithIdentityCredential_args(");
      bool __first = true;
      if (__isset.identityProvider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdentityProvider: ");
        __sb.Append(IdentityProvider);
      }
      if (Identifier != null && __isset.identifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identifier: ");
        __sb.Append(Identifier);
      }
      if (Password != null && __isset.password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if (__isset.keepLoggedIn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeepLoggedIn: ");
        __sb.Append(KeepLoggedIn);
      }
      if (AccessLocation != null && __isset.accessLocation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AccessLocation: ");
        __sb.Append(AccessLocation);
      }
      if (SystemName != null && __isset.systemName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SystemName: ");
        __sb.Append(SystemName);
      }
      if (Certificate != null && __isset.certificate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Certificate: ");
        __sb.Append(Certificate);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithIdentityCredential_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public loginWithIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithIdentityCredential_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithIdentityCredentialForCertificate_args : TBase
  {
    private IdentityProvider _identityProvider;
    private string _identifier;
    private string _password;
    private bool _keepLoggedIn;
    private string _accessLocation;
    private string _systemName;
    private string _certificate;

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider IdentityProvider
    {
      get
      {
        return _identityProvider;
      }
      set
      {
        __isset.identityProvider = true;
        this._identityProvider = value;
      }
    }

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }

    public bool KeepLoggedIn
    {
      get
      {
        return _keepLoggedIn;
      }
      set
      {
        __isset.keepLoggedIn = true;
        this._keepLoggedIn = value;
      }
    }

    public string AccessLocation
    {
      get
      {
        return _accessLocation;
      }
      set
      {
        __isset.accessLocation = true;
        this._accessLocation = value;
      }
    }

    public string SystemName
    {
      get
      {
        return _systemName;
      }
      set
      {
        __isset.systemName = true;
        this._systemName = value;
      }
    }

    public string Certificate
    {
      get
      {
        return _certificate;
      }
      set
      {
        __isset.certificate = true;
        this._certificate = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool identityProvider;
      public bool identifier;
      public bool password;
      public bool keepLoggedIn;
      public bool accessLocation;
      public bool systemName;
      public bool certificate;
    }

    public loginWithIdentityCredentialForCertificate_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 8:
              if (field.Type == TType.I32) {
                IdentityProvider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                KeepLoggedIn = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                AccessLocation = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                SystemName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Certificate = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithIdentityCredentialForCertificate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (__isset.keepLoggedIn) {
          field.Name = "keepLoggedIn";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(KeepLoggedIn);
          oprot.WriteFieldEnd();
        }
        if (AccessLocation != null && __isset.accessLocation) {
          field.Name = "accessLocation";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(AccessLocation);
          oprot.WriteFieldEnd();
        }
        if (SystemName != null && __isset.systemName) {
          field.Name = "systemName";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SystemName);
          oprot.WriteFieldEnd();
        }
        if (__isset.identityProvider) {
          field.Name = "identityProvider";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)IdentityProvider);
          oprot.WriteFieldEnd();
        }
        if (Certificate != null && __isset.certificate) {
          field.Name = "certificate";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Certificate);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithIdentityCredentialForCertificate_args(");
      bool __first = true;
      if (__isset.identityProvider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdentityProvider: ");
        __sb.Append(IdentityProvider);
      }
      if (Identifier != null && __isset.identifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identifier: ");
        __sb.Append(Identifier);
      }
      if (Password != null && __isset.password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      if (__isset.keepLoggedIn) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeepLoggedIn: ");
        __sb.Append(KeepLoggedIn);
      }
      if (AccessLocation != null && __isset.accessLocation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AccessLocation: ");
        __sb.Append(AccessLocation);
      }
      if (SystemName != null && __isset.systemName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SystemName: ");
        __sb.Append(SystemName);
      }
      if (Certificate != null && __isset.certificate) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Certificate: ");
        __sb.Append(Certificate);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithIdentityCredentialForCertificate_result : TBase
  {
    private LoginResult _success;
    private TalkException _e;

    public LoginResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public loginWithIdentityCredentialForCertificate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LoginResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithIdentityCredentialForCertificate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithIdentityCredentialForCertificate_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithVerifier_args : TBase
  {
    private string _verifier;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
    }

    public loginWithVerifier_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithVerifier_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithVerifier_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithVerifier_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public loginWithVerifier_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithVerifier_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithVerifier_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithVerifierForCerificate_args : TBase
  {
    private string _verifier;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
    }

    public loginWithVerifierForCerificate_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithVerifierForCerificate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithVerifierForCerificate_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithVerifierForCerificate_result : TBase
  {
    private LoginResult _success;
    private TalkException _e;

    public LoginResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public loginWithVerifierForCerificate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LoginResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithVerifierForCerificate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithVerifierForCerificate_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithVerifierForCertificate_args : TBase
  {
    private string _verifier;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
    }

    public loginWithVerifierForCertificate_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithVerifierForCertificate_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithVerifierForCertificate_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class loginWithVerifierForCertificate_result : TBase
  {
    private LoginResult _success;
    private TalkException _e;

    public LoginResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public loginWithVerifierForCertificate_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LoginResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("loginWithVerifierForCertificate_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("loginWithVerifierForCertificate_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class logout_args : TBase
  {

    public logout_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("logout_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("logout_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class logout_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public logout_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("logout_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("logout_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class logoutSession_args : TBase
  {
    private string _tokenKey;

    public string TokenKey
    {
      get
      {
        return _tokenKey;
      }
      set
      {
        __isset.tokenKey = true;
        this._tokenKey = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool tokenKey;
    }

    public logoutSession_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                TokenKey = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("logoutSession_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TokenKey != null && __isset.tokenKey) {
          field.Name = "tokenKey";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TokenKey);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("logoutSession_args(");
      bool __first = true;
      if (TokenKey != null && __isset.tokenKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TokenKey: ");
        __sb.Append(TokenKey);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class logoutSession_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public logoutSession_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("logoutSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("logoutSession_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class noop_args : TBase
  {

    public noop_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("noop_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("noop_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class noop_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public noop_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("noop_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("noop_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifiedRedirect_args : TBase
  {
    private Dictionary<string, string> _paramMap;

    public Dictionary<string, string> ParamMap
    {
      get
      {
        return _paramMap;
      }
      set
      {
        __isset.paramMap = true;
        this._paramMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool paramMap;
    }

    public notifiedRedirect_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Map) {
                {
                  ParamMap = new Dictionary<string, string>();
                  TMap _map1035 = iprot.ReadMapBegin();
                  for( int _i1036 = 0; _i1036 < _map1035.Count; ++_i1036)
                  {
                    string _key1037;
                    string _val1038;
                    _key1037 = iprot.ReadString();
                    _val1038 = iprot.ReadString();
                    ParamMap[_key1037] = _val1038;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifiedRedirect_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ParamMap != null && __isset.paramMap) {
          field.Name = "paramMap";
          field.Type = TType.Map;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamMap.Count));
            foreach (string _iter1039 in ParamMap.Keys)
            {
              oprot.WriteString(_iter1039);
              oprot.WriteString(ParamMap[_iter1039]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifiedRedirect_args(");
      bool __first = true;
      if (ParamMap != null && __isset.paramMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParamMap: ");
        __sb.Append(ParamMap);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifiedRedirect_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public notifiedRedirect_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifiedRedirect_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifiedRedirect_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyBuddyOnAir_args : TBase
  {
    private int _seq;
    private List<string> _receiverMids;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public List<string> ReceiverMids
    {
      get
      {
        return _receiverMids;
      }
      set
      {
        __isset.receiverMids = true;
        this._receiverMids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool receiverMids;
    }

    public notifyBuddyOnAir_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list1040 = iprot.ReadListBegin();
                  for( int _i1041 = 0; _i1041 < _list1040.Count; ++_i1041)
                  {
                    string _elem1042;
                    _elem1042 = iprot.ReadString();
                    ReceiverMids.Add(_elem1042);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyBuddyOnAir_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter1043 in ReceiverMids)
            {
              oprot.WriteString(_iter1043);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyBuddyOnAir_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (ReceiverMids != null && __isset.receiverMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReceiverMids: ");
        __sb.Append(ReceiverMids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyBuddyOnAir_result : TBase
  {
    private Dictionary<string, string> _success;
    private TalkException _e;

    public Dictionary<string, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public notifyBuddyOnAir_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map1044 = iprot.ReadMapBegin();
                  for( int _i1045 = 0; _i1045 < _map1044.Count; ++_i1045)
                  {
                    string _key1046;
                    string _val1047;
                    _key1046 = iprot.ReadString();
                    _val1047 = iprot.ReadString();
                    Success[_key1046] = _val1047;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyBuddyOnAir_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter1048 in Success.Keys)
              {
                oprot.WriteString(_iter1048);
                oprot.WriteString(Success[_iter1048]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyBuddyOnAir_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyIndividualEvent_args : TBase
  {
    private NotificationStatus _notificationStatus;
    private List<string> _receiverMids;

    /// <summary>
    /// 
    /// <seealso cref="NotificationStatus"/>
    /// </summary>
    public NotificationStatus NotificationStatus
    {
      get
      {
        return _notificationStatus;
      }
      set
      {
        __isset.notificationStatus = true;
        this._notificationStatus = value;
      }
    }

    public List<string> ReceiverMids
    {
      get
      {
        return _receiverMids;
      }
      set
      {
        __isset.receiverMids = true;
        this._receiverMids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool notificationStatus;
      public bool receiverMids;
    }

    public notifyIndividualEvent_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                NotificationStatus = (NotificationStatus)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list1049 = iprot.ReadListBegin();
                  for( int _i1050 = 0; _i1050 < _list1049.Count; ++_i1050)
                  {
                    string _elem1051;
                    _elem1051 = iprot.ReadString();
                    ReceiverMids.Add(_elem1051);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyIndividualEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.notificationStatus) {
          field.Name = "notificationStatus";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)NotificationStatus);
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter1052 in ReceiverMids)
            {
              oprot.WriteString(_iter1052);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyIndividualEvent_args(");
      bool __first = true;
      if (__isset.notificationStatus) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NotificationStatus: ");
        __sb.Append(NotificationStatus);
      }
      if (ReceiverMids != null && __isset.receiverMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReceiverMids: ");
        __sb.Append(ReceiverMids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyIndividualEvent_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public notifyIndividualEvent_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyIndividualEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyIndividualEvent_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyInstalled_args : TBase
  {
    private string _udidHash;
    private string _applicationTypeWithExtensions;

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public string ApplicationTypeWithExtensions
    {
      get
      {
        return _applicationTypeWithExtensions;
      }
      set
      {
        __isset.applicationTypeWithExtensions = true;
        this._applicationTypeWithExtensions = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool udidHash;
      public bool applicationTypeWithExtensions;
    }

    public notifyInstalled_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ApplicationTypeWithExtensions = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyInstalled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (ApplicationTypeWithExtensions != null && __isset.applicationTypeWithExtensions) {
          field.Name = "applicationTypeWithExtensions";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplicationTypeWithExtensions);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyInstalled_args(");
      bool __first = true;
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (ApplicationTypeWithExtensions != null && __isset.applicationTypeWithExtensions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplicationTypeWithExtensions: ");
        __sb.Append(ApplicationTypeWithExtensions);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyInstalled_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public notifyInstalled_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyInstalled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyInstalled_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyRegistrationComplete_args : TBase
  {
    private string _udidHash;
    private string _applicationTypeWithExtensions;

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public string ApplicationTypeWithExtensions
    {
      get
      {
        return _applicationTypeWithExtensions;
      }
      set
      {
        __isset.applicationTypeWithExtensions = true;
        this._applicationTypeWithExtensions = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool udidHash;
      public bool applicationTypeWithExtensions;
    }

    public notifyRegistrationComplete_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ApplicationTypeWithExtensions = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyRegistrationComplete_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (ApplicationTypeWithExtensions != null && __isset.applicationTypeWithExtensions) {
          field.Name = "applicationTypeWithExtensions";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ApplicationTypeWithExtensions);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyRegistrationComplete_args(");
      bool __first = true;
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (ApplicationTypeWithExtensions != null && __isset.applicationTypeWithExtensions) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApplicationTypeWithExtensions: ");
        __sb.Append(ApplicationTypeWithExtensions);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyRegistrationComplete_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public notifyRegistrationComplete_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyRegistrationComplete_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyRegistrationComplete_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifySleep_args : TBase
  {
    private long _lastRev;
    private int _badge;

    public long LastRev
    {
      get
      {
        return _lastRev;
      }
      set
      {
        __isset.lastRev = true;
        this._lastRev = value;
      }
    }

    public int Badge
    {
      get
      {
        return _badge;
      }
      set
      {
        __isset.badge = true;
        this._badge = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastRev;
      public bool badge;
    }

    public notifySleep_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Badge = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifySleep_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastRev) {
          field.Name = "lastRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastRev);
          oprot.WriteFieldEnd();
        }
        if (__isset.badge) {
          field.Name = "badge";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Badge);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifySleep_args(");
      bool __first = true;
      if (__isset.lastRev) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastRev: ");
        __sb.Append(LastRev);
      }
      if (__isset.badge) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Badge: ");
        __sb.Append(Badge);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifySleep_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public notifySleep_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifySleep_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifySleep_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyUpdated_args : TBase
  {
    private long _lastRev;
    private DeviceInfo _deviceInfo;

    public long LastRev
    {
      get
      {
        return _lastRev;
      }
      set
      {
        __isset.lastRev = true;
        this._lastRev = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool lastRev;
      public bool deviceInfo;
    }

    public notifyUpdated_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LastRev = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyUpdated_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.lastRev) {
          field.Name = "lastRev";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastRev);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyUpdated_args(");
      bool __first = true;
      if (__isset.lastRev) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastRev: ");
        __sb.Append(LastRev);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class notifyUpdated_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public notifyUpdated_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("notifyUpdated_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("notifyUpdated_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openProximityMatch_args : TBase
  {
    private Location _location;

    public Location Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool location;
    }

    public openProximityMatch_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                Location = new Location();
                Location.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("openProximityMatch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Location.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("openProximityMatch_args(");
      bool __first = true;
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location== null ? "<null>" : Location.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class openProximityMatch_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public openProximityMatch_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("openProximityMatch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("openProximityMatch_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerBuddyUser_args : TBase
  {
    private string _buddyId;
    private string _registrarPassword;

    public string BuddyId
    {
      get
      {
        return _buddyId;
      }
      set
      {
        __isset.buddyId = true;
        this._buddyId = value;
      }
    }

    public string RegistrarPassword
    {
      get
      {
        return _registrarPassword;
      }
      set
      {
        __isset.registrarPassword = true;
        this._registrarPassword = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool buddyId;
      public bool registrarPassword;
    }

    public registerBuddyUser_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                BuddyId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                RegistrarPassword = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerBuddyUser_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (BuddyId != null && __isset.buddyId) {
          field.Name = "buddyId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BuddyId);
          oprot.WriteFieldEnd();
        }
        if (RegistrarPassword != null && __isset.registrarPassword) {
          field.Name = "registrarPassword";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegistrarPassword);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerBuddyUser_args(");
      bool __first = true;
      if (BuddyId != null && __isset.buddyId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BuddyId: ");
        __sb.Append(BuddyId);
      }
      if (RegistrarPassword != null && __isset.registrarPassword) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegistrarPassword: ");
        __sb.Append(RegistrarPassword);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerBuddyUser_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerBuddyUser_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerBuddyUser_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerBuddyUser_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerBuddyUserid_args : TBase
  {
    private int _seq;
    private string _userid;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string Userid
    {
      get
      {
        return _userid;
      }
      set
      {
        __isset.userid = true;
        this._userid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool userid;
    }

    public registerBuddyUserid_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerBuddyUserid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerBuddyUserid_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Userid != null && __isset.userid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Userid: ");
        __sb.Append(Userid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerBuddyUserid_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public registerBuddyUserid_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerBuddyUserid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerBuddyUserid_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDevice_args : TBase
  {
    private string _sessionId;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public registerDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDevice_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDevice_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDevice_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDeviceWithIdentityCredential_args : TBase
  {
    private string _sessionId;
    private IdentityProvider _provider;
    private string _identifier;
    private string _verifier;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider Provider
    {
      get
      {
        return _provider;
      }
      set
      {
        __isset.provider = true;
        this._provider = value;
      }
    }

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool provider;
      public bool identifier;
      public bool verifier;
    }

    public registerDeviceWithIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDeviceWithIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDeviceWithIdentityCredential_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (__isset.provider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Provider: ");
        __sb.Append(Provider);
      }
      if (Identifier != null && __isset.identifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identifier: ");
        __sb.Append(Identifier);
      }
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDeviceWithIdentityCredential_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerDeviceWithIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDeviceWithIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDeviceWithIdentityCredential_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDeviceWithoutPhoneNumber_args : TBase
  {
    private string _region;
    private string _udidHash;
    private DeviceInfo _deviceInfo;

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool region;
      public bool udidHash;
      public bool deviceInfo;
    }

    public registerDeviceWithoutPhoneNumber_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDeviceWithoutPhoneNumber_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDeviceWithoutPhoneNumber_args(");
      bool __first = true;
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDeviceWithoutPhoneNumber_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerDeviceWithoutPhoneNumber_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDeviceWithoutPhoneNumber_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDeviceWithoutPhoneNumber_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDeviceWithoutPhoneNumberWithIdentityCredential_args : TBase
  {
    private string _region;
    private string _udidHash;
    private DeviceInfo _deviceInfo;
    private IdentityProvider _provider;
    private string _identifier;
    private string _verifier;
    private string _mid;
    private string _migrationPincodeSessionId;

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider Provider
    {
      get
      {
        return _provider;
      }
      set
      {
        __isset.provider = true;
        this._provider = value;
      }
    }

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }

    public string MigrationPincodeSessionId
    {
      get
      {
        return _migrationPincodeSessionId;
      }
      set
      {
        __isset.migrationPincodeSessionId = true;
        this._migrationPincodeSessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool region;
      public bool udidHash;
      public bool deviceInfo;
      public bool provider;
      public bool identifier;
      public bool verifier;
      public bool mid;
      public bool migrationPincodeSessionId;
    }

    public registerDeviceWithoutPhoneNumberWithIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                MigrationPincodeSessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDeviceWithoutPhoneNumberWithIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (MigrationPincodeSessionId != null && __isset.migrationPincodeSessionId) {
          field.Name = "migrationPincodeSessionId";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MigrationPincodeSessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDeviceWithoutPhoneNumberWithIdentityCredential_args(");
      bool __first = true;
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      if (__isset.provider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Provider: ");
        __sb.Append(Provider);
      }
      if (Identifier != null && __isset.identifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identifier: ");
        __sb.Append(Identifier);
      }
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      if (MigrationPincodeSessionId != null && __isset.migrationPincodeSessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MigrationPincodeSessionId: ");
        __sb.Append(MigrationPincodeSessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerDeviceWithoutPhoneNumberWithIdentityCredential_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerDeviceWithoutPhoneNumberWithIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerDeviceWithoutPhoneNumberWithIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerDeviceWithoutPhoneNumberWithIdentityCredential_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerUserid_args : TBase
  {
    private int _reqSeq;
    private string _userid;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Userid
    {
      get
      {
        return _userid;
      }
      set
      {
        __isset.userid = true;
        this._userid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool userid;
    }

    public registerUserid_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerUserid_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerUserid_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Userid != null && __isset.userid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Userid: ");
        __sb.Append(Userid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerUserid_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerUserid_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerUserid_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerUserid_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWapDevice_args : TBase
  {
    private string _invitationHash;
    private string _guidHash;
    private string _email;
    private DeviceInfo _deviceInfo;

    public string InvitationHash
    {
      get
      {
        return _invitationHash;
      }
      set
      {
        __isset.invitationHash = true;
        this._invitationHash = value;
      }
    }

    public string GuidHash
    {
      get
      {
        return _guidHash;
      }
      set
      {
        __isset.guidHash = true;
        this._guidHash = value;
      }
    }

    public string Email
    {
      get
      {
        return _email;
      }
      set
      {
        __isset.email = true;
        this._email = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool invitationHash;
      public bool guidHash;
      public bool email;
      public bool deviceInfo;
    }

    public registerWapDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                InvitationHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                GuidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Email = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWapDevice_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (InvitationHash != null && __isset.invitationHash) {
          field.Name = "invitationHash";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(InvitationHash);
          oprot.WriteFieldEnd();
        }
        if (GuidHash != null && __isset.guidHash) {
          field.Name = "guidHash";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GuidHash);
          oprot.WriteFieldEnd();
        }
        if (Email != null && __isset.email) {
          field.Name = "email";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Email);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWapDevice_args(");
      bool __first = true;
      if (InvitationHash != null && __isset.invitationHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InvitationHash: ");
        __sb.Append(InvitationHash);
      }
      if (GuidHash != null && __isset.guidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GuidHash: ");
        __sb.Append(GuidHash);
      }
      if (Email != null && __isset.email) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Email: ");
        __sb.Append(Email);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWapDevice_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerWapDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWapDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWapDevice_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithExistingSnsIdAndIdentityCredential_args : TBase
  {
    private IdentityCredential _identityCredential;
    private string _region;
    private string _udidHash;
    private DeviceInfo _deviceInfo;

    public IdentityCredential IdentityCredential
    {
      get
      {
        return _identityCredential;
      }
      set
      {
        __isset.identityCredential = true;
        this._identityCredential = value;
      }
    }

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool identityCredential;
      public bool region;
      public bool udidHash;
      public bool deviceInfo;
    }

    public registerWithExistingSnsIdAndIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                IdentityCredential = new IdentityCredential();
                IdentityCredential.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithExistingSnsIdAndIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IdentityCredential != null && __isset.identityCredential) {
          field.Name = "identityCredential";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          IdentityCredential.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithExistingSnsIdAndIdentityCredential_args(");
      bool __first = true;
      if (IdentityCredential != null && __isset.identityCredential) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdentityCredential: ");
        __sb.Append(IdentityCredential== null ? "<null>" : IdentityCredential.ToString());
      }
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithExistingSnsIdAndIdentityCredential_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerWithExistingSnsIdAndIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithExistingSnsIdAndIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithExistingSnsIdAndIdentityCredential_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithSnsId_args : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;
    private string _region;
    private string _udidHash;
    private DeviceInfo _deviceInfo;
    private string _mid;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snsIdType;
      public bool snsAccessToken;
      public bool region;
      public bool udidHash;
      public bool deviceInfo;
      public bool mid;
    }

    public registerWithSnsId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithSnsId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithSnsId_args(");
      bool __first = true;
      if (__isset.snsIdType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsIdType: ");
        __sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsAccessToken: ");
        __sb.Append(SnsAccessToken);
      }
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithSnsId_result : TBase
  {
    private RegisterWithSnsIdResult _success;
    private TalkException _e;

    public RegisterWithSnsIdResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerWithSnsId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new RegisterWithSnsIdResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithSnsId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithSnsId_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithSnsIdAndIdentityCredential_args : TBase
  {
    private SnsIdType _snsIdType;
    private string _snsAccessToken;
    private IdentityCredential _identityCredential;
    private string _region;
    private string _udidHash;
    private DeviceInfo _deviceInfo;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }

    public string SnsAccessToken
    {
      get
      {
        return _snsAccessToken;
      }
      set
      {
        __isset.snsAccessToken = true;
        this._snsAccessToken = value;
      }
    }

    public IdentityCredential IdentityCredential
    {
      get
      {
        return _identityCredential;
      }
      set
      {
        __isset.identityCredential = true;
        this._identityCredential = value;
      }
    }

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snsIdType;
      public bool snsAccessToken;
      public bool identityCredential;
      public bool region;
      public bool udidHash;
      public bool deviceInfo;
    }

    public registerWithSnsIdAndIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                SnsAccessToken = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                IdentityCredential = new IdentityCredential();
                IdentityCredential.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithSnsIdAndIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        if (SnsAccessToken != null && __isset.snsAccessToken) {
          field.Name = "snsAccessToken";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SnsAccessToken);
          oprot.WriteFieldEnd();
        }
        if (IdentityCredential != null && __isset.identityCredential) {
          field.Name = "identityCredential";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          IdentityCredential.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithSnsIdAndIdentityCredential_args(");
      bool __first = true;
      if (__isset.snsIdType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsIdType: ");
        __sb.Append(SnsIdType);
      }
      if (SnsAccessToken != null && __isset.snsAccessToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsAccessToken: ");
        __sb.Append(SnsAccessToken);
      }
      if (IdentityCredential != null && __isset.identityCredential) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdentityCredential: ");
        __sb.Append(IdentityCredential== null ? "<null>" : IdentityCredential.ToString());
      }
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerWithSnsIdAndIdentityCredential_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerWithSnsIdAndIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerWithSnsIdAndIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerWithSnsIdAndIdentityCredential_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reissueDeviceCredential_args : TBase
  {

    public reissueDeviceCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reissueDeviceCredential_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reissueDeviceCredential_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reissueDeviceCredential_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reissueDeviceCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reissueDeviceCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reissueDeviceCredential_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reissueUserTicket_args : TBase
  {
    private long _expirationTime;
    private int _maxUseCount;

    public long ExpirationTime
    {
      get
      {
        return _expirationTime;
      }
      set
      {
        __isset.expirationTime = true;
        this._expirationTime = value;
      }
    }

    public int MaxUseCount
    {
      get
      {
        return _maxUseCount;
      }
      set
      {
        __isset.maxUseCount = true;
        this._maxUseCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool expirationTime;
      public bool maxUseCount;
    }

    public reissueUserTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I64) {
                ExpirationTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MaxUseCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reissueUserTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.expirationTime) {
          field.Name = "expirationTime";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ExpirationTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.maxUseCount) {
          field.Name = "maxUseCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MaxUseCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reissueUserTicket_args(");
      bool __first = true;
      if (__isset.expirationTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ExpirationTime: ");
        __sb.Append(ExpirationTime);
      }
      if (__isset.maxUseCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MaxUseCount: ");
        __sb.Append(MaxUseCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reissueUserTicket_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reissueUserTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reissueUserTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reissueUserTicket_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageReadRange_args : TBase
  {
    private List<string> _chatIds;

    public List<string> ChatIds
    {
      get
      {
        return _chatIds;
      }
      set
      {
        __isset.chatIds = true;
        this._chatIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatIds;
    }

    public getMessageReadRange_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  ChatIds = new List<string>();
                  TList _list1053 = iprot.ReadListBegin();
                  for( int _i1054 = 0; _i1054 < _list1053.Count; ++_i1054)
                  {
                    string _elem1055;
                    _elem1055 = iprot.ReadString();
                    ChatIds.Add(_elem1055);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageReadRange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatIds != null && __isset.chatIds) {
          field.Name = "chatIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ChatIds.Count));
            foreach (string _iter1056 in ChatIds)
            {
              oprot.WriteString(_iter1056);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageReadRange_args(");
      bool __first = true;
      if (ChatIds != null && __isset.chatIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatIds: ");
        __sb.Append(ChatIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageReadRange_result : TBase
  {
    private List<TMessageReadRange> _success;
    private TalkException _e;

    public List<TMessageReadRange> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessageReadRange_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TMessageReadRange>();
                  TList _list1057 = iprot.ReadListBegin();
                  for( int _i1058 = 0; _i1058 < _list1057.Count; ++_i1058)
                  {
                    TMessageReadRange _elem1059;
                    _elem1059 = new TMessageReadRange();
                    _elem1059.Read(iprot);
                    Success.Add(_elem1059);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageReadRange_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TMessageReadRange _iter1060 in Success)
              {
                _iter1060.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageReadRange_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rejectGroupInvitation_args : TBase
  {
    private int _reqSeq;
    private string _groupId;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string GroupId
    {
      get
      {
        return _groupId;
      }
      set
      {
        __isset.groupId = true;
        this._groupId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool groupId;
    }

    public rejectGroupInvitation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rejectGroupInvitation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupId != null && __isset.groupId) {
          field.Name = "groupId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rejectGroupInvitation_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (GroupId != null && __isset.groupId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupId: ");
        __sb.Append(GroupId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class rejectGroupInvitation_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public rejectGroupInvitation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("rejectGroupInvitation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("rejectGroupInvitation_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class releaseSession_args : TBase
  {

    public releaseSession_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("releaseSession_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("releaseSession_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class releaseSession_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public releaseSession_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("releaseSession_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("releaseSession_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeAllMessages_args : TBase
  {
    private int _seq;
    private string _lastMessageId;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string LastMessageId
    {
      get
      {
        return _lastMessageId;
      }
      set
      {
        __isset.lastMessageId = true;
        this._lastMessageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool lastMessageId;
    }

    public removeAllMessages_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                LastMessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeAllMessages_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (LastMessageId != null && __isset.lastMessageId) {
          field.Name = "lastMessageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastMessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeAllMessages_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (LastMessageId != null && __isset.lastMessageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastMessageId: ");
        __sb.Append(LastMessageId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeAllMessages_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public removeAllMessages_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeAllMessages_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeAllMessages_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeBuddyLocation_args : TBase
  {
    private string _mid;
    private int _index;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
      public bool index;
    }

    public removeBuddyLocation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeBuddyLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeBuddyLocation_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      if (__isset.index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Index: ");
        __sb.Append(Index);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeBuddyLocation_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public removeBuddyLocation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeBuddyLocation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeBuddyLocation_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeMessage_args : TBase
  {
    private string _messageId;

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageId;
    }

    public removeMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeMessage_args(");
      bool __first = true;
      if (MessageId != null && __isset.messageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageId: ");
        __sb.Append(MessageId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeMessage_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public removeMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeMessage_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class makeUserAddMyselfAsContact_args : TBase
  {
    private string _contactOwnerMid;

    public string ContactOwnerMid
    {
      get
      {
        return _contactOwnerMid;
      }
      set
      {
        __isset.contactOwnerMid = true;
        this._contactOwnerMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool contactOwnerMid;
    }

    public makeUserAddMyselfAsContact_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ContactOwnerMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("makeUserAddMyselfAsContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ContactOwnerMid != null && __isset.contactOwnerMid) {
          field.Name = "contactOwnerMid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ContactOwnerMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("makeUserAddMyselfAsContact_args(");
      bool __first = true;
      if (ContactOwnerMid != null && __isset.contactOwnerMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactOwnerMid: ");
        __sb.Append(ContactOwnerMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class makeUserAddMyselfAsContact_result : TBase
  {
    private ContactTransition _success;
    private TalkException _e;

    public ContactTransition Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public makeUserAddMyselfAsContact_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ContactTransition();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("makeUserAddMyselfAsContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("makeUserAddMyselfAsContact_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeMessageFromMyHome_args : TBase
  {
    private string _messageId;

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageId;
    }

    public removeMessageFromMyHome_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeMessageFromMyHome_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeMessageFromMyHome_args(");
      bool __first = true;
      if (MessageId != null && __isset.messageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageId: ");
        __sb.Append(MessageId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeMessageFromMyHome_result : TBase
  {
    private bool _success;
    private TalkException _e;

    public bool Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public removeMessageFromMyHome_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeMessageFromMyHome_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeMessageFromMyHome_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeSnsId_args : TBase
  {
    private SnsIdType _snsIdType;

    /// <summary>
    /// 
    /// <seealso cref="SnsIdType"/>
    /// </summary>
    public SnsIdType SnsIdType
    {
      get
      {
        return _snsIdType;
      }
      set
      {
        __isset.snsIdType = true;
        this._snsIdType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool snsIdType;
    }

    public removeSnsId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                SnsIdType = (SnsIdType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeSnsId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.snsIdType) {
          field.Name = "snsIdType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SnsIdType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeSnsId_args(");
      bool __first = true;
      if (__isset.snsIdType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SnsIdType: ");
        __sb.Append(SnsIdType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeSnsId_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public removeSnsId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeSnsId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeSnsId_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class report_args : TBase
  {
    private long _syncOpRevision;
    private SyncCategory _category;
    private string _report;

    public long SyncOpRevision
    {
      get
      {
        return _syncOpRevision;
      }
      set
      {
        __isset.syncOpRevision = true;
        this._syncOpRevision = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SyncCategory"/>
    /// </summary>
    public SyncCategory Category
    {
      get
      {
        return _category;
      }
      set
      {
        __isset.category = true;
        this._category = value;
      }
    }

    public string Report
    {
      get
      {
        return _report;
      }
      set
      {
        __isset.report = true;
        this._report = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool syncOpRevision;
      public bool category;
      public bool report;
    }

    public report_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Category = (SyncCategory)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Report = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("report_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (__isset.category) {
          field.Name = "category";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Category);
          oprot.WriteFieldEnd();
        }
        if (Report != null && __isset.report) {
          field.Name = "report";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Report);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("report_args(");
      bool __first = true;
      if (__isset.syncOpRevision) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SyncOpRevision: ");
        __sb.Append(SyncOpRevision);
      }
      if (__isset.category) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Category: ");
        __sb.Append(Category);
      }
      if (Report != null && __isset.report) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Report: ");
        __sb.Append(Report);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class report_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public report_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("report_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("report_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportContacts_args : TBase
  {
    private long _syncOpRevision;
    private SyncCategory _category;
    private List<ContactReport> _contactReports;
    private SyncActionType _actionType;

    public long SyncOpRevision
    {
      get
      {
        return _syncOpRevision;
      }
      set
      {
        __isset.syncOpRevision = true;
        this._syncOpRevision = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SyncCategory"/>
    /// </summary>
    public SyncCategory Category
    {
      get
      {
        return _category;
      }
      set
      {
        __isset.category = true;
        this._category = value;
      }
    }

    public List<ContactReport> ContactReports
    {
      get
      {
        return _contactReports;
      }
      set
      {
        __isset.contactReports = true;
        this._contactReports = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SyncActionType"/>
    /// </summary>
    public SyncActionType ActionType
    {
      get
      {
        return _actionType;
      }
      set
      {
        __isset.actionType = true;
        this._actionType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool syncOpRevision;
      public bool category;
      public bool contactReports;
      public bool actionType;
    }

    public reportContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Category = (SyncCategory)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  ContactReports = new List<ContactReport>();
                  TList _list1061 = iprot.ReadListBegin();
                  for( int _i1062 = 0; _i1062 < _list1061.Count; ++_i1062)
                  {
                    ContactReport _elem1063;
                    _elem1063 = new ContactReport();
                    _elem1063.Read(iprot);
                    ContactReports.Add(_elem1063);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I32) {
                ActionType = (SyncActionType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (__isset.category) {
          field.Name = "category";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Category);
          oprot.WriteFieldEnd();
        }
        if (ContactReports != null && __isset.contactReports) {
          field.Name = "contactReports";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, ContactReports.Count));
            foreach (ContactReport _iter1064 in ContactReports)
            {
              _iter1064.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (__isset.actionType) {
          field.Name = "actionType";
          field.Type = TType.I32;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ActionType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportContacts_args(");
      bool __first = true;
      if (__isset.syncOpRevision) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SyncOpRevision: ");
        __sb.Append(SyncOpRevision);
      }
      if (__isset.category) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Category: ");
        __sb.Append(Category);
      }
      if (ContactReports != null && __isset.contactReports) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactReports: ");
        __sb.Append(ContactReports);
      }
      if (__isset.actionType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ActionType: ");
        __sb.Append(ActionType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportContacts_result : TBase
  {
    private List<ContactReportResult> _success;
    private TalkException _e;

    public List<ContactReportResult> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public reportContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ContactReportResult>();
                  TList _list1065 = iprot.ReadListBegin();
                  for( int _i1066 = 0; _i1066 < _list1065.Count; ++_i1066)
                  {
                    ContactReportResult _elem1067;
                    _elem1067 = new ContactReportResult();
                    _elem1067.Read(iprot);
                    Success.Add(_elem1067);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ContactReportResult _iter1068 in Success)
              {
                _iter1068.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportGroups_args : TBase
  {
    private long _syncOpRevision;
    private List<@Group> _groups;

    public long SyncOpRevision
    {
      get
      {
        return _syncOpRevision;
      }
      set
      {
        __isset.syncOpRevision = true;
        this._syncOpRevision = value;
      }
    }

    public List<@Group> Groups
    {
      get
      {
        return _groups;
      }
      set
      {
        __isset.groups = true;
        this._groups = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool syncOpRevision;
      public bool groups;
    }

    public reportGroups_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Groups = new List<@Group>();
                  TList _list1069 = iprot.ReadListBegin();
                  for( int _i1070 = 0; _i1070 < _list1069.Count; ++_i1070)
                  {
                    @Group _elem1071;
                    _elem1071 = new @Group();
                    _elem1071.Read(iprot);
                    Groups.Add(_elem1071);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportGroups_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (Groups != null && __isset.groups) {
          field.Name = "groups";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Groups.Count));
            foreach (@Group _iter1072 in Groups)
            {
              _iter1072.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportGroups_args(");
      bool __first = true;
      if (__isset.syncOpRevision) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SyncOpRevision: ");
        __sb.Append(SyncOpRevision);
      }
      if (Groups != null && __isset.groups) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Groups: ");
        __sb.Append(Groups);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportGroups_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public reportGroups_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportGroups_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportGroups_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportProfile_args : TBase
  {
    private long _syncOpRevision;
    private Profile _profile;

    public long SyncOpRevision
    {
      get
      {
        return _syncOpRevision;
      }
      set
      {
        __isset.syncOpRevision = true;
        this._syncOpRevision = value;
      }
    }

    public Profile Profile
    {
      get
      {
        return _profile;
      }
      set
      {
        __isset.profile = true;
        this._profile = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool syncOpRevision;
      public bool profile;
    }

    public reportProfile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Profile = new Profile();
                Profile.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (Profile != null && __isset.profile) {
          field.Name = "profile";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Profile.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportProfile_args(");
      bool __first = true;
      if (__isset.syncOpRevision) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SyncOpRevision: ");
        __sb.Append(SyncOpRevision);
      }
      if (Profile != null && __isset.profile) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Profile: ");
        __sb.Append(Profile== null ? "<null>" : Profile.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportProfile_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public reportProfile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportProfile_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportRooms_args : TBase
  {
    private long _syncOpRevision;
    private List<Room> _rooms;

    public long SyncOpRevision
    {
      get
      {
        return _syncOpRevision;
      }
      set
      {
        __isset.syncOpRevision = true;
        this._syncOpRevision = value;
      }
    }

    public List<Room> Rooms
    {
      get
      {
        return _rooms;
      }
      set
      {
        __isset.rooms = true;
        this._rooms = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool syncOpRevision;
      public bool rooms;
    }

    public reportRooms_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  Rooms = new List<Room>();
                  TList _list1073 = iprot.ReadListBegin();
                  for( int _i1074 = 0; _i1074 < _list1073.Count; ++_i1074)
                  {
                    Room _elem1075;
                    _elem1075 = new Room();
                    _elem1075.Read(iprot);
                    Rooms.Add(_elem1075);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportRooms_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (Rooms != null && __isset.rooms) {
          field.Name = "rooms";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Rooms.Count));
            foreach (Room _iter1076 in Rooms)
            {
              _iter1076.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportRooms_args(");
      bool __first = true;
      if (__isset.syncOpRevision) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SyncOpRevision: ");
        __sb.Append(SyncOpRevision);
      }
      if (Rooms != null && __isset.rooms) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Rooms: ");
        __sb.Append(Rooms);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportRooms_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public reportRooms_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportRooms_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportRooms_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactByMetaTag_args : TBase
  {
    private int _reqSeq;
    private string _userid;
    private string _reference;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Userid
    {
      get
      {
        return _userid;
      }
      set
      {
        __isset.userid = true;
        this._userid = value;
      }
    }

    public string Reference
    {
      get
      {
        return _reference;
      }
      set
      {
        __isset.reference = true;
        this._reference = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool userid;
      public bool reference;
    }

    public findAndAddContactByMetaTag_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Reference = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactByMetaTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        if (Reference != null && __isset.reference) {
          field.Name = "reference";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Reference);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactByMetaTag_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Userid != null && __isset.userid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Userid: ");
        __sb.Append(Userid);
      }
      if (Reference != null && __isset.reference) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Reference: ");
        __sb.Append(Reference);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findAndAddContactByMetaTag_result : TBase
  {
    private Contact _success;
    private TalkException _e;

    public Contact Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findAndAddContactByMetaTag_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findAndAddContactByMetaTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findAndAddContactByMetaTag_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSettings_args : TBase
  {
    private long _syncOpRevision;
    private Settings _settings;

    public long SyncOpRevision
    {
      get
      {
        return _syncOpRevision;
      }
      set
      {
        __isset.syncOpRevision = true;
        this._syncOpRevision = value;
      }
    }

    public Settings Settings
    {
      get
      {
        return _settings;
      }
      set
      {
        __isset.settings = true;
        this._settings = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool syncOpRevision;
      public bool settings;
    }

    public reportSettings_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                SyncOpRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Settings = new Settings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.syncOpRevision) {
          field.Name = "syncOpRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SyncOpRevision);
          oprot.WriteFieldEnd();
        }
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSettings_args(");
      bool __first = true;
      if (__isset.syncOpRevision) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SyncOpRevision: ");
        __sb.Append(SyncOpRevision);
      }
      if (Settings != null && __isset.settings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Settings: ");
        __sb.Append(Settings== null ? "<null>" : Settings.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSettings_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public reportSettings_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSettings_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSpam_args : TBase
  {
    private string _chatMid;
    private List<string> _memberMids;
    private List<SpammerReason> _spammerReasons;
    private List<string> _senderMids;
    private List<string> _spamMessageIds;
    private List<string> _spamMessages;

    public string ChatMid
    {
      get
      {
        return _chatMid;
      }
      set
      {
        __isset.chatMid = true;
        this._chatMid = value;
      }
    }

    public List<string> MemberMids
    {
      get
      {
        return _memberMids;
      }
      set
      {
        __isset.memberMids = true;
        this._memberMids = value;
      }
    }

    public List<SpammerReason> SpammerReasons
    {
      get
      {
        return _spammerReasons;
      }
      set
      {
        __isset.spammerReasons = true;
        this._spammerReasons = value;
      }
    }

    public List<string> SenderMids
    {
      get
      {
        return _senderMids;
      }
      set
      {
        __isset.senderMids = true;
        this._senderMids = value;
      }
    }

    public List<string> SpamMessageIds
    {
      get
      {
        return _spamMessageIds;
      }
      set
      {
        __isset.spamMessageIds = true;
        this._spamMessageIds = value;
      }
    }

    public List<string> SpamMessages
    {
      get
      {
        return _spamMessages;
      }
      set
      {
        __isset.spamMessages = true;
        this._spamMessages = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatMid;
      public bool memberMids;
      public bool spammerReasons;
      public bool senderMids;
      public bool spamMessageIds;
      public bool spamMessages;
    }

    public reportSpam_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChatMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  MemberMids = new List<string>();
                  TList _list1077 = iprot.ReadListBegin();
                  for( int _i1078 = 0; _i1078 < _list1077.Count; ++_i1078)
                  {
                    string _elem1079;
                    _elem1079 = iprot.ReadString();
                    MemberMids.Add(_elem1079);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  SpammerReasons = new List<SpammerReason>();
                  TList _list1080 = iprot.ReadListBegin();
                  for( int _i1081 = 0; _i1081 < _list1080.Count; ++_i1081)
                  {
                    SpammerReason _elem1082;
                    _elem1082 = (SpammerReason)iprot.ReadI32();
                    SpammerReasons.Add(_elem1082);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.List) {
                {
                  SenderMids = new List<string>();
                  TList _list1083 = iprot.ReadListBegin();
                  for( int _i1084 = 0; _i1084 < _list1083.Count; ++_i1084)
                  {
                    string _elem1085;
                    _elem1085 = iprot.ReadString();
                    SenderMids.Add(_elem1085);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.List) {
                {
                  SpamMessageIds = new List<string>();
                  TList _list1086 = iprot.ReadListBegin();
                  for( int _i1087 = 0; _i1087 < _list1086.Count; ++_i1087)
                  {
                    string _elem1088;
                    _elem1088 = iprot.ReadString();
                    SpamMessageIds.Add(_elem1088);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.List) {
                {
                  SpamMessages = new List<string>();
                  TList _list1089 = iprot.ReadListBegin();
                  for( int _i1090 = 0; _i1090 < _list1089.Count; ++_i1090)
                  {
                    string _elem1091;
                    _elem1091 = iprot.ReadString();
                    SpamMessages.Add(_elem1091);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSpam_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatMid != null && __isset.chatMid) {
          field.Name = "chatMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatMid);
          oprot.WriteFieldEnd();
        }
        if (MemberMids != null && __isset.memberMids) {
          field.Name = "memberMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MemberMids.Count));
            foreach (string _iter1092 in MemberMids)
            {
              oprot.WriteString(_iter1092);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SpammerReasons != null && __isset.spammerReasons) {
          field.Name = "spammerReasons";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, SpammerReasons.Count));
            foreach (SpammerReason _iter1093 in SpammerReasons)
            {
              oprot.WriteI32((int)_iter1093);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SenderMids != null && __isset.senderMids) {
          field.Name = "senderMids";
          field.Type = TType.List;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, SenderMids.Count));
            foreach (string _iter1094 in SenderMids)
            {
              oprot.WriteString(_iter1094);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SpamMessageIds != null && __isset.spamMessageIds) {
          field.Name = "spamMessageIds";
          field.Type = TType.List;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, SpamMessageIds.Count));
            foreach (string _iter1095 in SpamMessageIds)
            {
              oprot.WriteString(_iter1095);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SpamMessages != null && __isset.spamMessages) {
          field.Name = "spamMessages";
          field.Type = TType.List;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, SpamMessages.Count));
            foreach (string _iter1096 in SpamMessages)
            {
              oprot.WriteString(_iter1096);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSpam_args(");
      bool __first = true;
      if (ChatMid != null && __isset.chatMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatMid: ");
        __sb.Append(ChatMid);
      }
      if (MemberMids != null && __isset.memberMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MemberMids: ");
        __sb.Append(MemberMids);
      }
      if (SpammerReasons != null && __isset.spammerReasons) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SpammerReasons: ");
        __sb.Append(SpammerReasons);
      }
      if (SenderMids != null && __isset.senderMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SenderMids: ");
        __sb.Append(SenderMids);
      }
      if (SpamMessageIds != null && __isset.spamMessageIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SpamMessageIds: ");
        __sb.Append(SpamMessageIds);
      }
      if (SpamMessages != null && __isset.spamMessages) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SpamMessages: ");
        __sb.Append(SpamMessages);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSpam_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public reportSpam_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSpam_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSpam_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSpammer_args : TBase
  {
    private string _spammerMid;
    private List<SpammerReason> _spammerReasons;
    private List<string> _spamMessageIds;

    public string SpammerMid
    {
      get
      {
        return _spammerMid;
      }
      set
      {
        __isset.spammerMid = true;
        this._spammerMid = value;
      }
    }

    public List<SpammerReason> SpammerReasons
    {
      get
      {
        return _spammerReasons;
      }
      set
      {
        __isset.spammerReasons = true;
        this._spammerReasons = value;
      }
    }

    public List<string> SpamMessageIds
    {
      get
      {
        return _spamMessageIds;
      }
      set
      {
        __isset.spamMessageIds = true;
        this._spamMessageIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool spammerMid;
      public bool spammerReasons;
      public bool spamMessageIds;
    }

    public reportSpammer_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SpammerMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  SpammerReasons = new List<SpammerReason>();
                  TList _list1097 = iprot.ReadListBegin();
                  for( int _i1098 = 0; _i1098 < _list1097.Count; ++_i1098)
                  {
                    SpammerReason _elem1099;
                    _elem1099 = (SpammerReason)iprot.ReadI32();
                    SpammerReasons.Add(_elem1099);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.List) {
                {
                  SpamMessageIds = new List<string>();
                  TList _list1100 = iprot.ReadListBegin();
                  for( int _i1101 = 0; _i1101 < _list1100.Count; ++_i1101)
                  {
                    string _elem1102;
                    _elem1102 = iprot.ReadString();
                    SpamMessageIds.Add(_elem1102);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSpammer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SpammerMid != null && __isset.spammerMid) {
          field.Name = "spammerMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SpammerMid);
          oprot.WriteFieldEnd();
        }
        if (SpammerReasons != null && __isset.spammerReasons) {
          field.Name = "spammerReasons";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.I32, SpammerReasons.Count));
            foreach (SpammerReason _iter1103 in SpammerReasons)
            {
              oprot.WriteI32((int)_iter1103);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SpamMessageIds != null && __isset.spamMessageIds) {
          field.Name = "spamMessageIds";
          field.Type = TType.List;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, SpamMessageIds.Count));
            foreach (string _iter1104 in SpamMessageIds)
            {
              oprot.WriteString(_iter1104);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSpammer_args(");
      bool __first = true;
      if (SpammerMid != null && __isset.spammerMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SpammerMid: ");
        __sb.Append(SpammerMid);
      }
      if (SpammerReasons != null && __isset.spammerReasons) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SpammerReasons: ");
        __sb.Append(SpammerReasons);
      }
      if (SpamMessageIds != null && __isset.spamMessageIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SpamMessageIds: ");
        __sb.Append(SpamMessageIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reportSpammer_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public reportSpammer_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reportSpammer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reportSpammer_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestAccountPasswordReset_args : TBase
  {
    private IdentityProvider _provider;
    private string _identifier;
    private string _locale;

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider Provider
    {
      get
      {
        return _provider;
      }
      set
      {
        __isset.provider = true;
        this._provider = value;
      }
    }

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool provider;
      public bool identifier;
      public bool locale;
    }

    public requestAccountPasswordReset_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 4:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestAccountPasswordReset_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestAccountPasswordReset_args(");
      bool __first = true;
      if (__isset.provider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Provider: ");
        __sb.Append(Provider);
      }
      if (Identifier != null && __isset.identifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identifier: ");
        __sb.Append(Identifier);
      }
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestAccountPasswordReset_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public requestAccountPasswordReset_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestAccountPasswordReset_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestAccountPasswordReset_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestEmailConfirmation_args : TBase
  {
    private EmailConfirmation _emailConfirmation;

    public EmailConfirmation EmailConfirmation
    {
      get
      {
        return _emailConfirmation;
      }
      set
      {
        __isset.emailConfirmation = true;
        this._emailConfirmation = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool emailConfirmation;
    }

    public requestEmailConfirmation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                EmailConfirmation = new EmailConfirmation();
                EmailConfirmation.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestEmailConfirmation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (EmailConfirmation != null && __isset.emailConfirmation) {
          field.Name = "emailConfirmation";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          EmailConfirmation.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestEmailConfirmation_args(");
      bool __first = true;
      if (EmailConfirmation != null && __isset.emailConfirmation) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("EmailConfirmation: ");
        __sb.Append(EmailConfirmation== null ? "<null>" : EmailConfirmation.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestEmailConfirmation_result : TBase
  {
    private EmailConfirmationSession _success;
    private TalkException _e;

    public EmailConfirmationSession Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public requestEmailConfirmation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new EmailConfirmationSession();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestEmailConfirmation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestEmailConfirmation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestIdentityUnbind_args : TBase
  {
    private IdentityProvider _provider;
    private string _identifier;

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider Provider
    {
      get
      {
        return _provider;
      }
      set
      {
        __isset.provider = true;
        this._provider = value;
      }
    }

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool provider;
      public bool identifier;
    }

    public requestIdentityUnbind_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 4:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestIdentityUnbind_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestIdentityUnbind_args(");
      bool __first = true;
      if (__isset.provider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Provider: ");
        __sb.Append(Provider);
      }
      if (Identifier != null && __isset.identifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identifier: ");
        __sb.Append(Identifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestIdentityUnbind_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public requestIdentityUnbind_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestIdentityUnbind_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestIdentityUnbind_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class resendEmailConfirmation_args : TBase
  {
    private string _verifier;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
    }

    public resendEmailConfirmation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("resendEmailConfirmation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("resendEmailConfirmation_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class resendEmailConfirmation_result : TBase
  {
    private EmailConfirmationSession _success;
    private TalkException _e;

    public EmailConfirmationSession Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public resendEmailConfirmation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new EmailConfirmationSession();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("resendEmailConfirmation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("resendEmailConfirmation_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class resendPinCode_args : TBase
  {
    private string _sessionId;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public resendPinCode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("resendPinCode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("resendPinCode_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class resendPinCode_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public resendPinCode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("resendPinCode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("resendPinCode_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class resendPinCodeBySMS_args : TBase
  {
    private string _sessionId;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
    }

    public resendPinCodeBySMS_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("resendPinCodeBySMS_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("resendPinCodeBySMS_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class resendPinCodeBySMS_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public resendPinCodeBySMS_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("resendPinCodeBySMS_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("resendPinCodeBySMS_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendChatChecked_args : TBase
  {
    private int _seq;
    private string _consumer;
    private string _lastMessageId;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string Consumer
    {
      get
      {
        return _consumer;
      }
      set
      {
        __isset.consumer = true;
        this._consumer = value;
      }
    }

    public string LastMessageId
    {
      get
      {
        return _lastMessageId;
      }
      set
      {
        __isset.lastMessageId = true;
        this._lastMessageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool consumer;
      public bool lastMessageId;
    }

    public sendChatChecked_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                LastMessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendChatChecked_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (LastMessageId != null && __isset.lastMessageId) {
          field.Name = "lastMessageId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastMessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendChatChecked_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Consumer != null && __isset.consumer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Consumer: ");
        __sb.Append(Consumer);
      }
      if (LastMessageId != null && __isset.lastMessageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastMessageId: ");
        __sb.Append(LastMessageId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendChatChecked_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public sendChatChecked_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendChatChecked_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendChatChecked_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageAwaitCommit_args : TBase
  {
    private int _seq;
    private Message _message;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public Message Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool message;
    }

    public sendMessageAwaitCommit_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageAwaitCommit_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageAwaitCommit_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageAwaitCommit_result : TBase
  {
    private CommitMessageResult _success;
    private TalkException _e;

    public CommitMessageResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendMessageAwaitCommit_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new CommitMessageResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageAwaitCommit_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageAwaitCommit_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendChatRemoved_args : TBase
  {
    private int _seq;
    private string _consumer;
    private string _lastMessageId;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string Consumer
    {
      get
      {
        return _consumer;
      }
      set
      {
        __isset.consumer = true;
        this._consumer = value;
      }
    }

    public string LastMessageId
    {
      get
      {
        return _lastMessageId;
      }
      set
      {
        __isset.lastMessageId = true;
        this._lastMessageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool consumer;
      public bool lastMessageId;
    }

    public sendChatRemoved_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                LastMessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendChatRemoved_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (LastMessageId != null && __isset.lastMessageId) {
          field.Name = "lastMessageId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(LastMessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendChatRemoved_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Consumer != null && __isset.consumer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Consumer: ");
        __sb.Append(Consumer);
      }
      if (LastMessageId != null && __isset.lastMessageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastMessageId: ");
        __sb.Append(LastMessageId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendChatRemoved_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public sendChatRemoved_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendChatRemoved_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendChatRemoved_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendContentPreviewUpdated_args : TBase
  {
    private int _esq;
    private string _messageId;
    private List<string> _receiverMids;

    public int Esq
    {
      get
      {
        return _esq;
      }
      set
      {
        __isset.esq = true;
        this._esq = value;
      }
    }

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }

    public List<string> ReceiverMids
    {
      get
      {
        return _receiverMids;
      }
      set
      {
        __isset.receiverMids = true;
        this._receiverMids = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool esq;
      public bool messageId;
      public bool receiverMids;
    }

    public sendContentPreviewUpdated_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Esq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  ReceiverMids = new List<string>();
                  TList _list1105 = iprot.ReadListBegin();
                  for( int _i1106 = 0; _i1106 < _list1105.Count; ++_i1106)
                  {
                    string _elem1107;
                    _elem1107 = iprot.ReadString();
                    ReceiverMids.Add(_elem1107);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendContentPreviewUpdated_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.esq) {
          field.Name = "esq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Esq);
          oprot.WriteFieldEnd();
        }
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        if (ReceiverMids != null && __isset.receiverMids) {
          field.Name = "receiverMids";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ReceiverMids.Count));
            foreach (string _iter1108 in ReceiverMids)
            {
              oprot.WriteString(_iter1108);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendContentPreviewUpdated_args(");
      bool __first = true;
      if (__isset.esq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Esq: ");
        __sb.Append(Esq);
      }
      if (MessageId != null && __isset.messageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageId: ");
        __sb.Append(MessageId);
      }
      if (ReceiverMids != null && __isset.receiverMids) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReceiverMids: ");
        __sb.Append(ReceiverMids);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendContentPreviewUpdated_result : TBase
  {
    private Dictionary<string, string> _success;
    private TalkException _e;

    public Dictionary<string, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendContentPreviewUpdated_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map1109 = iprot.ReadMapBegin();
                  for( int _i1110 = 0; _i1110 < _map1109.Count; ++_i1110)
                  {
                    string _key1111;
                    string _val1112;
                    _key1111 = iprot.ReadString();
                    _val1112 = iprot.ReadString();
                    Success[_key1111] = _val1112;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendContentPreviewUpdated_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter1113 in Success.Keys)
              {
                oprot.WriteString(_iter1113);
                oprot.WriteString(Success[_iter1113]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendContentPreviewUpdated_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendContentReceipt_args : TBase
  {
    private int _seq;
    private string _consumer;
    private string _messageId;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string Consumer
    {
      get
      {
        return _consumer;
      }
      set
      {
        __isset.consumer = true;
        this._consumer = value;
      }
    }

    public string MessageId
    {
      get
      {
        return _messageId;
      }
      set
      {
        __isset.messageId = true;
        this._messageId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool consumer;
      public bool messageId;
    }

    public sendContentReceipt_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MessageId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendContentReceipt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (MessageId != null && __isset.messageId) {
          field.Name = "messageId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendContentReceipt_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Consumer != null && __isset.consumer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Consumer: ");
        __sb.Append(Consumer);
      }
      if (MessageId != null && __isset.messageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageId: ");
        __sb.Append(MessageId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendContentReceipt_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public sendContentReceipt_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendContentReceipt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendContentReceipt_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendDummyPush_args : TBase
  {

    public sendDummyPush_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendDummyPush_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendDummyPush_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendDummyPush_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public sendDummyPush_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendDummyPush_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendDummyPush_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeE2EEPublicKey_args : TBase
  {
    private E2EEPublicKey _publicKey;

    public E2EEPublicKey PublicKey
    {
      get
      {
        return _publicKey;
      }
      set
      {
        __isset.publicKey = true;
        this._publicKey = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool publicKey;
    }

    public removeE2EEPublicKey_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                PublicKey = new E2EEPublicKey();
                PublicKey.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeE2EEPublicKey_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PublicKey != null && __isset.publicKey) {
          field.Name = "publicKey";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          PublicKey.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeE2EEPublicKey_args(");
      bool __first = true;
      if (PublicKey != null && __isset.publicKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublicKey: ");
        __sb.Append(PublicKey== null ? "<null>" : PublicKey.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeE2EEPublicKey_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public removeE2EEPublicKey_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeE2EEPublicKey_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeE2EEPublicKey_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class negotiateE2EEPublicKey_args : TBase
  {
    private string _mid;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
    }

    public negotiateE2EEPublicKey_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("negotiateE2EEPublicKey_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("negotiateE2EEPublicKey_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class negotiateE2EEPublicKey_result : TBase
  {
    private E2EENegotiationResult _success;
    private TalkException _e;

    public E2EENegotiationResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public negotiateE2EEPublicKey_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new E2EENegotiationResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("negotiateE2EEPublicKey_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("negotiateE2EEPublicKey_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getE2EEPublicKey_args : TBase
  {
    private string _mid;
    private int _version;
    private int _keyId;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }

    public int Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }

    public int KeyId
    {
      get
      {
        return _keyId;
      }
      set
      {
        __isset.keyId = true;
        this._keyId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
      public bool version;
      public bool keyId;
    }

    public getE2EEPublicKey_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Version = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                KeyId = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getE2EEPublicKey_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.version) {
          field.Name = "version";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Version);
          oprot.WriteFieldEnd();
        }
        if (__isset.keyId) {
          field.Name = "keyId";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(KeyId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getE2EEPublicKey_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      if (__isset.version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      if (__isset.keyId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("KeyId: ");
        __sb.Append(KeyId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getE2EEPublicKey_result : TBase
  {
    private E2EEPublicKey _success;
    private TalkException _e;

    public E2EEPublicKey Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getE2EEPublicKey_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new E2EEPublicKey();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getE2EEPublicKey_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getE2EEPublicKey_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestE2EEKeyExchange_args : TBase
  {
    private int _reqSeq;
    private byte[] _temporalPublicKey;
    private E2EEPublicKey _publicKey;
    private byte[] _verifier;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public byte[] TemporalPublicKey
    {
      get
      {
        return _temporalPublicKey;
      }
      set
      {
        __isset.temporalPublicKey = true;
        this._temporalPublicKey = value;
      }
    }

    public E2EEPublicKey PublicKey
    {
      get
      {
        return _publicKey;
      }
      set
      {
        __isset.publicKey = true;
        this._publicKey = value;
      }
    }

    public byte[] Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool temporalPublicKey;
      public bool publicKey;
      public bool verifier;
    }

    public requestE2EEKeyExchange_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                TemporalPublicKey = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                PublicKey = new E2EEPublicKey();
                PublicKey.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestE2EEKeyExchange_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (TemporalPublicKey != null && __isset.temporalPublicKey) {
          field.Name = "temporalPublicKey";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(TemporalPublicKey);
          oprot.WriteFieldEnd();
        }
        if (PublicKey != null && __isset.publicKey) {
          field.Name = "publicKey";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          PublicKey.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Verifier);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestE2EEKeyExchange_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (TemporalPublicKey != null && __isset.temporalPublicKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TemporalPublicKey: ");
        __sb.Append(TemporalPublicKey);
      }
      if (PublicKey != null && __isset.publicKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublicKey: ");
        __sb.Append(PublicKey== null ? "<null>" : PublicKey.ToString());
      }
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class requestE2EEKeyExchange_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public requestE2EEKeyExchange_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("requestE2EEKeyExchange_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("requestE2EEKeyExchange_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLastE2EEPublicKeys_args : TBase
  {
    private string _chatMid;

    public string ChatMid
    {
      get
      {
        return _chatMid;
      }
      set
      {
        __isset.chatMid = true;
        this._chatMid = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatMid;
    }

    public getLastE2EEPublicKeys_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChatMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLastE2EEPublicKeys_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatMid != null && __isset.chatMid) {
          field.Name = "chatMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatMid);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLastE2EEPublicKeys_args(");
      bool __first = true;
      if (ChatMid != null && __isset.chatMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatMid: ");
        __sb.Append(ChatMid);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLastE2EEPublicKeys_result : TBase
  {
    private Dictionary<string, E2EEPublicKey> _success;
    private TalkException _e;

    public Dictionary<string, E2EEPublicKey> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getLastE2EEPublicKeys_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, E2EEPublicKey>();
                  TMap _map1114 = iprot.ReadMapBegin();
                  for( int _i1115 = 0; _i1115 < _map1114.Count; ++_i1115)
                  {
                    string _key1116;
                    E2EEPublicKey _val1117;
                    _key1116 = iprot.ReadString();
                    _val1117 = new E2EEPublicKey();
                    _val1117.Read(iprot);
                    Success[_key1116] = _val1117;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLastE2EEPublicKeys_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter1118 in Success.Keys)
              {
                oprot.WriteString(_iter1118);
                Success[_iter1118].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLastE2EEPublicKeys_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerE2EEPublicKey_args : TBase
  {
    private int _reqSeq;
    private E2EEPublicKey _publicKey;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public E2EEPublicKey PublicKey
    {
      get
      {
        return _publicKey;
      }
      set
      {
        __isset.publicKey = true;
        this._publicKey = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool publicKey;
    }

    public registerE2EEPublicKey_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                PublicKey = new E2EEPublicKey();
                PublicKey.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerE2EEPublicKey_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (PublicKey != null && __isset.publicKey) {
          field.Name = "publicKey";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          PublicKey.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerE2EEPublicKey_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (PublicKey != null && __isset.publicKey) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PublicKey: ");
        __sb.Append(PublicKey== null ? "<null>" : PublicKey.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class registerE2EEPublicKey_result : TBase
  {
    private E2EEPublicKey _success;
    private TalkException _e;

    public E2EEPublicKey Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public registerE2EEPublicKey_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new E2EEPublicKey();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("registerE2EEPublicKey_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("registerE2EEPublicKey_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getE2EEPublicKeys_args : TBase
  {

    public getE2EEPublicKeys_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getE2EEPublicKeys_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getE2EEPublicKeys_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getE2EEPublicKeys_result : TBase
  {
    private List<E2EEPublicKey> _success;
    private TalkException _e;

    public List<E2EEPublicKey> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getE2EEPublicKeys_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<E2EEPublicKey>();
                  TList _list1119 = iprot.ReadListBegin();
                  for( int _i1120 = 0; _i1120 < _list1119.Count; ++_i1120)
                  {
                    E2EEPublicKey _elem1121;
                    _elem1121 = new E2EEPublicKey();
                    _elem1121.Read(iprot);
                    Success.Add(_elem1121);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getE2EEPublicKeys_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (E2EEPublicKey _iter1122 in Success)
              {
                _iter1122.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getE2EEPublicKeys_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getE2EEPublicKeysEx_args : TBase
  {
    private bool _ignoreE2EEStatus;

    public bool IgnoreE2EEStatus
    {
      get
      {
        return _ignoreE2EEStatus;
      }
      set
      {
        __isset.ignoreE2EEStatus = true;
        this._ignoreE2EEStatus = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ignoreE2EEStatus;
    }

    public getE2EEPublicKeysEx_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Bool) {
                IgnoreE2EEStatus = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getE2EEPublicKeysEx_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.ignoreE2EEStatus) {
          field.Name = "ignoreE2EEStatus";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IgnoreE2EEStatus);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getE2EEPublicKeysEx_args(");
      bool __first = true;
      if (__isset.ignoreE2EEStatus) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IgnoreE2EEStatus: ");
        __sb.Append(IgnoreE2EEStatus);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getE2EEPublicKeysEx_result : TBase
  {
    private List<E2EEPublicKey> _success;
    private TalkException _e;

    public List<E2EEPublicKey> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getE2EEPublicKeysEx_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<E2EEPublicKey>();
                  TList _list1123 = iprot.ReadListBegin();
                  for( int _i1124 = 0; _i1124 < _list1123.Count; ++_i1124)
                  {
                    E2EEPublicKey _elem1125;
                    _elem1125 = new E2EEPublicKey();
                    _elem1125.Read(iprot);
                    Success.Add(_elem1125);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getE2EEPublicKeysEx_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (E2EEPublicKey _iter1126 in Success)
              {
                _iter1126.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getE2EEPublicKeysEx_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getReadMessageOpsInBulk_args : TBase
  {
    private List<string> _chatIds;

    public List<string> ChatIds
    {
      get
      {
        return _chatIds;
      }
      set
      {
        __isset.chatIds = true;
        this._chatIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatIds;
    }

    public getReadMessageOpsInBulk_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  ChatIds = new List<string>();
                  TList _list1127 = iprot.ReadListBegin();
                  for( int _i1128 = 0; _i1128 < _list1127.Count; ++_i1128)
                  {
                    string _elem1129;
                    _elem1129 = iprot.ReadString();
                    ChatIds.Add(_elem1129);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getReadMessageOpsInBulk_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatIds != null && __isset.chatIds) {
          field.Name = "chatIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ChatIds.Count));
            foreach (string _iter1130 in ChatIds)
            {
              oprot.WriteString(_iter1130);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getReadMessageOpsInBulk_args(");
      bool __first = true;
      if (ChatIds != null && __isset.chatIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatIds: ");
        __sb.Append(ChatIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getReadMessageOpsInBulk_result : TBase
  {
    private List<Operation> _success;
    private TalkException _e;

    public List<Operation> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getReadMessageOpsInBulk_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Operation>();
                  TList _list1131 = iprot.ReadListBegin();
                  for( int _i1132 = 0; _i1132 < _list1131.Count; ++_i1132)
                  {
                    Operation _elem1133;
                    _elem1133 = new Operation();
                    _elem1133.Read(iprot);
                    Success.Add(_elem1133);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getReadMessageOpsInBulk_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Operation _iter1134 in Success)
              {
                _iter1134.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getReadMessageOpsInBulk_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendEvent_args : TBase
  {
    private int _seq;
    private Message _message;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public Message Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool message;
    }

    public sendEvent_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendEvent_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendEvent_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendEvent_result : TBase
  {
    private Message _success;
    private TalkException _e;

    public Message Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendEvent_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendEvent_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendEvent_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessage_args : TBase
  {
    private int _seq;
    private Message _message;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public Message Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool message;
    }

    public sendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessage_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessage_result : TBase
  {
    private Message _success;
    private TalkException _e;

    public Message Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageIgnored_args : TBase
  {
    private int _seq;
    private string _consumer;
    private List<string> _messageIds;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string Consumer
    {
      get
      {
        return _consumer;
      }
      set
      {
        __isset.consumer = true;
        this._consumer = value;
      }
    }

    public List<string> MessageIds
    {
      get
      {
        return _messageIds;
      }
      set
      {
        __isset.messageIds = true;
        this._messageIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool consumer;
      public bool messageIds;
    }

    public sendMessageIgnored_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  MessageIds = new List<string>();
                  TList _list1135 = iprot.ReadListBegin();
                  for( int _i1136 = 0; _i1136 < _list1135.Count; ++_i1136)
                  {
                    string _elem1137;
                    _elem1137 = iprot.ReadString();
                    MessageIds.Add(_elem1137);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageIgnored_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (MessageIds != null && __isset.messageIds) {
          field.Name = "messageIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MessageIds.Count));
            foreach (string _iter1138 in MessageIds)
            {
              oprot.WriteString(_iter1138);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageIgnored_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Consumer != null && __isset.consumer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Consumer: ");
        __sb.Append(Consumer);
      }
      if (MessageIds != null && __isset.messageIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageIds: ");
        __sb.Append(MessageIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageIgnored_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public sendMessageIgnored_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageIgnored_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageIgnored_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageReceipt_args : TBase
  {
    private int _seq;
    private string _consumer;
    private List<string> _messageIds;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public string Consumer
    {
      get
      {
        return _consumer;
      }
      set
      {
        __isset.consumer = true;
        this._consumer = value;
      }
    }

    public List<string> MessageIds
    {
      get
      {
        return _messageIds;
      }
      set
      {
        __isset.messageIds = true;
        this._messageIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool consumer;
      public bool messageIds;
    }

    public sendMessageReceipt_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Consumer = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.List) {
                {
                  MessageIds = new List<string>();
                  TList _list1139 = iprot.ReadListBegin();
                  for( int _i1140 = 0; _i1140 < _list1139.Count; ++_i1140)
                  {
                    string _elem1141;
                    _elem1141 = iprot.ReadString();
                    MessageIds.Add(_elem1141);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageReceipt_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Consumer != null && __isset.consumer) {
          field.Name = "consumer";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Consumer);
          oprot.WriteFieldEnd();
        }
        if (MessageIds != null && __isset.messageIds) {
          field.Name = "messageIds";
          field.Type = TType.List;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, MessageIds.Count));
            foreach (string _iter1142 in MessageIds)
            {
              oprot.WriteString(_iter1142);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageReceipt_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Consumer != null && __isset.consumer) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Consumer: ");
        __sb.Append(Consumer);
      }
      if (MessageIds != null && __isset.messageIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageIds: ");
        __sb.Append(MessageIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageReceipt_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public sendMessageReceipt_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageReceipt_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageReceipt_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByMetaTag_args : TBase
  {
    private string _userid;
    private string _reference;

    public string Userid
    {
      get
      {
        return _userid;
      }
      set
      {
        __isset.userid = true;
        this._userid = value;
      }
    }

    public string Reference
    {
      get
      {
        return _reference;
      }
      set
      {
        __isset.reference = true;
        this._reference = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userid;
      public bool reference;
    }

    public findContactByMetaTag_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Userid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Reference = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByMetaTag_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Userid != null && __isset.userid) {
          field.Name = "userid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Userid);
          oprot.WriteFieldEnd();
        }
        if (Reference != null && __isset.reference) {
          field.Name = "reference";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Reference);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByMetaTag_args(");
      bool __first = true;
      if (Userid != null && __isset.userid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Userid: ");
        __sb.Append(Userid);
      }
      if (Reference != null && __isset.reference) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Reference: ");
        __sb.Append(Reference);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class findContactByMetaTag_result : TBase
  {
    private Contact _success;
    private TalkException _e;

    public Contact Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public findContactByMetaTag_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Contact();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("findContactByMetaTag_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("findContactByMetaTag_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageToMyHome_args : TBase
  {
    private int _seq;
    private Message _message;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public Message Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool message;
    }

    public sendMessageToMyHome_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageToMyHome_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageToMyHome_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class sendMessageToMyHome_result : TBase
  {
    private Message _success;
    private TalkException _e;

    public Message Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public sendMessageToMyHome_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("sendMessageToMyHome_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("sendMessageToMyHome_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setBuddyLocation_args : TBase
  {
    private string _mid;
    private int _index;
    private Geolocation _location;

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }

    public int Index
    {
      get
      {
        return _index;
      }
      set
      {
        __isset.index = true;
        this._index = value;
      }
    }

    public Geolocation Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool mid;
      public bool index;
      public bool location;
    }

    public setBuddyLocation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Index = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Struct) {
                Location = new Geolocation();
                Location.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setBuddyLocation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.index) {
          field.Name = "index";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Index);
          oprot.WriteFieldEnd();
        }
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.Struct;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          Location.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setBuddyLocation_args(");
      bool __first = true;
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      if (__isset.index) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Index: ");
        __sb.Append(Index);
      }
      if (Location != null && __isset.location) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Location: ");
        __sb.Append(Location== null ? "<null>" : Location.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setBuddyLocation_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public setBuddyLocation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setBuddyLocation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setBuddyLocation_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setIdentityCredential_args : TBase
  {
    private string _identifier;
    private string _verifier;
    private IdentityProvider _provider;

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider Provider
    {
      get
      {
        return _provider;
      }
      set
      {
        __isset.provider = true;
        this._provider = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool identifier;
      public bool verifier;
      public bool provider;
    }

    public setIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Provider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (__isset.provider) {
          field.Name = "provider";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Provider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setIdentityCredential_args(");
      bool __first = true;
      if (Identifier != null && __isset.identifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identifier: ");
        __sb.Append(Identifier);
      }
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      if (__isset.provider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Provider: ");
        __sb.Append(Provider);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setIdentityCredential_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public setIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setIdentityCredential_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setNotificationsEnabled_args : TBase
  {
    private int _reqSeq;
    private MIDType _type;
    private string _target;
    private bool _enablement;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="MIDType"/>
    /// </summary>
    public MIDType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string Target
    {
      get
      {
        return _target;
      }
      set
      {
        __isset.target = true;
        this._target = value;
      }
    }

    public bool Enablement
    {
      get
      {
        return _enablement;
      }
      set
      {
        __isset.enablement = true;
        this._enablement = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool type;
      public bool target;
      public bool enablement;
    }

    public setNotificationsEnabled_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Type = (MIDType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Target = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                Enablement = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setNotificationsEnabled_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        if (Target != null && __isset.target) {
          field.Name = "target";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Target);
          oprot.WriteFieldEnd();
        }
        if (__isset.enablement) {
          field.Name = "enablement";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Enablement);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setNotificationsEnabled_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Target != null && __isset.target) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Target: ");
        __sb.Append(Target);
      }
      if (__isset.enablement) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Enablement: ");
        __sb.Append(Enablement);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setNotificationsEnabled_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public setNotificationsEnabled_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setNotificationsEnabled_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setNotificationsEnabled_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class startUpdateVerification_args : TBase
  {
    private string _region;
    private CarrierCode _carrier;
    private string _phone;
    private string _udidHash;
    private DeviceInfo _deviceInfo;
    private string _networkCode;
    private string _locale;

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CarrierCode"/>
    /// </summary>
    public CarrierCode Carrier
    {
      get
      {
        return _carrier;
      }
      set
      {
        __isset.carrier = true;
        this._carrier = value;
      }
    }

    public string Phone
    {
      get
      {
        return _phone;
      }
      set
      {
        __isset.phone = true;
        this._phone = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }

    public string NetworkCode
    {
      get
      {
        return _networkCode;
      }
      set
      {
        __isset.networkCode = true;
        this._networkCode = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool region;
      public bool carrier;
      public bool phone;
      public bool udidHash;
      public bool deviceInfo;
      public bool networkCode;
      public bool locale;
    }

    public startUpdateVerification_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Carrier = (CarrierCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Phone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                NetworkCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("startUpdateVerification_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (__isset.carrier) {
          field.Name = "carrier";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Carrier);
          oprot.WriteFieldEnd();
        }
        if (Phone != null && __isset.phone) {
          field.Name = "phone";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Phone);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (NetworkCode != null && __isset.networkCode) {
          field.Name = "networkCode";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NetworkCode);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("startUpdateVerification_args(");
      bool __first = true;
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      if (__isset.carrier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Carrier: ");
        __sb.Append(Carrier);
      }
      if (Phone != null && __isset.phone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Phone: ");
        __sb.Append(Phone);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      if (NetworkCode != null && __isset.networkCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NetworkCode: ");
        __sb.Append(NetworkCode);
      }
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class startUpdateVerification_result : TBase
  {
    private VerificationSessionData _success;
    private TalkException _e;

    public VerificationSessionData Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public startUpdateVerification_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new VerificationSessionData();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("startUpdateVerification_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("startUpdateVerification_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class startVerification_args : TBase
  {
    private string _region;
    private CarrierCode _carrier;
    private string _phone;
    private string _udidHash;
    private DeviceInfo _deviceInfo;
    private string _networkCode;
    private string _mid;
    private string _locale;
    private SIMInfo _simInfo;
    private string _oldUdidHash;

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="CarrierCode"/>
    /// </summary>
    public CarrierCode Carrier
    {
      get
      {
        return _carrier;
      }
      set
      {
        __isset.carrier = true;
        this._carrier = value;
      }
    }

    public string Phone
    {
      get
      {
        return _phone;
      }
      set
      {
        __isset.phone = true;
        this._phone = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }

    public string NetworkCode
    {
      get
      {
        return _networkCode;
      }
      set
      {
        __isset.networkCode = true;
        this._networkCode = value;
      }
    }

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }

    public string Locale
    {
      get
      {
        return _locale;
      }
      set
      {
        __isset.locale = true;
        this._locale = value;
      }
    }

    public SIMInfo SimInfo
    {
      get
      {
        return _simInfo;
      }
      set
      {
        __isset.simInfo = true;
        this._simInfo = value;
      }
    }

    public string OldUdidHash
    {
      get
      {
        return _oldUdidHash;
      }
      set
      {
        __isset.oldUdidHash = true;
        this._oldUdidHash = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool region;
      public bool carrier;
      public bool phone;
      public bool udidHash;
      public bool deviceInfo;
      public bool networkCode;
      public bool mid;
      public bool locale;
      public bool simInfo;
      public bool oldUdidHash;
    }

    public startVerification_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Carrier = (CarrierCode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Phone = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                NetworkCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Locale = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                SimInfo = new SIMInfo();
                SimInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                OldUdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("startVerification_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        if (__isset.carrier) {
          field.Name = "carrier";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Carrier);
          oprot.WriteFieldEnd();
        }
        if (Phone != null && __isset.phone) {
          field.Name = "phone";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Phone);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (NetworkCode != null && __isset.networkCode) {
          field.Name = "networkCode";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(NetworkCode);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (Locale != null && __isset.locale) {
          field.Name = "locale";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Locale);
          oprot.WriteFieldEnd();
        }
        if (SimInfo != null && __isset.simInfo) {
          field.Name = "simInfo";
          field.Type = TType.Struct;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          SimInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (OldUdidHash != null && __isset.oldUdidHash) {
          field.Name = "oldUdidHash";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OldUdidHash);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("startVerification_args(");
      bool __first = true;
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      if (__isset.carrier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Carrier: ");
        __sb.Append(Carrier);
      }
      if (Phone != null && __isset.phone) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Phone: ");
        __sb.Append(Phone);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      if (NetworkCode != null && __isset.networkCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NetworkCode: ");
        __sb.Append(NetworkCode);
      }
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      if (Locale != null && __isset.locale) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Locale: ");
        __sb.Append(Locale);
      }
      if (SimInfo != null && __isset.simInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SimInfo: ");
        __sb.Append(SimInfo== null ? "<null>" : SimInfo.ToString());
      }
      if (OldUdidHash != null && __isset.oldUdidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OldUdidHash: ");
        __sb.Append(OldUdidHash);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class startVerification_result : TBase
  {
    private VerificationSessionData _success;
    private TalkException _e;

    public VerificationSessionData Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public startVerification_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new VerificationSessionData();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("startVerification_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("startVerification_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateGroupPreferenceAttribute_args : TBase
  {
    private int _reqSeq;
    private string _groupMid;
    private Dictionary<GroupPreferenceAttribute, string> _updatedAttrs;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string GroupMid
    {
      get
      {
        return _groupMid;
      }
      set
      {
        __isset.groupMid = true;
        this._groupMid = value;
      }
    }

    public Dictionary<GroupPreferenceAttribute, string> UpdatedAttrs
    {
      get
      {
        return _updatedAttrs;
      }
      set
      {
        __isset.updatedAttrs = true;
        this._updatedAttrs = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool groupMid;
      public bool updatedAttrs;
    }

    public updateGroupPreferenceAttribute_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                GroupMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  UpdatedAttrs = new Dictionary<GroupPreferenceAttribute, string>();
                  TMap _map1143 = iprot.ReadMapBegin();
                  for( int _i1144 = 0; _i1144 < _map1143.Count; ++_i1144)
                  {
                    GroupPreferenceAttribute _key1145;
                    string _val1146;
                    _key1145 = (GroupPreferenceAttribute)iprot.ReadI32();
                    _val1146 = iprot.ReadString();
                    UpdatedAttrs[_key1145] = _val1146;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateGroupPreferenceAttribute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (GroupMid != null && __isset.groupMid) {
          field.Name = "groupMid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(GroupMid);
          oprot.WriteFieldEnd();
        }
        if (UpdatedAttrs != null && __isset.updatedAttrs) {
          field.Name = "updatedAttrs";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.I32, TType.String, UpdatedAttrs.Count));
            foreach (GroupPreferenceAttribute _iter1147 in UpdatedAttrs.Keys)
            {
              oprot.WriteI32((int)_iter1147);
              oprot.WriteString(UpdatedAttrs[_iter1147]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateGroupPreferenceAttribute_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (GroupMid != null && __isset.groupMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("GroupMid: ");
        __sb.Append(GroupMid);
      }
      if (UpdatedAttrs != null && __isset.updatedAttrs) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UpdatedAttrs: ");
        __sb.Append(UpdatedAttrs);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateGroupPreferenceAttribute_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateGroupPreferenceAttribute_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateGroupPreferenceAttribute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateGroupPreferenceAttribute_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createRoomV2_args : TBase
  {
    private int _reqSeq;
    private List<string> _contactIds;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public List<string> ContactIds
    {
      get
      {
        return _contactIds;
      }
      set
      {
        __isset.contactIds = true;
        this._contactIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool contactIds;
    }

    public createRoomV2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  ContactIds = new List<string>();
                  TList _list1148 = iprot.ReadListBegin();
                  for( int _i1149 = 0; _i1149 < _list1148.Count; ++_i1149)
                  {
                    string _elem1150;
                    _elem1150 = iprot.ReadString();
                    ContactIds.Add(_elem1150);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createRoomV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (ContactIds != null && __isset.contactIds) {
          field.Name = "contactIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ContactIds.Count));
            foreach (string _iter1151 in ContactIds)
            {
              oprot.WriteString(_iter1151);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createRoomV2_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (ContactIds != null && __isset.contactIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ContactIds: ");
        __sb.Append(ContactIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createRoomV2_result : TBase
  {
    private Room _success;
    private TalkException _e;

    public Room Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public createRoomV2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Room();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createRoomV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createRoomV2_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class storeUpdateProfileAttribute_args : TBase
  {
    private int _seq;
    private ProfileAttribute _profileAttribute;
    private string _value;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ProfileAttribute"/>
    /// </summary>
    public ProfileAttribute ProfileAttribute
    {
      get
      {
        return _profileAttribute;
      }
      set
      {
        __isset.profileAttribute = true;
        this._profileAttribute = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool profileAttribute;
      public bool @value;
    }

    public storeUpdateProfileAttribute_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                ProfileAttribute = (ProfileAttribute)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("storeUpdateProfileAttribute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (__isset.profileAttribute) {
          field.Name = "profileAttribute";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)ProfileAttribute);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("storeUpdateProfileAttribute_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (__isset.profileAttribute) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ProfileAttribute: ");
        __sb.Append(ProfileAttribute);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class storeUpdateProfileAttribute_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public storeUpdateProfileAttribute_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("storeUpdateProfileAttribute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("storeUpdateProfileAttribute_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class syncContactBySnsIds_args : TBase
  {
    private int _reqSeq;
    private List<SnsFriendModification> _modifications;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public List<SnsFriendModification> Modifications
    {
      get
      {
        return _modifications;
      }
      set
      {
        __isset.modifications = true;
        this._modifications = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool modifications;
    }

    public syncContactBySnsIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  Modifications = new List<SnsFriendModification>();
                  TList _list1152 = iprot.ReadListBegin();
                  for( int _i1153 = 0; _i1153 < _list1152.Count; ++_i1153)
                  {
                    SnsFriendModification _elem1154;
                    _elem1154 = new SnsFriendModification();
                    _elem1154.Read(iprot);
                    Modifications.Add(_elem1154);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("syncContactBySnsIds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Modifications != null && __isset.modifications) {
          field.Name = "modifications";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, Modifications.Count));
            foreach (SnsFriendModification _iter1155 in Modifications)
            {
              _iter1155.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("syncContactBySnsIds_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Modifications != null && __isset.modifications) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Modifications: ");
        __sb.Append(Modifications);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class syncContactBySnsIds_result : TBase
  {
    private List<SnsFriendContactRegistration> _success;
    private TalkException _e;

    public List<SnsFriendContactRegistration> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public syncContactBySnsIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<SnsFriendContactRegistration>();
                  TList _list1156 = iprot.ReadListBegin();
                  for( int _i1157 = 0; _i1157 < _list1156.Count; ++_i1157)
                  {
                    SnsFriendContactRegistration _elem1158;
                    _elem1158 = new SnsFriendContactRegistration();
                    _elem1158.Read(iprot);
                    Success.Add(_elem1158);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("syncContactBySnsIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (SnsFriendContactRegistration _iter1159 in Success)
              {
                _iter1159.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("syncContactBySnsIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class syncContacts_args : TBase
  {
    private int _reqSeq;
    private List<ContactModification> _localContacts;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public List<ContactModification> LocalContacts
    {
      get
      {
        return _localContacts;
      }
      set
      {
        __isset.localContacts = true;
        this._localContacts = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool localContacts;
    }

    public syncContacts_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  LocalContacts = new List<ContactModification>();
                  TList _list1160 = iprot.ReadListBegin();
                  for( int _i1161 = 0; _i1161 < _list1160.Count; ++_i1161)
                  {
                    ContactModification _elem1162;
                    _elem1162 = new ContactModification();
                    _elem1162.Read(iprot);
                    LocalContacts.Add(_elem1162);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("syncContacts_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (LocalContacts != null && __isset.localContacts) {
          field.Name = "localContacts";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, LocalContacts.Count));
            foreach (ContactModification _iter1163 in LocalContacts)
            {
              _iter1163.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("syncContacts_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (LocalContacts != null && __isset.localContacts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalContacts: ");
        __sb.Append(LocalContacts);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class syncContacts_result : TBase
  {
    private Dictionary<string, ContactRegistration> _success;
    private TalkException _e;

    public Dictionary<string, ContactRegistration> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public syncContacts_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, ContactRegistration>();
                  TMap _map1164 = iprot.ReadMapBegin();
                  for( int _i1165 = 0; _i1165 < _map1164.Count; ++_i1165)
                  {
                    string _key1166;
                    ContactRegistration _val1167;
                    _key1166 = iprot.ReadString();
                    _val1167 = new ContactRegistration();
                    _val1167.Read(iprot);
                    Success[_key1166] = _val1167;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("syncContacts_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Success.Count));
              foreach (string _iter1168 in Success.Keys)
              {
                oprot.WriteString(_iter1168);
                Success[_iter1168].Write(oprot);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("syncContacts_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trySendMessage_args : TBase
  {
    private int _seq;
    private Message _message;

    public int Seq
    {
      get
      {
        return _seq;
      }
      set
      {
        __isset.seq = true;
        this._seq = value;
      }
    }

    public Message Message
    {
      get
      {
        return _message;
      }
      set
      {
        __isset.message = true;
        this._message = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool seq;
      public bool message;
    }

    public trySendMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                Seq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Message = new Message();
                Message.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trySendMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.seq) {
          field.Name = "seq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Seq);
          oprot.WriteFieldEnd();
        }
        if (Message != null && __isset.message) {
          field.Name = "message";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Message.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trySendMessage_args(");
      bool __first = true;
      if (__isset.seq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Seq: ");
        __sb.Append(Seq);
      }
      if (Message != null && __isset.message) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Message: ");
        __sb.Append(Message== null ? "<null>" : Message.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class trySendMessage_result : TBase
  {
    private Message _success;
    private TalkException _e;

    public Message Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public trySendMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Message();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("trySendMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("trySendMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNextMessagesV2_args : TBase
  {
    private string _messageBoxId;
    private MessageBoxV2MessageId _startMessageId;
    private int _messagesCount;

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }

    public MessageBoxV2MessageId StartMessageId
    {
      get
      {
        return _startMessageId;
      }
      set
      {
        __isset.startMessageId = true;
        this._startMessageId = value;
      }
    }

    public int MessagesCount
    {
      get
      {
        return _messagesCount;
      }
      set
      {
        __isset.messagesCount = true;
        this._messagesCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageBoxId;
      public bool startMessageId;
      public bool messagesCount;
    }

    public getNextMessagesV2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                StartMessageId = new MessageBoxV2MessageId();
                StartMessageId.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                MessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNextMessagesV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (StartMessageId != null && __isset.startMessageId) {
          field.Name = "startMessageId";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          StartMessageId.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.messagesCount) {
          field.Name = "messagesCount";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNextMessagesV2_args(");
      bool __first = true;
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      if (StartMessageId != null && __isset.startMessageId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("StartMessageId: ");
        __sb.Append(StartMessageId== null ? "<null>" : StartMessageId.ToString());
      }
      if (__isset.messagesCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessagesCount: ");
        __sb.Append(MessagesCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getNextMessagesV2_result : TBase
  {
    private List<Message> _success;
    private TalkException _e;

    public List<Message> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getNextMessagesV2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list1169 = iprot.ReadListBegin();
                  for( int _i1170 = 0; _i1170 < _list1169.Count; ++_i1170)
                  {
                    Message _elem1171;
                    _elem1171 = new Message();
                    _elem1171.Read(iprot);
                    Success.Add(_elem1171);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getNextMessagesV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter1172 in Success)
              {
                _iter1172.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getNextMessagesV2_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxCompactWrapUpV2_args : TBase
  {
    private string _messageBoxId;

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageBoxId;
    }

    public getMessageBoxCompactWrapUpV2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUpV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxCompactWrapUpV2_args(");
      bool __first = true;
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getMessageBoxCompactWrapUpV2_result : TBase
  {
    private TMessageBoxWrapUp _success;
    private TalkException _e;

    public TMessageBoxWrapUp Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getMessageBoxCompactWrapUpV2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TMessageBoxWrapUp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getMessageBoxCompactWrapUpV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getMessageBoxCompactWrapUpV2_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRecentMessagesV2_args : TBase
  {
    private string _messageBoxId;
    private int _messagesCount;

    public string MessageBoxId
    {
      get
      {
        return _messageBoxId;
      }
      set
      {
        __isset.messageBoxId = true;
        this._messageBoxId = value;
      }
    }

    public int MessagesCount
    {
      get
      {
        return _messagesCount;
      }
      set
      {
        __isset.messagesCount = true;
        this._messagesCount = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool messageBoxId;
      public bool messagesCount;
    }

    public getRecentMessagesV2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                MessageBoxId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                MessagesCount = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRecentMessagesV2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MessageBoxId != null && __isset.messageBoxId) {
          field.Name = "messageBoxId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MessageBoxId);
          oprot.WriteFieldEnd();
        }
        if (__isset.messagesCount) {
          field.Name = "messagesCount";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(MessagesCount);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRecentMessagesV2_args(");
      bool __first = true;
      if (MessageBoxId != null && __isset.messageBoxId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessageBoxId: ");
        __sb.Append(MessageBoxId);
      }
      if (__isset.messagesCount) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MessagesCount: ");
        __sb.Append(MessagesCount);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getRecentMessagesV2_result : TBase
  {
    private List<Message> _success;
    private TalkException _e;

    public List<Message> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getRecentMessagesV2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Message>();
                  TList _list1173 = iprot.ReadListBegin();
                  for( int _i1174 = 0; _i1174 < _list1173.Count; ++_i1174)
                  {
                    Message _elem1175;
                    _elem1175 = new Message();
                    _elem1175.Read(iprot);
                    Success.Add(_elem1175);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getRecentMessagesV2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Message _iter1176 in Success)
              {
                _iter1176.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getRecentMessagesV2_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class validateContactsOnBot_args : TBase
  {
    private List<string> _contacts;

    public List<string> Contacts
    {
      get
      {
        return _contacts;
      }
      set
      {
        __isset.contacts = true;
        this._contacts = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool contacts;
    }

    public validateContactsOnBot_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  Contacts = new List<string>();
                  TList _list1177 = iprot.ReadListBegin();
                  for( int _i1178 = 0; _i1178 < _list1177.Count; ++_i1178)
                  {
                    string _elem1179;
                    _elem1179 = iprot.ReadString();
                    Contacts.Add(_elem1179);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("validateContactsOnBot_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Contacts != null && __isset.contacts) {
          field.Name = "contacts";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, Contacts.Count));
            foreach (string _iter1180 in Contacts)
            {
              oprot.WriteString(_iter1180);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("validateContactsOnBot_args(");
      bool __first = true;
      if (Contacts != null && __isset.contacts) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Contacts: ");
        __sb.Append(Contacts);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class validateContactsOnBot_result : TBase
  {
    private Dictionary<string, string> _success;
    private TalkException _e;

    public Dictionary<string, string> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public validateContactsOnBot_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Map) {
                {
                  Success = new Dictionary<string, string>();
                  TMap _map1181 = iprot.ReadMapBegin();
                  for( int _i1182 = 0; _i1182 < _map1181.Count; ++_i1182)
                  {
                    string _key1183;
                    string _val1184;
                    _key1183 = iprot.ReadString();
                    _val1184 = iprot.ReadString();
                    Success[_key1183] = _val1184;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("validateContactsOnBot_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Map;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteMapBegin(new TMap(TType.String, TType.String, Success.Count));
              foreach (string _iter1185 in Success.Keys)
              {
                oprot.WriteString(_iter1185);
                oprot.WriteString(Success[_iter1185]);
              }
              oprot.WriteMapEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("validateContactsOnBot_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tryFriendRequest_args : TBase
  {
    private string _midOrEMid;
    private FriendRequestMethod _method;
    private string _friendRequestParams;

    public string MidOrEMid
    {
      get
      {
        return _midOrEMid;
      }
      set
      {
        __isset.midOrEMid = true;
        this._midOrEMid = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="FriendRequestMethod"/>
    /// </summary>
    public FriendRequestMethod Method
    {
      get
      {
        return _method;
      }
      set
      {
        __isset.method = true;
        this._method = value;
      }
    }

    public string FriendRequestParams
    {
      get
      {
        return _friendRequestParams;
      }
      set
      {
        __isset.friendRequestParams = true;
        this._friendRequestParams = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool midOrEMid;
      public bool method;
      public bool friendRequestParams;
    }

    public tryFriendRequest_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                MidOrEMid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Method = (FriendRequestMethod)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                FriendRequestParams = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tryFriendRequest_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (MidOrEMid != null && __isset.midOrEMid) {
          field.Name = "midOrEMid";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MidOrEMid);
          oprot.WriteFieldEnd();
        }
        if (__isset.method) {
          field.Name = "method";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Method);
          oprot.WriteFieldEnd();
        }
        if (FriendRequestParams != null && __isset.friendRequestParams) {
          field.Name = "friendRequestParams";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(FriendRequestParams);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tryFriendRequest_args(");
      bool __first = true;
      if (MidOrEMid != null && __isset.midOrEMid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MidOrEMid: ");
        __sb.Append(MidOrEMid);
      }
      if (__isset.method) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Method: ");
        __sb.Append(Method);
      }
      if (FriendRequestParams != null && __isset.friendRequestParams) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("FriendRequestParams: ");
        __sb.Append(FriendRequestParams);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class tryFriendRequest_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public tryFriendRequest_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("tryFriendRequest_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("tryFriendRequest_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unblockContact_args : TBase
  {
    private int _reqSeq;
    private string _id;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool id;
    }

    public unblockContact_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unblockContact_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unblockContact_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unblockContact_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public unblockContact_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unblockContact_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unblockContact_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unblockRecommendation_args : TBase
  {
    private int _reqSeq;
    private string _id;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool id;
    }

    public unblockRecommendation_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Id = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unblockRecommendation_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Id != null && __isset.id) {
          field.Name = "id";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Id);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unblockRecommendation_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Id != null && __isset.id) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Id: ");
        __sb.Append(Id);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unblockRecommendation_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public unblockRecommendation_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unblockRecommendation_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unblockRecommendation_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unregisterUserAndDevice_args : TBase
  {

    public unregisterUserAndDevice_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unregisterUserAndDevice_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unregisterUserAndDevice_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class unregisterUserAndDevice_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public unregisterUserAndDevice_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("unregisterUserAndDevice_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("unregisterUserAndDevice_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateApnsDeviceToken_args : TBase
  {
    private byte[] _apnsDeviceToken;

    public byte[] ApnsDeviceToken
    {
      get
      {
        return _apnsDeviceToken;
      }
      set
      {
        __isset.apnsDeviceToken = true;
        this._apnsDeviceToken = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool apnsDeviceToken;
    }

    public updateApnsDeviceToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ApnsDeviceToken = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateApnsDeviceToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ApnsDeviceToken != null && __isset.apnsDeviceToken) {
          field.Name = "apnsDeviceToken";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(ApnsDeviceToken);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateApnsDeviceToken_args(");
      bool __first = true;
      if (ApnsDeviceToken != null && __isset.apnsDeviceToken) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ApnsDeviceToken: ");
        __sb.Append(ApnsDeviceToken);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateApnsDeviceToken_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateApnsDeviceToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateApnsDeviceToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateApnsDeviceToken_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateBuddySetting_args : TBase
  {
    private string _key;
    private string _value;

    public string Key
    {
      get
      {
        return _key;
      }
      set
      {
        __isset.key = true;
        this._key = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool key;
      public bool @value;
    }

    public updateBuddySetting_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Key = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateBuddySetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Key != null && __isset.key) {
          field.Name = "key";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Key);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateBuddySetting_args(");
      bool __first = true;
      if (Key != null && __isset.key) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Key: ");
        __sb.Append(Key);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateBuddySetting_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateBuddySetting_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateBuddySetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateBuddySetting_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateC2DMRegistrationId_args : TBase
  {
    private string _registrationId;

    public string RegistrationId
    {
      get
      {
        return _registrationId;
      }
      set
      {
        __isset.registrationId = true;
        this._registrationId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool registrationId;
    }

    public updateC2DMRegistrationId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                RegistrationId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateC2DMRegistrationId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RegistrationId != null && __isset.registrationId) {
          field.Name = "registrationId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegistrationId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateC2DMRegistrationId_args(");
      bool __first = true;
      if (RegistrationId != null && __isset.registrationId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RegistrationId: ");
        __sb.Append(RegistrationId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateC2DMRegistrationId_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateC2DMRegistrationId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateC2DMRegistrationId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateC2DMRegistrationId_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateContactSetting_args : TBase
  {
    private int _reqSeq;
    private string _mid;
    private ContactSetting _flag;
    private string _value;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public string Mid
    {
      get
      {
        return _mid;
      }
      set
      {
        __isset.mid = true;
        this._mid = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ContactSetting"/>
    /// </summary>
    public ContactSetting Flag
    {
      get
      {
        return _flag;
      }
      set
      {
        __isset.flag = true;
        this._flag = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool mid;
      public bool flag;
      public bool @value;
    }

    public updateContactSetting_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Mid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Flag = (ContactSetting)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateContactSetting_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Mid != null && __isset.mid) {
          field.Name = "mid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Mid);
          oprot.WriteFieldEnd();
        }
        if (__isset.flag) {
          field.Name = "flag";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Flag);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateContactSetting_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Mid != null && __isset.mid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Mid: ");
        __sb.Append(Mid);
      }
      if (__isset.flag) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Flag: ");
        __sb.Append(Flag);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateContactSetting_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateContactSetting_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateContactSetting_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateContactSetting_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateCustomModeSettings_args : TBase
  {
    private CustomMode _customMode;
    private Dictionary<string, string> _paramMap;

    /// <summary>
    /// 
    /// <seealso cref="CustomMode"/>
    /// </summary>
    public CustomMode CustomMode
    {
      get
      {
        return _customMode;
      }
      set
      {
        __isset.customMode = true;
        this._customMode = value;
      }
    }

    public Dictionary<string, string> ParamMap
    {
      get
      {
        return _paramMap;
      }
      set
      {
        __isset.paramMap = true;
        this._paramMap = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool customMode;
      public bool paramMap;
    }

    public updateCustomModeSettings_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I32) {
                CustomMode = (CustomMode)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Map) {
                {
                  ParamMap = new Dictionary<string, string>();
                  TMap _map1186 = iprot.ReadMapBegin();
                  for( int _i1187 = 0; _i1187 < _map1186.Count; ++_i1187)
                  {
                    string _key1188;
                    string _val1189;
                    _key1188 = iprot.ReadString();
                    _val1189 = iprot.ReadString();
                    ParamMap[_key1188] = _val1189;
                  }
                  iprot.ReadMapEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateCustomModeSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.customMode) {
          field.Name = "customMode";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)CustomMode);
          oprot.WriteFieldEnd();
        }
        if (ParamMap != null && __isset.paramMap) {
          field.Name = "paramMap";
          field.Type = TType.Map;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteMapBegin(new TMap(TType.String, TType.String, ParamMap.Count));
            foreach (string _iter1190 in ParamMap.Keys)
            {
              oprot.WriteString(_iter1190);
              oprot.WriteString(ParamMap[_iter1190]);
            }
            oprot.WriteMapEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateCustomModeSettings_args(");
      bool __first = true;
      if (__isset.customMode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CustomMode: ");
        __sb.Append(CustomMode);
      }
      if (ParamMap != null && __isset.paramMap) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ParamMap: ");
        __sb.Append(ParamMap);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateCustomModeSettings_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateCustomModeSettings_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateCustomModeSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateCustomModeSettings_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateDeviceInfo_args : TBase
  {
    private string _deviceUid;
    private DeviceInfo _deviceInfo;

    public string DeviceUid
    {
      get
      {
        return _deviceUid;
      }
      set
      {
        __isset.deviceUid = true;
        this._deviceUid = value;
      }
    }

    public DeviceInfo DeviceInfo
    {
      get
      {
        return _deviceInfo;
      }
      set
      {
        __isset.deviceInfo = true;
        this._deviceInfo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool deviceUid;
      public bool deviceInfo;
    }

    public updateDeviceInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                DeviceUid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                DeviceInfo = new DeviceInfo();
                DeviceInfo.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateDeviceInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (DeviceUid != null && __isset.deviceUid) {
          field.Name = "deviceUid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DeviceUid);
          oprot.WriteFieldEnd();
        }
        if (DeviceInfo != null && __isset.deviceInfo) {
          field.Name = "deviceInfo";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          DeviceInfo.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateDeviceInfo_args(");
      bool __first = true;
      if (DeviceUid != null && __isset.deviceUid) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceUid: ");
        __sb.Append(DeviceUid);
      }
      if (DeviceInfo != null && __isset.deviceInfo) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DeviceInfo: ");
        __sb.Append(DeviceInfo== null ? "<null>" : DeviceInfo.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateDeviceInfo_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateDeviceInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateDeviceInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateDeviceInfo_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateGroup_args : TBase
  {
    private int _reqSeq;
    private @Group _group;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public @Group Group
    {
      get
      {
        return _group;
      }
      set
      {
        __isset.@group = true;
        this._group = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool @group;
    }

    public updateGroup_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Group = new @Group();
                Group.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateGroup_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Group != null && __isset.@group) {
          field.Name = "group";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Group.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateGroup_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Group != null && __isset.@group) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Group: ");
        __sb.Append(Group== null ? "<null>" : Group.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateGroup_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateGroup_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateGroup_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateGroup_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateNotificationToken_args : TBase
  {
    private NotificationType _type;
    private string _token;

    /// <summary>
    /// 
    /// <seealso cref="NotificationType"/>
    /// </summary>
    public NotificationType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public string Token
    {
      get
      {
        return _token;
      }
      set
      {
        __isset.token = true;
        this._token = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool token;
    }

    public updateNotificationToken_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I32) {
                Type = (NotificationType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Token = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateNotificationToken_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null && __isset.token) {
          field.Name = "token";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Token);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateNotificationToken_args(");
      bool __first = true;
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Token != null && __isset.token) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateNotificationToken_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateNotificationToken_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateNotificationToken_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateNotificationToken_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateNotificationTokenWithBytes_args : TBase
  {
    private NotificationType _type;
    private byte[] _token;

    /// <summary>
    /// 
    /// <seealso cref="NotificationType"/>
    /// </summary>
    public NotificationType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    public byte[] Token
    {
      get
      {
        return _token;
      }
      set
      {
        __isset.token = true;
        this._token = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool type;
      public bool token;
    }

    public updateNotificationTokenWithBytes_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 3:
              if (field.Type == TType.I32) {
                Type = (NotificationType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Token = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateNotificationTokenWithBytes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Token != null && __isset.token) {
          field.Name = "token";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Token);
          oprot.WriteFieldEnd();
        }
        if (__isset.type) {
          field.Name = "type";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Type);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateNotificationTokenWithBytes_args(");
      bool __first = true;
      if (__isset.type) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Type: ");
        __sb.Append(Type);
      }
      if (Token != null && __isset.token) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Token: ");
        __sb.Append(Token);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateNotificationTokenWithBytes_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateNotificationTokenWithBytes_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateNotificationTokenWithBytes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateNotificationTokenWithBytes_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProfile_args : TBase
  {
    private int _reqSeq;
    private Profile _profile;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public Profile Profile
    {
      get
      {
        return _profile;
      }
      set
      {
        __isset.profile = true;
        this._profile = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool profile;
    }

    public updateProfile_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Profile = new Profile();
                Profile.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Profile != null && __isset.profile) {
          field.Name = "profile";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Profile.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProfile_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Profile != null && __isset.profile) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Profile: ");
        __sb.Append(Profile== null ? "<null>" : Profile.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProfile_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateProfile_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProfile_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProfileAttribute_args : TBase
  {
    private int _reqSeq;
    private ProfileAttribute _attr;
    private string _value;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="ProfileAttribute"/>
    /// </summary>
    public ProfileAttribute Attr
    {
      get
      {
        return _attr;
      }
      set
      {
        __isset.attr = true;
        this._attr = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool attr;
      public bool @value;
    }

    public updateProfileAttribute_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Attr = (ProfileAttribute)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProfileAttribute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.attr) {
          field.Name = "attr";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Attr);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProfileAttribute_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (__isset.attr) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attr: ");
        __sb.Append(Attr);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProfileAttribute_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateProfileAttribute_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProfileAttribute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProfileAttribute_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateRegion_args : TBase
  {
    private string _region;

    public string Region
    {
      get
      {
        return _region;
      }
      set
      {
        __isset.region = true;
        this._region = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool region;
    }

    public updateRegion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Region = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateRegion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Region != null && __isset.region) {
          field.Name = "region";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Region);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateRegion_args(");
      bool __first = true;
      if (Region != null && __isset.region) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Region: ");
        __sb.Append(Region);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateRegion_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateRegion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateRegion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateRegion_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSettings_args : TBase
  {
    private int _reqSeq;
    private Settings _settings;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public Settings Settings
    {
      get
      {
        return _settings;
      }
      set
      {
        __isset.settings = true;
        this._settings = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool settings;
    }

    public updateSettings_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Settings = new Settings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSettings_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSettings_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Settings != null && __isset.settings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Settings: ");
        __sb.Append(Settings== null ? "<null>" : Settings.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSettings_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateSettings_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSettings_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSettings_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSettings2_args : TBase
  {
    private int _reqSeq;
    private Settings _settings;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public Settings Settings
    {
      get
      {
        return _settings;
      }
      set
      {
        __isset.settings = true;
        this._settings = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool settings;
    }

    public updateSettings2_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Settings = new Settings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSettings2_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSettings2_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (Settings != null && __isset.settings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Settings: ");
        __sb.Append(Settings== null ? "<null>" : Settings.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSettings2_result : TBase
  {
    private int _success;
    private TalkException _e;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSettings2_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSettings2_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSettings2_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSettingsAttribute_args : TBase
  {
    private int _reqSeq;
    private SettingsAttribute _attr;
    private string _value;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref="SettingsAttribute"/>
    /// </summary>
    public SettingsAttribute Attr
    {
      get
      {
        return _attr;
      }
      set
      {
        __isset.attr = true;
        this._attr = value;
      }
    }

    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.@value = true;
        this._value = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool attr;
      public bool @value;
    }

    public updateSettingsAttribute_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                Attr = (SettingsAttribute)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Value = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSettingsAttribute_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.attr) {
          field.Name = "attr";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Attr);
          oprot.WriteFieldEnd();
        }
        if (Value != null && __isset.@value) {
          field.Name = "value";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSettingsAttribute_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (__isset.attr) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Attr: ");
        __sb.Append(Attr);
      }
      if (Value != null && __isset.@value) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Value: ");
        __sb.Append(Value);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSettingsAttribute_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public updateSettingsAttribute_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSettingsAttribute_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSettingsAttribute_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSettingsAttributes_args : TBase
  {
    private int _reqSeq;
    private int _attrBitset;
    private Settings _settings;

    public int ReqSeq
    {
      get
      {
        return _reqSeq;
      }
      set
      {
        __isset.reqSeq = true;
        this._reqSeq = value;
      }
    }

    public int AttrBitset
    {
      get
      {
        return _attrBitset;
      }
      set
      {
        __isset.attrBitset = true;
        this._attrBitset = value;
      }
    }

    public Settings Settings
    {
      get
      {
        return _settings;
      }
      set
      {
        __isset.settings = true;
        this._settings = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool reqSeq;
      public bool attrBitset;
      public bool settings;
    }

    public updateSettingsAttributes_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                ReqSeq = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                AttrBitset = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                Settings = new Settings();
                Settings.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSettingsAttributes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.reqSeq) {
          field.Name = "reqSeq";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(ReqSeq);
          oprot.WriteFieldEnd();
        }
        if (__isset.attrBitset) {
          field.Name = "attrBitset";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(AttrBitset);
          oprot.WriteFieldEnd();
        }
        if (Settings != null && __isset.settings) {
          field.Name = "settings";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          Settings.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSettingsAttributes_args(");
      bool __first = true;
      if (__isset.reqSeq) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReqSeq: ");
        __sb.Append(ReqSeq);
      }
      if (__isset.attrBitset) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AttrBitset: ");
        __sb.Append(AttrBitset);
      }
      if (Settings != null && __isset.settings) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Settings: ");
        __sb.Append(Settings== null ? "<null>" : Settings.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateSettingsAttributes_result : TBase
  {
    private int _success;
    private TalkException _e;

    public int Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public updateSettingsAttributes_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateSettingsAttributes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateSettingsAttributes_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyIdentityCredential_args : TBase
  {
    private IdentityProvider _identityProvider;
    private string _identifier;
    private string _password;

    /// <summary>
    /// 
    /// <seealso cref="IdentityProvider"/>
    /// </summary>
    public IdentityProvider IdentityProvider
    {
      get
      {
        return _identityProvider;
      }
      set
      {
        __isset.identityProvider = true;
        this._identityProvider = value;
      }
    }

    public string Identifier
    {
      get
      {
        return _identifier;
      }
      set
      {
        __isset.identifier = true;
        this._identifier = value;
      }
    }

    public string Password
    {
      get
      {
        return _password;
      }
      set
      {
        __isset.password = true;
        this._password = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool identityProvider;
      public bool identifier;
      public bool password;
    }

    public verifyIdentityCredential_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 8:
              if (field.Type == TType.I32) {
                IdentityProvider = (IdentityProvider)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Identifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Password = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyIdentityCredential_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Identifier != null && __isset.identifier) {
          field.Name = "identifier";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Identifier);
          oprot.WriteFieldEnd();
        }
        if (Password != null && __isset.password) {
          field.Name = "password";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Password);
          oprot.WriteFieldEnd();
        }
        if (__isset.identityProvider) {
          field.Name = "identityProvider";
          field.Type = TType.I32;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)IdentityProvider);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyIdentityCredential_args(");
      bool __first = true;
      if (__isset.identityProvider) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdentityProvider: ");
        __sb.Append(IdentityProvider);
      }
      if (Identifier != null && __isset.identifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Identifier: ");
        __sb.Append(Identifier);
      }
      if (Password != null && __isset.password) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Password: ");
        __sb.Append(Password);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyIdentityCredential_result : TBase
  {
    private TalkException _e;

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool e;
    }

    public verifyIdentityCredential_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyIdentityCredential_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyIdentityCredential_result(");
      bool __first = true;
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyIdentityCredentialWithResult_args : TBase
  {
    private IdentityCredential _identityCredential;

    public IdentityCredential IdentityCredential
    {
      get
      {
        return _identityCredential;
      }
      set
      {
        __isset.identityCredential = true;
        this._identityCredential = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool identityCredential;
    }

    public verifyIdentityCredentialWithResult_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.Struct) {
                IdentityCredential = new IdentityCredential();
                IdentityCredential.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyIdentityCredentialWithResult_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (IdentityCredential != null && __isset.identityCredential) {
          field.Name = "identityCredential";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          IdentityCredential.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyIdentityCredentialWithResult_args(");
      bool __first = true;
      if (IdentityCredential != null && __isset.identityCredential) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IdentityCredential: ");
        __sb.Append(IdentityCredential== null ? "<null>" : IdentityCredential.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyIdentityCredentialWithResult_result : TBase
  {
    private UserAuthStatus _success;
    private TalkException _e;

    public UserAuthStatus Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public verifyIdentityCredentialWithResult_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new UserAuthStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyIdentityCredentialWithResult_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyIdentityCredentialWithResult_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyPhone_args : TBase
  {
    private string _sessionId;
    private string _pinCode;
    private string _udidHash;

    public string SessionId
    {
      get
      {
        return _sessionId;
      }
      set
      {
        __isset.sessionId = true;
        this._sessionId = value;
      }
    }

    public string PinCode
    {
      get
      {
        return _pinCode;
      }
      set
      {
        __isset.pinCode = true;
        this._pinCode = value;
      }
    }

    public string UdidHash
    {
      get
      {
        return _udidHash;
      }
      set
      {
        __isset.udidHash = true;
        this._udidHash = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool sessionId;
      public bool pinCode;
      public bool udidHash;
    }

    public verifyPhone_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                SessionId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PinCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                UdidHash = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyPhone_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SessionId != null && __isset.sessionId) {
          field.Name = "sessionId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SessionId);
          oprot.WriteFieldEnd();
        }
        if (PinCode != null && __isset.pinCode) {
          field.Name = "pinCode";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PinCode);
          oprot.WriteFieldEnd();
        }
        if (UdidHash != null && __isset.udidHash) {
          field.Name = "udidHash";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UdidHash);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyPhone_args(");
      bool __first = true;
      if (SessionId != null && __isset.sessionId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SessionId: ");
        __sb.Append(SessionId);
      }
      if (PinCode != null && __isset.pinCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PinCode: ");
        __sb.Append(PinCode);
      }
      if (UdidHash != null && __isset.udidHash) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UdidHash: ");
        __sb.Append(UdidHash);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyPhone_result : TBase
  {
    private VerificationResult _success;
    private TalkException _e;

    /// <summary>
    /// 
    /// <seealso cref="VerificationResult"/>
    /// </summary>
    public VerificationResult Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public verifyPhone_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (VerificationResult)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyPhone_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyPhone_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyQrcode_args : TBase
  {
    private string _verifier;
    private string _pinCode;

    public string Verifier
    {
      get
      {
        return _verifier;
      }
      set
      {
        __isset.verifier = true;
        this._verifier = value;
      }
    }

    public string PinCode
    {
      get
      {
        return _pinCode;
      }
      set
      {
        __isset.pinCode = true;
        this._pinCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool verifier;
      public bool pinCode;
    }

    public verifyQrcode_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                Verifier = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PinCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyQrcode_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Verifier != null && __isset.verifier) {
          field.Name = "verifier";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Verifier);
          oprot.WriteFieldEnd();
        }
        if (PinCode != null && __isset.pinCode) {
          field.Name = "pinCode";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PinCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyQrcode_args(");
      bool __first = true;
      if (Verifier != null && __isset.verifier) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Verifier: ");
        __sb.Append(Verifier);
      }
      if (PinCode != null && __isset.pinCode) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PinCode: ");
        __sb.Append(PinCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class verifyQrcode_result : TBase
  {
    private string _success;
    private TalkException _e;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public verifyQrcode_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("verifyQrcode_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("verifyQrcode_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
