/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CoinUseReservation : TBase
{
  private string _channelId;
  private string _shopOrderId;
  private PaymentType _appStoreCode;
  private List<CoinUseReservationItem> _items;
  private string _country;

  public string ChannelId
  {
    get
    {
      return _channelId;
    }
    set
    {
      __isset.channelId = true;
      this._channelId = value;
    }
  }

  public string ShopOrderId
  {
    get
    {
      return _shopOrderId;
    }
    set
    {
      __isset.shopOrderId = true;
      this._shopOrderId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PaymentType"/>
  /// </summary>
  public PaymentType AppStoreCode
  {
    get
    {
      return _appStoreCode;
    }
    set
    {
      __isset.appStoreCode = true;
      this._appStoreCode = value;
    }
  }

  public List<CoinUseReservationItem> Items
  {
    get
    {
      return _items;
    }
    set
    {
      __isset.items = true;
      this._items = value;
    }
  }

  public string Country
  {
    get
    {
      return _country;
    }
    set
    {
      __isset.country = true;
      this._country = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool channelId;
    public bool shopOrderId;
    public bool appStoreCode;
    public bool items;
    public bool country;
  }

  public CoinUseReservation() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ChannelId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ShopOrderId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              AppStoreCode = (PaymentType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                Items = new List<CoinUseReservationItem>();
                TList _list109 = iprot.ReadListBegin();
                for( int _i110 = 0; _i110 < _list109.Count; ++_i110)
                {
                  CoinUseReservationItem _elem111;
                  _elem111 = new CoinUseReservationItem();
                  _elem111.Read(iprot);
                  Items.Add(_elem111);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Country = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("CoinUseReservation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ChannelId != null && __isset.channelId) {
        field.Name = "channelId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ChannelId);
        oprot.WriteFieldEnd();
      }
      if (ShopOrderId != null && __isset.shopOrderId) {
        field.Name = "shopOrderId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ShopOrderId);
        oprot.WriteFieldEnd();
      }
      if (__isset.appStoreCode) {
        field.Name = "appStoreCode";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)AppStoreCode);
        oprot.WriteFieldEnd();
      }
      if (Items != null && __isset.items) {
        field.Name = "items";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Items.Count));
          foreach (CoinUseReservationItem _iter112 in Items)
          {
            _iter112.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Country != null && __isset.country) {
        field.Name = "country";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Country);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CoinUseReservation(");
    bool __first = true;
    if (ChannelId != null && __isset.channelId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ChannelId: ");
      __sb.Append(ChannelId);
    }
    if (ShopOrderId != null && __isset.shopOrderId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ShopOrderId: ");
      __sb.Append(ShopOrderId);
    }
    if (__isset.appStoreCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AppStoreCode: ");
      __sb.Append(AppStoreCode);
    }
    if (Items != null && __isset.items) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Items: ");
      __sb.Append(Items);
    }
    if (Country != null && __isset.country) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Country: ");
      __sb.Append(Country);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

