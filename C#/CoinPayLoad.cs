/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class CoinPayLoad : TBase
{
  private int _payCoin;
  private int _freeCoin;
  private PayloadType _type;
  private int _rewardCoin;

  public int PayCoin
  {
    get
    {
      return _payCoin;
    }
    set
    {
      __isset.payCoin = true;
      this._payCoin = value;
    }
  }

  public int FreeCoin
  {
    get
    {
      return _freeCoin;
    }
    set
    {
      __isset.freeCoin = true;
      this._freeCoin = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PayloadType"/>
  /// </summary>
  public PayloadType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public int RewardCoin
  {
    get
    {
      return _rewardCoin;
    }
    set
    {
      __isset.rewardCoin = true;
      this._rewardCoin = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool payCoin;
    public bool freeCoin;
    public bool type;
    public bool rewardCoin;
  }

  public CoinPayLoad() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              PayCoin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              FreeCoin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Type = (PayloadType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RewardCoin = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("CoinPayLoad");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.payCoin) {
        field.Name = "payCoin";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PayCoin);
        oprot.WriteFieldEnd();
      }
      if (__isset.freeCoin) {
        field.Name = "freeCoin";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(FreeCoin);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.rewardCoin) {
        field.Name = "rewardCoin";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RewardCoin);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("CoinPayLoad(");
    bool __first = true;
    if (__isset.payCoin) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PayCoin: ");
      __sb.Append(PayCoin);
    }
    if (__isset.freeCoin) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FreeCoin: ");
      __sb.Append(FreeCoin);
    }
    if (__isset.type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Type: ");
      __sb.Append(Type);
    }
    if (__isset.rewardCoin) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RewardCoin: ");
      __sb.Append(RewardCoin);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

