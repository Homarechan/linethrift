/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class IdentifierConfirmationRequest : TBase
{
  private Dictionary<string, string> _metaData;
  private bool _forceRegistration;
  private string _verificationCode;

  public Dictionary<string, string> MetaData
  {
    get
    {
      return _metaData;
    }
    set
    {
      __isset.metaData = true;
      this._metaData = value;
    }
  }

  public bool ForceRegistration
  {
    get
    {
      return _forceRegistration;
    }
    set
    {
      __isset.forceRegistration = true;
      this._forceRegistration = value;
    }
  }

  public string VerificationCode
  {
    get
    {
      return _verificationCode;
    }
    set
    {
      __isset.verificationCode = true;
      this._verificationCode = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool metaData;
    public bool forceRegistration;
    public bool verificationCode;
  }

  public IdentifierConfirmationRequest() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                MetaData = new Dictionary<string, string>();
                TMap _map23 = iprot.ReadMapBegin();
                for( int _i24 = 0; _i24 < _map23.Count; ++_i24)
                {
                  string _key25;
                  string _val26;
                  _key25 = iprot.ReadString();
                  _val26 = iprot.ReadString();
                  MetaData[_key25] = _val26;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              ForceRegistration = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              VerificationCode = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("IdentifierConfirmationRequest");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MetaData != null && __isset.metaData) {
        field.Name = "metaData";
        field.Type = TType.Map;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, MetaData.Count));
          foreach (string _iter27 in MetaData.Keys)
          {
            oprot.WriteString(_iter27);
            oprot.WriteString(MetaData[_iter27]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.forceRegistration) {
        field.Name = "forceRegistration";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(ForceRegistration);
        oprot.WriteFieldEnd();
      }
      if (VerificationCode != null && __isset.verificationCode) {
        field.Name = "verificationCode";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(VerificationCode);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("IdentifierConfirmationRequest(");
    bool __first = true;
    if (MetaData != null && __isset.metaData) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MetaData: ");
      __sb.Append(MetaData);
    }
    if (__isset.forceRegistration) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ForceRegistration: ");
      __sb.Append(ForceRegistration);
    }
    if (VerificationCode != null && __isset.verificationCode) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("VerificationCode: ");
      __sb.Append(VerificationCode);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

