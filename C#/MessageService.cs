/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class MessageService {
  public interface ISync {
    MessageOperations fetchMessageOperations(long localRevision, long lastOpTimestamp, int count);
    LastReadMessageIds getLastReadMessageIds(string chatId);
    List<LastReadMessageIds> multiGetLastReadMessageIds(List<string> chatIds);
  }

  public interface Iface : ISync {
    #if SILVERLIGHT
    IAsyncResult Begin_fetchMessageOperations(AsyncCallback callback, object state, long localRevision, long lastOpTimestamp, int count);
    MessageOperations End_fetchMessageOperations(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_getLastReadMessageIds(AsyncCallback callback, object state, string chatId);
    LastReadMessageIds End_getLastReadMessageIds(IAsyncResult asyncResult);
    #endif
    #if SILVERLIGHT
    IAsyncResult Begin_multiGetLastReadMessageIds(AsyncCallback callback, object state, List<string> chatIds);
    List<LastReadMessageIds> End_multiGetLastReadMessageIds(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_fetchMessageOperations(AsyncCallback callback, object state, long localRevision, long lastOpTimestamp, int count)
    {
      return send_fetchMessageOperations(callback, state, localRevision, lastOpTimestamp, count);
    }

    public MessageOperations End_fetchMessageOperations(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_fetchMessageOperations();
    }

    #endif

    public MessageOperations fetchMessageOperations(long localRevision, long lastOpTimestamp, int count)
    {
      #if !SILVERLIGHT
      send_fetchMessageOperations(localRevision, lastOpTimestamp, count);
      return recv_fetchMessageOperations();

      #else
      var asyncResult = Begin_fetchMessageOperations(null, null, localRevision, lastOpTimestamp, count);
      return End_fetchMessageOperations(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_fetchMessageOperations(AsyncCallback callback, object state, long localRevision, long lastOpTimestamp, int count)
    #else
    public void send_fetchMessageOperations(long localRevision, long lastOpTimestamp, int count)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("fetchMessageOperations", TMessageType.Call, seqid_));
      fetchMessageOperations_args args = new fetchMessageOperations_args();
      args.LocalRevision = localRevision;
      args.LastOpTimestamp = lastOpTimestamp;
      args.Count = count;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public MessageOperations recv_fetchMessageOperations()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      fetchMessageOperations_result result = new fetchMessageOperations_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetchMessageOperations failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getLastReadMessageIds(AsyncCallback callback, object state, string chatId)
    {
      return send_getLastReadMessageIds(callback, state, chatId);
    }

    public LastReadMessageIds End_getLastReadMessageIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getLastReadMessageIds();
    }

    #endif

    public LastReadMessageIds getLastReadMessageIds(string chatId)
    {
      #if !SILVERLIGHT
      send_getLastReadMessageIds(chatId);
      return recv_getLastReadMessageIds();

      #else
      var asyncResult = Begin_getLastReadMessageIds(null, null, chatId);
      return End_getLastReadMessageIds(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getLastReadMessageIds(AsyncCallback callback, object state, string chatId)
    #else
    public void send_getLastReadMessageIds(string chatId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.Call, seqid_));
      getLastReadMessageIds_args args = new getLastReadMessageIds_args();
      args.ChatId = chatId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public LastReadMessageIds recv_getLastReadMessageIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getLastReadMessageIds_result result = new getLastReadMessageIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getLastReadMessageIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_multiGetLastReadMessageIds(AsyncCallback callback, object state, List<string> chatIds)
    {
      return send_multiGetLastReadMessageIds(callback, state, chatIds);
    }

    public List<LastReadMessageIds> End_multiGetLastReadMessageIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_multiGetLastReadMessageIds();
    }

    #endif

    public List<LastReadMessageIds> multiGetLastReadMessageIds(List<string> chatIds)
    {
      #if !SILVERLIGHT
      send_multiGetLastReadMessageIds(chatIds);
      return recv_multiGetLastReadMessageIds();

      #else
      var asyncResult = Begin_multiGetLastReadMessageIds(null, null, chatIds);
      return End_multiGetLastReadMessageIds(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_multiGetLastReadMessageIds(AsyncCallback callback, object state, List<string> chatIds)
    #else
    public void send_multiGetLastReadMessageIds(List<string> chatIds)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.Call, seqid_));
      multiGetLastReadMessageIds_args args = new multiGetLastReadMessageIds_args();
      args.ChatIds = chatIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public List<LastReadMessageIds> recv_multiGetLastReadMessageIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      if (result.__isset.e) {
        throw result.E;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "multiGetLastReadMessageIds failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["fetchMessageOperations"] = fetchMessageOperations_Process;
      processMap_["getLastReadMessageIds"] = getLastReadMessageIds_Process;
      processMap_["multiGetLastReadMessageIds"] = multiGetLastReadMessageIds_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void fetchMessageOperations_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      fetchMessageOperations_args args = new fetchMessageOperations_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      fetchMessageOperations_result result = new fetchMessageOperations_result();
      try
      {
        try
        {
          result.Success = iface_.fetchMessageOperations(args.LocalRevision, args.LastOpTimestamp, args.Count);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("fetchMessageOperations", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("fetchMessageOperations", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getLastReadMessageIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getLastReadMessageIds_args args = new getLastReadMessageIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getLastReadMessageIds_result result = new getLastReadMessageIds_result();
      try
      {
        try
        {
          result.Success = iface_.getLastReadMessageIds(args.ChatId);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getLastReadMessageIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void multiGetLastReadMessageIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      multiGetLastReadMessageIds_args args = new multiGetLastReadMessageIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      multiGetLastReadMessageIds_result result = new multiGetLastReadMessageIds_result();
      try
      {
        try
        {
          result.Success = iface_.multiGetLastReadMessageIds(args.ChatIds);
        }
        catch (TalkException e)
        {
          result.E = e;
        }
        oprot.WriteMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("multiGetLastReadMessageIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchMessageOperations_args : TBase
  {
    private long _localRevision;
    private long _lastOpTimestamp;
    private int _count;

    public long LocalRevision
    {
      get
      {
        return _localRevision;
      }
      set
      {
        __isset.localRevision = true;
        this._localRevision = value;
      }
    }

    public long LastOpTimestamp
    {
      get
      {
        return _lastOpTimestamp;
      }
      set
      {
        __isset.lastOpTimestamp = true;
        this._lastOpTimestamp = value;
      }
    }

    public int Count
    {
      get
      {
        return _count;
      }
      set
      {
        __isset.count = true;
        this._count = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool localRevision;
      public bool lastOpTimestamp;
      public bool count;
    }

    public fetchMessageOperations_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.I64) {
                LocalRevision = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                LastOpTimestamp = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                Count = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchMessageOperations_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.localRevision) {
          field.Name = "localRevision";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LocalRevision);
          oprot.WriteFieldEnd();
        }
        if (__isset.lastOpTimestamp) {
          field.Name = "lastOpTimestamp";
          field.Type = TType.I64;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(LastOpTimestamp);
          oprot.WriteFieldEnd();
        }
        if (__isset.count) {
          field.Name = "count";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Count);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchMessageOperations_args(");
      bool __first = true;
      if (__isset.localRevision) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LocalRevision: ");
        __sb.Append(LocalRevision);
      }
      if (__isset.lastOpTimestamp) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("LastOpTimestamp: ");
        __sb.Append(LastOpTimestamp);
      }
      if (__isset.count) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Count: ");
        __sb.Append(Count);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class fetchMessageOperations_result : TBase
  {
    private MessageOperations _success;
    private TalkException _e;

    public MessageOperations Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public fetchMessageOperations_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new MessageOperations();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("fetchMessageOperations_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("fetchMessageOperations_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLastReadMessageIds_args : TBase
  {
    private string _chatId;

    public string ChatId
    {
      get
      {
        return _chatId;
      }
      set
      {
        __isset.chatId = true;
        this._chatId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatId;
    }

    public getLastReadMessageIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.String) {
                ChatId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLastReadMessageIds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatId != null && __isset.chatId) {
          field.Name = "chatId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChatId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLastReadMessageIds_args(");
      bool __first = true;
      if (ChatId != null && __isset.chatId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatId: ");
        __sb.Append(ChatId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getLastReadMessageIds_result : TBase
  {
    private LastReadMessageIds _success;
    private TalkException _e;

    public LastReadMessageIds Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public getLastReadMessageIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new LastReadMessageIds();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getLastReadMessageIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getLastReadMessageIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class multiGetLastReadMessageIds_args : TBase
  {
    private List<string> _chatIds;

    public List<string> ChatIds
    {
      get
      {
        return _chatIds;
      }
      set
      {
        __isset.chatIds = true;
        this._chatIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool chatIds;
    }

    public multiGetLastReadMessageIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 2:
              if (field.Type == TType.List) {
                {
                  ChatIds = new List<string>();
                  TList _list829 = iprot.ReadListBegin();
                  for( int _i830 = 0; _i830 < _list829.Count; ++_i830)
                  {
                    string _elem831;
                    _elem831 = iprot.ReadString();
                    ChatIds.Add(_elem831);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("multiGetLastReadMessageIds_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ChatIds != null && __isset.chatIds) {
          field.Name = "chatIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, ChatIds.Count));
            foreach (string _iter832 in ChatIds)
            {
              oprot.WriteString(_iter832);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("multiGetLastReadMessageIds_args(");
      bool __first = true;
      if (ChatIds != null && __isset.chatIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ChatIds: ");
        __sb.Append(ChatIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class multiGetLastReadMessageIds_result : TBase
  {
    private List<LastReadMessageIds> _success;
    private TalkException _e;

    public List<LastReadMessageIds> Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }

    public TalkException E
    {
      get
      {
        return _e;
      }
      set
      {
        __isset.e = true;
        this._e = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
      public bool e;
    }

    public multiGetLastReadMessageIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<LastReadMessageIds>();
                  TList _list833 = iprot.ReadListBegin();
                  for( int _i834 = 0; _i834 < _list833.Count; ++_i834)
                  {
                    LastReadMessageIds _elem835;
                    _elem835 = new LastReadMessageIds();
                    _elem835.Read(iprot);
                    Success.Add(_elem835);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                E = new TalkException();
                E.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("multiGetLastReadMessageIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (LastReadMessageIds _iter836 in Success)
              {
                _iter836.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.e) {
          if (E != null) {
            field.Name = "E";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            E.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("multiGetLastReadMessageIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      if (E != null && __isset.e) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("E: ");
        __sb.Append(E== null ? "<null>" : E.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
