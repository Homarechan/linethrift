/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class SearchResult : TBase
{
  private string _sid;
  private List<SearchResultCollection> _collections;
  private int _start;
  private int _length;

  public string Sid
  {
    get
    {
      return _sid;
    }
    set
    {
      __isset.sid = true;
      this._sid = value;
    }
  }

  public List<SearchResultCollection> Collections
  {
    get
    {
      return _collections;
    }
    set
    {
      __isset.collections = true;
      this._collections = value;
    }
  }

  public int Start
  {
    get
    {
      return _start;
    }
    set
    {
      __isset.start = true;
      this._start = value;
    }
  }

  public int Length
  {
    get
    {
      return _length;
    }
    set
    {
      __isset.length = true;
      this._length = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool sid;
    public bool collections;
    public bool start;
    public bool length;
  }

  public SearchResult() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Sid = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Collections = new List<SearchResultCollection>();
                TList _list71 = iprot.ReadListBegin();
                for( int _i72 = 0; _i72 < _list71.Count; ++_i72)
                {
                  SearchResultCollection _elem73;
                  _elem73 = new SearchResultCollection();
                  _elem73.Read(iprot);
                  Collections.Add(_elem73);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Start = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              Length = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("SearchResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Sid != null && __isset.sid) {
        field.Name = "sid";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Sid);
        oprot.WriteFieldEnd();
      }
      if (Collections != null && __isset.collections) {
        field.Name = "collections";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Collections.Count));
          foreach (SearchResultCollection _iter74 in Collections)
          {
            _iter74.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.start) {
        field.Name = "start";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Start);
        oprot.WriteFieldEnd();
      }
      if (__isset.length) {
        field.Name = "length";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Length);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("SearchResult(");
    bool __first = true;
    if (Sid != null && __isset.sid) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Sid: ");
      __sb.Append(Sid);
    }
    if (Collections != null && __isset.collections) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Collections: ");
      __sb.Append(Collections);
    }
    if (__isset.start) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Start: ");
      __sb.Append(Start);
    }
    if (__isset.length) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Length: ");
      __sb.Append(Length);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

