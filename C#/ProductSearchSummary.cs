/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ProductSearchSummary : TBase
{
  private string _id;
  private PType _type;
  private string _name;
  private string _author;
  private PromotionInfo _promotionInfo;
  private long _version;
  private bool _newFlag;
  private int _priceTier;
  private string _priceInLineCoin;
  private ProductProperty _property;
  private SubType _subType;
  private bool _onSale;
  private bool _availableForPresent;
  private bool _availableForPurchase;
  private int _validDays;
  private string _authorId;
  private bool _saleFlag;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="PType"/>
  /// </summary>
  public PType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Author
  {
    get
    {
      return _author;
    }
    set
    {
      __isset.author = true;
      this._author = value;
    }
  }

  public PromotionInfo PromotionInfo
  {
    get
    {
      return _promotionInfo;
    }
    set
    {
      __isset.promotionInfo = true;
      this._promotionInfo = value;
    }
  }

  public long Version
  {
    get
    {
      return _version;
    }
    set
    {
      __isset.version = true;
      this._version = value;
    }
  }

  public bool NewFlag
  {
    get
    {
      return _newFlag;
    }
    set
    {
      __isset.newFlag = true;
      this._newFlag = value;
    }
  }

  public int PriceTier
  {
    get
    {
      return _priceTier;
    }
    set
    {
      __isset.priceTier = true;
      this._priceTier = value;
    }
  }

  public string PriceInLineCoin
  {
    get
    {
      return _priceInLineCoin;
    }
    set
    {
      __isset.priceInLineCoin = true;
      this._priceInLineCoin = value;
    }
  }

  public ProductProperty Property
  {
    get
    {
      return _property;
    }
    set
    {
      __isset.property = true;
      this._property = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="SubType"/>
  /// </summary>
  public SubType SubType
  {
    get
    {
      return _subType;
    }
    set
    {
      __isset.subType = true;
      this._subType = value;
    }
  }

  public bool OnSale
  {
    get
    {
      return _onSale;
    }
    set
    {
      __isset.onSale = true;
      this._onSale = value;
    }
  }

  public bool AvailableForPresent
  {
    get
    {
      return _availableForPresent;
    }
    set
    {
      __isset.availableForPresent = true;
      this._availableForPresent = value;
    }
  }

  public bool AvailableForPurchase
  {
    get
    {
      return _availableForPurchase;
    }
    set
    {
      __isset.availableForPurchase = true;
      this._availableForPurchase = value;
    }
  }

  public int ValidDays
  {
    get
    {
      return _validDays;
    }
    set
    {
      __isset.validDays = true;
      this._validDays = value;
    }
  }

  public string AuthorId
  {
    get
    {
      return _authorId;
    }
    set
    {
      __isset.authorId = true;
      this._authorId = value;
    }
  }

  public bool SaleFlag
  {
    get
    {
      return _saleFlag;
    }
    set
    {
      __isset.saleFlag = true;
      this._saleFlag = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool type;
    public bool name;
    public bool author;
    public bool promotionInfo;
    public bool version;
    public bool newFlag;
    public bool priceTier;
    public bool priceInLineCoin;
    public bool property;
    public bool subType;
    public bool onSale;
    public bool availableForPresent;
    public bool availableForPurchase;
    public bool validDays;
    public bool authorId;
    public bool saleFlag;
  }

  public ProductSearchSummary() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Type = (PType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Author = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Struct) {
              PromotionInfo = new PromotionInfo();
              PromotionInfo.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              Version = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Bool) {
              NewFlag = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              PriceTier = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              PriceInLineCoin = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Struct) {
              Property = new ProductProperty();
              Property.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.I32) {
              SubType = (SubType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Bool) {
              OnSale = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.Bool) {
              AvailableForPresent = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.Bool) {
              AvailableForPurchase = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.I32) {
              ValidDays = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 16:
            if (field.Type == TType.String) {
              AuthorId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 17:
            if (field.Type == TType.Bool) {
              SaleFlag = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ProductSearchSummary");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Author != null && __isset.author) {
        field.Name = "author";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Author);
        oprot.WriteFieldEnd();
      }
      if (PromotionInfo != null && __isset.promotionInfo) {
        field.Name = "promotionInfo";
        field.Type = TType.Struct;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        PromotionInfo.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Version);
        oprot.WriteFieldEnd();
      }
      if (__isset.newFlag) {
        field.Name = "newFlag";
        field.Type = TType.Bool;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(NewFlag);
        oprot.WriteFieldEnd();
      }
      if (__isset.priceTier) {
        field.Name = "priceTier";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(PriceTier);
        oprot.WriteFieldEnd();
      }
      if (PriceInLineCoin != null && __isset.priceInLineCoin) {
        field.Name = "priceInLineCoin";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PriceInLineCoin);
        oprot.WriteFieldEnd();
      }
      if (Property != null && __isset.property) {
        field.Name = "property";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        Property.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.subType) {
        field.Name = "subType";
        field.Type = TType.I32;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)SubType);
        oprot.WriteFieldEnd();
      }
      if (__isset.onSale) {
        field.Name = "onSale";
        field.Type = TType.Bool;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(OnSale);
        oprot.WriteFieldEnd();
      }
      if (__isset.availableForPresent) {
        field.Name = "availableForPresent";
        field.Type = TType.Bool;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AvailableForPresent);
        oprot.WriteFieldEnd();
      }
      if (__isset.availableForPurchase) {
        field.Name = "availableForPurchase";
        field.Type = TType.Bool;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(AvailableForPurchase);
        oprot.WriteFieldEnd();
      }
      if (__isset.validDays) {
        field.Name = "validDays";
        field.Type = TType.I32;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(ValidDays);
        oprot.WriteFieldEnd();
      }
      if (AuthorId != null && __isset.authorId) {
        field.Name = "authorId";
        field.Type = TType.String;
        field.ID = 16;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AuthorId);
        oprot.WriteFieldEnd();
      }
      if (__isset.saleFlag) {
        field.Name = "saleFlag";
        field.Type = TType.Bool;
        field.ID = 17;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(SaleFlag);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ProductSearchSummary(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Type: ");
      __sb.Append(Type);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (Author != null && __isset.author) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Author: ");
      __sb.Append(Author);
    }
    if (PromotionInfo != null && __isset.promotionInfo) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PromotionInfo: ");
      __sb.Append(PromotionInfo== null ? "<null>" : PromotionInfo.ToString());
    }
    if (__isset.version) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Version: ");
      __sb.Append(Version);
    }
    if (__isset.newFlag) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NewFlag: ");
      __sb.Append(NewFlag);
    }
    if (__isset.priceTier) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PriceTier: ");
      __sb.Append(PriceTier);
    }
    if (PriceInLineCoin != null && __isset.priceInLineCoin) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PriceInLineCoin: ");
      __sb.Append(PriceInLineCoin);
    }
    if (Property != null && __isset.property) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Property: ");
      __sb.Append(Property== null ? "<null>" : Property.ToString());
    }
    if (__isset.subType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SubType: ");
      __sb.Append(SubType);
    }
    if (__isset.onSale) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OnSale: ");
      __sb.Append(OnSale);
    }
    if (__isset.availableForPresent) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AvailableForPresent: ");
      __sb.Append(AvailableForPresent);
    }
    if (__isset.availableForPurchase) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AvailableForPurchase: ");
      __sb.Append(AvailableForPurchase);
    }
    if (__isset.validDays) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ValidDays: ");
      __sb.Append(ValidDays);
    }
    if (AuthorId != null && __isset.authorId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AuthorId: ");
      __sb.Append(AuthorId);
    }
    if (__isset.saleFlag) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SaleFlag: ");
      __sb.Append(SaleFlag);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

