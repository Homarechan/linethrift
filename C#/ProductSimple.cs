/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ProductSimple : TBase
{
  private string _productId;
  private long _packageId;
  private int _version;
  private bool _onSale;
  private long _validUntil;
  private List<StickerIdRange> _stickerIdRanges;
  private bool _grantedByDefault;
  private int _displayOrder;

  public string ProductId
  {
    get
    {
      return _productId;
    }
    set
    {
      __isset.productId = true;
      this._productId = value;
    }
  }

  public long PackageId
  {
    get
    {
      return _packageId;
    }
    set
    {
      __isset.packageId = true;
      this._packageId = value;
    }
  }

  public int Version
  {
    get
    {
      return _version;
    }
    set
    {
      __isset.version = true;
      this._version = value;
    }
  }

  public bool OnSale
  {
    get
    {
      return _onSale;
    }
    set
    {
      __isset.onSale = true;
      this._onSale = value;
    }
  }

  public long ValidUntil
  {
    get
    {
      return _validUntil;
    }
    set
    {
      __isset.validUntil = true;
      this._validUntil = value;
    }
  }

  public List<StickerIdRange> StickerIdRanges
  {
    get
    {
      return _stickerIdRanges;
    }
    set
    {
      __isset.stickerIdRanges = true;
      this._stickerIdRanges = value;
    }
  }

  public bool GrantedByDefault
  {
    get
    {
      return _grantedByDefault;
    }
    set
    {
      __isset.grantedByDefault = true;
      this._grantedByDefault = value;
    }
  }

  public int DisplayOrder
  {
    get
    {
      return _displayOrder;
    }
    set
    {
      __isset.displayOrder = true;
      this._displayOrder = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool productId;
    public bool packageId;
    public bool version;
    public bool onSale;
    public bool validUntil;
    public bool stickerIdRanges;
    public bool grantedByDefault;
    public bool displayOrder;
  }

  public ProductSimple() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              ProductId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              PackageId = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Version = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              OnSale = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              ValidUntil = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.List) {
              {
                StickerIdRanges = new List<StickerIdRange>();
                TList _list289 = iprot.ReadListBegin();
                for( int _i290 = 0; _i290 < _list289.Count; ++_i290)
                {
                  StickerIdRange _elem291;
                  _elem291 = new StickerIdRange();
                  _elem291.Read(iprot);
                  StickerIdRanges.Add(_elem291);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 41:
            if (field.Type == TType.Bool) {
              GrantedByDefault = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 42:
            if (field.Type == TType.I32) {
              DisplayOrder = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ProductSimple");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (ProductId != null && __isset.productId) {
        field.Name = "productId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProductId);
        oprot.WriteFieldEnd();
      }
      if (__isset.packageId) {
        field.Name = "packageId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(PackageId);
        oprot.WriteFieldEnd();
      }
      if (__isset.version) {
        field.Name = "version";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Version);
        oprot.WriteFieldEnd();
      }
      if (__isset.onSale) {
        field.Name = "onSale";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(OnSale);
        oprot.WriteFieldEnd();
      }
      if (__isset.validUntil) {
        field.Name = "validUntil";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ValidUntil);
        oprot.WriteFieldEnd();
      }
      if (StickerIdRanges != null && __isset.stickerIdRanges) {
        field.Name = "stickerIdRanges";
        field.Type = TType.List;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, StickerIdRanges.Count));
          foreach (StickerIdRange _iter292 in StickerIdRanges)
          {
            _iter292.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.grantedByDefault) {
        field.Name = "grantedByDefault";
        field.Type = TType.Bool;
        field.ID = 41;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(GrantedByDefault);
        oprot.WriteFieldEnd();
      }
      if (__isset.displayOrder) {
        field.Name = "displayOrder";
        field.Type = TType.I32;
        field.ID = 42;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(DisplayOrder);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ProductSimple(");
    bool __first = true;
    if (ProductId != null && __isset.productId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ProductId: ");
      __sb.Append(ProductId);
    }
    if (__isset.packageId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PackageId: ");
      __sb.Append(PackageId);
    }
    if (__isset.version) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Version: ");
      __sb.Append(Version);
    }
    if (__isset.onSale) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OnSale: ");
      __sb.Append(OnSale);
    }
    if (__isset.validUntil) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ValidUntil: ");
      __sb.Append(ValidUntil);
    }
    if (StickerIdRanges != null && __isset.stickerIdRanges) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StickerIdRanges: ");
      __sb.Append(StickerIdRanges);
    }
    if (__isset.grantedByDefault) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("GrantedByDefault: ");
      __sb.Append(GrantedByDefault);
    }
    if (__isset.displayOrder) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DisplayOrder: ");
      __sb.Append(DisplayOrder);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

