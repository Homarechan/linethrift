/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ProximityMatchCandidateResult : TBase
{
  private List<Contact> _users;
  private List<Contact> _buddies;

  public List<Contact> Users
  {
    get
    {
      return _users;
    }
    set
    {
      __isset.users = true;
      this._users = value;
    }
  }

  public List<Contact> Buddies
  {
    get
    {
      return _buddies;
    }
    set
    {
      __isset.buddies = true;
      this._buddies = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool users;
    public bool buddies;
  }

  public ProximityMatchCandidateResult() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Users = new List<Contact>();
                TList _list209 = iprot.ReadListBegin();
                for( int _i210 = 0; _i210 < _list209.Count; ++_i210)
                {
                  Contact _elem211;
                  _elem211 = new Contact();
                  _elem211.Read(iprot);
                  Users.Add(_elem211);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Buddies = new List<Contact>();
                TList _list212 = iprot.ReadListBegin();
                for( int _i213 = 0; _i213 < _list212.Count; ++_i213)
                {
                  Contact _elem214;
                  _elem214 = new Contact();
                  _elem214.Read(iprot);
                  Buddies.Add(_elem214);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ProximityMatchCandidateResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Users != null && __isset.users) {
        field.Name = "users";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Users.Count));
          foreach (Contact _iter215 in Users)
          {
            _iter215.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Buddies != null && __isset.buddies) {
        field.Name = "buddies";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Buddies.Count));
          foreach (Contact _iter216 in Buddies)
          {
            _iter216.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ProximityMatchCandidateResult(");
    bool __first = true;
    if (Users != null && __isset.users) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Users: ");
      __sb.Append(Users);
    }
    if (Buddies != null && __isset.buddies) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Buddies: ");
      __sb.Append(Buddies);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

