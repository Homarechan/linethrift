/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class RejectSquareMembersResponse implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("RejectSquareMembersResponse");

  private static final TField REJECTED_MEMBERS_FIELD_DESC = new TField("rejectedMembers", TType.LIST, (short)1);
  private static final TField STATUS_FIELD_DESC = new TField("status", TType.STRUCT, (short)2);

  private Vector rejectedMembers;
  private SquareStatus status;

  // isset id assignments

  public RejectSquareMembersResponse() {
  }

  public RejectSquareMembersResponse(
    Vector rejectedMembers,
    SquareStatus status)
  {
    this();
    this.rejectedMembers = rejectedMembers;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RejectSquareMembersResponse(RejectSquareMembersResponse other) {
    if (other.isSetRejectedMembers()) {
      Vector __this__rejectedMembers = new Vector();
      for (Enumeration other_enum = other.rejectedMembers.elements(); other_enum.hasMoreElements(); ) {
        SquareMember other_element = (SquareMember)other_enum.nextElement();
        __this__rejectedMembers.addElement(new SquareMember(other_element));
      }
      this.rejectedMembers = __this__rejectedMembers;
    }
    if (other.isSetStatus()) {
      this.status = new SquareStatus(other.status);
    }
  }

  public RejectSquareMembersResponse deepCopy() {
    return new RejectSquareMembersResponse(this);
  }

  public void clear() {
    this.rejectedMembers = null;
    this.status = null;
  }

  public int getRejectedMembersSize() {
    return (this.rejectedMembers == null) ? 0 : this.rejectedMembers.size();
  }

  public Enumeration getRejectedMembersEnumeration() {
    return (this.rejectedMembers == null) ? null : this.rejectedMembers.elements();
  }

  public void addToRejectedMembers(SquareMember elem) {
    if (this.rejectedMembers == null) {
      this.rejectedMembers = new Vector();
    }
    this.rejectedMembers.addElement(elem);
  }

  public Vector getRejectedMembers() {
    return this.rejectedMembers;
  }

  public void setRejectedMembers(Vector rejectedMembers) {
    this.rejectedMembers = rejectedMembers;
  }

  public void unsetRejectedMembers() {
    this.rejectedMembers = null;
  }

  /** Returns true if field rejectedMembers is set (has been assigned a value) and false otherwise */
  public boolean isSetRejectedMembers() {
    return this.rejectedMembers != null;
  }

  public void setRejectedMembersIsSet(boolean value) {
    if (!value) {
      this.rejectedMembers = null;
    }
  }

  public SquareStatus getStatus() {
    return this.status;
  }

  public void setStatus(SquareStatus status) {
    this.status = status;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RejectSquareMembersResponse)
      return this.equals((RejectSquareMembersResponse)that);
    return false;
  }

  public boolean equals(RejectSquareMembersResponse that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rejectedMembers = true && this.isSetRejectedMembers();
    boolean that_present_rejectedMembers = true && that.isSetRejectedMembers();
    if (this_present_rejectedMembers || that_present_rejectedMembers) {
      if (!(this_present_rejectedMembers && that_present_rejectedMembers))
        return false;
      if (!this.rejectedMembers.equals(that.rejectedMembers))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    RejectSquareMembersResponse other = (RejectSquareMembersResponse)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetRejectedMembers(), other.isSetRejectedMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRejectedMembers()) {
      lastComparison = TBaseHelper.compareTo(this.rejectedMembers, other.rejectedMembers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetStatus(), other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = this.status.compareTo(other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REJECTED_MEMBERS
          if (field.type == TType.LIST) {
            {
              TList _list454 = iprot.readListBegin();
              this.rejectedMembers = new Vector(_list454.size);
              for (int _i455 = 0; _i455 < _list454.size; ++_i455)
              {
                SquareMember _elem456;
                _elem456 = new SquareMember();
                _elem456.read(iprot);
                this.rejectedMembers.addElement(_elem456);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // STATUS
          if (field.type == TType.STRUCT) {
            this.status = new SquareStatus();
            this.status.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.rejectedMembers != null) {
      oprot.writeFieldBegin(REJECTED_MEMBERS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.rejectedMembers.size()));
        for (Enumeration _iter457_enum = this.rejectedMembers.elements(); _iter457_enum.hasMoreElements(); )         {
          SquareMember _iter457 = (SquareMember)_iter457_enum.nextElement();
          _iter457.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.status != null) {
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      this.status.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("RejectSquareMembersResponse(");
    boolean first = true;

    sb.append("rejectedMembers:");
    if (this.rejectedMembers == null) {
      sb.append("null");
    } else {
      sb.append(this.rejectedMembers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

