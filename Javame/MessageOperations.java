/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MessageOperations implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("MessageOperations");

  private static final TField OPERATIONS_FIELD_DESC = new TField("operations", TType.LIST, (short)1);
  private static final TField END_FLAG_FIELD_DESC = new TField("endFlag", TType.BOOL, (short)2);

  private Vector operations;
  private boolean endFlag;

  // isset id assignments
  private static final int __ENDFLAG_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public MessageOperations() {
  }

  public MessageOperations(
    Vector operations,
    boolean endFlag)
  {
    this();
    this.operations = operations;
    this.endFlag = endFlag;
    setEndFlagIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageOperations(MessageOperations other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetOperations()) {
      Vector __this__operations = new Vector();
      for (Enumeration other_enum = other.operations.elements(); other_enum.hasMoreElements(); ) {
        MessageOperation other_element = (MessageOperation)other_enum.nextElement();
        __this__operations.addElement(new MessageOperation(other_element));
      }
      this.operations = __this__operations;
    }
    this.endFlag = other.endFlag;
  }

  public MessageOperations deepCopy() {
    return new MessageOperations(this);
  }

  public void clear() {
    this.operations = null;
    setEndFlagIsSet(false);
    this.endFlag = false;
  }

  public int getOperationsSize() {
    return (this.operations == null) ? 0 : this.operations.size();
  }

  public Enumeration getOperationsEnumeration() {
    return (this.operations == null) ? null : this.operations.elements();
  }

  public void addToOperations(MessageOperation elem) {
    if (this.operations == null) {
      this.operations = new Vector();
    }
    this.operations.addElement(elem);
  }

  public Vector getOperations() {
    return this.operations;
  }

  public void setOperations(Vector operations) {
    this.operations = operations;
  }

  public void unsetOperations() {
    this.operations = null;
  }

  /** Returns true if field operations is set (has been assigned a value) and false otherwise */
  public boolean isSetOperations() {
    return this.operations != null;
  }

  public void setOperationsIsSet(boolean value) {
    if (!value) {
      this.operations = null;
    }
  }

  public boolean isEndFlag() {
    return this.endFlag;
  }

  public void setEndFlag(boolean endFlag) {
    this.endFlag = endFlag;
    setEndFlagIsSet(true);
  }

  public void unsetEndFlag() {
    __isset_vector[__ENDFLAG_ISSET_ID] = false;
  }

  /** Returns true if field endFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetEndFlag() {
    return __isset_vector[__ENDFLAG_ISSET_ID];
  }

  public void setEndFlagIsSet(boolean value) {
    __isset_vector[__ENDFLAG_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageOperations)
      return this.equals((MessageOperations)that);
    return false;
  }

  public boolean equals(MessageOperations that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_operations = true && this.isSetOperations();
    boolean that_present_operations = true && that.isSetOperations();
    if (this_present_operations || that_present_operations) {
      if (!(this_present_operations && that_present_operations))
        return false;
      if (!this.operations.equals(that.operations))
        return false;
    }

    boolean this_present_endFlag = true;
    boolean that_present_endFlag = true;
    if (this_present_endFlag || that_present_endFlag) {
      if (!(this_present_endFlag && that_present_endFlag))
        return false;
      if (this.endFlag != that.endFlag)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    MessageOperations other = (MessageOperations)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetOperations(), other.isSetOperations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOperations()) {
      lastComparison = TBaseHelper.compareTo(this.operations, other.operations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEndFlag(), other.isSetEndFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndFlag()) {
      lastComparison = TBaseHelper.compareTo(this.endFlag, other.endFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // OPERATIONS
          if (field.type == TType.LIST) {
            {
              TList _list166 = iprot.readListBegin();
              this.operations = new Vector(_list166.size);
              for (int _i167 = 0; _i167 < _list166.size; ++_i167)
              {
                MessageOperation _elem168;
                _elem168 = new MessageOperation();
                _elem168.read(iprot);
                this.operations.addElement(_elem168);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // END_FLAG
          if (field.type == TType.BOOL) {
            this.endFlag = iprot.readBool();
            setEndFlagIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.operations != null) {
      oprot.writeFieldBegin(OPERATIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.operations.size()));
        for (Enumeration _iter169_enum = this.operations.elements(); _iter169_enum.hasMoreElements(); )         {
          MessageOperation _iter169 = (MessageOperation)_iter169_enum.nextElement();
          _iter169.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(END_FLAG_FIELD_DESC);
    oprot.writeBool(this.endFlag);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("MessageOperations(");
    boolean first = true;

    sb.append("operations:");
    if (this.operations == null) {
      sb.append("null");
    } else {
      sb.append(this.operations);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endFlag:");
    sb.append(this.endFlag);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

