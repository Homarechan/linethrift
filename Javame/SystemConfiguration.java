/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SystemConfiguration implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SystemConfiguration");

  private static final TField ENDPOINT_FIELD_DESC = new TField("endpoint", TType.STRING, (short)1);
  private static final TField ENDPOINT_SSL_FIELD_DESC = new TField("endpointSsl", TType.STRING, (short)2);
  private static final TField UPDATE_URL_FIELD_DESC = new TField("updateUrl", TType.STRING, (short)3);
  private static final TField C2DM_ACCOUNT_FIELD_DESC = new TField("c2dmAccount", TType.STRING, (short)11);
  private static final TField NNI_SERVER_FIELD_DESC = new TField("nniServer", TType.STRING, (short)12);

  private String endpoint;
  private String endpointSsl;
  private String updateUrl;
  private String c2dmAccount;
  private String nniServer;

  // isset id assignments

  public SystemConfiguration() {
  }

  public SystemConfiguration(
    String endpoint,
    String endpointSsl,
    String updateUrl,
    String c2dmAccount,
    String nniServer)
  {
    this();
    this.endpoint = endpoint;
    this.endpointSsl = endpointSsl;
    this.updateUrl = updateUrl;
    this.c2dmAccount = c2dmAccount;
    this.nniServer = nniServer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SystemConfiguration(SystemConfiguration other) {
    if (other.isSetEndpoint()) {
      this.endpoint = other.endpoint;
    }
    if (other.isSetEndpointSsl()) {
      this.endpointSsl = other.endpointSsl;
    }
    if (other.isSetUpdateUrl()) {
      this.updateUrl = other.updateUrl;
    }
    if (other.isSetC2dmAccount()) {
      this.c2dmAccount = other.c2dmAccount;
    }
    if (other.isSetNniServer()) {
      this.nniServer = other.nniServer;
    }
  }

  public SystemConfiguration deepCopy() {
    return new SystemConfiguration(this);
  }

  public void clear() {
    this.endpoint = null;
    this.endpointSsl = null;
    this.updateUrl = null;
    this.c2dmAccount = null;
    this.nniServer = null;
  }

  public String getEndpoint() {
    return this.endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }

  public void unsetEndpoint() {
    this.endpoint = null;
  }

  /** Returns true if field endpoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndpoint() {
    return this.endpoint != null;
  }

  public void setEndpointIsSet(boolean value) {
    if (!value) {
      this.endpoint = null;
    }
  }

  public String getEndpointSsl() {
    return this.endpointSsl;
  }

  public void setEndpointSsl(String endpointSsl) {
    this.endpointSsl = endpointSsl;
  }

  public void unsetEndpointSsl() {
    this.endpointSsl = null;
  }

  /** Returns true if field endpointSsl is set (has been assigned a value) and false otherwise */
  public boolean isSetEndpointSsl() {
    return this.endpointSsl != null;
  }

  public void setEndpointSslIsSet(boolean value) {
    if (!value) {
      this.endpointSsl = null;
    }
  }

  public String getUpdateUrl() {
    return this.updateUrl;
  }

  public void setUpdateUrl(String updateUrl) {
    this.updateUrl = updateUrl;
  }

  public void unsetUpdateUrl() {
    this.updateUrl = null;
  }

  /** Returns true if field updateUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateUrl() {
    return this.updateUrl != null;
  }

  public void setUpdateUrlIsSet(boolean value) {
    if (!value) {
      this.updateUrl = null;
    }
  }

  public String getC2dmAccount() {
    return this.c2dmAccount;
  }

  public void setC2dmAccount(String c2dmAccount) {
    this.c2dmAccount = c2dmAccount;
  }

  public void unsetC2dmAccount() {
    this.c2dmAccount = null;
  }

  /** Returns true if field c2dmAccount is set (has been assigned a value) and false otherwise */
  public boolean isSetC2dmAccount() {
    return this.c2dmAccount != null;
  }

  public void setC2dmAccountIsSet(boolean value) {
    if (!value) {
      this.c2dmAccount = null;
    }
  }

  public String getNniServer() {
    return this.nniServer;
  }

  public void setNniServer(String nniServer) {
    this.nniServer = nniServer;
  }

  public void unsetNniServer() {
    this.nniServer = null;
  }

  /** Returns true if field nniServer is set (has been assigned a value) and false otherwise */
  public boolean isSetNniServer() {
    return this.nniServer != null;
  }

  public void setNniServerIsSet(boolean value) {
    if (!value) {
      this.nniServer = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SystemConfiguration)
      return this.equals((SystemConfiguration)that);
    return false;
  }

  public boolean equals(SystemConfiguration that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_endpoint = true && this.isSetEndpoint();
    boolean that_present_endpoint = true && that.isSetEndpoint();
    if (this_present_endpoint || that_present_endpoint) {
      if (!(this_present_endpoint && that_present_endpoint))
        return false;
      if (!this.endpoint.equals(that.endpoint))
        return false;
    }

    boolean this_present_endpointSsl = true && this.isSetEndpointSsl();
    boolean that_present_endpointSsl = true && that.isSetEndpointSsl();
    if (this_present_endpointSsl || that_present_endpointSsl) {
      if (!(this_present_endpointSsl && that_present_endpointSsl))
        return false;
      if (!this.endpointSsl.equals(that.endpointSsl))
        return false;
    }

    boolean this_present_updateUrl = true && this.isSetUpdateUrl();
    boolean that_present_updateUrl = true && that.isSetUpdateUrl();
    if (this_present_updateUrl || that_present_updateUrl) {
      if (!(this_present_updateUrl && that_present_updateUrl))
        return false;
      if (!this.updateUrl.equals(that.updateUrl))
        return false;
    }

    boolean this_present_c2dmAccount = true && this.isSetC2dmAccount();
    boolean that_present_c2dmAccount = true && that.isSetC2dmAccount();
    if (this_present_c2dmAccount || that_present_c2dmAccount) {
      if (!(this_present_c2dmAccount && that_present_c2dmAccount))
        return false;
      if (!this.c2dmAccount.equals(that.c2dmAccount))
        return false;
    }

    boolean this_present_nniServer = true && this.isSetNniServer();
    boolean that_present_nniServer = true && that.isSetNniServer();
    if (this_present_nniServer || that_present_nniServer) {
      if (!(this_present_nniServer && that_present_nniServer))
        return false;
      if (!this.nniServer.equals(that.nniServer))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SystemConfiguration other = (SystemConfiguration)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetEndpoint(), other.isSetEndpoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndpoint()) {
      lastComparison = TBaseHelper.compareTo(this.endpoint, other.endpoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEndpointSsl(), other.isSetEndpointSsl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndpointSsl()) {
      lastComparison = TBaseHelper.compareTo(this.endpointSsl, other.endpointSsl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUpdateUrl(), other.isSetUpdateUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateUrl()) {
      lastComparison = TBaseHelper.compareTo(this.updateUrl, other.updateUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetC2dmAccount(), other.isSetC2dmAccount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetC2dmAccount()) {
      lastComparison = TBaseHelper.compareTo(this.c2dmAccount, other.c2dmAccount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetNniServer(), other.isSetNniServer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNniServer()) {
      lastComparison = TBaseHelper.compareTo(this.nniServer, other.nniServer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ENDPOINT
          if (field.type == TType.STRING) {
            this.endpoint = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ENDPOINT_SSL
          if (field.type == TType.STRING) {
            this.endpointSsl = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // UPDATE_URL
          if (field.type == TType.STRING) {
            this.updateUrl = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // C2DM_ACCOUNT
          if (field.type == TType.STRING) {
            this.c2dmAccount = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // NNI_SERVER
          if (field.type == TType.STRING) {
            this.nniServer = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.endpoint != null) {
      oprot.writeFieldBegin(ENDPOINT_FIELD_DESC);
      oprot.writeString(this.endpoint);
      oprot.writeFieldEnd();
    }
    if (this.endpointSsl != null) {
      oprot.writeFieldBegin(ENDPOINT_SSL_FIELD_DESC);
      oprot.writeString(this.endpointSsl);
      oprot.writeFieldEnd();
    }
    if (this.updateUrl != null) {
      oprot.writeFieldBegin(UPDATE_URL_FIELD_DESC);
      oprot.writeString(this.updateUrl);
      oprot.writeFieldEnd();
    }
    if (this.c2dmAccount != null) {
      oprot.writeFieldBegin(C2DM_ACCOUNT_FIELD_DESC);
      oprot.writeString(this.c2dmAccount);
      oprot.writeFieldEnd();
    }
    if (this.nniServer != null) {
      oprot.writeFieldBegin(NNI_SERVER_FIELD_DESC);
      oprot.writeString(this.nniServer);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SystemConfiguration(");
    boolean first = true;

    sb.append("endpoint:");
    if (this.endpoint == null) {
      sb.append("null");
    } else {
      sb.append(this.endpoint);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endpointSsl:");
    if (this.endpointSsl == null) {
      sb.append("null");
    } else {
      sb.append(this.endpointSsl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateUrl:");
    if (this.updateUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.updateUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("c2dmAccount:");
    if (this.c2dmAccount == null) {
      sb.append("null");
    } else {
      sb.append(this.c2dmAccount);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nniServer:");
    if (this.nniServer == null) {
      sb.append("null");
    } else {
      sb.append(this.nniServer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

