/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class BotService {

  public interface Iface {

    public void notifyLeaveGroup(String groupMid) throws TalkException, TException;

    public void notifyLeaveRoom(String roomMid) throws TalkException, TException;

    public BotUseInfo getBotUseInfo(String botMid) throws TalkException, TException;

    public void sendChatCheckedByWatermark(int seq, String mid, long watermark, byte sessionId) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public void notifyLeaveGroup(String groupMid) throws TalkException, TException
    {
      send_notifyLeaveGroup(groupMid);
      recv_notifyLeaveGroup();
    }

    public void send_notifyLeaveGroup(String groupMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyLeaveGroup", TMessageType.CALL, ++seqid_));
      notifyLeaveGroup_args args = new notifyLeaveGroup_args();
      args.setGroupMid(groupMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyLeaveGroup() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyLeaveGroup failed: out of sequence response");
      }
      notifyLeaveGroup_result result = new notifyLeaveGroup_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public void notifyLeaveRoom(String roomMid) throws TalkException, TException
    {
      send_notifyLeaveRoom(roomMid);
      recv_notifyLeaveRoom();
    }

    public void send_notifyLeaveRoom(String roomMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("notifyLeaveRoom", TMessageType.CALL, ++seqid_));
      notifyLeaveRoom_args args = new notifyLeaveRoom_args();
      args.setRoomMid(roomMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_notifyLeaveRoom() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "notifyLeaveRoom failed: out of sequence response");
      }
      notifyLeaveRoom_result result = new notifyLeaveRoom_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public BotUseInfo getBotUseInfo(String botMid) throws TalkException, TException
    {
      send_getBotUseInfo(botMid);
      return recv_getBotUseInfo();
    }

    public void send_getBotUseInfo(String botMid) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("getBotUseInfo", TMessageType.CALL, ++seqid_));
      getBotUseInfo_args args = new getBotUseInfo_args();
      args.setBotMid(botMid);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BotUseInfo recv_getBotUseInfo() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "getBotUseInfo failed: out of sequence response");
      }
      getBotUseInfo_result result = new getBotUseInfo_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "getBotUseInfo failed: unknown result");
    }

    public void sendChatCheckedByWatermark(int seq, String mid, long watermark, byte sessionId) throws TalkException, TException
    {
      send_sendChatCheckedByWatermark(seq, mid, watermark, sessionId);
      recv_sendChatCheckedByWatermark();
    }

    public void send_sendChatCheckedByWatermark(int seq, String mid, long watermark, byte sessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("sendChatCheckedByWatermark", TMessageType.CALL, ++seqid_));
      sendChatCheckedByWatermark_args args = new sendChatCheckedByWatermark_args();
      args.setSeq(seq);
      args.setMid(mid);
      args.setWatermark(watermark);
      args.setSessionId(sessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_sendChatCheckedByWatermark() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "sendChatCheckedByWatermark failed: out of sequence response");
      }
      sendChatCheckedByWatermark_result result = new sendChatCheckedByWatermark_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("notifyLeaveGroup", new notifyLeaveGroup());
      processMap_.put("notifyLeaveRoom", new notifyLeaveRoom());
      processMap_.put("getBotUseInfo", new getBotUseInfo());
      processMap_.put("sendChatCheckedByWatermark", new sendChatCheckedByWatermark());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class notifyLeaveGroup implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyLeaveGroup_args args = new notifyLeaveGroup_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyLeaveGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyLeaveGroup_result result = new notifyLeaveGroup_result();
        try {
          iface_.notifyLeaveGroup(args.groupMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyLeaveGroup");
          oprot.writeMessageBegin(new TMessage("notifyLeaveGroup", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyLeaveGroup", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class notifyLeaveRoom implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        notifyLeaveRoom_args args = new notifyLeaveRoom_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("notifyLeaveRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        notifyLeaveRoom_result result = new notifyLeaveRoom_result();
        try {
          iface_.notifyLeaveRoom(args.roomMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing notifyLeaveRoom");
          oprot.writeMessageBegin(new TMessage("notifyLeaveRoom", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("notifyLeaveRoom", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class getBotUseInfo implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        getBotUseInfo_args args = new getBotUseInfo_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("getBotUseInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        getBotUseInfo_result result = new getBotUseInfo_result();
        try {
          result.success = iface_.getBotUseInfo(args.botMid);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing getBotUseInfo");
          oprot.writeMessageBegin(new TMessage("getBotUseInfo", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("getBotUseInfo", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class sendChatCheckedByWatermark implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        sendChatCheckedByWatermark_args args = new sendChatCheckedByWatermark_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("sendChatCheckedByWatermark", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        sendChatCheckedByWatermark_result result = new sendChatCheckedByWatermark_result();
        try {
          iface_.sendChatCheckedByWatermark(args.seq, args.mid, args.watermark, args.sessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing sendChatCheckedByWatermark");
          oprot.writeMessageBegin(new TMessage("sendChatCheckedByWatermark", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("sendChatCheckedByWatermark", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class notifyLeaveGroup_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyLeaveGroup_args");

    private static final TField GROUP_MID_FIELD_DESC = new TField("groupMid", TType.STRING, (short)1);

    private String groupMid;

    // isset id assignments

    public notifyLeaveGroup_args() {
    }

    public notifyLeaveGroup_args(
      String groupMid)
    {
      this();
      this.groupMid = groupMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyLeaveGroup_args(notifyLeaveGroup_args other) {
      if (other.isSetGroupMid()) {
        this.groupMid = other.groupMid;
      }
    }

    public notifyLeaveGroup_args deepCopy() {
      return new notifyLeaveGroup_args(this);
    }

    public void clear() {
      this.groupMid = null;
    }

    public String getGroupMid() {
      return this.groupMid;
    }

    public void setGroupMid(String groupMid) {
      this.groupMid = groupMid;
    }

    public void unsetGroupMid() {
      this.groupMid = null;
    }

    /** Returns true if field groupMid is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupMid() {
      return this.groupMid != null;
    }

    public void setGroupMidIsSet(boolean value) {
      if (!value) {
        this.groupMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyLeaveGroup_args)
        return this.equals((notifyLeaveGroup_args)that);
      return false;
    }

    public boolean equals(notifyLeaveGroup_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_groupMid = true && this.isSetGroupMid();
      boolean that_present_groupMid = true && that.isSetGroupMid();
      if (this_present_groupMid || that_present_groupMid) {
        if (!(this_present_groupMid && that_present_groupMid))
          return false;
        if (!this.groupMid.equals(that.groupMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyLeaveGroup_args other = (notifyLeaveGroup_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetGroupMid(), other.isSetGroupMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupMid()) {
        lastComparison = TBaseHelper.compareTo(this.groupMid, other.groupMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // GROUP_MID
            if (field.type == TType.STRING) {
              this.groupMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.groupMid != null) {
        oprot.writeFieldBegin(GROUP_MID_FIELD_DESC);
        oprot.writeString(this.groupMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyLeaveGroup_args(");
      boolean first = true;

      sb.append("groupMid:");
      if (this.groupMid == null) {
        sb.append("null");
      } else {
        sb.append(this.groupMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyLeaveGroup_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyLeaveGroup_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyLeaveGroup_result() {
    }

    public notifyLeaveGroup_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyLeaveGroup_result(notifyLeaveGroup_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyLeaveGroup_result deepCopy() {
      return new notifyLeaveGroup_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyLeaveGroup_result)
        return this.equals((notifyLeaveGroup_result)that);
      return false;
    }

    public boolean equals(notifyLeaveGroup_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyLeaveGroup_result other = (notifyLeaveGroup_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyLeaveGroup_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyLeaveRoom_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyLeaveRoom_args");

    private static final TField ROOM_MID_FIELD_DESC = new TField("roomMid", TType.STRING, (short)1);

    private String roomMid;

    // isset id assignments

    public notifyLeaveRoom_args() {
    }

    public notifyLeaveRoom_args(
      String roomMid)
    {
      this();
      this.roomMid = roomMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyLeaveRoom_args(notifyLeaveRoom_args other) {
      if (other.isSetRoomMid()) {
        this.roomMid = other.roomMid;
      }
    }

    public notifyLeaveRoom_args deepCopy() {
      return new notifyLeaveRoom_args(this);
    }

    public void clear() {
      this.roomMid = null;
    }

    public String getRoomMid() {
      return this.roomMid;
    }

    public void setRoomMid(String roomMid) {
      this.roomMid = roomMid;
    }

    public void unsetRoomMid() {
      this.roomMid = null;
    }

    /** Returns true if field roomMid is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomMid() {
      return this.roomMid != null;
    }

    public void setRoomMidIsSet(boolean value) {
      if (!value) {
        this.roomMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyLeaveRoom_args)
        return this.equals((notifyLeaveRoom_args)that);
      return false;
    }

    public boolean equals(notifyLeaveRoom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_roomMid = true && this.isSetRoomMid();
      boolean that_present_roomMid = true && that.isSetRoomMid();
      if (this_present_roomMid || that_present_roomMid) {
        if (!(this_present_roomMid && that_present_roomMid))
          return false;
        if (!this.roomMid.equals(that.roomMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyLeaveRoom_args other = (notifyLeaveRoom_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetRoomMid(), other.isSetRoomMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomMid()) {
        lastComparison = TBaseHelper.compareTo(this.roomMid, other.roomMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // ROOM_MID
            if (field.type == TType.STRING) {
              this.roomMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.roomMid != null) {
        oprot.writeFieldBegin(ROOM_MID_FIELD_DESC);
        oprot.writeString(this.roomMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyLeaveRoom_args(");
      boolean first = true;

      sb.append("roomMid:");
      if (this.roomMid == null) {
        sb.append("null");
      } else {
        sb.append(this.roomMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class notifyLeaveRoom_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("notifyLeaveRoom_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public notifyLeaveRoom_result() {
    }

    public notifyLeaveRoom_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyLeaveRoom_result(notifyLeaveRoom_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public notifyLeaveRoom_result deepCopy() {
      return new notifyLeaveRoom_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyLeaveRoom_result)
        return this.equals((notifyLeaveRoom_result)that);
      return false;
    }

    public boolean equals(notifyLeaveRoom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      notifyLeaveRoom_result other = (notifyLeaveRoom_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("notifyLeaveRoom_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBotUseInfo_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBotUseInfo_args");

    private static final TField BOT_MID_FIELD_DESC = new TField("botMid", TType.STRING, (short)2);

    private String botMid;

    // isset id assignments

    public getBotUseInfo_args() {
    }

    public getBotUseInfo_args(
      String botMid)
    {
      this();
      this.botMid = botMid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBotUseInfo_args(getBotUseInfo_args other) {
      if (other.isSetBotMid()) {
        this.botMid = other.botMid;
      }
    }

    public getBotUseInfo_args deepCopy() {
      return new getBotUseInfo_args(this);
    }

    public void clear() {
      this.botMid = null;
    }

    public String getBotMid() {
      return this.botMid;
    }

    public void setBotMid(String botMid) {
      this.botMid = botMid;
    }

    public void unsetBotMid() {
      this.botMid = null;
    }

    /** Returns true if field botMid is set (has been assigned a value) and false otherwise */
    public boolean isSetBotMid() {
      return this.botMid != null;
    }

    public void setBotMidIsSet(boolean value) {
      if (!value) {
        this.botMid = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBotUseInfo_args)
        return this.equals((getBotUseInfo_args)that);
      return false;
    }

    public boolean equals(getBotUseInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_botMid = true && this.isSetBotMid();
      boolean that_present_botMid = true && that.isSetBotMid();
      if (this_present_botMid || that_present_botMid) {
        if (!(this_present_botMid && that_present_botMid))
          return false;
        if (!this.botMid.equals(that.botMid))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBotUseInfo_args other = (getBotUseInfo_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetBotMid(), other.isSetBotMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBotMid()) {
        lastComparison = TBaseHelper.compareTo(this.botMid, other.botMid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // BOT_MID
            if (field.type == TType.STRING) {
              this.botMid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.botMid != null) {
        oprot.writeFieldBegin(BOT_MID_FIELD_DESC);
        oprot.writeString(this.botMid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBotUseInfo_args(");
      boolean first = true;

      sb.append("botMid:");
      if (this.botMid == null) {
        sb.append("null");
      } else {
        sb.append(this.botMid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class getBotUseInfo_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("getBotUseInfo_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private BotUseInfo success;
    private TalkException e;

    // isset id assignments

    public getBotUseInfo_result() {
    }

    public getBotUseInfo_result(
      BotUseInfo success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBotUseInfo_result(getBotUseInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new BotUseInfo(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public getBotUseInfo_result deepCopy() {
      return new getBotUseInfo_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public BotUseInfo getSuccess() {
      return this.success;
    }

    public void setSuccess(BotUseInfo success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBotUseInfo_result)
        return this.equals((getBotUseInfo_result)that);
      return false;
    }

    public boolean equals(getBotUseInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      getBotUseInfo_result other = (getBotUseInfo_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new BotUseInfo();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("getBotUseInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendChatCheckedByWatermark_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendChatCheckedByWatermark_args");

    private static final TField SEQ_FIELD_DESC = new TField("seq", TType.I32, (short)1);
    private static final TField MID_FIELD_DESC = new TField("mid", TType.STRING, (short)2);
    private static final TField WATERMARK_FIELD_DESC = new TField("watermark", TType.I64, (short)3);
    private static final TField SESSION_ID_FIELD_DESC = new TField("sessionId", TType.BYTE, (short)4);

    private int seq;
    private String mid;
    private long watermark;
    private byte sessionId;

    // isset id assignments
    private static final int __SEQ_ISSET_ID = 0;
    private static final int __WATERMARK_ISSET_ID = 1;
    private static final int __SESSIONID_ISSET_ID = 2;
    private boolean[] __isset_vector = new boolean[3];

    public sendChatCheckedByWatermark_args() {
    }

    public sendChatCheckedByWatermark_args(
      int seq,
      String mid,
      long watermark,
      byte sessionId)
    {
      this();
      this.seq = seq;
      setSeqIsSet(true);
      this.mid = mid;
      this.watermark = watermark;
      setWatermarkIsSet(true);
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatCheckedByWatermark_args(sendChatCheckedByWatermark_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.seq = other.seq;
      if (other.isSetMid()) {
        this.mid = other.mid;
      }
      this.watermark = other.watermark;
      this.sessionId = other.sessionId;
    }

    public sendChatCheckedByWatermark_args deepCopy() {
      return new sendChatCheckedByWatermark_args(this);
    }

    public void clear() {
      setSeqIsSet(false);
      this.seq = 0;
      this.mid = null;
      setWatermarkIsSet(false);
      this.watermark = 0;
      setSessionIdIsSet(false);
      this.sessionId = 0;
    }

    public int getSeq() {
      return this.seq;
    }

    public void setSeq(int seq) {
      this.seq = seq;
      setSeqIsSet(true);
    }

    public void unsetSeq() {
      __isset_vector[__SEQ_ISSET_ID] = false;
    }

    /** Returns true if field seq is set (has been assigned a value) and false otherwise */
    public boolean isSetSeq() {
      return __isset_vector[__SEQ_ISSET_ID];
    }

    public void setSeqIsSet(boolean value) {
      __isset_vector[__SEQ_ISSET_ID] = value;
    }

    public String getMid() {
      return this.mid;
    }

    public void setMid(String mid) {
      this.mid = mid;
    }

    public void unsetMid() {
      this.mid = null;
    }

    /** Returns true if field mid is set (has been assigned a value) and false otherwise */
    public boolean isSetMid() {
      return this.mid != null;
    }

    public void setMidIsSet(boolean value) {
      if (!value) {
        this.mid = null;
      }
    }

    public long getWatermark() {
      return this.watermark;
    }

    public void setWatermark(long watermark) {
      this.watermark = watermark;
      setWatermarkIsSet(true);
    }

    public void unsetWatermark() {
      __isset_vector[__WATERMARK_ISSET_ID] = false;
    }

    /** Returns true if field watermark is set (has been assigned a value) and false otherwise */
    public boolean isSetWatermark() {
      return __isset_vector[__WATERMARK_ISSET_ID];
    }

    public void setWatermarkIsSet(boolean value) {
      __isset_vector[__WATERMARK_ISSET_ID] = value;
    }

    public byte getSessionId() {
      return this.sessionId;
    }

    public void setSessionId(byte sessionId) {
      this.sessionId = sessionId;
      setSessionIdIsSet(true);
    }

    public void unsetSessionId() {
      __isset_vector[__SESSIONID_ISSET_ID] = false;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return __isset_vector[__SESSIONID_ISSET_ID];
    }

    public void setSessionIdIsSet(boolean value) {
      __isset_vector[__SESSIONID_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatCheckedByWatermark_args)
        return this.equals((sendChatCheckedByWatermark_args)that);
      return false;
    }

    public boolean equals(sendChatCheckedByWatermark_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_seq = true;
      boolean that_present_seq = true;
      if (this_present_seq || that_present_seq) {
        if (!(this_present_seq && that_present_seq))
          return false;
        if (this.seq != that.seq)
          return false;
      }

      boolean this_present_mid = true && this.isSetMid();
      boolean that_present_mid = true && that.isSetMid();
      if (this_present_mid || that_present_mid) {
        if (!(this_present_mid && that_present_mid))
          return false;
        if (!this.mid.equals(that.mid))
          return false;
      }

      boolean this_present_watermark = true;
      boolean that_present_watermark = true;
      if (this_present_watermark || that_present_watermark) {
        if (!(this_present_watermark && that_present_watermark))
          return false;
        if (this.watermark != that.watermark)
          return false;
      }

      boolean this_present_sessionId = true;
      boolean that_present_sessionId = true;
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (this.sessionId != that.sessionId)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendChatCheckedByWatermark_args other = (sendChatCheckedByWatermark_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSeq(), other.isSetSeq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSeq()) {
        lastComparison = TBaseHelper.compareTo(this.seq, other.seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetMid(), other.isSetMid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMid()) {
        lastComparison = TBaseHelper.compareTo(this.mid, other.mid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetWatermark(), other.isSetWatermark());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWatermark()) {
        lastComparison = TBaseHelper.compareTo(this.watermark, other.watermark);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetSessionId(), other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // SEQ
            if (field.type == TType.I32) {
              this.seq = iprot.readI32();
              setSeqIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // MID
            if (field.type == TType.STRING) {
              this.mid = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // WATERMARK
            if (field.type == TType.I64) {
              this.watermark = iprot.readI64();
              setWatermarkIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // SESSION_ID
            if (field.type == TType.BYTE) {
              this.sessionId = iprot.readByte();
              setSessionIdIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(SEQ_FIELD_DESC);
      oprot.writeI32(this.seq);
      oprot.writeFieldEnd();
      if (this.mid != null) {
        oprot.writeFieldBegin(MID_FIELD_DESC);
        oprot.writeString(this.mid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WATERMARK_FIELD_DESC);
      oprot.writeI64(this.watermark);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
      oprot.writeByte(this.sessionId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendChatCheckedByWatermark_args(");
      boolean first = true;

      sb.append("seq:");
      sb.append(this.seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("mid:");
      if (this.mid == null) {
        sb.append("null");
      } else {
        sb.append(this.mid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("watermark:");
      sb.append(this.watermark);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sessionId:");
      sb.append(this.sessionId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class sendChatCheckedByWatermark_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("sendChatCheckedByWatermark_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public sendChatCheckedByWatermark_result() {
    }

    public sendChatCheckedByWatermark_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendChatCheckedByWatermark_result(sendChatCheckedByWatermark_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public sendChatCheckedByWatermark_result deepCopy() {
      return new sendChatCheckedByWatermark_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendChatCheckedByWatermark_result)
        return this.equals((sendChatCheckedByWatermark_result)that);
      return false;
    }

    public boolean equals(sendChatCheckedByWatermark_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      sendChatCheckedByWatermark_result other = (sendChatCheckedByWatermark_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("sendChatCheckedByWatermark_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
