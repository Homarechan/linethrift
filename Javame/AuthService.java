/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class AuthService {

  public interface Iface {

    public String normalizePhoneNumber(String countryCode, String phoneNumber, String countryCodeHint) throws TalkException, TException;

    public void respondE2EELoginRequest(String verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode) throws TalkException, TException;

    public String confirmE2EELogin(String verifier, byte[] deviceSecret) throws TalkException, TException;

    public void logoutZ() throws TalkException, TException;

    public LoginResult loginZ(LoginRequest loginRequest) throws TalkException, TException;

    public SecurityCenterResult issueTokenForAccountMigrationSettings(boolean enforce) throws TalkException, TException;

    public SecurityCenterResult issueTokenForAccountMigration(String migrationSessionId) throws TalkException, TException;

    public String verifyQrcodeWithE2EE(String verifier, String pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain) throws TalkException, TException;

  }

  public static class Client implements TServiceClient, Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public String normalizePhoneNumber(String countryCode, String phoneNumber, String countryCodeHint) throws TalkException, TException
    {
      send_normalizePhoneNumber(countryCode, phoneNumber, countryCodeHint);
      return recv_normalizePhoneNumber();
    }

    public void send_normalizePhoneNumber(String countryCode, String phoneNumber, String countryCodeHint) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.CALL, ++seqid_));
      normalizePhoneNumber_args args = new normalizePhoneNumber_args();
      args.setCountryCode(countryCode);
      args.setPhoneNumber(phoneNumber);
      args.setCountryCodeHint(countryCodeHint);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_normalizePhoneNumber() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "normalizePhoneNumber failed: out of sequence response");
      }
      normalizePhoneNumber_result result = new normalizePhoneNumber_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "normalizePhoneNumber failed: unknown result");
    }

    public void respondE2EELoginRequest(String verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode) throws TalkException, TException
    {
      send_respondE2EELoginRequest(verifier, publicKey, encryptedKeyChain, hashKeyChain, errorCode);
      recv_respondE2EELoginRequest();
    }

    public void send_respondE2EELoginRequest(String verifier, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain, ErrorCode errorCode) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.CALL, ++seqid_));
      respondE2EELoginRequest_args args = new respondE2EELoginRequest_args();
      args.setVerifier(verifier);
      args.setPublicKey(publicKey);
      args.setEncryptedKeyChain(encryptedKeyChain);
      args.setHashKeyChain(hashKeyChain);
      args.setErrorCode(errorCode);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_respondE2EELoginRequest() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "respondE2EELoginRequest failed: out of sequence response");
      }
      respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public String confirmE2EELogin(String verifier, byte[] deviceSecret) throws TalkException, TException
    {
      send_confirmE2EELogin(verifier, deviceSecret);
      return recv_confirmE2EELogin();
    }

    public void send_confirmE2EELogin(String verifier, byte[] deviceSecret) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.CALL, ++seqid_));
      confirmE2EELogin_args args = new confirmE2EELogin_args();
      args.setVerifier(verifier);
      args.setDeviceSecret(deviceSecret);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_confirmE2EELogin() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "confirmE2EELogin failed: out of sequence response");
      }
      confirmE2EELogin_result result = new confirmE2EELogin_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "confirmE2EELogin failed: unknown result");
    }

    public void logoutZ() throws TalkException, TException
    {
      send_logoutZ();
      recv_logoutZ();
    }

    public void send_logoutZ() throws TException
    {
      oprot_.writeMessageBegin(new TMessage("logoutZ", TMessageType.CALL, ++seqid_));
      logoutZ_args args = new logoutZ_args();
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public void recv_logoutZ() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "logoutZ failed: out of sequence response");
      }
      logoutZ_result result = new logoutZ_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.e != null) {
        throw result.e;
      }
      return;
    }

    public LoginResult loginZ(LoginRequest loginRequest) throws TalkException, TException
    {
      send_loginZ(loginRequest);
      return recv_loginZ();
    }

    public void send_loginZ(LoginRequest loginRequest) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("loginZ", TMessageType.CALL, ++seqid_));
      loginZ_args args = new loginZ_args();
      args.setLoginRequest(loginRequest);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public LoginResult recv_loginZ() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "loginZ failed: out of sequence response");
      }
      loginZ_result result = new loginZ_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "loginZ failed: unknown result");
    }

    public SecurityCenterResult issueTokenForAccountMigrationSettings(boolean enforce) throws TalkException, TException
    {
      send_issueTokenForAccountMigrationSettings(enforce);
      return recv_issueTokenForAccountMigrationSettings();
    }

    public void send_issueTokenForAccountMigrationSettings(boolean enforce) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.CALL, ++seqid_));
      issueTokenForAccountMigrationSettings_args args = new issueTokenForAccountMigrationSettings_args();
      args.setEnforce(enforce);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SecurityCenterResult recv_issueTokenForAccountMigrationSettings() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "issueTokenForAccountMigrationSettings failed: out of sequence response");
      }
      issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "issueTokenForAccountMigrationSettings failed: unknown result");
    }

    public SecurityCenterResult issueTokenForAccountMigration(String migrationSessionId) throws TalkException, TException
    {
      send_issueTokenForAccountMigration(migrationSessionId);
      return recv_issueTokenForAccountMigration();
    }

    public void send_issueTokenForAccountMigration(String migrationSessionId) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.CALL, ++seqid_));
      issueTokenForAccountMigration_args args = new issueTokenForAccountMigration_args();
      args.setMigrationSessionId(migrationSessionId);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public SecurityCenterResult recv_issueTokenForAccountMigration() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "issueTokenForAccountMigration failed: out of sequence response");
      }
      issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "issueTokenForAccountMigration failed: unknown result");
    }

    public String verifyQrcodeWithE2EE(String verifier, String pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain) throws TalkException, TException
    {
      send_verifyQrcodeWithE2EE(verifier, pinCode, errorCode, publicKey, encryptedKeyChain, hashKeyChain);
      return recv_verifyQrcodeWithE2EE();
    }

    public void send_verifyQrcodeWithE2EE(String verifier, String pinCode, ErrorCode errorCode, E2EEPublicKey publicKey, byte[] encryptedKeyChain, byte[] hashKeyChain) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.CALL, ++seqid_));
      verifyQrcodeWithE2EE_args args = new verifyQrcodeWithE2EE_args();
      args.setVerifier(verifier);
      args.setPinCode(pinCode);
      args.setErrorCode(errorCode);
      args.setPublicKey(publicKey);
      args.setEncryptedKeyChain(encryptedKeyChain);
      args.setHashKeyChain(hashKeyChain);
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public String recv_verifyQrcodeWithE2EE() throws TalkException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      if (msg.seqid != seqid_) {
        throw new TApplicationException(TApplicationException.BAD_SEQUENCE_ID, "verifyQrcodeWithE2EE failed: out of sequence response");
      }
      verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "verifyQrcodeWithE2EE failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("normalizePhoneNumber", new normalizePhoneNumber());
      processMap_.put("respondE2EELoginRequest", new respondE2EELoginRequest());
      processMap_.put("confirmE2EELogin", new confirmE2EELogin());
      processMap_.put("logoutZ", new logoutZ());
      processMap_.put("loginZ", new loginZ());
      processMap_.put("issueTokenForAccountMigrationSettings", new issueTokenForAccountMigrationSettings());
      processMap_.put("issueTokenForAccountMigration", new issueTokenForAccountMigration());
      processMap_.put("verifyQrcodeWithE2EE", new verifyQrcodeWithE2EE());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final Hashtable processMap_ = new Hashtable();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = (ProcessFunction)processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class normalizePhoneNumber implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        normalizePhoneNumber_args args = new normalizePhoneNumber_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        normalizePhoneNumber_result result = new normalizePhoneNumber_result();
        try {
          result.success = iface_.normalizePhoneNumber(args.countryCode, args.phoneNumber, args.countryCodeHint);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing normalizePhoneNumber");
          oprot.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("normalizePhoneNumber", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class respondE2EELoginRequest implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        respondE2EELoginRequest_args args = new respondE2EELoginRequest_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        respondE2EELoginRequest_result result = new respondE2EELoginRequest_result();
        try {
          iface_.respondE2EELoginRequest(args.verifier, args.publicKey, args.encryptedKeyChain, args.hashKeyChain, args.errorCode);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing respondE2EELoginRequest");
          oprot.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("respondE2EELoginRequest", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class confirmE2EELogin implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        confirmE2EELogin_args args = new confirmE2EELogin_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        confirmE2EELogin_result result = new confirmE2EELogin_result();
        try {
          result.success = iface_.confirmE2EELogin(args.verifier, args.deviceSecret);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing confirmE2EELogin");
          oprot.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("confirmE2EELogin", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class logoutZ implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        logoutZ_args args = new logoutZ_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("logoutZ", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        logoutZ_result result = new logoutZ_result();
        try {
          iface_.logoutZ();
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing logoutZ");
          oprot.writeMessageBegin(new TMessage("logoutZ", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("logoutZ", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class loginZ implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        loginZ_args args = new loginZ_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("loginZ", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        loginZ_result result = new loginZ_result();
        try {
          result.success = iface_.loginZ(args.loginRequest);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing loginZ");
          oprot.writeMessageBegin(new TMessage("loginZ", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("loginZ", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class issueTokenForAccountMigrationSettings implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        issueTokenForAccountMigrationSettings_args args = new issueTokenForAccountMigrationSettings_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        issueTokenForAccountMigrationSettings_result result = new issueTokenForAccountMigrationSettings_result();
        try {
          result.success = iface_.issueTokenForAccountMigrationSettings(args.enforce);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing issueTokenForAccountMigrationSettings");
          oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigrationSettings", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class issueTokenForAccountMigration implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        issueTokenForAccountMigration_args args = new issueTokenForAccountMigration_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        issueTokenForAccountMigration_result result = new issueTokenForAccountMigration_result();
        try {
          result.success = iface_.issueTokenForAccountMigration(args.migrationSessionId);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing issueTokenForAccountMigration");
          oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("issueTokenForAccountMigration", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

    private class verifyQrcodeWithE2EE implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        verifyQrcodeWithE2EE_args args = new verifyQrcodeWithE2EE_args();
        try {
          args.read(iprot);
        } catch (TProtocolException e) {
          iprot.readMessageEnd();
          TApplicationException x = new TApplicationException(TApplicationException.PROTOCOL_ERROR, e.getMessage());
          oprot.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        iprot.readMessageEnd();
        verifyQrcodeWithE2EE_result result = new verifyQrcodeWithE2EE_result();
        try {
          result.success = iface_.verifyQrcodeWithE2EE(args.verifier, args.pinCode, args.errorCode, args.publicKey, args.encryptedKeyChain, args.hashKeyChain);
        } catch (TalkException e) {
          result.e = e;
        } catch (Throwable th) {
          TApplicationException x = new TApplicationException(TApplicationException.INTERNAL_ERROR, "Internal error processing verifyQrcodeWithE2EE");
          oprot.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.EXCEPTION, seqid));
          x.write(oprot);
          oprot.writeMessageEnd();
          oprot.getTransport().flush();
          return;
        }
        oprot.writeMessageBegin(new TMessage("verifyQrcodeWithE2EE", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class normalizePhoneNumber_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("normalizePhoneNumber_args");

    private static final TField COUNTRY_CODE_FIELD_DESC = new TField("countryCode", TType.STRING, (short)2);
    private static final TField PHONE_NUMBER_FIELD_DESC = new TField("phoneNumber", TType.STRING, (short)3);
    private static final TField COUNTRY_CODE_HINT_FIELD_DESC = new TField("countryCodeHint", TType.STRING, (short)4);

    private String countryCode;
    private String phoneNumber;
    private String countryCodeHint;

    // isset id assignments

    public normalizePhoneNumber_args() {
    }

    public normalizePhoneNumber_args(
      String countryCode,
      String phoneNumber,
      String countryCodeHint)
    {
      this();
      this.countryCode = countryCode;
      this.phoneNumber = phoneNumber;
      this.countryCodeHint = countryCodeHint;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public normalizePhoneNumber_args(normalizePhoneNumber_args other) {
      if (other.isSetCountryCode()) {
        this.countryCode = other.countryCode;
      }
      if (other.isSetPhoneNumber()) {
        this.phoneNumber = other.phoneNumber;
      }
      if (other.isSetCountryCodeHint()) {
        this.countryCodeHint = other.countryCodeHint;
      }
    }

    public normalizePhoneNumber_args deepCopy() {
      return new normalizePhoneNumber_args(this);
    }

    public void clear() {
      this.countryCode = null;
      this.phoneNumber = null;
      this.countryCodeHint = null;
    }

    public String getCountryCode() {
      return this.countryCode;
    }

    public void setCountryCode(String countryCode) {
      this.countryCode = countryCode;
    }

    public void unsetCountryCode() {
      this.countryCode = null;
    }

    /** Returns true if field countryCode is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryCode() {
      return this.countryCode != null;
    }

    public void setCountryCodeIsSet(boolean value) {
      if (!value) {
        this.countryCode = null;
      }
    }

    public String getPhoneNumber() {
      return this.phoneNumber;
    }

    public void setPhoneNumber(String phoneNumber) {
      this.phoneNumber = phoneNumber;
    }

    public void unsetPhoneNumber() {
      this.phoneNumber = null;
    }

    /** Returns true if field phoneNumber is set (has been assigned a value) and false otherwise */
    public boolean isSetPhoneNumber() {
      return this.phoneNumber != null;
    }

    public void setPhoneNumberIsSet(boolean value) {
      if (!value) {
        this.phoneNumber = null;
      }
    }

    public String getCountryCodeHint() {
      return this.countryCodeHint;
    }

    public void setCountryCodeHint(String countryCodeHint) {
      this.countryCodeHint = countryCodeHint;
    }

    public void unsetCountryCodeHint() {
      this.countryCodeHint = null;
    }

    /** Returns true if field countryCodeHint is set (has been assigned a value) and false otherwise */
    public boolean isSetCountryCodeHint() {
      return this.countryCodeHint != null;
    }

    public void setCountryCodeHintIsSet(boolean value) {
      if (!value) {
        this.countryCodeHint = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof normalizePhoneNumber_args)
        return this.equals((normalizePhoneNumber_args)that);
      return false;
    }

    public boolean equals(normalizePhoneNumber_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_countryCode = true && this.isSetCountryCode();
      boolean that_present_countryCode = true && that.isSetCountryCode();
      if (this_present_countryCode || that_present_countryCode) {
        if (!(this_present_countryCode && that_present_countryCode))
          return false;
        if (!this.countryCode.equals(that.countryCode))
          return false;
      }

      boolean this_present_phoneNumber = true && this.isSetPhoneNumber();
      boolean that_present_phoneNumber = true && that.isSetPhoneNumber();
      if (this_present_phoneNumber || that_present_phoneNumber) {
        if (!(this_present_phoneNumber && that_present_phoneNumber))
          return false;
        if (!this.phoneNumber.equals(that.phoneNumber))
          return false;
      }

      boolean this_present_countryCodeHint = true && this.isSetCountryCodeHint();
      boolean that_present_countryCodeHint = true && that.isSetCountryCodeHint();
      if (this_present_countryCodeHint || that_present_countryCodeHint) {
        if (!(this_present_countryCodeHint && that_present_countryCodeHint))
          return false;
        if (!this.countryCodeHint.equals(that.countryCodeHint))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      normalizePhoneNumber_args other = (normalizePhoneNumber_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetCountryCode(), other.isSetCountryCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryCode()) {
        lastComparison = TBaseHelper.compareTo(this.countryCode, other.countryCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPhoneNumber(), other.isSetPhoneNumber());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPhoneNumber()) {
        lastComparison = TBaseHelper.compareTo(this.phoneNumber, other.phoneNumber);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetCountryCodeHint(), other.isSetCountryCodeHint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCountryCodeHint()) {
        lastComparison = TBaseHelper.compareTo(this.countryCodeHint, other.countryCodeHint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // COUNTRY_CODE
            if (field.type == TType.STRING) {
              this.countryCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PHONE_NUMBER
            if (field.type == TType.STRING) {
              this.phoneNumber = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // COUNTRY_CODE_HINT
            if (field.type == TType.STRING) {
              this.countryCodeHint = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.countryCode != null) {
        oprot.writeFieldBegin(COUNTRY_CODE_FIELD_DESC);
        oprot.writeString(this.countryCode);
        oprot.writeFieldEnd();
      }
      if (this.phoneNumber != null) {
        oprot.writeFieldBegin(PHONE_NUMBER_FIELD_DESC);
        oprot.writeString(this.phoneNumber);
        oprot.writeFieldEnd();
      }
      if (this.countryCodeHint != null) {
        oprot.writeFieldBegin(COUNTRY_CODE_HINT_FIELD_DESC);
        oprot.writeString(this.countryCodeHint);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("normalizePhoneNumber_args(");
      boolean first = true;

      sb.append("countryCode:");
      if (this.countryCode == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("phoneNumber:");
      if (this.phoneNumber == null) {
        sb.append("null");
      } else {
        sb.append(this.phoneNumber);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("countryCodeHint:");
      if (this.countryCodeHint == null) {
        sb.append("null");
      } else {
        sb.append(this.countryCodeHint);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class normalizePhoneNumber_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("normalizePhoneNumber_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public normalizePhoneNumber_result() {
    }

    public normalizePhoneNumber_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public normalizePhoneNumber_result(normalizePhoneNumber_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public normalizePhoneNumber_result deepCopy() {
      return new normalizePhoneNumber_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof normalizePhoneNumber_result)
        return this.equals((normalizePhoneNumber_result)that);
      return false;
    }

    public boolean equals(normalizePhoneNumber_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      normalizePhoneNumber_result other = (normalizePhoneNumber_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("normalizePhoneNumber_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class respondE2EELoginRequest_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("respondE2EELoginRequest_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)1);
    private static final TField PUBLIC_KEY_FIELD_DESC = new TField("publicKey", TType.STRUCT, (short)2);
    private static final TField ENCRYPTED_KEY_CHAIN_FIELD_DESC = new TField("encryptedKeyChain", TType.STRING, (short)3);
    private static final TField HASH_KEY_CHAIN_FIELD_DESC = new TField("hashKeyChain", TType.STRING, (short)4);
    private static final TField ERROR_CODE_FIELD_DESC = new TField("errorCode", TType.I32, (short)5);

    private String verifier;
    private E2EEPublicKey publicKey;
    private byte[] encryptedKeyChain;
    private byte[] hashKeyChain;
    private ErrorCode errorCode;

    // isset id assignments

    public respondE2EELoginRequest_args() {
    }

    public respondE2EELoginRequest_args(
      String verifier,
      E2EEPublicKey publicKey,
      byte[] encryptedKeyChain,
      byte[] hashKeyChain,
      ErrorCode errorCode)
    {
      this();
      this.verifier = verifier;
      this.publicKey = publicKey;
      this.encryptedKeyChain = encryptedKeyChain;
      this.hashKeyChain = hashKeyChain;
      this.errorCode = errorCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public respondE2EELoginRequest_args(respondE2EELoginRequest_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetPublicKey()) {
        this.publicKey = new E2EEPublicKey(other.publicKey);
      }
      if (other.isSetEncryptedKeyChain()) {
        this.encryptedKeyChain = new byte[other.encryptedKeyChain.length];
        System.arraycopy(other.encryptedKeyChain, 0, encryptedKeyChain, 0, other.encryptedKeyChain.length);
      }
      if (other.isSetHashKeyChain()) {
        this.hashKeyChain = new byte[other.hashKeyChain.length];
        System.arraycopy(other.hashKeyChain, 0, hashKeyChain, 0, other.hashKeyChain.length);
      }
      if (other.isSetErrorCode()) {
        this.errorCode = other.errorCode;
      }
    }

    public respondE2EELoginRequest_args deepCopy() {
      return new respondE2EELoginRequest_args(this);
    }

    public void clear() {
      this.verifier = null;
      this.publicKey = null;
      this.encryptedKeyChain = null;
      this.hashKeyChain = null;
      this.errorCode = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public E2EEPublicKey getPublicKey() {
      return this.publicKey;
    }

    public void setPublicKey(E2EEPublicKey publicKey) {
      this.publicKey = publicKey;
    }

    public void unsetPublicKey() {
      this.publicKey = null;
    }

    /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicKey() {
      return this.publicKey != null;
    }

    public void setPublicKeyIsSet(boolean value) {
      if (!value) {
        this.publicKey = null;
      }
    }

    public byte[] getEncryptedKeyChain() {
      return this.encryptedKeyChain;
    }

    public void setEncryptedKeyChain(byte[] encryptedKeyChain) {
      this.encryptedKeyChain = encryptedKeyChain;
    }

    public void unsetEncryptedKeyChain() {
      this.encryptedKeyChain = null;
    }

    /** Returns true if field encryptedKeyChain is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedKeyChain() {
      return this.encryptedKeyChain != null;
    }

    public void setEncryptedKeyChainIsSet(boolean value) {
      if (!value) {
        this.encryptedKeyChain = null;
      }
    }

    public byte[] getHashKeyChain() {
      return this.hashKeyChain;
    }

    public void setHashKeyChain(byte[] hashKeyChain) {
      this.hashKeyChain = hashKeyChain;
    }

    public void unsetHashKeyChain() {
      this.hashKeyChain = null;
    }

    /** Returns true if field hashKeyChain is set (has been assigned a value) and false otherwise */
    public boolean isSetHashKeyChain() {
      return this.hashKeyChain != null;
    }

    public void setHashKeyChainIsSet(boolean value) {
      if (!value) {
        this.hashKeyChain = null;
      }
    }

    /**
     * 
     * @see ErrorCode
     */
    public ErrorCode getErrorCode() {
      return this.errorCode;
    }

    /**
     * 
     * @see ErrorCode
     */
    public void setErrorCode(ErrorCode errorCode) {
      this.errorCode = errorCode;
    }

    public void unsetErrorCode() {
      this.errorCode = null;
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return this.errorCode != null;
    }

    public void setErrorCodeIsSet(boolean value) {
      if (!value) {
        this.errorCode = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof respondE2EELoginRequest_args)
        return this.equals((respondE2EELoginRequest_args)that);
      return false;
    }

    public boolean equals(respondE2EELoginRequest_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_publicKey = true && this.isSetPublicKey();
      boolean that_present_publicKey = true && that.isSetPublicKey();
      if (this_present_publicKey || that_present_publicKey) {
        if (!(this_present_publicKey && that_present_publicKey))
          return false;
        if (!this.publicKey.equals(that.publicKey))
          return false;
      }

      boolean this_present_encryptedKeyChain = true && this.isSetEncryptedKeyChain();
      boolean that_present_encryptedKeyChain = true && that.isSetEncryptedKeyChain();
      if (this_present_encryptedKeyChain || that_present_encryptedKeyChain) {
        if (!(this_present_encryptedKeyChain && that_present_encryptedKeyChain))
          return false;
        if (TBaseHelper.compareTo(this.encryptedKeyChain, that.encryptedKeyChain) != 0)
          return false;
      }

      boolean this_present_hashKeyChain = true && this.isSetHashKeyChain();
      boolean that_present_hashKeyChain = true && that.isSetHashKeyChain();
      if (this_present_hashKeyChain || that_present_hashKeyChain) {
        if (!(this_present_hashKeyChain && that_present_hashKeyChain))
          return false;
        if (TBaseHelper.compareTo(this.hashKeyChain, that.hashKeyChain) != 0)
          return false;
      }

      boolean this_present_errorCode = true && this.isSetErrorCode();
      boolean that_present_errorCode = true && that.isSetErrorCode();
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (!this.errorCode.equals(that.errorCode))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      respondE2EELoginRequest_args other = (respondE2EELoginRequest_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPublicKey(), other.isSetPublicKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicKey()) {
        lastComparison = this.publicKey.compareTo(other.publicKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncryptedKeyChain(), other.isSetEncryptedKeyChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedKeyChain()) {
        lastComparison = TBaseHelper.compareTo(this.encryptedKeyChain, other.encryptedKeyChain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetHashKeyChain(), other.isSetHashKeyChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHashKeyChain()) {
        lastComparison = TBaseHelper.compareTo(this.hashKeyChain, other.hashKeyChain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetErrorCode(), other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // PUBLIC_KEY
            if (field.type == TType.STRUCT) {
              this.publicKey = new E2EEPublicKey();
              this.publicKey.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // ENCRYPTED_KEY_CHAIN
            if (field.type == TType.STRING) {
              this.encryptedKeyChain = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // HASH_KEY_CHAIN
            if (field.type == TType.STRING) {
              this.hashKeyChain = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // ERROR_CODE
            if (field.type == TType.I32) {
              this.errorCode = ErrorCode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        this.publicKey.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.encryptedKeyChain != null) {
        oprot.writeFieldBegin(ENCRYPTED_KEY_CHAIN_FIELD_DESC);
        oprot.writeBinary(this.encryptedKeyChain);
        oprot.writeFieldEnd();
      }
      if (this.hashKeyChain != null) {
        oprot.writeFieldBegin(HASH_KEY_CHAIN_FIELD_DESC);
        oprot.writeBinary(this.hashKeyChain);
        oprot.writeFieldEnd();
      }
      if (this.errorCode != null) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(this.errorCode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("respondE2EELoginRequest_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicKey:");
      if (this.publicKey == null) {
        sb.append("null");
      } else {
        sb.append(this.publicKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedKeyChain:");
      if (this.encryptedKeyChain == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.encryptedKeyChain, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hashKeyChain:");
      if (this.hashKeyChain == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.hashKeyChain, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      if (this.errorCode == null) {
        sb.append("null");
      } else {
        sb.append(this.errorCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class respondE2EELoginRequest_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("respondE2EELoginRequest_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public respondE2EELoginRequest_result() {
    }

    public respondE2EELoginRequest_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public respondE2EELoginRequest_result(respondE2EELoginRequest_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public respondE2EELoginRequest_result deepCopy() {
      return new respondE2EELoginRequest_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof respondE2EELoginRequest_result)
        return this.equals((respondE2EELoginRequest_result)that);
      return false;
    }

    public boolean equals(respondE2EELoginRequest_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      respondE2EELoginRequest_result other = (respondE2EELoginRequest_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("respondE2EELoginRequest_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class confirmE2EELogin_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("confirmE2EELogin_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)1);
    private static final TField DEVICE_SECRET_FIELD_DESC = new TField("deviceSecret", TType.STRING, (short)2);

    private String verifier;
    private byte[] deviceSecret;

    // isset id assignments

    public confirmE2EELogin_args() {
    }

    public confirmE2EELogin_args(
      String verifier,
      byte[] deviceSecret)
    {
      this();
      this.verifier = verifier;
      this.deviceSecret = deviceSecret;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmE2EELogin_args(confirmE2EELogin_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetDeviceSecret()) {
        this.deviceSecret = new byte[other.deviceSecret.length];
        System.arraycopy(other.deviceSecret, 0, deviceSecret, 0, other.deviceSecret.length);
      }
    }

    public confirmE2EELogin_args deepCopy() {
      return new confirmE2EELogin_args(this);
    }

    public void clear() {
      this.verifier = null;
      this.deviceSecret = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public byte[] getDeviceSecret() {
      return this.deviceSecret;
    }

    public void setDeviceSecret(byte[] deviceSecret) {
      this.deviceSecret = deviceSecret;
    }

    public void unsetDeviceSecret() {
      this.deviceSecret = null;
    }

    /** Returns true if field deviceSecret is set (has been assigned a value) and false otherwise */
    public boolean isSetDeviceSecret() {
      return this.deviceSecret != null;
    }

    public void setDeviceSecretIsSet(boolean value) {
      if (!value) {
        this.deviceSecret = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmE2EELogin_args)
        return this.equals((confirmE2EELogin_args)that);
      return false;
    }

    public boolean equals(confirmE2EELogin_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_deviceSecret = true && this.isSetDeviceSecret();
      boolean that_present_deviceSecret = true && that.isSetDeviceSecret();
      if (this_present_deviceSecret || that_present_deviceSecret) {
        if (!(this_present_deviceSecret && that_present_deviceSecret))
          return false;
        if (TBaseHelper.compareTo(this.deviceSecret, that.deviceSecret) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      confirmE2EELogin_args other = (confirmE2EELogin_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetDeviceSecret(), other.isSetDeviceSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDeviceSecret()) {
        lastComparison = TBaseHelper.compareTo(this.deviceSecret, other.deviceSecret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 2: // DEVICE_SECRET
            if (field.type == TType.STRING) {
              this.deviceSecret = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.deviceSecret != null) {
        oprot.writeFieldBegin(DEVICE_SECRET_FIELD_DESC);
        oprot.writeBinary(this.deviceSecret);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("confirmE2EELogin_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("deviceSecret:");
      if (this.deviceSecret == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.deviceSecret, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class confirmE2EELogin_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("confirmE2EELogin_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public confirmE2EELogin_result() {
    }

    public confirmE2EELogin_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public confirmE2EELogin_result(confirmE2EELogin_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public confirmE2EELogin_result deepCopy() {
      return new confirmE2EELogin_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof confirmE2EELogin_result)
        return this.equals((confirmE2EELogin_result)that);
      return false;
    }

    public boolean equals(confirmE2EELogin_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      confirmE2EELogin_result other = (confirmE2EELogin_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("confirmE2EELogin_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class logoutZ_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("logoutZ_args");


    public logoutZ_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logoutZ_args(logoutZ_args other) {
    }

    public logoutZ_args deepCopy() {
      return new logoutZ_args(this);
    }

    public void clear() {
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logoutZ_args)
        return this.equals((logoutZ_args)that);
      return false;
    }

    public boolean equals(logoutZ_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      logoutZ_args other = (logoutZ_args)otherObject;      int lastComparison = 0;

      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("logoutZ_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class logoutZ_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("logoutZ_result");

    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private TalkException e;

    // isset id assignments

    public logoutZ_result() {
    }

    public logoutZ_result(
      TalkException e)
    {
      this();
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public logoutZ_result(logoutZ_result other) {
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public logoutZ_result deepCopy() {
      return new logoutZ_result(this);
    }

    public void clear() {
      this.e = null;
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof logoutZ_result)
        return this.equals((logoutZ_result)that);
      return false;
    }

    public boolean equals(logoutZ_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      logoutZ_result other = (logoutZ_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("logoutZ_result(");
      boolean first = true;

      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginZ_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginZ_args");

    private static final TField LOGIN_REQUEST_FIELD_DESC = new TField("loginRequest", TType.STRUCT, (short)2);

    private LoginRequest loginRequest;

    // isset id assignments

    public loginZ_args() {
    }

    public loginZ_args(
      LoginRequest loginRequest)
    {
      this();
      this.loginRequest = loginRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginZ_args(loginZ_args other) {
      if (other.isSetLoginRequest()) {
        this.loginRequest = new LoginRequest(other.loginRequest);
      }
    }

    public loginZ_args deepCopy() {
      return new loginZ_args(this);
    }

    public void clear() {
      this.loginRequest = null;
    }

    public LoginRequest getLoginRequest() {
      return this.loginRequest;
    }

    public void setLoginRequest(LoginRequest loginRequest) {
      this.loginRequest = loginRequest;
    }

    public void unsetLoginRequest() {
      this.loginRequest = null;
    }

    /** Returns true if field loginRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetLoginRequest() {
      return this.loginRequest != null;
    }

    public void setLoginRequestIsSet(boolean value) {
      if (!value) {
        this.loginRequest = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginZ_args)
        return this.equals((loginZ_args)that);
      return false;
    }

    public boolean equals(loginZ_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_loginRequest = true && this.isSetLoginRequest();
      boolean that_present_loginRequest = true && that.isSetLoginRequest();
      if (this_present_loginRequest || that_present_loginRequest) {
        if (!(this_present_loginRequest && that_present_loginRequest))
          return false;
        if (!this.loginRequest.equals(that.loginRequest))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginZ_args other = (loginZ_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetLoginRequest(), other.isSetLoginRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoginRequest()) {
        lastComparison = this.loginRequest.compareTo(other.loginRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // LOGIN_REQUEST
            if (field.type == TType.STRUCT) {
              this.loginRequest = new LoginRequest();
              this.loginRequest.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.loginRequest != null) {
        oprot.writeFieldBegin(LOGIN_REQUEST_FIELD_DESC);
        this.loginRequest.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginZ_args(");
      boolean first = true;

      sb.append("loginRequest:");
      if (this.loginRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.loginRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class loginZ_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("loginZ_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private LoginResult success;
    private TalkException e;

    // isset id assignments

    public loginZ_result() {
    }

    public loginZ_result(
      LoginResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginZ_result(loginZ_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoginResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public loginZ_result deepCopy() {
      return new loginZ_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public LoginResult getSuccess() {
      return this.success;
    }

    public void setSuccess(LoginResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginZ_result)
        return this.equals((loginZ_result)that);
      return false;
    }

    public boolean equals(loginZ_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      loginZ_result other = (loginZ_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new LoginResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("loginZ_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueTokenForAccountMigrationSettings_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueTokenForAccountMigrationSettings_args");

    private static final TField ENFORCE_FIELD_DESC = new TField("enforce", TType.BOOL, (short)2);

    private boolean enforce;

    // isset id assignments
    private static final int __ENFORCE_ISSET_ID = 0;
    private boolean[] __isset_vector = new boolean[1];

    public issueTokenForAccountMigrationSettings_args() {
    }

    public issueTokenForAccountMigrationSettings_args(
      boolean enforce)
    {
      this();
      this.enforce = enforce;
      setEnforceIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueTokenForAccountMigrationSettings_args(issueTokenForAccountMigrationSettings_args other) {
      System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
      this.enforce = other.enforce;
    }

    public issueTokenForAccountMigrationSettings_args deepCopy() {
      return new issueTokenForAccountMigrationSettings_args(this);
    }

    public void clear() {
      setEnforceIsSet(false);
      this.enforce = false;
    }

    public boolean isEnforce() {
      return this.enforce;
    }

    public void setEnforce(boolean enforce) {
      this.enforce = enforce;
      setEnforceIsSet(true);
    }

    public void unsetEnforce() {
      __isset_vector[__ENFORCE_ISSET_ID] = false;
    }

    /** Returns true if field enforce is set (has been assigned a value) and false otherwise */
    public boolean isSetEnforce() {
      return __isset_vector[__ENFORCE_ISSET_ID];
    }

    public void setEnforceIsSet(boolean value) {
      __isset_vector[__ENFORCE_ISSET_ID] = value;
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueTokenForAccountMigrationSettings_args)
        return this.equals((issueTokenForAccountMigrationSettings_args)that);
      return false;
    }

    public boolean equals(issueTokenForAccountMigrationSettings_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_enforce = true;
      boolean that_present_enforce = true;
      if (this_present_enforce || that_present_enforce) {
        if (!(this_present_enforce && that_present_enforce))
          return false;
        if (this.enforce != that.enforce)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueTokenForAccountMigrationSettings_args other = (issueTokenForAccountMigrationSettings_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetEnforce(), other.isSetEnforce());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnforce()) {
        lastComparison = TBaseHelper.compareTo(this.enforce, other.enforce);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // ENFORCE
            if (field.type == TType.BOOL) {
              this.enforce = iprot.readBool();
              setEnforceIsSet(true);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ENFORCE_FIELD_DESC);
      oprot.writeBool(this.enforce);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueTokenForAccountMigrationSettings_args(");
      boolean first = true;

      sb.append("enforce:");
      sb.append(this.enforce);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueTokenForAccountMigrationSettings_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueTokenForAccountMigrationSettings_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SecurityCenterResult success;
    private TalkException e;

    // isset id assignments

    public issueTokenForAccountMigrationSettings_result() {
    }

    public issueTokenForAccountMigrationSettings_result(
      SecurityCenterResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueTokenForAccountMigrationSettings_result(issueTokenForAccountMigrationSettings_result other) {
      if (other.isSetSuccess()) {
        this.success = new SecurityCenterResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public issueTokenForAccountMigrationSettings_result deepCopy() {
      return new issueTokenForAccountMigrationSettings_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SecurityCenterResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SecurityCenterResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueTokenForAccountMigrationSettings_result)
        return this.equals((issueTokenForAccountMigrationSettings_result)that);
      return false;
    }

    public boolean equals(issueTokenForAccountMigrationSettings_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueTokenForAccountMigrationSettings_result other = (issueTokenForAccountMigrationSettings_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SecurityCenterResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueTokenForAccountMigrationSettings_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueTokenForAccountMigration_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueTokenForAccountMigration_args");

    private static final TField MIGRATION_SESSION_ID_FIELD_DESC = new TField("migrationSessionId", TType.STRING, (short)2);

    private String migrationSessionId;

    // isset id assignments

    public issueTokenForAccountMigration_args() {
    }

    public issueTokenForAccountMigration_args(
      String migrationSessionId)
    {
      this();
      this.migrationSessionId = migrationSessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueTokenForAccountMigration_args(issueTokenForAccountMigration_args other) {
      if (other.isSetMigrationSessionId()) {
        this.migrationSessionId = other.migrationSessionId;
      }
    }

    public issueTokenForAccountMigration_args deepCopy() {
      return new issueTokenForAccountMigration_args(this);
    }

    public void clear() {
      this.migrationSessionId = null;
    }

    public String getMigrationSessionId() {
      return this.migrationSessionId;
    }

    public void setMigrationSessionId(String migrationSessionId) {
      this.migrationSessionId = migrationSessionId;
    }

    public void unsetMigrationSessionId() {
      this.migrationSessionId = null;
    }

    /** Returns true if field migrationSessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetMigrationSessionId() {
      return this.migrationSessionId != null;
    }

    public void setMigrationSessionIdIsSet(boolean value) {
      if (!value) {
        this.migrationSessionId = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueTokenForAccountMigration_args)
        return this.equals((issueTokenForAccountMigration_args)that);
      return false;
    }

    public boolean equals(issueTokenForAccountMigration_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_migrationSessionId = true && this.isSetMigrationSessionId();
      boolean that_present_migrationSessionId = true && that.isSetMigrationSessionId();
      if (this_present_migrationSessionId || that_present_migrationSessionId) {
        if (!(this_present_migrationSessionId && that_present_migrationSessionId))
          return false;
        if (!this.migrationSessionId.equals(that.migrationSessionId))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueTokenForAccountMigration_args other = (issueTokenForAccountMigration_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetMigrationSessionId(), other.isSetMigrationSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMigrationSessionId()) {
        lastComparison = TBaseHelper.compareTo(this.migrationSessionId, other.migrationSessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // MIGRATION_SESSION_ID
            if (field.type == TType.STRING) {
              this.migrationSessionId = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.migrationSessionId != null) {
        oprot.writeFieldBegin(MIGRATION_SESSION_ID_FIELD_DESC);
        oprot.writeString(this.migrationSessionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueTokenForAccountMigration_args(");
      boolean first = true;

      sb.append("migrationSessionId:");
      if (this.migrationSessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.migrationSessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class issueTokenForAccountMigration_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("issueTokenForAccountMigration_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private SecurityCenterResult success;
    private TalkException e;

    // isset id assignments

    public issueTokenForAccountMigration_result() {
    }

    public issueTokenForAccountMigration_result(
      SecurityCenterResult success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public issueTokenForAccountMigration_result(issueTokenForAccountMigration_result other) {
      if (other.isSetSuccess()) {
        this.success = new SecurityCenterResult(other.success);
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public issueTokenForAccountMigration_result deepCopy() {
      return new issueTokenForAccountMigration_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public SecurityCenterResult getSuccess() {
      return this.success;
    }

    public void setSuccess(SecurityCenterResult success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof issueTokenForAccountMigration_result)
        return this.equals((issueTokenForAccountMigration_result)that);
      return false;
    }

    public boolean equals(issueTokenForAccountMigration_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      issueTokenForAccountMigration_result other = (issueTokenForAccountMigration_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = this.success.compareTo(other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRUCT) {
              this.success = new SecurityCenterResult();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("issueTokenForAccountMigration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyQrcodeWithE2EE_args implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyQrcodeWithE2EE_args");

    private static final TField VERIFIER_FIELD_DESC = new TField("verifier", TType.STRING, (short)2);
    private static final TField PIN_CODE_FIELD_DESC = new TField("pinCode", TType.STRING, (short)3);
    private static final TField ERROR_CODE_FIELD_DESC = new TField("errorCode", TType.I32, (short)4);
    private static final TField PUBLIC_KEY_FIELD_DESC = new TField("publicKey", TType.STRUCT, (short)5);
    private static final TField ENCRYPTED_KEY_CHAIN_FIELD_DESC = new TField("encryptedKeyChain", TType.STRING, (short)6);
    private static final TField HASH_KEY_CHAIN_FIELD_DESC = new TField("hashKeyChain", TType.STRING, (short)7);

    private String verifier;
    private String pinCode;
    private ErrorCode errorCode;
    private E2EEPublicKey publicKey;
    private byte[] encryptedKeyChain;
    private byte[] hashKeyChain;

    // isset id assignments

    public verifyQrcodeWithE2EE_args() {
    }

    public verifyQrcodeWithE2EE_args(
      String verifier,
      String pinCode,
      ErrorCode errorCode,
      E2EEPublicKey publicKey,
      byte[] encryptedKeyChain,
      byte[] hashKeyChain)
    {
      this();
      this.verifier = verifier;
      this.pinCode = pinCode;
      this.errorCode = errorCode;
      this.publicKey = publicKey;
      this.encryptedKeyChain = encryptedKeyChain;
      this.hashKeyChain = hashKeyChain;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyQrcodeWithE2EE_args(verifyQrcodeWithE2EE_args other) {
      if (other.isSetVerifier()) {
        this.verifier = other.verifier;
      }
      if (other.isSetPinCode()) {
        this.pinCode = other.pinCode;
      }
      if (other.isSetErrorCode()) {
        this.errorCode = other.errorCode;
      }
      if (other.isSetPublicKey()) {
        this.publicKey = new E2EEPublicKey(other.publicKey);
      }
      if (other.isSetEncryptedKeyChain()) {
        this.encryptedKeyChain = new byte[other.encryptedKeyChain.length];
        System.arraycopy(other.encryptedKeyChain, 0, encryptedKeyChain, 0, other.encryptedKeyChain.length);
      }
      if (other.isSetHashKeyChain()) {
        this.hashKeyChain = new byte[other.hashKeyChain.length];
        System.arraycopy(other.hashKeyChain, 0, hashKeyChain, 0, other.hashKeyChain.length);
      }
    }

    public verifyQrcodeWithE2EE_args deepCopy() {
      return new verifyQrcodeWithE2EE_args(this);
    }

    public void clear() {
      this.verifier = null;
      this.pinCode = null;
      this.errorCode = null;
      this.publicKey = null;
      this.encryptedKeyChain = null;
      this.hashKeyChain = null;
    }

    public String getVerifier() {
      return this.verifier;
    }

    public void setVerifier(String verifier) {
      this.verifier = verifier;
    }

    public void unsetVerifier() {
      this.verifier = null;
    }

    /** Returns true if field verifier is set (has been assigned a value) and false otherwise */
    public boolean isSetVerifier() {
      return this.verifier != null;
    }

    public void setVerifierIsSet(boolean value) {
      if (!value) {
        this.verifier = null;
      }
    }

    public String getPinCode() {
      return this.pinCode;
    }

    public void setPinCode(String pinCode) {
      this.pinCode = pinCode;
    }

    public void unsetPinCode() {
      this.pinCode = null;
    }

    /** Returns true if field pinCode is set (has been assigned a value) and false otherwise */
    public boolean isSetPinCode() {
      return this.pinCode != null;
    }

    public void setPinCodeIsSet(boolean value) {
      if (!value) {
        this.pinCode = null;
      }
    }

    /**
     * 
     * @see ErrorCode
     */
    public ErrorCode getErrorCode() {
      return this.errorCode;
    }

    /**
     * 
     * @see ErrorCode
     */
    public void setErrorCode(ErrorCode errorCode) {
      this.errorCode = errorCode;
    }

    public void unsetErrorCode() {
      this.errorCode = null;
    }

    /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
    public boolean isSetErrorCode() {
      return this.errorCode != null;
    }

    public void setErrorCodeIsSet(boolean value) {
      if (!value) {
        this.errorCode = null;
      }
    }

    public E2EEPublicKey getPublicKey() {
      return this.publicKey;
    }

    public void setPublicKey(E2EEPublicKey publicKey) {
      this.publicKey = publicKey;
    }

    public void unsetPublicKey() {
      this.publicKey = null;
    }

    /** Returns true if field publicKey is set (has been assigned a value) and false otherwise */
    public boolean isSetPublicKey() {
      return this.publicKey != null;
    }

    public void setPublicKeyIsSet(boolean value) {
      if (!value) {
        this.publicKey = null;
      }
    }

    public byte[] getEncryptedKeyChain() {
      return this.encryptedKeyChain;
    }

    public void setEncryptedKeyChain(byte[] encryptedKeyChain) {
      this.encryptedKeyChain = encryptedKeyChain;
    }

    public void unsetEncryptedKeyChain() {
      this.encryptedKeyChain = null;
    }

    /** Returns true if field encryptedKeyChain is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptedKeyChain() {
      return this.encryptedKeyChain != null;
    }

    public void setEncryptedKeyChainIsSet(boolean value) {
      if (!value) {
        this.encryptedKeyChain = null;
      }
    }

    public byte[] getHashKeyChain() {
      return this.hashKeyChain;
    }

    public void setHashKeyChain(byte[] hashKeyChain) {
      this.hashKeyChain = hashKeyChain;
    }

    public void unsetHashKeyChain() {
      this.hashKeyChain = null;
    }

    /** Returns true if field hashKeyChain is set (has been assigned a value) and false otherwise */
    public boolean isSetHashKeyChain() {
      return this.hashKeyChain != null;
    }

    public void setHashKeyChainIsSet(boolean value) {
      if (!value) {
        this.hashKeyChain = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyQrcodeWithE2EE_args)
        return this.equals((verifyQrcodeWithE2EE_args)that);
      return false;
    }

    public boolean equals(verifyQrcodeWithE2EE_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_verifier = true && this.isSetVerifier();
      boolean that_present_verifier = true && that.isSetVerifier();
      if (this_present_verifier || that_present_verifier) {
        if (!(this_present_verifier && that_present_verifier))
          return false;
        if (!this.verifier.equals(that.verifier))
          return false;
      }

      boolean this_present_pinCode = true && this.isSetPinCode();
      boolean that_present_pinCode = true && that.isSetPinCode();
      if (this_present_pinCode || that_present_pinCode) {
        if (!(this_present_pinCode && that_present_pinCode))
          return false;
        if (!this.pinCode.equals(that.pinCode))
          return false;
      }

      boolean this_present_errorCode = true && this.isSetErrorCode();
      boolean that_present_errorCode = true && that.isSetErrorCode();
      if (this_present_errorCode || that_present_errorCode) {
        if (!(this_present_errorCode && that_present_errorCode))
          return false;
        if (!this.errorCode.equals(that.errorCode))
          return false;
      }

      boolean this_present_publicKey = true && this.isSetPublicKey();
      boolean that_present_publicKey = true && that.isSetPublicKey();
      if (this_present_publicKey || that_present_publicKey) {
        if (!(this_present_publicKey && that_present_publicKey))
          return false;
        if (!this.publicKey.equals(that.publicKey))
          return false;
      }

      boolean this_present_encryptedKeyChain = true && this.isSetEncryptedKeyChain();
      boolean that_present_encryptedKeyChain = true && that.isSetEncryptedKeyChain();
      if (this_present_encryptedKeyChain || that_present_encryptedKeyChain) {
        if (!(this_present_encryptedKeyChain && that_present_encryptedKeyChain))
          return false;
        if (TBaseHelper.compareTo(this.encryptedKeyChain, that.encryptedKeyChain) != 0)
          return false;
      }

      boolean this_present_hashKeyChain = true && this.isSetHashKeyChain();
      boolean that_present_hashKeyChain = true && that.isSetHashKeyChain();
      if (this_present_hashKeyChain || that_present_hashKeyChain) {
        if (!(this_present_hashKeyChain && that_present_hashKeyChain))
          return false;
        if (TBaseHelper.compareTo(this.hashKeyChain, that.hashKeyChain) != 0)
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyQrcodeWithE2EE_args other = (verifyQrcodeWithE2EE_args)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetVerifier(), other.isSetVerifier());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVerifier()) {
        lastComparison = TBaseHelper.compareTo(this.verifier, other.verifier);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPinCode(), other.isSetPinCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPinCode()) {
        lastComparison = TBaseHelper.compareTo(this.pinCode, other.pinCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetErrorCode(), other.isSetErrorCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetErrorCode()) {
        lastComparison = TBaseHelper.compareTo(this.errorCode, other.errorCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetPublicKey(), other.isSetPublicKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPublicKey()) {
        lastComparison = this.publicKey.compareTo(other.publicKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetEncryptedKeyChain(), other.isSetEncryptedKeyChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptedKeyChain()) {
        lastComparison = TBaseHelper.compareTo(this.encryptedKeyChain, other.encryptedKeyChain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetHashKeyChain(), other.isSetHashKeyChain());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHashKeyChain()) {
        lastComparison = TBaseHelper.compareTo(this.hashKeyChain, other.hashKeyChain);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 2: // VERIFIER
            if (field.type == TType.STRING) {
              this.verifier = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 3: // PIN_CODE
            if (field.type == TType.STRING) {
              this.pinCode = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 4: // ERROR_CODE
            if (field.type == TType.I32) {
              this.errorCode = ErrorCode.findByValue(iprot.readI32());
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 5: // PUBLIC_KEY
            if (field.type == TType.STRUCT) {
              this.publicKey = new E2EEPublicKey();
              this.publicKey.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 6: // ENCRYPTED_KEY_CHAIN
            if (field.type == TType.STRING) {
              this.encryptedKeyChain = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 7: // HASH_KEY_CHAIN
            if (field.type == TType.STRING) {
              this.hashKeyChain = iprot.readBinary();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.verifier != null) {
        oprot.writeFieldBegin(VERIFIER_FIELD_DESC);
        oprot.writeString(this.verifier);
        oprot.writeFieldEnd();
      }
      if (this.pinCode != null) {
        oprot.writeFieldBegin(PIN_CODE_FIELD_DESC);
        oprot.writeString(this.pinCode);
        oprot.writeFieldEnd();
      }
      if (this.errorCode != null) {
        oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
        oprot.writeI32(this.errorCode.getValue());
        oprot.writeFieldEnd();
      }
      if (this.publicKey != null) {
        oprot.writeFieldBegin(PUBLIC_KEY_FIELD_DESC);
        this.publicKey.write(oprot);
        oprot.writeFieldEnd();
      }
      if (this.encryptedKeyChain != null) {
        oprot.writeFieldBegin(ENCRYPTED_KEY_CHAIN_FIELD_DESC);
        oprot.writeBinary(this.encryptedKeyChain);
        oprot.writeFieldEnd();
      }
      if (this.hashKeyChain != null) {
        oprot.writeFieldBegin(HASH_KEY_CHAIN_FIELD_DESC);
        oprot.writeBinary(this.hashKeyChain);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyQrcodeWithE2EE_args(");
      boolean first = true;

      sb.append("verifier:");
      if (this.verifier == null) {
        sb.append("null");
      } else {
        sb.append(this.verifier);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pinCode:");
      if (this.pinCode == null) {
        sb.append("null");
      } else {
        sb.append(this.pinCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      if (this.errorCode == null) {
        sb.append("null");
      } else {
        sb.append(this.errorCode);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("publicKey:");
      if (this.publicKey == null) {
        sb.append("null");
      } else {
        sb.append(this.publicKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptedKeyChain:");
      if (this.encryptedKeyChain == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.encryptedKeyChain, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hashKeyChain:");
      if (this.hashKeyChain == null) {
        sb.append("null");
      } else {
        TBaseHelper.toString(this.hashKeyChain, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

  public static class verifyQrcodeWithE2EE_result implements TBase   {
    private static final TStruct STRUCT_DESC = new TStruct("verifyQrcodeWithE2EE_result");

    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRING, (short)0);
    private static final TField E_FIELD_DESC = new TField("e", TType.STRUCT, (short)1);

    private String success;
    private TalkException e;

    // isset id assignments

    public verifyQrcodeWithE2EE_result() {
    }

    public verifyQrcodeWithE2EE_result(
      String success,
      TalkException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public verifyQrcodeWithE2EE_result(verifyQrcodeWithE2EE_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetE()) {
        this.e = new TalkException(other.e);
      }
    }

    public verifyQrcodeWithE2EE_result deepCopy() {
      return new verifyQrcodeWithE2EE_result(this);
    }

    public void clear() {
      this.success = null;
      this.e = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public void setSuccess(String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TalkException getE() {
      return this.e;
    }

    public void setE(TalkException e) {
      this.e = e;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof verifyQrcodeWithE2EE_result)
        return this.equals((verifyQrcodeWithE2EE_result)that);
      return false;
    }

    public boolean equals(verifyQrcodeWithE2EE_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    public int hashCode() {
      return 0;
    }

    public int compareTo(Object otherObject) {
      if (!getClass().equals(otherObject.getClass())) {
        return getClass().getName().compareTo(otherObject.getClass().getName());
      }

      verifyQrcodeWithE2EE_result other = (verifyQrcodeWithE2EE_result)otherObject;      int lastComparison = 0;

      lastComparison = TBaseHelper.compareTo(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = TBaseHelper.compareTo(isSetE(), other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = this.e.compareTo(other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id) {
          case 0: // SUCCESS
            if (field.type == TType.STRING) {
              this.success = iprot.readString();
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case 1: // E
            if (field.type == TType.STRUCT) {
              this.e = new TalkException();
              this.e.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        oprot.writeString(this.success);
        oprot.writeFieldEnd();
      } else if (this.isSetE()) {
        oprot.writeFieldBegin(E_FIELD_DESC);
        this.e.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    public String toString() {
      StringBuffer sb = new StringBuffer("verifyQrcodeWithE2EE_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
    }

  }

}
