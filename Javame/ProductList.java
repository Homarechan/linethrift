/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ProductList implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ProductList");

  private static final TField HAS_NEXT_FIELD_DESC = new TField("hasNext", TType.BOOL, (short)1);
  private static final TField BANNER_SEQUENCE_FIELD_DESC = new TField("bannerSequence", TType.I64, (short)4);
  private static final TField BANNER_TARGET_TYPE_FIELD_DESC = new TField("bannerTargetType", TType.I32, (short)5);
  private static final TField BANNER_TARGET_PATH_FIELD_DESC = new TField("bannerTargetPath", TType.STRING, (short)6);
  private static final TField PRODUCT_LIST_FIELD_DESC = new TField("productList", TType.LIST, (short)7);
  private static final TField BANNER_LANG_FIELD_DESC = new TField("bannerLang", TType.STRING, (short)8);

  private boolean hasNext;
  private long bannerSequence;
  private ProductBannerLinkType bannerTargetType;
  private String bannerTargetPath;
  private Vector productList;
  private String bannerLang;

  // isset id assignments
  private static final int __HASNEXT_ISSET_ID = 0;
  private static final int __BANNERSEQUENCE_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public ProductList() {
  }

  public ProductList(
    boolean hasNext,
    long bannerSequence,
    ProductBannerLinkType bannerTargetType,
    String bannerTargetPath,
    Vector productList,
    String bannerLang)
  {
    this();
    this.hasNext = hasNext;
    setHasNextIsSet(true);
    this.bannerSequence = bannerSequence;
    setBannerSequenceIsSet(true);
    this.bannerTargetType = bannerTargetType;
    this.bannerTargetPath = bannerTargetPath;
    this.productList = productList;
    this.bannerLang = bannerLang;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductList(ProductList other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.hasNext = other.hasNext;
    this.bannerSequence = other.bannerSequence;
    if (other.isSetBannerTargetType()) {
      this.bannerTargetType = other.bannerTargetType;
    }
    if (other.isSetBannerTargetPath()) {
      this.bannerTargetPath = other.bannerTargetPath;
    }
    if (other.isSetProductList()) {
      Vector __this__productList = new Vector();
      for (Enumeration other_enum = other.productList.elements(); other_enum.hasMoreElements(); ) {
        Product other_element = (Product)other_enum.nextElement();
        __this__productList.addElement(new Product(other_element));
      }
      this.productList = __this__productList;
    }
    if (other.isSetBannerLang()) {
      this.bannerLang = other.bannerLang;
    }
  }

  public ProductList deepCopy() {
    return new ProductList(this);
  }

  public void clear() {
    setHasNextIsSet(false);
    this.hasNext = false;
    setBannerSequenceIsSet(false);
    this.bannerSequence = 0;
    this.bannerTargetType = null;
    this.bannerTargetPath = null;
    this.productList = null;
    this.bannerLang = null;
  }

  public boolean isHasNext() {
    return this.hasNext;
  }

  public void setHasNext(boolean hasNext) {
    this.hasNext = hasNext;
    setHasNextIsSet(true);
  }

  public void unsetHasNext() {
    __isset_vector[__HASNEXT_ISSET_ID] = false;
  }

  /** Returns true if field hasNext is set (has been assigned a value) and false otherwise */
  public boolean isSetHasNext() {
    return __isset_vector[__HASNEXT_ISSET_ID];
  }

  public void setHasNextIsSet(boolean value) {
    __isset_vector[__HASNEXT_ISSET_ID] = value;
  }

  public long getBannerSequence() {
    return this.bannerSequence;
  }

  public void setBannerSequence(long bannerSequence) {
    this.bannerSequence = bannerSequence;
    setBannerSequenceIsSet(true);
  }

  public void unsetBannerSequence() {
    __isset_vector[__BANNERSEQUENCE_ISSET_ID] = false;
  }

  /** Returns true if field bannerSequence is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerSequence() {
    return __isset_vector[__BANNERSEQUENCE_ISSET_ID];
  }

  public void setBannerSequenceIsSet(boolean value) {
    __isset_vector[__BANNERSEQUENCE_ISSET_ID] = value;
  }

  /**
   * 
   * @see ProductBannerLinkType
   */
  public ProductBannerLinkType getBannerTargetType() {
    return this.bannerTargetType;
  }

  /**
   * 
   * @see ProductBannerLinkType
   */
  public void setBannerTargetType(ProductBannerLinkType bannerTargetType) {
    this.bannerTargetType = bannerTargetType;
  }

  public void unsetBannerTargetType() {
    this.bannerTargetType = null;
  }

  /** Returns true if field bannerTargetType is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerTargetType() {
    return this.bannerTargetType != null;
  }

  public void setBannerTargetTypeIsSet(boolean value) {
    if (!value) {
      this.bannerTargetType = null;
    }
  }

  public String getBannerTargetPath() {
    return this.bannerTargetPath;
  }

  public void setBannerTargetPath(String bannerTargetPath) {
    this.bannerTargetPath = bannerTargetPath;
  }

  public void unsetBannerTargetPath() {
    this.bannerTargetPath = null;
  }

  /** Returns true if field bannerTargetPath is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerTargetPath() {
    return this.bannerTargetPath != null;
  }

  public void setBannerTargetPathIsSet(boolean value) {
    if (!value) {
      this.bannerTargetPath = null;
    }
  }

  public int getProductListSize() {
    return (this.productList == null) ? 0 : this.productList.size();
  }

  public Enumeration getProductListEnumeration() {
    return (this.productList == null) ? null : this.productList.elements();
  }

  public void addToProductList(Product elem) {
    if (this.productList == null) {
      this.productList = new Vector();
    }
    this.productList.addElement(elem);
  }

  public Vector getProductList() {
    return this.productList;
  }

  public void setProductList(Vector productList) {
    this.productList = productList;
  }

  public void unsetProductList() {
    this.productList = null;
  }

  /** Returns true if field productList is set (has been assigned a value) and false otherwise */
  public boolean isSetProductList() {
    return this.productList != null;
  }

  public void setProductListIsSet(boolean value) {
    if (!value) {
      this.productList = null;
    }
  }

  public String getBannerLang() {
    return this.bannerLang;
  }

  public void setBannerLang(String bannerLang) {
    this.bannerLang = bannerLang;
  }

  public void unsetBannerLang() {
    this.bannerLang = null;
  }

  /** Returns true if field bannerLang is set (has been assigned a value) and false otherwise */
  public boolean isSetBannerLang() {
    return this.bannerLang != null;
  }

  public void setBannerLangIsSet(boolean value) {
    if (!value) {
      this.bannerLang = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductList)
      return this.equals((ProductList)that);
    return false;
  }

  public boolean equals(ProductList that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_hasNext = true;
    boolean that_present_hasNext = true;
    if (this_present_hasNext || that_present_hasNext) {
      if (!(this_present_hasNext && that_present_hasNext))
        return false;
      if (this.hasNext != that.hasNext)
        return false;
    }

    boolean this_present_bannerSequence = true;
    boolean that_present_bannerSequence = true;
    if (this_present_bannerSequence || that_present_bannerSequence) {
      if (!(this_present_bannerSequence && that_present_bannerSequence))
        return false;
      if (this.bannerSequence != that.bannerSequence)
        return false;
    }

    boolean this_present_bannerTargetType = true && this.isSetBannerTargetType();
    boolean that_present_bannerTargetType = true && that.isSetBannerTargetType();
    if (this_present_bannerTargetType || that_present_bannerTargetType) {
      if (!(this_present_bannerTargetType && that_present_bannerTargetType))
        return false;
      if (!this.bannerTargetType.equals(that.bannerTargetType))
        return false;
    }

    boolean this_present_bannerTargetPath = true && this.isSetBannerTargetPath();
    boolean that_present_bannerTargetPath = true && that.isSetBannerTargetPath();
    if (this_present_bannerTargetPath || that_present_bannerTargetPath) {
      if (!(this_present_bannerTargetPath && that_present_bannerTargetPath))
        return false;
      if (!this.bannerTargetPath.equals(that.bannerTargetPath))
        return false;
    }

    boolean this_present_productList = true && this.isSetProductList();
    boolean that_present_productList = true && that.isSetProductList();
    if (this_present_productList || that_present_productList) {
      if (!(this_present_productList && that_present_productList))
        return false;
      if (!this.productList.equals(that.productList))
        return false;
    }

    boolean this_present_bannerLang = true && this.isSetBannerLang();
    boolean that_present_bannerLang = true && that.isSetBannerLang();
    if (this_present_bannerLang || that_present_bannerLang) {
      if (!(this_present_bannerLang && that_present_bannerLang))
        return false;
      if (!this.bannerLang.equals(that.bannerLang))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ProductList other = (ProductList)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetHasNext(), other.isSetHasNext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasNext()) {
      lastComparison = TBaseHelper.compareTo(this.hasNext, other.hasNext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetBannerSequence(), other.isSetBannerSequence());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerSequence()) {
      lastComparison = TBaseHelper.compareTo(this.bannerSequence, other.bannerSequence);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetBannerTargetType(), other.isSetBannerTargetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerTargetType()) {
      lastComparison = TBaseHelper.compareTo(this.bannerTargetType, other.bannerTargetType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetBannerTargetPath(), other.isSetBannerTargetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerTargetPath()) {
      lastComparison = TBaseHelper.compareTo(this.bannerTargetPath, other.bannerTargetPath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetProductList(), other.isSetProductList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductList()) {
      lastComparison = TBaseHelper.compareTo(this.productList, other.productList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetBannerLang(), other.isSetBannerLang());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBannerLang()) {
      lastComparison = TBaseHelper.compareTo(this.bannerLang, other.bannerLang);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // HAS_NEXT
          if (field.type == TType.BOOL) {
            this.hasNext = iprot.readBool();
            setHasNextIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // BANNER_SEQUENCE
          if (field.type == TType.I64) {
            this.bannerSequence = iprot.readI64();
            setBannerSequenceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // BANNER_TARGET_TYPE
          if (field.type == TType.I32) {
            this.bannerTargetType = ProductBannerLinkType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // BANNER_TARGET_PATH
          if (field.type == TType.STRING) {
            this.bannerTargetPath = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PRODUCT_LIST
          if (field.type == TType.LIST) {
            {
              TList _list197 = iprot.readListBegin();
              this.productList = new Vector(_list197.size);
              for (int _i198 = 0; _i198 < _list197.size; ++_i198)
              {
                Product _elem199;
                _elem199 = new Product();
                _elem199.read(iprot);
                this.productList.addElement(_elem199);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // BANNER_LANG
          if (field.type == TType.STRING) {
            this.bannerLang = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(HAS_NEXT_FIELD_DESC);
    oprot.writeBool(this.hasNext);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BANNER_SEQUENCE_FIELD_DESC);
    oprot.writeI64(this.bannerSequence);
    oprot.writeFieldEnd();
    if (this.bannerTargetType != null) {
      oprot.writeFieldBegin(BANNER_TARGET_TYPE_FIELD_DESC);
      oprot.writeI32(this.bannerTargetType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.bannerTargetPath != null) {
      oprot.writeFieldBegin(BANNER_TARGET_PATH_FIELD_DESC);
      oprot.writeString(this.bannerTargetPath);
      oprot.writeFieldEnd();
    }
    if (this.productList != null) {
      oprot.writeFieldBegin(PRODUCT_LIST_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.productList.size()));
        for (Enumeration _iter200_enum = this.productList.elements(); _iter200_enum.hasMoreElements(); )         {
          Product _iter200 = (Product)_iter200_enum.nextElement();
          _iter200.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.bannerLang != null) {
      oprot.writeFieldBegin(BANNER_LANG_FIELD_DESC);
      oprot.writeString(this.bannerLang);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ProductList(");
    boolean first = true;

    sb.append("hasNext:");
    sb.append(this.hasNext);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannerSequence:");
    sb.append(this.bannerSequence);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannerTargetType:");
    if (this.bannerTargetType == null) {
      sb.append("null");
    } else {
      sb.append(this.bannerTargetType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannerTargetPath:");
    if (this.bannerTargetPath == null) {
      sb.append("null");
    } else {
      sb.append(this.bannerTargetPath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productList:");
    if (this.productList == null) {
      sb.append("null");
    } else {
      sb.append(this.productList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bannerLang:");
    if (this.bannerLang == null) {
      sb.append("null");
    } else {
      sb.append(this.bannerLang);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

