/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class PaidCallDialing implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("PaidCallDialing");

  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)1);
  private static final TField DIALED_NUMBER_FIELD_DESC = new TField("dialedNumber", TType.STRING, (short)2);
  private static final TField SERVICE_DOMAIN_FIELD_DESC = new TField("serviceDomain", TType.STRING, (short)3);
  private static final TField PRODUCT_TYPE_FIELD_DESC = new TField("productType", TType.I32, (short)4);
  private static final TField PRODUCT_NAME_FIELD_DESC = new TField("productName", TType.STRING, (short)5);
  private static final TField MULTIPLE_PRODUCT_FIELD_DESC = new TField("multipleProduct", TType.BOOL, (short)6);
  private static final TField CALLER_ID_STATUS_FIELD_DESC = new TField("callerIdStatus", TType.I32, (short)7);
  private static final TField BALANCE_FIELD_DESC = new TField("balance", TType.I32, (short)10);
  private static final TField UNIT_FIELD_DESC = new TField("unit", TType.STRING, (short)11);
  private static final TField RATE_FIELD_DESC = new TField("rate", TType.I32, (short)12);
  private static final TField DISPLAY_CODE_FIELD_DESC = new TField("displayCode", TType.STRING, (short)13);
  private static final TField CALLED_NUMBER_FIELD_DESC = new TField("calledNumber", TType.STRING, (short)14);
  private static final TField CALLEE_NATIONAL_NUMBER_FIELD_DESC = new TField("calleeNationalNumber", TType.STRING, (short)15);
  private static final TField CALLEE_CALLING_CODE_FIELD_DESC = new TField("calleeCallingCode", TType.STRING, (short)16);
  private static final TField RATE_DIVISION_FIELD_DESC = new TField("rateDivision", TType.STRING, (short)17);
  private static final TField AD_MAX_MIN_FIELD_DESC = new TField("adMaxMin", TType.I32, (short)20);
  private static final TField AD_REMAINS_FIELD_DESC = new TField("adRemains", TType.I32, (short)21);
  private static final TField AD_SESSION_ID_FIELD_DESC = new TField("adSessionId", TType.STRING, (short)22);

  private PaidCallType type;
  private String dialedNumber;
  private String serviceDomain;
  private PaidCallProductType productType;
  private String productName;
  private boolean multipleProduct;
  private PaidCallerIdStatus callerIdStatus;
  private int balance;
  private String unit;
  private int rate;
  private String displayCode;
  private String calledNumber;
  private String calleeNationalNumber;
  private String calleeCallingCode;
  private String rateDivision;
  private int adMaxMin;
  private int adRemains;
  private String adSessionId;

  // isset id assignments
  private static final int __MULTIPLEPRODUCT_ISSET_ID = 0;
  private static final int __BALANCE_ISSET_ID = 1;
  private static final int __RATE_ISSET_ID = 2;
  private static final int __ADMAXMIN_ISSET_ID = 3;
  private static final int __ADREMAINS_ISSET_ID = 4;
  private boolean[] __isset_vector = new boolean[5];

  public PaidCallDialing() {
  }

  public PaidCallDialing(
    PaidCallType type,
    String dialedNumber,
    String serviceDomain,
    PaidCallProductType productType,
    String productName,
    boolean multipleProduct,
    PaidCallerIdStatus callerIdStatus,
    int balance,
    String unit,
    int rate,
    String displayCode,
    String calledNumber,
    String calleeNationalNumber,
    String calleeCallingCode,
    String rateDivision,
    int adMaxMin,
    int adRemains,
    String adSessionId)
  {
    this();
    this.type = type;
    this.dialedNumber = dialedNumber;
    this.serviceDomain = serviceDomain;
    this.productType = productType;
    this.productName = productName;
    this.multipleProduct = multipleProduct;
    setMultipleProductIsSet(true);
    this.callerIdStatus = callerIdStatus;
    this.balance = balance;
    setBalanceIsSet(true);
    this.unit = unit;
    this.rate = rate;
    setRateIsSet(true);
    this.displayCode = displayCode;
    this.calledNumber = calledNumber;
    this.calleeNationalNumber = calleeNationalNumber;
    this.calleeCallingCode = calleeCallingCode;
    this.rateDivision = rateDivision;
    this.adMaxMin = adMaxMin;
    setAdMaxMinIsSet(true);
    this.adRemains = adRemains;
    setAdRemainsIsSet(true);
    this.adSessionId = adSessionId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PaidCallDialing(PaidCallDialing other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetDialedNumber()) {
      this.dialedNumber = other.dialedNumber;
    }
    if (other.isSetServiceDomain()) {
      this.serviceDomain = other.serviceDomain;
    }
    if (other.isSetProductType()) {
      this.productType = other.productType;
    }
    if (other.isSetProductName()) {
      this.productName = other.productName;
    }
    this.multipleProduct = other.multipleProduct;
    if (other.isSetCallerIdStatus()) {
      this.callerIdStatus = other.callerIdStatus;
    }
    this.balance = other.balance;
    if (other.isSetUnit()) {
      this.unit = other.unit;
    }
    this.rate = other.rate;
    if (other.isSetDisplayCode()) {
      this.displayCode = other.displayCode;
    }
    if (other.isSetCalledNumber()) {
      this.calledNumber = other.calledNumber;
    }
    if (other.isSetCalleeNationalNumber()) {
      this.calleeNationalNumber = other.calleeNationalNumber;
    }
    if (other.isSetCalleeCallingCode()) {
      this.calleeCallingCode = other.calleeCallingCode;
    }
    if (other.isSetRateDivision()) {
      this.rateDivision = other.rateDivision;
    }
    this.adMaxMin = other.adMaxMin;
    this.adRemains = other.adRemains;
    if (other.isSetAdSessionId()) {
      this.adSessionId = other.adSessionId;
    }
  }

  public PaidCallDialing deepCopy() {
    return new PaidCallDialing(this);
  }

  public void clear() {
    this.type = null;
    this.dialedNumber = null;
    this.serviceDomain = null;
    this.productType = null;
    this.productName = null;
    setMultipleProductIsSet(false);
    this.multipleProduct = false;
    this.callerIdStatus = null;
    setBalanceIsSet(false);
    this.balance = 0;
    this.unit = null;
    setRateIsSet(false);
    this.rate = 0;
    this.displayCode = null;
    this.calledNumber = null;
    this.calleeNationalNumber = null;
    this.calleeCallingCode = null;
    this.rateDivision = null;
    setAdMaxMinIsSet(false);
    this.adMaxMin = 0;
    setAdRemainsIsSet(false);
    this.adRemains = 0;
    this.adSessionId = null;
  }

  /**
   * 
   * @see PaidCallType
   */
  public PaidCallType getType() {
    return this.type;
  }

  /**
   * 
   * @see PaidCallType
   */
  public void setType(PaidCallType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getDialedNumber() {
    return this.dialedNumber;
  }

  public void setDialedNumber(String dialedNumber) {
    this.dialedNumber = dialedNumber;
  }

  public void unsetDialedNumber() {
    this.dialedNumber = null;
  }

  /** Returns true if field dialedNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetDialedNumber() {
    return this.dialedNumber != null;
  }

  public void setDialedNumberIsSet(boolean value) {
    if (!value) {
      this.dialedNumber = null;
    }
  }

  public String getServiceDomain() {
    return this.serviceDomain;
  }

  public void setServiceDomain(String serviceDomain) {
    this.serviceDomain = serviceDomain;
  }

  public void unsetServiceDomain() {
    this.serviceDomain = null;
  }

  /** Returns true if field serviceDomain is set (has been assigned a value) and false otherwise */
  public boolean isSetServiceDomain() {
    return this.serviceDomain != null;
  }

  public void setServiceDomainIsSet(boolean value) {
    if (!value) {
      this.serviceDomain = null;
    }
  }

  /**
   * 
   * @see PaidCallProductType
   */
  public PaidCallProductType getProductType() {
    return this.productType;
  }

  /**
   * 
   * @see PaidCallProductType
   */
  public void setProductType(PaidCallProductType productType) {
    this.productType = productType;
  }

  public void unsetProductType() {
    this.productType = null;
  }

  /** Returns true if field productType is set (has been assigned a value) and false otherwise */
  public boolean isSetProductType() {
    return this.productType != null;
  }

  public void setProductTypeIsSet(boolean value) {
    if (!value) {
      this.productType = null;
    }
  }

  public String getProductName() {
    return this.productName;
  }

  public void setProductName(String productName) {
    this.productName = productName;
  }

  public void unsetProductName() {
    this.productName = null;
  }

  /** Returns true if field productName is set (has been assigned a value) and false otherwise */
  public boolean isSetProductName() {
    return this.productName != null;
  }

  public void setProductNameIsSet(boolean value) {
    if (!value) {
      this.productName = null;
    }
  }

  public boolean isMultipleProduct() {
    return this.multipleProduct;
  }

  public void setMultipleProduct(boolean multipleProduct) {
    this.multipleProduct = multipleProduct;
    setMultipleProductIsSet(true);
  }

  public void unsetMultipleProduct() {
    __isset_vector[__MULTIPLEPRODUCT_ISSET_ID] = false;
  }

  /** Returns true if field multipleProduct is set (has been assigned a value) and false otherwise */
  public boolean isSetMultipleProduct() {
    return __isset_vector[__MULTIPLEPRODUCT_ISSET_ID];
  }

  public void setMultipleProductIsSet(boolean value) {
    __isset_vector[__MULTIPLEPRODUCT_ISSET_ID] = value;
  }

  /**
   * 
   * @see PaidCallerIdStatus
   */
  public PaidCallerIdStatus getCallerIdStatus() {
    return this.callerIdStatus;
  }

  /**
   * 
   * @see PaidCallerIdStatus
   */
  public void setCallerIdStatus(PaidCallerIdStatus callerIdStatus) {
    this.callerIdStatus = callerIdStatus;
  }

  public void unsetCallerIdStatus() {
    this.callerIdStatus = null;
  }

  /** Returns true if field callerIdStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetCallerIdStatus() {
    return this.callerIdStatus != null;
  }

  public void setCallerIdStatusIsSet(boolean value) {
    if (!value) {
      this.callerIdStatus = null;
    }
  }

  public int getBalance() {
    return this.balance;
  }

  public void setBalance(int balance) {
    this.balance = balance;
    setBalanceIsSet(true);
  }

  public void unsetBalance() {
    __isset_vector[__BALANCE_ISSET_ID] = false;
  }

  /** Returns true if field balance is set (has been assigned a value) and false otherwise */
  public boolean isSetBalance() {
    return __isset_vector[__BALANCE_ISSET_ID];
  }

  public void setBalanceIsSet(boolean value) {
    __isset_vector[__BALANCE_ISSET_ID] = value;
  }

  public String getUnit() {
    return this.unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }

  public void unsetUnit() {
    this.unit = null;
  }

  /** Returns true if field unit is set (has been assigned a value) and false otherwise */
  public boolean isSetUnit() {
    return this.unit != null;
  }

  public void setUnitIsSet(boolean value) {
    if (!value) {
      this.unit = null;
    }
  }

  public int getRate() {
    return this.rate;
  }

  public void setRate(int rate) {
    this.rate = rate;
    setRateIsSet(true);
  }

  public void unsetRate() {
    __isset_vector[__RATE_ISSET_ID] = false;
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return __isset_vector[__RATE_ISSET_ID];
  }

  public void setRateIsSet(boolean value) {
    __isset_vector[__RATE_ISSET_ID] = value;
  }

  public String getDisplayCode() {
    return this.displayCode;
  }

  public void setDisplayCode(String displayCode) {
    this.displayCode = displayCode;
  }

  public void unsetDisplayCode() {
    this.displayCode = null;
  }

  /** Returns true if field displayCode is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayCode() {
    return this.displayCode != null;
  }

  public void setDisplayCodeIsSet(boolean value) {
    if (!value) {
      this.displayCode = null;
    }
  }

  public String getCalledNumber() {
    return this.calledNumber;
  }

  public void setCalledNumber(String calledNumber) {
    this.calledNumber = calledNumber;
  }

  public void unsetCalledNumber() {
    this.calledNumber = null;
  }

  /** Returns true if field calledNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCalledNumber() {
    return this.calledNumber != null;
  }

  public void setCalledNumberIsSet(boolean value) {
    if (!value) {
      this.calledNumber = null;
    }
  }

  public String getCalleeNationalNumber() {
    return this.calleeNationalNumber;
  }

  public void setCalleeNationalNumber(String calleeNationalNumber) {
    this.calleeNationalNumber = calleeNationalNumber;
  }

  public void unsetCalleeNationalNumber() {
    this.calleeNationalNumber = null;
  }

  /** Returns true if field calleeNationalNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetCalleeNationalNumber() {
    return this.calleeNationalNumber != null;
  }

  public void setCalleeNationalNumberIsSet(boolean value) {
    if (!value) {
      this.calleeNationalNumber = null;
    }
  }

  public String getCalleeCallingCode() {
    return this.calleeCallingCode;
  }

  public void setCalleeCallingCode(String calleeCallingCode) {
    this.calleeCallingCode = calleeCallingCode;
  }

  public void unsetCalleeCallingCode() {
    this.calleeCallingCode = null;
  }

  /** Returns true if field calleeCallingCode is set (has been assigned a value) and false otherwise */
  public boolean isSetCalleeCallingCode() {
    return this.calleeCallingCode != null;
  }

  public void setCalleeCallingCodeIsSet(boolean value) {
    if (!value) {
      this.calleeCallingCode = null;
    }
  }

  public String getRateDivision() {
    return this.rateDivision;
  }

  public void setRateDivision(String rateDivision) {
    this.rateDivision = rateDivision;
  }

  public void unsetRateDivision() {
    this.rateDivision = null;
  }

  /** Returns true if field rateDivision is set (has been assigned a value) and false otherwise */
  public boolean isSetRateDivision() {
    return this.rateDivision != null;
  }

  public void setRateDivisionIsSet(boolean value) {
    if (!value) {
      this.rateDivision = null;
    }
  }

  public int getAdMaxMin() {
    return this.adMaxMin;
  }

  public void setAdMaxMin(int adMaxMin) {
    this.adMaxMin = adMaxMin;
    setAdMaxMinIsSet(true);
  }

  public void unsetAdMaxMin() {
    __isset_vector[__ADMAXMIN_ISSET_ID] = false;
  }

  /** Returns true if field adMaxMin is set (has been assigned a value) and false otherwise */
  public boolean isSetAdMaxMin() {
    return __isset_vector[__ADMAXMIN_ISSET_ID];
  }

  public void setAdMaxMinIsSet(boolean value) {
    __isset_vector[__ADMAXMIN_ISSET_ID] = value;
  }

  public int getAdRemains() {
    return this.adRemains;
  }

  public void setAdRemains(int adRemains) {
    this.adRemains = adRemains;
    setAdRemainsIsSet(true);
  }

  public void unsetAdRemains() {
    __isset_vector[__ADREMAINS_ISSET_ID] = false;
  }

  /** Returns true if field adRemains is set (has been assigned a value) and false otherwise */
  public boolean isSetAdRemains() {
    return __isset_vector[__ADREMAINS_ISSET_ID];
  }

  public void setAdRemainsIsSet(boolean value) {
    __isset_vector[__ADREMAINS_ISSET_ID] = value;
  }

  public String getAdSessionId() {
    return this.adSessionId;
  }

  public void setAdSessionId(String adSessionId) {
    this.adSessionId = adSessionId;
  }

  public void unsetAdSessionId() {
    this.adSessionId = null;
  }

  /** Returns true if field adSessionId is set (has been assigned a value) and false otherwise */
  public boolean isSetAdSessionId() {
    return this.adSessionId != null;
  }

  public void setAdSessionIdIsSet(boolean value) {
    if (!value) {
      this.adSessionId = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PaidCallDialing)
      return this.equals((PaidCallDialing)that);
    return false;
  }

  public boolean equals(PaidCallDialing that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_dialedNumber = true && this.isSetDialedNumber();
    boolean that_present_dialedNumber = true && that.isSetDialedNumber();
    if (this_present_dialedNumber || that_present_dialedNumber) {
      if (!(this_present_dialedNumber && that_present_dialedNumber))
        return false;
      if (!this.dialedNumber.equals(that.dialedNumber))
        return false;
    }

    boolean this_present_serviceDomain = true && this.isSetServiceDomain();
    boolean that_present_serviceDomain = true && that.isSetServiceDomain();
    if (this_present_serviceDomain || that_present_serviceDomain) {
      if (!(this_present_serviceDomain && that_present_serviceDomain))
        return false;
      if (!this.serviceDomain.equals(that.serviceDomain))
        return false;
    }

    boolean this_present_productType = true && this.isSetProductType();
    boolean that_present_productType = true && that.isSetProductType();
    if (this_present_productType || that_present_productType) {
      if (!(this_present_productType && that_present_productType))
        return false;
      if (!this.productType.equals(that.productType))
        return false;
    }

    boolean this_present_productName = true && this.isSetProductName();
    boolean that_present_productName = true && that.isSetProductName();
    if (this_present_productName || that_present_productName) {
      if (!(this_present_productName && that_present_productName))
        return false;
      if (!this.productName.equals(that.productName))
        return false;
    }

    boolean this_present_multipleProduct = true;
    boolean that_present_multipleProduct = true;
    if (this_present_multipleProduct || that_present_multipleProduct) {
      if (!(this_present_multipleProduct && that_present_multipleProduct))
        return false;
      if (this.multipleProduct != that.multipleProduct)
        return false;
    }

    boolean this_present_callerIdStatus = true && this.isSetCallerIdStatus();
    boolean that_present_callerIdStatus = true && that.isSetCallerIdStatus();
    if (this_present_callerIdStatus || that_present_callerIdStatus) {
      if (!(this_present_callerIdStatus && that_present_callerIdStatus))
        return false;
      if (!this.callerIdStatus.equals(that.callerIdStatus))
        return false;
    }

    boolean this_present_balance = true;
    boolean that_present_balance = true;
    if (this_present_balance || that_present_balance) {
      if (!(this_present_balance && that_present_balance))
        return false;
      if (this.balance != that.balance)
        return false;
    }

    boolean this_present_unit = true && this.isSetUnit();
    boolean that_present_unit = true && that.isSetUnit();
    if (this_present_unit || that_present_unit) {
      if (!(this_present_unit && that_present_unit))
        return false;
      if (!this.unit.equals(that.unit))
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_displayCode = true && this.isSetDisplayCode();
    boolean that_present_displayCode = true && that.isSetDisplayCode();
    if (this_present_displayCode || that_present_displayCode) {
      if (!(this_present_displayCode && that_present_displayCode))
        return false;
      if (!this.displayCode.equals(that.displayCode))
        return false;
    }

    boolean this_present_calledNumber = true && this.isSetCalledNumber();
    boolean that_present_calledNumber = true && that.isSetCalledNumber();
    if (this_present_calledNumber || that_present_calledNumber) {
      if (!(this_present_calledNumber && that_present_calledNumber))
        return false;
      if (!this.calledNumber.equals(that.calledNumber))
        return false;
    }

    boolean this_present_calleeNationalNumber = true && this.isSetCalleeNationalNumber();
    boolean that_present_calleeNationalNumber = true && that.isSetCalleeNationalNumber();
    if (this_present_calleeNationalNumber || that_present_calleeNationalNumber) {
      if (!(this_present_calleeNationalNumber && that_present_calleeNationalNumber))
        return false;
      if (!this.calleeNationalNumber.equals(that.calleeNationalNumber))
        return false;
    }

    boolean this_present_calleeCallingCode = true && this.isSetCalleeCallingCode();
    boolean that_present_calleeCallingCode = true && that.isSetCalleeCallingCode();
    if (this_present_calleeCallingCode || that_present_calleeCallingCode) {
      if (!(this_present_calleeCallingCode && that_present_calleeCallingCode))
        return false;
      if (!this.calleeCallingCode.equals(that.calleeCallingCode))
        return false;
    }

    boolean this_present_rateDivision = true && this.isSetRateDivision();
    boolean that_present_rateDivision = true && that.isSetRateDivision();
    if (this_present_rateDivision || that_present_rateDivision) {
      if (!(this_present_rateDivision && that_present_rateDivision))
        return false;
      if (!this.rateDivision.equals(that.rateDivision))
        return false;
    }

    boolean this_present_adMaxMin = true;
    boolean that_present_adMaxMin = true;
    if (this_present_adMaxMin || that_present_adMaxMin) {
      if (!(this_present_adMaxMin && that_present_adMaxMin))
        return false;
      if (this.adMaxMin != that.adMaxMin)
        return false;
    }

    boolean this_present_adRemains = true;
    boolean that_present_adRemains = true;
    if (this_present_adRemains || that_present_adRemains) {
      if (!(this_present_adRemains && that_present_adRemains))
        return false;
      if (this.adRemains != that.adRemains)
        return false;
    }

    boolean this_present_adSessionId = true && this.isSetAdSessionId();
    boolean that_present_adSessionId = true && that.isSetAdSessionId();
    if (this_present_adSessionId || that_present_adSessionId) {
      if (!(this_present_adSessionId && that_present_adSessionId))
        return false;
      if (!this.adSessionId.equals(that.adSessionId))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    PaidCallDialing other = (PaidCallDialing)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDialedNumber(), other.isSetDialedNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDialedNumber()) {
      lastComparison = TBaseHelper.compareTo(this.dialedNumber, other.dialedNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetServiceDomain(), other.isSetServiceDomain());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServiceDomain()) {
      lastComparison = TBaseHelper.compareTo(this.serviceDomain, other.serviceDomain);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetProductType(), other.isSetProductType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductType()) {
      lastComparison = TBaseHelper.compareTo(this.productType, other.productType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetProductName(), other.isSetProductName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductName()) {
      lastComparison = TBaseHelper.compareTo(this.productName, other.productName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMultipleProduct(), other.isSetMultipleProduct());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMultipleProduct()) {
      lastComparison = TBaseHelper.compareTo(this.multipleProduct, other.multipleProduct);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCallerIdStatus(), other.isSetCallerIdStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallerIdStatus()) {
      lastComparison = TBaseHelper.compareTo(this.callerIdStatus, other.callerIdStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetBalance(), other.isSetBalance());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBalance()) {
      lastComparison = TBaseHelper.compareTo(this.balance, other.balance);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetUnit(), other.isSetUnit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnit()) {
      lastComparison = TBaseHelper.compareTo(this.unit, other.unit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRate(), other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDisplayCode(), other.isSetDisplayCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayCode()) {
      lastComparison = TBaseHelper.compareTo(this.displayCode, other.displayCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCalledNumber(), other.isSetCalledNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalledNumber()) {
      lastComparison = TBaseHelper.compareTo(this.calledNumber, other.calledNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCalleeNationalNumber(), other.isSetCalleeNationalNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalleeNationalNumber()) {
      lastComparison = TBaseHelper.compareTo(this.calleeNationalNumber, other.calleeNationalNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCalleeCallingCode(), other.isSetCalleeCallingCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalleeCallingCode()) {
      lastComparison = TBaseHelper.compareTo(this.calleeCallingCode, other.calleeCallingCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRateDivision(), other.isSetRateDivision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRateDivision()) {
      lastComparison = TBaseHelper.compareTo(this.rateDivision, other.rateDivision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAdMaxMin(), other.isSetAdMaxMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdMaxMin()) {
      lastComparison = TBaseHelper.compareTo(this.adMaxMin, other.adMaxMin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAdRemains(), other.isSetAdRemains());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdRemains()) {
      lastComparison = TBaseHelper.compareTo(this.adRemains, other.adRemains);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAdSessionId(), other.isSetAdSessionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAdSessionId()) {
      lastComparison = TBaseHelper.compareTo(this.adSessionId, other.adSessionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // TYPE
          if (field.type == TType.I32) {
            this.type = PaidCallType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // DIALED_NUMBER
          if (field.type == TType.STRING) {
            this.dialedNumber = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // SERVICE_DOMAIN
          if (field.type == TType.STRING) {
            this.serviceDomain = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PRODUCT_TYPE
          if (field.type == TType.I32) {
            this.productType = PaidCallProductType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // PRODUCT_NAME
          if (field.type == TType.STRING) {
            this.productName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // MULTIPLE_PRODUCT
          if (field.type == TType.BOOL) {
            this.multipleProduct = iprot.readBool();
            setMultipleProductIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // CALLER_ID_STATUS
          if (field.type == TType.I32) {
            this.callerIdStatus = PaidCallerIdStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // BALANCE
          if (field.type == TType.I32) {
            this.balance = iprot.readI32();
            setBalanceIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // UNIT
          if (field.type == TType.STRING) {
            this.unit = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // RATE
          if (field.type == TType.I32) {
            this.rate = iprot.readI32();
            setRateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 13: // DISPLAY_CODE
          if (field.type == TType.STRING) {
            this.displayCode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 14: // CALLED_NUMBER
          if (field.type == TType.STRING) {
            this.calledNumber = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 15: // CALLEE_NATIONAL_NUMBER
          if (field.type == TType.STRING) {
            this.calleeNationalNumber = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 16: // CALLEE_CALLING_CODE
          if (field.type == TType.STRING) {
            this.calleeCallingCode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 17: // RATE_DIVISION
          if (field.type == TType.STRING) {
            this.rateDivision = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 20: // AD_MAX_MIN
          if (field.type == TType.I32) {
            this.adMaxMin = iprot.readI32();
            setAdMaxMinIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 21: // AD_REMAINS
          if (field.type == TType.I32) {
            this.adRemains = iprot.readI32();
            setAdRemainsIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 22: // AD_SESSION_ID
          if (field.type == TType.STRING) {
            this.adSessionId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    if (this.dialedNumber != null) {
      oprot.writeFieldBegin(DIALED_NUMBER_FIELD_DESC);
      oprot.writeString(this.dialedNumber);
      oprot.writeFieldEnd();
    }
    if (this.serviceDomain != null) {
      oprot.writeFieldBegin(SERVICE_DOMAIN_FIELD_DESC);
      oprot.writeString(this.serviceDomain);
      oprot.writeFieldEnd();
    }
    if (this.productType != null) {
      oprot.writeFieldBegin(PRODUCT_TYPE_FIELD_DESC);
      oprot.writeI32(this.productType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.productName != null) {
      oprot.writeFieldBegin(PRODUCT_NAME_FIELD_DESC);
      oprot.writeString(this.productName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(MULTIPLE_PRODUCT_FIELD_DESC);
    oprot.writeBool(this.multipleProduct);
    oprot.writeFieldEnd();
    if (this.callerIdStatus != null) {
      oprot.writeFieldBegin(CALLER_ID_STATUS_FIELD_DESC);
      oprot.writeI32(this.callerIdStatus.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(BALANCE_FIELD_DESC);
    oprot.writeI32(this.balance);
    oprot.writeFieldEnd();
    if (this.unit != null) {
      oprot.writeFieldBegin(UNIT_FIELD_DESC);
      oprot.writeString(this.unit);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(RATE_FIELD_DESC);
    oprot.writeI32(this.rate);
    oprot.writeFieldEnd();
    if (this.displayCode != null) {
      oprot.writeFieldBegin(DISPLAY_CODE_FIELD_DESC);
      oprot.writeString(this.displayCode);
      oprot.writeFieldEnd();
    }
    if (this.calledNumber != null) {
      oprot.writeFieldBegin(CALLED_NUMBER_FIELD_DESC);
      oprot.writeString(this.calledNumber);
      oprot.writeFieldEnd();
    }
    if (this.calleeNationalNumber != null) {
      oprot.writeFieldBegin(CALLEE_NATIONAL_NUMBER_FIELD_DESC);
      oprot.writeString(this.calleeNationalNumber);
      oprot.writeFieldEnd();
    }
    if (this.calleeCallingCode != null) {
      oprot.writeFieldBegin(CALLEE_CALLING_CODE_FIELD_DESC);
      oprot.writeString(this.calleeCallingCode);
      oprot.writeFieldEnd();
    }
    if (this.rateDivision != null) {
      oprot.writeFieldBegin(RATE_DIVISION_FIELD_DESC);
      oprot.writeString(this.rateDivision);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(AD_MAX_MIN_FIELD_DESC);
    oprot.writeI32(this.adMaxMin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(AD_REMAINS_FIELD_DESC);
    oprot.writeI32(this.adRemains);
    oprot.writeFieldEnd();
    if (this.adSessionId != null) {
      oprot.writeFieldBegin(AD_SESSION_ID_FIELD_DESC);
      oprot.writeString(this.adSessionId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("PaidCallDialing(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dialedNumber:");
    if (this.dialedNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.dialedNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serviceDomain:");
    if (this.serviceDomain == null) {
      sb.append("null");
    } else {
      sb.append(this.serviceDomain);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productType:");
    if (this.productType == null) {
      sb.append("null");
    } else {
      sb.append(this.productType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("productName:");
    if (this.productName == null) {
      sb.append("null");
    } else {
      sb.append(this.productName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("multipleProduct:");
    sb.append(this.multipleProduct);
    first = false;
    if (!first) sb.append(", ");
    sb.append("callerIdStatus:");
    if (this.callerIdStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.callerIdStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("balance:");
    sb.append(this.balance);
    first = false;
    if (!first) sb.append(", ");
    sb.append("unit:");
    if (this.unit == null) {
      sb.append("null");
    } else {
      sb.append(this.unit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayCode:");
    if (this.displayCode == null) {
      sb.append("null");
    } else {
      sb.append(this.displayCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("calledNumber:");
    if (this.calledNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.calledNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("calleeNationalNumber:");
    if (this.calleeNationalNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.calleeNationalNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("calleeCallingCode:");
    if (this.calleeCallingCode == null) {
      sb.append("null");
    } else {
      sb.append(this.calleeCallingCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rateDivision:");
    if (this.rateDivision == null) {
      sb.append("null");
    } else {
      sb.append(this.rateDivision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("adMaxMin:");
    sb.append(this.adMaxMin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adRemains:");
    sb.append(this.adRemains);
    first = false;
    if (!first) sb.append(", ");
    sb.append("adSessionId:");
    if (this.adSessionId == null) {
      sb.append("null");
    } else {
      sb.append(this.adSessionId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

