/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ProductSimple implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ProductSimple");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);
  private static final TField PACKAGE_ID_FIELD_DESC = new TField("packageId", TType.I64, (short)2);
  private static final TField VERSION_FIELD_DESC = new TField("version", TType.I32, (short)3);
  private static final TField ON_SALE_FIELD_DESC = new TField("onSale", TType.BOOL, (short)4);
  private static final TField VALID_UNTIL_FIELD_DESC = new TField("validUntil", TType.I64, (short)5);
  private static final TField STICKER_ID_RANGES_FIELD_DESC = new TField("stickerIdRanges", TType.LIST, (short)10);
  private static final TField GRANTED_BY_DEFAULT_FIELD_DESC = new TField("grantedByDefault", TType.BOOL, (short)41);
  private static final TField DISPLAY_ORDER_FIELD_DESC = new TField("displayOrder", TType.I32, (short)42);

  private String productId;
  private long packageId;
  private int version;
  private boolean onSale;
  private long validUntil;
  private Vector stickerIdRanges;
  private boolean grantedByDefault;
  private int displayOrder;

  // isset id assignments
  private static final int __PACKAGEID_ISSET_ID = 0;
  private static final int __VERSION_ISSET_ID = 1;
  private static final int __ONSALE_ISSET_ID = 2;
  private static final int __VALIDUNTIL_ISSET_ID = 3;
  private static final int __GRANTEDBYDEFAULT_ISSET_ID = 4;
  private static final int __DISPLAYORDER_ISSET_ID = 5;
  private boolean[] __isset_vector = new boolean[6];

  public ProductSimple() {
  }

  public ProductSimple(
    String productId,
    long packageId,
    int version,
    boolean onSale,
    long validUntil,
    Vector stickerIdRanges,
    boolean grantedByDefault,
    int displayOrder)
  {
    this();
    this.productId = productId;
    this.packageId = packageId;
    setPackageIdIsSet(true);
    this.version = version;
    setVersionIsSet(true);
    this.onSale = onSale;
    setOnSaleIsSet(true);
    this.validUntil = validUntil;
    setValidUntilIsSet(true);
    this.stickerIdRanges = stickerIdRanges;
    this.grantedByDefault = grantedByDefault;
    setGrantedByDefaultIsSet(true);
    this.displayOrder = displayOrder;
    setDisplayOrderIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ProductSimple(ProductSimple other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    this.packageId = other.packageId;
    this.version = other.version;
    this.onSale = other.onSale;
    this.validUntil = other.validUntil;
    if (other.isSetStickerIdRanges()) {
      Vector __this__stickerIdRanges = new Vector();
      for (Enumeration other_enum = other.stickerIdRanges.elements(); other_enum.hasMoreElements(); ) {
        StickerIdRange other_element = (StickerIdRange)other_enum.nextElement();
        __this__stickerIdRanges.addElement(new StickerIdRange(other_element));
      }
      this.stickerIdRanges = __this__stickerIdRanges;
    }
    this.grantedByDefault = other.grantedByDefault;
    this.displayOrder = other.displayOrder;
  }

  public ProductSimple deepCopy() {
    return new ProductSimple(this);
  }

  public void clear() {
    this.productId = null;
    setPackageIdIsSet(false);
    this.packageId = 0;
    setVersionIsSet(false);
    this.version = 0;
    setOnSaleIsSet(false);
    this.onSale = false;
    setValidUntilIsSet(false);
    this.validUntil = 0;
    this.stickerIdRanges = null;
    setGrantedByDefaultIsSet(false);
    this.grantedByDefault = false;
    setDisplayOrderIsSet(false);
    this.displayOrder = 0;
  }

  public String getProductId() {
    return this.productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public long getPackageId() {
    return this.packageId;
  }

  public void setPackageId(long packageId) {
    this.packageId = packageId;
    setPackageIdIsSet(true);
  }

  public void unsetPackageId() {
    __isset_vector[__PACKAGEID_ISSET_ID] = false;
  }

  /** Returns true if field packageId is set (has been assigned a value) and false otherwise */
  public boolean isSetPackageId() {
    return __isset_vector[__PACKAGEID_ISSET_ID];
  }

  public void setPackageIdIsSet(boolean value) {
    __isset_vector[__PACKAGEID_ISSET_ID] = value;
  }

  public int getVersion() {
    return this.version;
  }

  public void setVersion(int version) {
    this.version = version;
    setVersionIsSet(true);
  }

  public void unsetVersion() {
    __isset_vector[__VERSION_ISSET_ID] = false;
  }

  /** Returns true if field version is set (has been assigned a value) and false otherwise */
  public boolean isSetVersion() {
    return __isset_vector[__VERSION_ISSET_ID];
  }

  public void setVersionIsSet(boolean value) {
    __isset_vector[__VERSION_ISSET_ID] = value;
  }

  public boolean isOnSale() {
    return this.onSale;
  }

  public void setOnSale(boolean onSale) {
    this.onSale = onSale;
    setOnSaleIsSet(true);
  }

  public void unsetOnSale() {
    __isset_vector[__ONSALE_ISSET_ID] = false;
  }

  /** Returns true if field onSale is set (has been assigned a value) and false otherwise */
  public boolean isSetOnSale() {
    return __isset_vector[__ONSALE_ISSET_ID];
  }

  public void setOnSaleIsSet(boolean value) {
    __isset_vector[__ONSALE_ISSET_ID] = value;
  }

  public long getValidUntil() {
    return this.validUntil;
  }

  public void setValidUntil(long validUntil) {
    this.validUntil = validUntil;
    setValidUntilIsSet(true);
  }

  public void unsetValidUntil() {
    __isset_vector[__VALIDUNTIL_ISSET_ID] = false;
  }

  /** Returns true if field validUntil is set (has been assigned a value) and false otherwise */
  public boolean isSetValidUntil() {
    return __isset_vector[__VALIDUNTIL_ISSET_ID];
  }

  public void setValidUntilIsSet(boolean value) {
    __isset_vector[__VALIDUNTIL_ISSET_ID] = value;
  }

  public int getStickerIdRangesSize() {
    return (this.stickerIdRanges == null) ? 0 : this.stickerIdRanges.size();
  }

  public Enumeration getStickerIdRangesEnumeration() {
    return (this.stickerIdRanges == null) ? null : this.stickerIdRanges.elements();
  }

  public void addToStickerIdRanges(StickerIdRange elem) {
    if (this.stickerIdRanges == null) {
      this.stickerIdRanges = new Vector();
    }
    this.stickerIdRanges.addElement(elem);
  }

  public Vector getStickerIdRanges() {
    return this.stickerIdRanges;
  }

  public void setStickerIdRanges(Vector stickerIdRanges) {
    this.stickerIdRanges = stickerIdRanges;
  }

  public void unsetStickerIdRanges() {
    this.stickerIdRanges = null;
  }

  /** Returns true if field stickerIdRanges is set (has been assigned a value) and false otherwise */
  public boolean isSetStickerIdRanges() {
    return this.stickerIdRanges != null;
  }

  public void setStickerIdRangesIsSet(boolean value) {
    if (!value) {
      this.stickerIdRanges = null;
    }
  }

  public boolean isGrantedByDefault() {
    return this.grantedByDefault;
  }

  public void setGrantedByDefault(boolean grantedByDefault) {
    this.grantedByDefault = grantedByDefault;
    setGrantedByDefaultIsSet(true);
  }

  public void unsetGrantedByDefault() {
    __isset_vector[__GRANTEDBYDEFAULT_ISSET_ID] = false;
  }

  /** Returns true if field grantedByDefault is set (has been assigned a value) and false otherwise */
  public boolean isSetGrantedByDefault() {
    return __isset_vector[__GRANTEDBYDEFAULT_ISSET_ID];
  }

  public void setGrantedByDefaultIsSet(boolean value) {
    __isset_vector[__GRANTEDBYDEFAULT_ISSET_ID] = value;
  }

  public int getDisplayOrder() {
    return this.displayOrder;
  }

  public void setDisplayOrder(int displayOrder) {
    this.displayOrder = displayOrder;
    setDisplayOrderIsSet(true);
  }

  public void unsetDisplayOrder() {
    __isset_vector[__DISPLAYORDER_ISSET_ID] = false;
  }

  /** Returns true if field displayOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayOrder() {
    return __isset_vector[__DISPLAYORDER_ISSET_ID];
  }

  public void setDisplayOrderIsSet(boolean value) {
    __isset_vector[__DISPLAYORDER_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ProductSimple)
      return this.equals((ProductSimple)that);
    return false;
  }

  public boolean equals(ProductSimple that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_packageId = true;
    boolean that_present_packageId = true;
    if (this_present_packageId || that_present_packageId) {
      if (!(this_present_packageId && that_present_packageId))
        return false;
      if (this.packageId != that.packageId)
        return false;
    }

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_onSale = true;
    boolean that_present_onSale = true;
    if (this_present_onSale || that_present_onSale) {
      if (!(this_present_onSale && that_present_onSale))
        return false;
      if (this.onSale != that.onSale)
        return false;
    }

    boolean this_present_validUntil = true;
    boolean that_present_validUntil = true;
    if (this_present_validUntil || that_present_validUntil) {
      if (!(this_present_validUntil && that_present_validUntil))
        return false;
      if (this.validUntil != that.validUntil)
        return false;
    }

    boolean this_present_stickerIdRanges = true && this.isSetStickerIdRanges();
    boolean that_present_stickerIdRanges = true && that.isSetStickerIdRanges();
    if (this_present_stickerIdRanges || that_present_stickerIdRanges) {
      if (!(this_present_stickerIdRanges && that_present_stickerIdRanges))
        return false;
      if (!this.stickerIdRanges.equals(that.stickerIdRanges))
        return false;
    }

    boolean this_present_grantedByDefault = true;
    boolean that_present_grantedByDefault = true;
    if (this_present_grantedByDefault || that_present_grantedByDefault) {
      if (!(this_present_grantedByDefault && that_present_grantedByDefault))
        return false;
      if (this.grantedByDefault != that.grantedByDefault)
        return false;
    }

    boolean this_present_displayOrder = true;
    boolean that_present_displayOrder = true;
    if (this_present_displayOrder || that_present_displayOrder) {
      if (!(this_present_displayOrder && that_present_displayOrder))
        return false;
      if (this.displayOrder != that.displayOrder)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ProductSimple other = (ProductSimple)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetProductId(), other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPackageId(), other.isSetPackageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPackageId()) {
      lastComparison = TBaseHelper.compareTo(this.packageId, other.packageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetVersion(), other.isSetVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersion()) {
      lastComparison = TBaseHelper.compareTo(this.version, other.version);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetOnSale(), other.isSetOnSale());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnSale()) {
      lastComparison = TBaseHelper.compareTo(this.onSale, other.onSale);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetValidUntil(), other.isSetValidUntil());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidUntil()) {
      lastComparison = TBaseHelper.compareTo(this.validUntil, other.validUntil);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetStickerIdRanges(), other.isSetStickerIdRanges());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStickerIdRanges()) {
      lastComparison = TBaseHelper.compareTo(this.stickerIdRanges, other.stickerIdRanges);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetGrantedByDefault(), other.isSetGrantedByDefault());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGrantedByDefault()) {
      lastComparison = TBaseHelper.compareTo(this.grantedByDefault, other.grantedByDefault);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDisplayOrder(), other.isSetDisplayOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayOrder()) {
      lastComparison = TBaseHelper.compareTo(this.displayOrder, other.displayOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // PACKAGE_ID
          if (field.type == TType.I64) {
            this.packageId = iprot.readI64();
            setPackageIdIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // VERSION
          if (field.type == TType.I32) {
            this.version = iprot.readI32();
            setVersionIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // ON_SALE
          if (field.type == TType.BOOL) {
            this.onSale = iprot.readBool();
            setOnSaleIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // VALID_UNTIL
          if (field.type == TType.I64) {
            this.validUntil = iprot.readI64();
            setValidUntilIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // STICKER_ID_RANGES
          if (field.type == TType.LIST) {
            {
              TList _list201 = iprot.readListBegin();
              this.stickerIdRanges = new Vector(_list201.size);
              for (int _i202 = 0; _i202 < _list201.size; ++_i202)
              {
                StickerIdRange _elem203;
                _elem203 = new StickerIdRange();
                _elem203.read(iprot);
                this.stickerIdRanges.addElement(_elem203);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 41: // GRANTED_BY_DEFAULT
          if (field.type == TType.BOOL) {
            this.grantedByDefault = iprot.readBool();
            setGrantedByDefaultIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 42: // DISPLAY_ORDER
          if (field.type == TType.I32) {
            this.displayOrder = iprot.readI32();
            setDisplayOrderIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(PACKAGE_ID_FIELD_DESC);
    oprot.writeI64(this.packageId);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(VERSION_FIELD_DESC);
    oprot.writeI32(this.version);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ON_SALE_FIELD_DESC);
    oprot.writeBool(this.onSale);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(VALID_UNTIL_FIELD_DESC);
    oprot.writeI64(this.validUntil);
    oprot.writeFieldEnd();
    if (this.stickerIdRanges != null) {
      oprot.writeFieldBegin(STICKER_ID_RANGES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.stickerIdRanges.size()));
        for (Enumeration _iter204_enum = this.stickerIdRanges.elements(); _iter204_enum.hasMoreElements(); )         {
          StickerIdRange _iter204 = (StickerIdRange)_iter204_enum.nextElement();
          _iter204.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(GRANTED_BY_DEFAULT_FIELD_DESC);
    oprot.writeBool(this.grantedByDefault);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DISPLAY_ORDER_FIELD_DESC);
    oprot.writeI32(this.displayOrder);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ProductSimple(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("packageId:");
    sb.append(this.packageId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("onSale:");
    sb.append(this.onSale);
    first = false;
    if (!first) sb.append(", ");
    sb.append("validUntil:");
    sb.append(this.validUntil);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stickerIdRanges:");
    if (this.stickerIdRanges == null) {
      sb.append("null");
    } else {
      sb.append(this.stickerIdRanges);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("grantedByDefault:");
    sb.append(this.grantedByDefault);
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayOrder:");
    sb.append(this.displayOrder);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

