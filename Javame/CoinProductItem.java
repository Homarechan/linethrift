/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CoinProductItem implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("CoinProductItem");

  private static final TField ITEM_ID_FIELD_DESC = new TField("itemId", TType.STRING, (short)1);
  private static final TField COIN_FIELD_DESC = new TField("coin", TType.I32, (short)2);
  private static final TField FREE_COIN_FIELD_DESC = new TField("freeCoin", TType.I32, (short)3);
  private static final TField CURRENCY_FIELD_DESC = new TField("currency", TType.STRING, (short)5);
  private static final TField PRICE_FIELD_DESC = new TField("price", TType.STRING, (short)6);
  private static final TField DISPLAY_PRICE_FIELD_DESC = new TField("displayPrice", TType.STRING, (short)7);
  private static final TField NAME_FIELD_DESC = new TField("name", TType.STRING, (short)8);
  private static final TField DESC_FIELD_DESC = new TField("desc", TType.STRING, (short)9);

  private String itemId;
  private int coin;
  private int freeCoin;
  private String currency;
  private String price;
  private String displayPrice;
  private String name;
  private String desc;

  // isset id assignments
  private static final int __COIN_ISSET_ID = 0;
  private static final int __FREECOIN_ISSET_ID = 1;
  private boolean[] __isset_vector = new boolean[2];

  public CoinProductItem() {
  }

  public CoinProductItem(
    String itemId,
    int coin,
    int freeCoin,
    String currency,
    String price,
    String displayPrice,
    String name,
    String desc)
  {
    this();
    this.itemId = itemId;
    this.coin = coin;
    setCoinIsSet(true);
    this.freeCoin = freeCoin;
    setFreeCoinIsSet(true);
    this.currency = currency;
    this.price = price;
    this.displayPrice = displayPrice;
    this.name = name;
    this.desc = desc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinProductItem(CoinProductItem other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    if (other.isSetItemId()) {
      this.itemId = other.itemId;
    }
    this.coin = other.coin;
    this.freeCoin = other.freeCoin;
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetPrice()) {
      this.price = other.price;
    }
    if (other.isSetDisplayPrice()) {
      this.displayPrice = other.displayPrice;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
  }

  public CoinProductItem deepCopy() {
    return new CoinProductItem(this);
  }

  public void clear() {
    this.itemId = null;
    setCoinIsSet(false);
    this.coin = 0;
    setFreeCoinIsSet(false);
    this.freeCoin = 0;
    this.currency = null;
    this.price = null;
    this.displayPrice = null;
    this.name = null;
    this.desc = null;
  }

  public String getItemId() {
    return this.itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }

  public void unsetItemId() {
    this.itemId = null;
  }

  /** Returns true if field itemId is set (has been assigned a value) and false otherwise */
  public boolean isSetItemId() {
    return this.itemId != null;
  }

  public void setItemIdIsSet(boolean value) {
    if (!value) {
      this.itemId = null;
    }
  }

  public int getCoin() {
    return this.coin;
  }

  public void setCoin(int coin) {
    this.coin = coin;
    setCoinIsSet(true);
  }

  public void unsetCoin() {
    __isset_vector[__COIN_ISSET_ID] = false;
  }

  /** Returns true if field coin is set (has been assigned a value) and false otherwise */
  public boolean isSetCoin() {
    return __isset_vector[__COIN_ISSET_ID];
  }

  public void setCoinIsSet(boolean value) {
    __isset_vector[__COIN_ISSET_ID] = value;
  }

  public int getFreeCoin() {
    return this.freeCoin;
  }

  public void setFreeCoin(int freeCoin) {
    this.freeCoin = freeCoin;
    setFreeCoinIsSet(true);
  }

  public void unsetFreeCoin() {
    __isset_vector[__FREECOIN_ISSET_ID] = false;
  }

  /** Returns true if field freeCoin is set (has been assigned a value) and false otherwise */
  public boolean isSetFreeCoin() {
    return __isset_vector[__FREECOIN_ISSET_ID];
  }

  public void setFreeCoinIsSet(boolean value) {
    __isset_vector[__FREECOIN_ISSET_ID] = value;
  }

  public String getCurrency() {
    return this.currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public String getPrice() {
    return this.price;
  }

  public void setPrice(String price) {
    this.price = price;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  public String getDisplayPrice() {
    return this.displayPrice;
  }

  public void setDisplayPrice(String displayPrice) {
    this.displayPrice = displayPrice;
  }

  public void unsetDisplayPrice() {
    this.displayPrice = null;
  }

  /** Returns true if field displayPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayPrice() {
    return this.displayPrice != null;
  }

  public void setDisplayPriceIsSet(boolean value) {
    if (!value) {
      this.displayPrice = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public void setDesc(String desc) {
    this.desc = desc;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CoinProductItem)
      return this.equals((CoinProductItem)that);
    return false;
  }

  public boolean equals(CoinProductItem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_itemId = true && this.isSetItemId();
    boolean that_present_itemId = true && that.isSetItemId();
    if (this_present_itemId || that_present_itemId) {
      if (!(this_present_itemId && that_present_itemId))
        return false;
      if (!this.itemId.equals(that.itemId))
        return false;
    }

    boolean this_present_coin = true;
    boolean that_present_coin = true;
    if (this_present_coin || that_present_coin) {
      if (!(this_present_coin && that_present_coin))
        return false;
      if (this.coin != that.coin)
        return false;
    }

    boolean this_present_freeCoin = true;
    boolean that_present_freeCoin = true;
    if (this_present_freeCoin || that_present_freeCoin) {
      if (!(this_present_freeCoin && that_present_freeCoin))
        return false;
      if (this.freeCoin != that.freeCoin)
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    boolean this_present_displayPrice = true && this.isSetDisplayPrice();
    boolean that_present_displayPrice = true && that.isSetDisplayPrice();
    if (this_present_displayPrice || that_present_displayPrice) {
      if (!(this_present_displayPrice && that_present_displayPrice))
        return false;
      if (!this.displayPrice.equals(that.displayPrice))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    CoinProductItem other = (CoinProductItem)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetItemId(), other.isSetItemId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemId()) {
      lastComparison = TBaseHelper.compareTo(this.itemId, other.itemId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCoin(), other.isSetCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCoin()) {
      lastComparison = TBaseHelper.compareTo(this.coin, other.coin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetFreeCoin(), other.isSetFreeCoin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFreeCoin()) {
      lastComparison = TBaseHelper.compareTo(this.freeCoin, other.freeCoin);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCurrency(), other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPrice(), other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDisplayPrice(), other.isSetDisplayPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayPrice()) {
      lastComparison = TBaseHelper.compareTo(this.displayPrice, other.displayPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetDesc(), other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ITEM_ID
          if (field.type == TType.STRING) {
            this.itemId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COIN
          if (field.type == TType.I32) {
            this.coin = iprot.readI32();
            setCoinIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // FREE_COIN
          if (field.type == TType.I32) {
            this.freeCoin = iprot.readI32();
            setFreeCoinIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // CURRENCY
          if (field.type == TType.STRING) {
            this.currency = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // PRICE
          if (field.type == TType.STRING) {
            this.price = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // DISPLAY_PRICE
          if (field.type == TType.STRING) {
            this.displayPrice = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // NAME
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 9: // DESC
          if (field.type == TType.STRING) {
            this.desc = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.itemId != null) {
      oprot.writeFieldBegin(ITEM_ID_FIELD_DESC);
      oprot.writeString(this.itemId);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(COIN_FIELD_DESC);
    oprot.writeI32(this.coin);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FREE_COIN_FIELD_DESC);
    oprot.writeI32(this.freeCoin);
    oprot.writeFieldEnd();
    if (this.currency != null) {
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeString(this.currency);
      oprot.writeFieldEnd();
    }
    if (this.price != null) {
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeString(this.price);
      oprot.writeFieldEnd();
    }
    if (this.displayPrice != null) {
      oprot.writeFieldBegin(DISPLAY_PRICE_FIELD_DESC);
      oprot.writeString(this.displayPrice);
      oprot.writeFieldEnd();
    }
    if (this.name != null) {
      oprot.writeFieldBegin(NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    if (this.desc != null) {
      oprot.writeFieldBegin(DESC_FIELD_DESC);
      oprot.writeString(this.desc);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("CoinProductItem(");
    boolean first = true;

    sb.append("itemId:");
    if (this.itemId == null) {
      sb.append("null");
    } else {
      sb.append(this.itemId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("coin:");
    sb.append(this.coin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freeCoin:");
    sb.append(this.freeCoin);
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    if (this.price == null) {
      sb.append("null");
    } else {
      sb.append(this.price);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayPrice:");
    if (this.displayPrice == null) {
      sb.append("null");
    } else {
      sb.append(this.displayPrice);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

