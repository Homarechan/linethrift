/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareEvent implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareEvent");

  private static final TField CREATED_TIME_FIELD_DESC = new TField("createdTime", TType.I64, (short)2);
  private static final TField TYPE_FIELD_DESC = new TField("type", TType.I32, (short)3);
  private static final TField PAYLOAD_FIELD_DESC = new TField("payload", TType.STRUCT, (short)4);
  private static final TField SYNC_TOKEN_FIELD_DESC = new TField("syncToken", TType.STRING, (short)5);
  private static final TField EVENT_STATUS_FIELD_DESC = new TField("eventStatus", TType.I32, (short)6);

  private long createdTime;
  private SquareEventType type;
  private SquareEventPayload payload;
  private String syncToken;
  private SquareEventStatus eventStatus;

  // isset id assignments
  private static final int __CREATEDTIME_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public SquareEvent() {
  }

  public SquareEvent(
    long createdTime,
    SquareEventType type,
    SquareEventPayload payload,
    String syncToken,
    SquareEventStatus eventStatus)
  {
    this();
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
    this.type = type;
    this.payload = payload;
    this.syncToken = syncToken;
    this.eventStatus = eventStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareEvent(SquareEvent other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.createdTime = other.createdTime;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetPayload()) {
      this.payload = new SquareEventPayload(other.payload);
    }
    if (other.isSetSyncToken()) {
      this.syncToken = other.syncToken;
    }
    if (other.isSetEventStatus()) {
      this.eventStatus = other.eventStatus;
    }
  }

  public SquareEvent deepCopy() {
    return new SquareEvent(this);
  }

  public void clear() {
    setCreatedTimeIsSet(false);
    this.createdTime = 0;
    this.type = null;
    this.payload = null;
    this.syncToken = null;
    this.eventStatus = null;
  }

  public long getCreatedTime() {
    return this.createdTime;
  }

  public void setCreatedTime(long createdTime) {
    this.createdTime = createdTime;
    setCreatedTimeIsSet(true);
  }

  public void unsetCreatedTime() {
    __isset_vector[__CREATEDTIME_ISSET_ID] = false;
  }

  /** Returns true if field createdTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreatedTime() {
    return __isset_vector[__CREATEDTIME_ISSET_ID];
  }

  public void setCreatedTimeIsSet(boolean value) {
    __isset_vector[__CREATEDTIME_ISSET_ID] = value;
  }

  /**
   * 
   * @see SquareEventType
   */
  public SquareEventType getType() {
    return this.type;
  }

  /**
   * 
   * @see SquareEventType
   */
  public void setType(SquareEventType type) {
    this.type = type;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public SquareEventPayload getPayload() {
    return this.payload;
  }

  public void setPayload(SquareEventPayload payload) {
    this.payload = payload;
  }

  public void unsetPayload() {
    this.payload = null;
  }

  /** Returns true if field payload is set (has been assigned a value) and false otherwise */
  public boolean isSetPayload() {
    return this.payload != null;
  }

  public void setPayloadIsSet(boolean value) {
    if (!value) {
      this.payload = null;
    }
  }

  public String getSyncToken() {
    return this.syncToken;
  }

  public void setSyncToken(String syncToken) {
    this.syncToken = syncToken;
  }

  public void unsetSyncToken() {
    this.syncToken = null;
  }

  /** Returns true if field syncToken is set (has been assigned a value) and false otherwise */
  public boolean isSetSyncToken() {
    return this.syncToken != null;
  }

  public void setSyncTokenIsSet(boolean value) {
    if (!value) {
      this.syncToken = null;
    }
  }

  /**
   * 
   * @see SquareEventStatus
   */
  public SquareEventStatus getEventStatus() {
    return this.eventStatus;
  }

  /**
   * 
   * @see SquareEventStatus
   */
  public void setEventStatus(SquareEventStatus eventStatus) {
    this.eventStatus = eventStatus;
  }

  public void unsetEventStatus() {
    this.eventStatus = null;
  }

  /** Returns true if field eventStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetEventStatus() {
    return this.eventStatus != null;
  }

  public void setEventStatusIsSet(boolean value) {
    if (!value) {
      this.eventStatus = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareEvent)
      return this.equals((SquareEvent)that);
    return false;
  }

  public boolean equals(SquareEvent that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_createdTime = true;
    boolean that_present_createdTime = true;
    if (this_present_createdTime || that_present_createdTime) {
      if (!(this_present_createdTime && that_present_createdTime))
        return false;
      if (this.createdTime != that.createdTime)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_payload = true && this.isSetPayload();
    boolean that_present_payload = true && that.isSetPayload();
    if (this_present_payload || that_present_payload) {
      if (!(this_present_payload && that_present_payload))
        return false;
      if (!this.payload.equals(that.payload))
        return false;
    }

    boolean this_present_syncToken = true && this.isSetSyncToken();
    boolean that_present_syncToken = true && that.isSetSyncToken();
    if (this_present_syncToken || that_present_syncToken) {
      if (!(this_present_syncToken && that_present_syncToken))
        return false;
      if (!this.syncToken.equals(that.syncToken))
        return false;
    }

    boolean this_present_eventStatus = true && this.isSetEventStatus();
    boolean that_present_eventStatus = true && that.isSetEventStatus();
    if (this_present_eventStatus || that_present_eventStatus) {
      if (!(this_present_eventStatus && that_present_eventStatus))
        return false;
      if (!this.eventStatus.equals(that.eventStatus))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareEvent other = (SquareEvent)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetCreatedTime(), other.isSetCreatedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreatedTime()) {
      lastComparison = TBaseHelper.compareTo(this.createdTime, other.createdTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetType(), other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPayload(), other.isSetPayload());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayload()) {
      lastComparison = this.payload.compareTo(other.payload);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetSyncToken(), other.isSetSyncToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSyncToken()) {
      lastComparison = TBaseHelper.compareTo(this.syncToken, other.syncToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetEventStatus(), other.isSetEventStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventStatus()) {
      lastComparison = TBaseHelper.compareTo(this.eventStatus, other.eventStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 2: // CREATED_TIME
          if (field.type == TType.I64) {
            this.createdTime = iprot.readI64();
            setCreatedTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // TYPE
          if (field.type == TType.I32) {
            this.type = SquareEventType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PAYLOAD
          if (field.type == TType.STRUCT) {
            this.payload = new SquareEventPayload();
            this.payload.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // SYNC_TOKEN
          if (field.type == TType.STRING) {
            this.syncToken = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // EVENT_STATUS
          if (field.type == TType.I32) {
            this.eventStatus = SquareEventStatus.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CREATED_TIME_FIELD_DESC);
    oprot.writeI64(this.createdTime);
    oprot.writeFieldEnd();
    if (this.type != null) {
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(this.type.getValue());
      oprot.writeFieldEnd();
    }
    if (this.payload != null) {
      oprot.writeFieldBegin(PAYLOAD_FIELD_DESC);
      this.payload.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.syncToken != null) {
      oprot.writeFieldBegin(SYNC_TOKEN_FIELD_DESC);
      oprot.writeString(this.syncToken);
      oprot.writeFieldEnd();
    }
    if (this.eventStatus != null) {
      oprot.writeFieldBegin(EVENT_STATUS_FIELD_DESC);
      oprot.writeI32(this.eventStatus.getValue());
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareEvent(");
    boolean first = true;

    sb.append("createdTime:");
    sb.append(this.createdTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payload:");
    if (this.payload == null) {
      sb.append("null");
    } else {
      sb.append(this.payload);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("syncToken:");
    if (this.syncToken == null) {
      sb.append("null");
    } else {
      sb.append(this.syncToken);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eventStatus:");
    if (this.eventStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.eventStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

