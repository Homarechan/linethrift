/**
 * Autogenerated by Thrift Compiler (0.14.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class CoinPurchaseReservation implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("CoinPurchaseReservation");

  private static final TField PRODUCT_ID_FIELD_DESC = new TField("productId", TType.STRING, (short)1);
  private static final TField COUNTRY_FIELD_DESC = new TField("country", TType.STRING, (short)2);
  private static final TField CURRENCY_FIELD_DESC = new TField("currency", TType.STRING, (short)3);
  private static final TField PRICE_FIELD_DESC = new TField("price", TType.STRING, (short)4);
  private static final TField APP_STORE_CODE_FIELD_DESC = new TField("appStoreCode", TType.I32, (short)5);
  private static final TField LANGUAGE_FIELD_DESC = new TField("language", TType.STRING, (short)6);
  private static final TField PG_CODE_FIELD_DESC = new TField("pgCode", TType.I32, (short)7);
  private static final TField REDIRECT_URL_FIELD_DESC = new TField("redirectUrl", TType.STRING, (short)8);

  private String productId;
  private String country;
  private String currency;
  private String price;
  private PaymentType appStoreCode;
  private String language;
  private PaymentPgType pgCode;
  private String redirectUrl;

  // isset id assignments

  public CoinPurchaseReservation() {
  }

  public CoinPurchaseReservation(
    String productId,
    String country,
    String currency,
    String price,
    PaymentType appStoreCode,
    String language,
    PaymentPgType pgCode,
    String redirectUrl)
  {
    this();
    this.productId = productId;
    this.country = country;
    this.currency = currency;
    this.price = price;
    this.appStoreCode = appStoreCode;
    this.language = language;
    this.pgCode = pgCode;
    this.redirectUrl = redirectUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CoinPurchaseReservation(CoinPurchaseReservation other) {
    if (other.isSetProductId()) {
      this.productId = other.productId;
    }
    if (other.isSetCountry()) {
      this.country = other.country;
    }
    if (other.isSetCurrency()) {
      this.currency = other.currency;
    }
    if (other.isSetPrice()) {
      this.price = other.price;
    }
    if (other.isSetAppStoreCode()) {
      this.appStoreCode = other.appStoreCode;
    }
    if (other.isSetLanguage()) {
      this.language = other.language;
    }
    if (other.isSetPgCode()) {
      this.pgCode = other.pgCode;
    }
    if (other.isSetRedirectUrl()) {
      this.redirectUrl = other.redirectUrl;
    }
  }

  public CoinPurchaseReservation deepCopy() {
    return new CoinPurchaseReservation(this);
  }

  public void clear() {
    this.productId = null;
    this.country = null;
    this.currency = null;
    this.price = null;
    this.appStoreCode = null;
    this.language = null;
    this.pgCode = null;
    this.redirectUrl = null;
  }

  public String getProductId() {
    return this.productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }

  public void unsetProductId() {
    this.productId = null;
  }

  /** Returns true if field productId is set (has been assigned a value) and false otherwise */
  public boolean isSetProductId() {
    return this.productId != null;
  }

  public void setProductIdIsSet(boolean value) {
    if (!value) {
      this.productId = null;
    }
  }

  public String getCountry() {
    return this.country;
  }

  public void setCountry(String country) {
    this.country = country;
  }

  public void unsetCountry() {
    this.country = null;
  }

  /** Returns true if field country is set (has been assigned a value) and false otherwise */
  public boolean isSetCountry() {
    return this.country != null;
  }

  public void setCountryIsSet(boolean value) {
    if (!value) {
      this.country = null;
    }
  }

  public String getCurrency() {
    return this.currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public void unsetCurrency() {
    this.currency = null;
  }

  /** Returns true if field currency is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrency() {
    return this.currency != null;
  }

  public void setCurrencyIsSet(boolean value) {
    if (!value) {
      this.currency = null;
    }
  }

  public String getPrice() {
    return this.price;
  }

  public void setPrice(String price) {
    this.price = price;
  }

  public void unsetPrice() {
    this.price = null;
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return this.price != null;
  }

  public void setPriceIsSet(boolean value) {
    if (!value) {
      this.price = null;
    }
  }

  /**
   * 
   * @see PaymentType
   */
  public PaymentType getAppStoreCode() {
    return this.appStoreCode;
  }

  /**
   * 
   * @see PaymentType
   */
  public void setAppStoreCode(PaymentType appStoreCode) {
    this.appStoreCode = appStoreCode;
  }

  public void unsetAppStoreCode() {
    this.appStoreCode = null;
  }

  /** Returns true if field appStoreCode is set (has been assigned a value) and false otherwise */
  public boolean isSetAppStoreCode() {
    return this.appStoreCode != null;
  }

  public void setAppStoreCodeIsSet(boolean value) {
    if (!value) {
      this.appStoreCode = null;
    }
  }

  public String getLanguage() {
    return this.language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }

  public void unsetLanguage() {
    this.language = null;
  }

  /** Returns true if field language is set (has been assigned a value) and false otherwise */
  public boolean isSetLanguage() {
    return this.language != null;
  }

  public void setLanguageIsSet(boolean value) {
    if (!value) {
      this.language = null;
    }
  }

  /**
   * 
   * @see PaymentPgType
   */
  public PaymentPgType getPgCode() {
    return this.pgCode;
  }

  /**
   * 
   * @see PaymentPgType
   */
  public void setPgCode(PaymentPgType pgCode) {
    this.pgCode = pgCode;
  }

  public void unsetPgCode() {
    this.pgCode = null;
  }

  /** Returns true if field pgCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPgCode() {
    return this.pgCode != null;
  }

  public void setPgCodeIsSet(boolean value) {
    if (!value) {
      this.pgCode = null;
    }
  }

  public String getRedirectUrl() {
    return this.redirectUrl;
  }

  public void setRedirectUrl(String redirectUrl) {
    this.redirectUrl = redirectUrl;
  }

  public void unsetRedirectUrl() {
    this.redirectUrl = null;
  }

  /** Returns true if field redirectUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetRedirectUrl() {
    return this.redirectUrl != null;
  }

  public void setRedirectUrlIsSet(boolean value) {
    if (!value) {
      this.redirectUrl = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CoinPurchaseReservation)
      return this.equals((CoinPurchaseReservation)that);
    return false;
  }

  public boolean equals(CoinPurchaseReservation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_productId = true && this.isSetProductId();
    boolean that_present_productId = true && that.isSetProductId();
    if (this_present_productId || that_present_productId) {
      if (!(this_present_productId && that_present_productId))
        return false;
      if (!this.productId.equals(that.productId))
        return false;
    }

    boolean this_present_country = true && this.isSetCountry();
    boolean that_present_country = true && that.isSetCountry();
    if (this_present_country || that_present_country) {
      if (!(this_present_country && that_present_country))
        return false;
      if (!this.country.equals(that.country))
        return false;
    }

    boolean this_present_currency = true && this.isSetCurrency();
    boolean that_present_currency = true && that.isSetCurrency();
    if (this_present_currency || that_present_currency) {
      if (!(this_present_currency && that_present_currency))
        return false;
      if (!this.currency.equals(that.currency))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (!this.price.equals(that.price))
        return false;
    }

    boolean this_present_appStoreCode = true && this.isSetAppStoreCode();
    boolean that_present_appStoreCode = true && that.isSetAppStoreCode();
    if (this_present_appStoreCode || that_present_appStoreCode) {
      if (!(this_present_appStoreCode && that_present_appStoreCode))
        return false;
      if (!this.appStoreCode.equals(that.appStoreCode))
        return false;
    }

    boolean this_present_language = true && this.isSetLanguage();
    boolean that_present_language = true && that.isSetLanguage();
    if (this_present_language || that_present_language) {
      if (!(this_present_language && that_present_language))
        return false;
      if (!this.language.equals(that.language))
        return false;
    }

    boolean this_present_pgCode = true && this.isSetPgCode();
    boolean that_present_pgCode = true && that.isSetPgCode();
    if (this_present_pgCode || that_present_pgCode) {
      if (!(this_present_pgCode && that_present_pgCode))
        return false;
      if (!this.pgCode.equals(that.pgCode))
        return false;
    }

    boolean this_present_redirectUrl = true && this.isSetRedirectUrl();
    boolean that_present_redirectUrl = true && that.isSetRedirectUrl();
    if (this_present_redirectUrl || that_present_redirectUrl) {
      if (!(this_present_redirectUrl && that_present_redirectUrl))
        return false;
      if (!this.redirectUrl.equals(that.redirectUrl))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    CoinPurchaseReservation other = (CoinPurchaseReservation)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetProductId(), other.isSetProductId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProductId()) {
      lastComparison = TBaseHelper.compareTo(this.productId, other.productId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCountry(), other.isSetCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountry()) {
      lastComparison = TBaseHelper.compareTo(this.country, other.country);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetCurrency(), other.isSetCurrency());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrency()) {
      lastComparison = TBaseHelper.compareTo(this.currency, other.currency);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPrice(), other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetAppStoreCode(), other.isSetAppStoreCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppStoreCode()) {
      lastComparison = TBaseHelper.compareTo(this.appStoreCode, other.appStoreCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLanguage(), other.isSetLanguage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLanguage()) {
      lastComparison = TBaseHelper.compareTo(this.language, other.language);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetPgCode(), other.isSetPgCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPgCode()) {
      lastComparison = TBaseHelper.compareTo(this.pgCode, other.pgCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRedirectUrl(), other.isSetRedirectUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRedirectUrl()) {
      lastComparison = TBaseHelper.compareTo(this.redirectUrl, other.redirectUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // PRODUCT_ID
          if (field.type == TType.STRING) {
            this.productId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // COUNTRY
          if (field.type == TType.STRING) {
            this.country = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // CURRENCY
          if (field.type == TType.STRING) {
            this.currency = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // PRICE
          if (field.type == TType.STRING) {
            this.price = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 5: // APP_STORE_CODE
          if (field.type == TType.I32) {
            this.appStoreCode = PaymentType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 6: // LANGUAGE
          if (field.type == TType.STRING) {
            this.language = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 7: // PG_CODE
          if (field.type == TType.I32) {
            this.pgCode = PaymentPgType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 8: // REDIRECT_URL
          if (field.type == TType.STRING) {
            this.redirectUrl = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.productId != null) {
      oprot.writeFieldBegin(PRODUCT_ID_FIELD_DESC);
      oprot.writeString(this.productId);
      oprot.writeFieldEnd();
    }
    if (this.country != null) {
      oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
      oprot.writeString(this.country);
      oprot.writeFieldEnd();
    }
    if (this.currency != null) {
      oprot.writeFieldBegin(CURRENCY_FIELD_DESC);
      oprot.writeString(this.currency);
      oprot.writeFieldEnd();
    }
    if (this.price != null) {
      oprot.writeFieldBegin(PRICE_FIELD_DESC);
      oprot.writeString(this.price);
      oprot.writeFieldEnd();
    }
    if (this.appStoreCode != null) {
      oprot.writeFieldBegin(APP_STORE_CODE_FIELD_DESC);
      oprot.writeI32(this.appStoreCode.getValue());
      oprot.writeFieldEnd();
    }
    if (this.language != null) {
      oprot.writeFieldBegin(LANGUAGE_FIELD_DESC);
      oprot.writeString(this.language);
      oprot.writeFieldEnd();
    }
    if (this.pgCode != null) {
      oprot.writeFieldBegin(PG_CODE_FIELD_DESC);
      oprot.writeI32(this.pgCode.getValue());
      oprot.writeFieldEnd();
    }
    if (this.redirectUrl != null) {
      oprot.writeFieldBegin(REDIRECT_URL_FIELD_DESC);
      oprot.writeString(this.redirectUrl);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("CoinPurchaseReservation(");
    boolean first = true;

    sb.append("productId:");
    if (this.productId == null) {
      sb.append("null");
    } else {
      sb.append(this.productId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("country:");
    if (this.country == null) {
      sb.append("null");
    } else {
      sb.append(this.country);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currency:");
    if (this.currency == null) {
      sb.append("null");
    } else {
      sb.append(this.currency);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("price:");
    if (this.price == null) {
      sb.append("null");
    } else {
      sb.append(this.price);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("appStoreCode:");
    if (this.appStoreCode == null) {
      sb.append("null");
    } else {
      sb.append(this.appStoreCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("language:");
    if (this.language == null) {
      sb.append("null");
    } else {
      sb.append(this.language);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pgCode:");
    if (this.pgCode == null) {
      sb.append("null");
    } else {
      sb.append(this.pgCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("redirectUrl:");
    if (this.redirectUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.redirectUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

