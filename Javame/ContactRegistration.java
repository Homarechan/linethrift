/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class ContactRegistration implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("ContactRegistration");

  private static final TField CONTACT_FIELD_DESC = new TField("contact", TType.STRUCT, (short)1);
  private static final TField LUID_FIELD_DESC = new TField("luid", TType.STRING, (short)10);
  private static final TField CONTACT_TYPE_FIELD_DESC = new TField("contactType", TType.I32, (short)11);
  private static final TField CONTACT_KEY_FIELD_DESC = new TField("contactKey", TType.STRING, (short)12);

  private Contact contact;
  private String luid;
  private ContactType contactType;
  private String contactKey;

  // isset id assignments

  public ContactRegistration() {
  }

  public ContactRegistration(
    Contact contact,
    String luid,
    ContactType contactType,
    String contactKey)
  {
    this();
    this.contact = contact;
    this.luid = luid;
    this.contactType = contactType;
    this.contactKey = contactKey;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ContactRegistration(ContactRegistration other) {
    if (other.isSetContact()) {
      this.contact = new Contact(other.contact);
    }
    if (other.isSetLuid()) {
      this.luid = other.luid;
    }
    if (other.isSetContactType()) {
      this.contactType = other.contactType;
    }
    if (other.isSetContactKey()) {
      this.contactKey = other.contactKey;
    }
  }

  public ContactRegistration deepCopy() {
    return new ContactRegistration(this);
  }

  public void clear() {
    this.contact = null;
    this.luid = null;
    this.contactType = null;
    this.contactKey = null;
  }

  public Contact getContact() {
    return this.contact;
  }

  public void setContact(Contact contact) {
    this.contact = contact;
  }

  public void unsetContact() {
    this.contact = null;
  }

  /** Returns true if field contact is set (has been assigned a value) and false otherwise */
  public boolean isSetContact() {
    return this.contact != null;
  }

  public void setContactIsSet(boolean value) {
    if (!value) {
      this.contact = null;
    }
  }

  public String getLuid() {
    return this.luid;
  }

  public void setLuid(String luid) {
    this.luid = luid;
  }

  public void unsetLuid() {
    this.luid = null;
  }

  /** Returns true if field luid is set (has been assigned a value) and false otherwise */
  public boolean isSetLuid() {
    return this.luid != null;
  }

  public void setLuidIsSet(boolean value) {
    if (!value) {
      this.luid = null;
    }
  }

  /**
   * 
   * @see ContactType
   */
  public ContactType getContactType() {
    return this.contactType;
  }

  /**
   * 
   * @see ContactType
   */
  public void setContactType(ContactType contactType) {
    this.contactType = contactType;
  }

  public void unsetContactType() {
    this.contactType = null;
  }

  /** Returns true if field contactType is set (has been assigned a value) and false otherwise */
  public boolean isSetContactType() {
    return this.contactType != null;
  }

  public void setContactTypeIsSet(boolean value) {
    if (!value) {
      this.contactType = null;
    }
  }

  public String getContactKey() {
    return this.contactKey;
  }

  public void setContactKey(String contactKey) {
    this.contactKey = contactKey;
  }

  public void unsetContactKey() {
    this.contactKey = null;
  }

  /** Returns true if field contactKey is set (has been assigned a value) and false otherwise */
  public boolean isSetContactKey() {
    return this.contactKey != null;
  }

  public void setContactKeyIsSet(boolean value) {
    if (!value) {
      this.contactKey = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ContactRegistration)
      return this.equals((ContactRegistration)that);
    return false;
  }

  public boolean equals(ContactRegistration that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_contact = true && this.isSetContact();
    boolean that_present_contact = true && that.isSetContact();
    if (this_present_contact || that_present_contact) {
      if (!(this_present_contact && that_present_contact))
        return false;
      if (!this.contact.equals(that.contact))
        return false;
    }

    boolean this_present_luid = true && this.isSetLuid();
    boolean that_present_luid = true && that.isSetLuid();
    if (this_present_luid || that_present_luid) {
      if (!(this_present_luid && that_present_luid))
        return false;
      if (!this.luid.equals(that.luid))
        return false;
    }

    boolean this_present_contactType = true && this.isSetContactType();
    boolean that_present_contactType = true && that.isSetContactType();
    if (this_present_contactType || that_present_contactType) {
      if (!(this_present_contactType && that_present_contactType))
        return false;
      if (!this.contactType.equals(that.contactType))
        return false;
    }

    boolean this_present_contactKey = true && this.isSetContactKey();
    boolean that_present_contactKey = true && that.isSetContactKey();
    if (this_present_contactKey || that_present_contactKey) {
      if (!(this_present_contactKey && that_present_contactKey))
        return false;
      if (!this.contactKey.equals(that.contactKey))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    ContactRegistration other = (ContactRegistration)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetContact(), other.isSetContact());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContact()) {
      lastComparison = this.contact.compareTo(other.contact);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLuid(), other.isSetLuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLuid()) {
      lastComparison = TBaseHelper.compareTo(this.luid, other.luid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContactType(), other.isSetContactType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactType()) {
      lastComparison = TBaseHelper.compareTo(this.contactType, other.contactType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetContactKey(), other.isSetContactKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContactKey()) {
      lastComparison = TBaseHelper.compareTo(this.contactKey, other.contactKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CONTACT
          if (field.type == TType.STRUCT) {
            this.contact = new Contact();
            this.contact.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 10: // LUID
          if (field.type == TType.STRING) {
            this.luid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 11: // CONTACT_TYPE
          if (field.type == TType.I32) {
            this.contactType = ContactType.findByValue(iprot.readI32());
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 12: // CONTACT_KEY
          if (field.type == TType.STRING) {
            this.contactKey = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.contact != null) {
      oprot.writeFieldBegin(CONTACT_FIELD_DESC);
      this.contact.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.luid != null) {
      oprot.writeFieldBegin(LUID_FIELD_DESC);
      oprot.writeString(this.luid);
      oprot.writeFieldEnd();
    }
    if (this.contactType != null) {
      oprot.writeFieldBegin(CONTACT_TYPE_FIELD_DESC);
      oprot.writeI32(this.contactType.getValue());
      oprot.writeFieldEnd();
    }
    if (this.contactKey != null) {
      oprot.writeFieldBegin(CONTACT_KEY_FIELD_DESC);
      oprot.writeString(this.contactKey);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("ContactRegistration(");
    boolean first = true;

    sb.append("contact:");
    if (this.contact == null) {
      sb.append("null");
    } else {
      sb.append(this.contact);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("luid:");
    if (this.luid == null) {
      sb.append("null");
    } else {
      sb.append(this.luid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactType:");
    if (this.contactType == null) {
      sb.append("null");
    } else {
      sb.append(this.contactType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contactKey:");
    if (this.contactKey == null) {
      sb.append("null");
    } else {
      sb.append(this.contactKey);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

