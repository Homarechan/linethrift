/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SquareStatus implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SquareStatus");

  private static final TField MEMBER_COUNT_FIELD_DESC = new TField("memberCount", TType.I32, (short)1);
  private static final TField JOIN_REQUEST_COUNT_FIELD_DESC = new TField("joinRequestCount", TType.I32, (short)2);
  private static final TField LAST_JOIN_REQUEST_AT_FIELD_DESC = new TField("lastJoinRequestAt", TType.I64, (short)3);
  private static final TField OPEN_CHAT_COUNT_FIELD_DESC = new TField("openChatCount", TType.I32, (short)4);

  private int memberCount;
  private int joinRequestCount;
  private long lastJoinRequestAt;
  private int openChatCount;

  // isset id assignments
  private static final int __MEMBERCOUNT_ISSET_ID = 0;
  private static final int __JOINREQUESTCOUNT_ISSET_ID = 1;
  private static final int __LASTJOINREQUESTAT_ISSET_ID = 2;
  private static final int __OPENCHATCOUNT_ISSET_ID = 3;
  private boolean[] __isset_vector = new boolean[4];

  public SquareStatus() {
  }

  public SquareStatus(
    int memberCount,
    int joinRequestCount,
    long lastJoinRequestAt,
    int openChatCount)
  {
    this();
    this.memberCount = memberCount;
    setMemberCountIsSet(true);
    this.joinRequestCount = joinRequestCount;
    setJoinRequestCountIsSet(true);
    this.lastJoinRequestAt = lastJoinRequestAt;
    setLastJoinRequestAtIsSet(true);
    this.openChatCount = openChatCount;
    setOpenChatCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareStatus(SquareStatus other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.memberCount = other.memberCount;
    this.joinRequestCount = other.joinRequestCount;
    this.lastJoinRequestAt = other.lastJoinRequestAt;
    this.openChatCount = other.openChatCount;
  }

  public SquareStatus deepCopy() {
    return new SquareStatus(this);
  }

  public void clear() {
    setMemberCountIsSet(false);
    this.memberCount = 0;
    setJoinRequestCountIsSet(false);
    this.joinRequestCount = 0;
    setLastJoinRequestAtIsSet(false);
    this.lastJoinRequestAt = 0;
    setOpenChatCountIsSet(false);
    this.openChatCount = 0;
  }

  public int getMemberCount() {
    return this.memberCount;
  }

  public void setMemberCount(int memberCount) {
    this.memberCount = memberCount;
    setMemberCountIsSet(true);
  }

  public void unsetMemberCount() {
    __isset_vector[__MEMBERCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field memberCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberCount() {
    return __isset_vector[__MEMBERCOUNT_ISSET_ID];
  }

  public void setMemberCountIsSet(boolean value) {
    __isset_vector[__MEMBERCOUNT_ISSET_ID] = value;
  }

  public int getJoinRequestCount() {
    return this.joinRequestCount;
  }

  public void setJoinRequestCount(int joinRequestCount) {
    this.joinRequestCount = joinRequestCount;
    setJoinRequestCountIsSet(true);
  }

  public void unsetJoinRequestCount() {
    __isset_vector[__JOINREQUESTCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field joinRequestCount is set (has been assigned a value) and false otherwise */
  public boolean isSetJoinRequestCount() {
    return __isset_vector[__JOINREQUESTCOUNT_ISSET_ID];
  }

  public void setJoinRequestCountIsSet(boolean value) {
    __isset_vector[__JOINREQUESTCOUNT_ISSET_ID] = value;
  }

  public long getLastJoinRequestAt() {
    return this.lastJoinRequestAt;
  }

  public void setLastJoinRequestAt(long lastJoinRequestAt) {
    this.lastJoinRequestAt = lastJoinRequestAt;
    setLastJoinRequestAtIsSet(true);
  }

  public void unsetLastJoinRequestAt() {
    __isset_vector[__LASTJOINREQUESTAT_ISSET_ID] = false;
  }

  /** Returns true if field lastJoinRequestAt is set (has been assigned a value) and false otherwise */
  public boolean isSetLastJoinRequestAt() {
    return __isset_vector[__LASTJOINREQUESTAT_ISSET_ID];
  }

  public void setLastJoinRequestAtIsSet(boolean value) {
    __isset_vector[__LASTJOINREQUESTAT_ISSET_ID] = value;
  }

  public int getOpenChatCount() {
    return this.openChatCount;
  }

  public void setOpenChatCount(int openChatCount) {
    this.openChatCount = openChatCount;
    setOpenChatCountIsSet(true);
  }

  public void unsetOpenChatCount() {
    __isset_vector[__OPENCHATCOUNT_ISSET_ID] = false;
  }

  /** Returns true if field openChatCount is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenChatCount() {
    return __isset_vector[__OPENCHATCOUNT_ISSET_ID];
  }

  public void setOpenChatCountIsSet(boolean value) {
    __isset_vector[__OPENCHATCOUNT_ISSET_ID] = value;
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareStatus)
      return this.equals((SquareStatus)that);
    return false;
  }

  public boolean equals(SquareStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_memberCount = true;
    boolean that_present_memberCount = true;
    if (this_present_memberCount || that_present_memberCount) {
      if (!(this_present_memberCount && that_present_memberCount))
        return false;
      if (this.memberCount != that.memberCount)
        return false;
    }

    boolean this_present_joinRequestCount = true;
    boolean that_present_joinRequestCount = true;
    if (this_present_joinRequestCount || that_present_joinRequestCount) {
      if (!(this_present_joinRequestCount && that_present_joinRequestCount))
        return false;
      if (this.joinRequestCount != that.joinRequestCount)
        return false;
    }

    boolean this_present_lastJoinRequestAt = true;
    boolean that_present_lastJoinRequestAt = true;
    if (this_present_lastJoinRequestAt || that_present_lastJoinRequestAt) {
      if (!(this_present_lastJoinRequestAt && that_present_lastJoinRequestAt))
        return false;
      if (this.lastJoinRequestAt != that.lastJoinRequestAt)
        return false;
    }

    boolean this_present_openChatCount = true;
    boolean that_present_openChatCount = true;
    if (this_present_openChatCount || that_present_openChatCount) {
      if (!(this_present_openChatCount && that_present_openChatCount))
        return false;
      if (this.openChatCount != that.openChatCount)
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SquareStatus other = (SquareStatus)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetMemberCount(), other.isSetMemberCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberCount()) {
      lastComparison = TBaseHelper.compareTo(this.memberCount, other.memberCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetJoinRequestCount(), other.isSetJoinRequestCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJoinRequestCount()) {
      lastComparison = TBaseHelper.compareTo(this.joinRequestCount, other.joinRequestCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetLastJoinRequestAt(), other.isSetLastJoinRequestAt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastJoinRequestAt()) {
      lastComparison = TBaseHelper.compareTo(this.lastJoinRequestAt, other.lastJoinRequestAt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetOpenChatCount(), other.isSetOpenChatCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenChatCount()) {
      lastComparison = TBaseHelper.compareTo(this.openChatCount, other.openChatCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // MEMBER_COUNT
          if (field.type == TType.I32) {
            this.memberCount = iprot.readI32();
            setMemberCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // JOIN_REQUEST_COUNT
          if (field.type == TType.I32) {
            this.joinRequestCount = iprot.readI32();
            setJoinRequestCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // LAST_JOIN_REQUEST_AT
          if (field.type == TType.I64) {
            this.lastJoinRequestAt = iprot.readI64();
            setLastJoinRequestAtIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 4: // OPEN_CHAT_COUNT
          if (field.type == TType.I32) {
            this.openChatCount = iprot.readI32();
            setOpenChatCountIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(MEMBER_COUNT_FIELD_DESC);
    oprot.writeI32(this.memberCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(JOIN_REQUEST_COUNT_FIELD_DESC);
    oprot.writeI32(this.joinRequestCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LAST_JOIN_REQUEST_AT_FIELD_DESC);
    oprot.writeI64(this.lastJoinRequestAt);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(OPEN_CHAT_COUNT_FIELD_DESC);
    oprot.writeI32(this.openChatCount);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SquareStatus(");
    boolean first = true;

    sb.append("memberCount:");
    sb.append(this.memberCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("joinRequestCount:");
    sb.append(this.joinRequestCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastJoinRequestAt:");
    sb.append(this.lastJoinRequestAt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openChatCount:");
    sb.append(this.openChatCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

