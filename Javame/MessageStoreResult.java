/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MessageStoreResult implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("MessageStoreResult");

  private static final TField REQUEST_ID_FIELD_DESC = new TField("requestId", TType.STRING, (short)1);
  private static final TField MESSAGE_IDS_FIELD_DESC = new TField("messageIds", TType.LIST, (short)2);

  private String requestId;
  private Vector messageIds;

  // isset id assignments

  public MessageStoreResult() {
  }

  public MessageStoreResult(
    String requestId,
    Vector messageIds)
  {
    this();
    this.requestId = requestId;
    this.messageIds = messageIds;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MessageStoreResult(MessageStoreResult other) {
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
    if (other.isSetMessageIds()) {
      Vector __this__messageIds = new Vector();
      for (Enumeration other_enum = other.messageIds.elements(); other_enum.hasMoreElements(); ) {
        String other_element = (String)other_enum.nextElement();
        __this__messageIds.addElement(other_element);
      }
      this.messageIds = __this__messageIds;
    }
  }

  public MessageStoreResult deepCopy() {
    return new MessageStoreResult(this);
  }

  public void clear() {
    this.requestId = null;
    this.messageIds = null;
  }

  public String getRequestId() {
    return this.requestId;
  }

  public void setRequestId(String requestId) {
    this.requestId = requestId;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  public int getMessageIdsSize() {
    return (this.messageIds == null) ? 0 : this.messageIds.size();
  }

  public Enumeration getMessageIdsEnumeration() {
    return (this.messageIds == null) ? null : this.messageIds.elements();
  }

  public void addToMessageIds(String elem) {
    if (this.messageIds == null) {
      this.messageIds = new Vector();
    }
    this.messageIds.addElement(elem);
  }

  public Vector getMessageIds() {
    return this.messageIds;
  }

  public void setMessageIds(Vector messageIds) {
    this.messageIds = messageIds;
  }

  public void unsetMessageIds() {
    this.messageIds = null;
  }

  /** Returns true if field messageIds is set (has been assigned a value) and false otherwise */
  public boolean isSetMessageIds() {
    return this.messageIds != null;
  }

  public void setMessageIdsIsSet(boolean value) {
    if (!value) {
      this.messageIds = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MessageStoreResult)
      return this.equals((MessageStoreResult)that);
    return false;
  }

  public boolean equals(MessageStoreResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    boolean this_present_messageIds = true && this.isSetMessageIds();
    boolean that_present_messageIds = true && that.isSetMessageIds();
    if (this_present_messageIds || that_present_messageIds) {
      if (!(this_present_messageIds && that_present_messageIds))
        return false;
      if (!this.messageIds.equals(that.messageIds))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    MessageStoreResult other = (MessageStoreResult)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetRequestId(), other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetMessageIds(), other.isSetMessageIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessageIds()) {
      lastComparison = TBaseHelper.compareTo(this.messageIds, other.messageIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // REQUEST_ID
          if (field.type == TType.STRING) {
            this.requestId = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // MESSAGE_IDS
          if (field.type == TType.LIST) {
            {
              TList _list170 = iprot.readListBegin();
              this.messageIds = new Vector(_list170.size);
              for (int _i171 = 0; _i171 < _list170.size; ++_i171)
              {
                String _elem172;
                _elem172 = iprot.readString();
                this.messageIds.addElement(_elem172);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.requestId != null) {
      oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
      oprot.writeString(this.requestId);
      oprot.writeFieldEnd();
    }
    if (this.messageIds != null) {
      oprot.writeFieldBegin(MESSAGE_IDS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRING, this.messageIds.size()));
        for (Enumeration _iter173_enum = this.messageIds.elements(); _iter173_enum.hasMoreElements(); )         {
          String _iter173 = (String)_iter173_enum.nextElement();
          oprot.writeString(_iter173);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("MessageStoreResult(");
    boolean first = true;

    sb.append("requestId:");
    if (this.requestId == null) {
      sb.append("null");
    } else {
      sb.append(this.requestId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("messageIds:");
    if (this.messageIds == null) {
      sb.append("null");
    } else {
      sb.append(this.messageIds);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

