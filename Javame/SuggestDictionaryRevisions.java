/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class SuggestDictionaryRevisions implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("SuggestDictionaryRevisions");

  private static final TField ITEM_REVISION_FIELD_DESC = new TField("itemRevision", TType.STRUCT, (short)1);
  private static final TField TAG_REVISIONS_FIELD_DESC = new TField("tagRevisions", TType.LIST, (short)2);

  private SuggestItemDictionaryRevision itemRevision;
  private Vector tagRevisions;

  // isset id assignments

  public SuggestDictionaryRevisions() {
  }

  public SuggestDictionaryRevisions(
    SuggestItemDictionaryRevision itemRevision,
    Vector tagRevisions)
  {
    this();
    this.itemRevision = itemRevision;
    this.tagRevisions = tagRevisions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SuggestDictionaryRevisions(SuggestDictionaryRevisions other) {
    if (other.isSetItemRevision()) {
      this.itemRevision = new SuggestItemDictionaryRevision(other.itemRevision);
    }
    if (other.isSetTagRevisions()) {
      Vector __this__tagRevisions = new Vector();
      for (Enumeration other_enum = other.tagRevisions.elements(); other_enum.hasMoreElements(); ) {
        SuggestTagDictionaryRevision other_element = (SuggestTagDictionaryRevision)other_enum.nextElement();
        __this__tagRevisions.addElement(new SuggestTagDictionaryRevision(other_element));
      }
      this.tagRevisions = __this__tagRevisions;
    }
  }

  public SuggestDictionaryRevisions deepCopy() {
    return new SuggestDictionaryRevisions(this);
  }

  public void clear() {
    this.itemRevision = null;
    this.tagRevisions = null;
  }

  public SuggestItemDictionaryRevision getItemRevision() {
    return this.itemRevision;
  }

  public void setItemRevision(SuggestItemDictionaryRevision itemRevision) {
    this.itemRevision = itemRevision;
  }

  public void unsetItemRevision() {
    this.itemRevision = null;
  }

  /** Returns true if field itemRevision is set (has been assigned a value) and false otherwise */
  public boolean isSetItemRevision() {
    return this.itemRevision != null;
  }

  public void setItemRevisionIsSet(boolean value) {
    if (!value) {
      this.itemRevision = null;
    }
  }

  public int getTagRevisionsSize() {
    return (this.tagRevisions == null) ? 0 : this.tagRevisions.size();
  }

  public Enumeration getTagRevisionsEnumeration() {
    return (this.tagRevisions == null) ? null : this.tagRevisions.elements();
  }

  public void addToTagRevisions(SuggestTagDictionaryRevision elem) {
    if (this.tagRevisions == null) {
      this.tagRevisions = new Vector();
    }
    this.tagRevisions.addElement(elem);
  }

  public Vector getTagRevisions() {
    return this.tagRevisions;
  }

  public void setTagRevisions(Vector tagRevisions) {
    this.tagRevisions = tagRevisions;
  }

  public void unsetTagRevisions() {
    this.tagRevisions = null;
  }

  /** Returns true if field tagRevisions is set (has been assigned a value) and false otherwise */
  public boolean isSetTagRevisions() {
    return this.tagRevisions != null;
  }

  public void setTagRevisionsIsSet(boolean value) {
    if (!value) {
      this.tagRevisions = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SuggestDictionaryRevisions)
      return this.equals((SuggestDictionaryRevisions)that);
    return false;
  }

  public boolean equals(SuggestDictionaryRevisions that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_itemRevision = true && this.isSetItemRevision();
    boolean that_present_itemRevision = true && that.isSetItemRevision();
    if (this_present_itemRevision || that_present_itemRevision) {
      if (!(this_present_itemRevision && that_present_itemRevision))
        return false;
      if (!this.itemRevision.equals(that.itemRevision))
        return false;
    }

    boolean this_present_tagRevisions = true && this.isSetTagRevisions();
    boolean that_present_tagRevisions = true && that.isSetTagRevisions();
    if (this_present_tagRevisions || that_present_tagRevisions) {
      if (!(this_present_tagRevisions && that_present_tagRevisions))
        return false;
      if (!this.tagRevisions.equals(that.tagRevisions))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    SuggestDictionaryRevisions other = (SuggestDictionaryRevisions)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetItemRevision(), other.isSetItemRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemRevision()) {
      lastComparison = this.itemRevision.compareTo(other.itemRevision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTagRevisions(), other.isSetTagRevisions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagRevisions()) {
      lastComparison = TBaseHelper.compareTo(this.tagRevisions, other.tagRevisions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ITEM_REVISION
          if (field.type == TType.STRUCT) {
            this.itemRevision = new SuggestItemDictionaryRevision();
            this.itemRevision.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TAG_REVISIONS
          if (field.type == TType.LIST) {
            {
              TList _list229 = iprot.readListBegin();
              this.tagRevisions = new Vector(_list229.size);
              for (int _i230 = 0; _i230 < _list229.size; ++_i230)
              {
                SuggestTagDictionaryRevision _elem231;
                _elem231 = new SuggestTagDictionaryRevision();
                _elem231.read(iprot);
                this.tagRevisions.addElement(_elem231);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.itemRevision != null) {
      oprot.writeFieldBegin(ITEM_REVISION_FIELD_DESC);
      this.itemRevision.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.tagRevisions != null) {
      oprot.writeFieldBegin(TAG_REVISIONS_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.tagRevisions.size()));
        for (Enumeration _iter232_enum = this.tagRevisions.elements(); _iter232_enum.hasMoreElements(); )         {
          SuggestTagDictionaryRevision _iter232 = (SuggestTagDictionaryRevision)_iter232_enum.nextElement();
          _iter232.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("SuggestDictionaryRevisions(");
    boolean first = true;

    sb.append("itemRevision:");
    if (this.itemRevision == null) {
      sb.append("null");
    } else {
      sb.append(this.itemRevision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tagRevisions:");
    if (this.tagRevisions == null) {
      sb.append("null");
    } else {
      sb.append(this.tagRevisions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

