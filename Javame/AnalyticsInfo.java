/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class AnalyticsInfo implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("AnalyticsInfo");

  private static final TField GA_SAMPLING_RATE_FIELD_DESC = new TField("gaSamplingRate", TType.DOUBLE, (short)1);
  private static final TField TMID_FIELD_DESC = new TField("tmid", TType.STRING, (short)2);

  private double gaSamplingRate;
  private String tmid;

  // isset id assignments
  private static final int __GASAMPLINGRATE_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public AnalyticsInfo() {
  }

  public AnalyticsInfo(
    double gaSamplingRate,
    String tmid)
  {
    this();
    this.gaSamplingRate = gaSamplingRate;
    setGaSamplingRateIsSet(true);
    this.tmid = tmid;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AnalyticsInfo(AnalyticsInfo other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.gaSamplingRate = other.gaSamplingRate;
    if (other.isSetTmid()) {
      this.tmid = other.tmid;
    }
  }

  public AnalyticsInfo deepCopy() {
    return new AnalyticsInfo(this);
  }

  public void clear() {
    setGaSamplingRateIsSet(false);
    this.gaSamplingRate = 0.0;
    this.tmid = null;
  }

  public double getGaSamplingRate() {
    return this.gaSamplingRate;
  }

  public void setGaSamplingRate(double gaSamplingRate) {
    this.gaSamplingRate = gaSamplingRate;
    setGaSamplingRateIsSet(true);
  }

  public void unsetGaSamplingRate() {
    __isset_vector[__GASAMPLINGRATE_ISSET_ID] = false;
  }

  /** Returns true if field gaSamplingRate is set (has been assigned a value) and false otherwise */
  public boolean isSetGaSamplingRate() {
    return __isset_vector[__GASAMPLINGRATE_ISSET_ID];
  }

  public void setGaSamplingRateIsSet(boolean value) {
    __isset_vector[__GASAMPLINGRATE_ISSET_ID] = value;
  }

  public String getTmid() {
    return this.tmid;
  }

  public void setTmid(String tmid) {
    this.tmid = tmid;
  }

  public void unsetTmid() {
    this.tmid = null;
  }

  /** Returns true if field tmid is set (has been assigned a value) and false otherwise */
  public boolean isSetTmid() {
    return this.tmid != null;
  }

  public void setTmidIsSet(boolean value) {
    if (!value) {
      this.tmid = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AnalyticsInfo)
      return this.equals((AnalyticsInfo)that);
    return false;
  }

  public boolean equals(AnalyticsInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_gaSamplingRate = true;
    boolean that_present_gaSamplingRate = true;
    if (this_present_gaSamplingRate || that_present_gaSamplingRate) {
      if (!(this_present_gaSamplingRate && that_present_gaSamplingRate))
        return false;
      if (this.gaSamplingRate != that.gaSamplingRate)
        return false;
    }

    boolean this_present_tmid = true && this.isSetTmid();
    boolean that_present_tmid = true && that.isSetTmid();
    if (this_present_tmid || that_present_tmid) {
      if (!(this_present_tmid && that_present_tmid))
        return false;
      if (!this.tmid.equals(that.tmid))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    AnalyticsInfo other = (AnalyticsInfo)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetGaSamplingRate(), other.isSetGaSamplingRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGaSamplingRate()) {
      lastComparison = TBaseHelper.compareTo(this.gaSamplingRate, other.gaSamplingRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetTmid(), other.isSetTmid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTmid()) {
      lastComparison = TBaseHelper.compareTo(this.tmid, other.tmid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // GA_SAMPLING_RATE
          if (field.type == TType.DOUBLE) {
            this.gaSamplingRate = iprot.readDouble();
            setGaSamplingRateIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // TMID
          if (field.type == TType.STRING) {
            this.tmid = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(GA_SAMPLING_RATE_FIELD_DESC);
    oprot.writeDouble(this.gaSamplingRate);
    oprot.writeFieldEnd();
    if (this.tmid != null) {
      oprot.writeFieldBegin(TMID_FIELD_DESC);
      oprot.writeString(this.tmid);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("AnalyticsInfo(");
    boolean first = true;

    sb.append("gaSamplingRate:");
    sb.append(this.gaSamplingRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tmid:");
    if (this.tmid == null) {
      sb.append("null");
    } else {
      sb.append(this.tmid);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

