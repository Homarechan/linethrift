/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.Hashtable;
import java.util.Vector;
import java.util.Enumeration;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

public class MetaProfile implements TBase {
  private static final TStruct STRUCT_DESC = new TStruct("MetaProfile");

  private static final TField CREATE_TIME_FIELD_DESC = new TField("createTime", TType.I64, (short)1);
  private static final TField REGION_CODE_FIELD_DESC = new TField("regionCode", TType.STRING, (short)2);
  private static final TField IDENTITIES_FIELD_DESC = new TField("identities", TType.MAP, (short)3);

  private long createTime;
  private String regionCode;
  private Hashtable identities;

  // isset id assignments
  private static final int __CREATETIME_ISSET_ID = 0;
  private boolean[] __isset_vector = new boolean[1];

  public MetaProfile() {
  }

  public MetaProfile(
    long createTime,
    String regionCode,
    Hashtable identities)
  {
    this();
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.regionCode = regionCode;
    this.identities = identities;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetaProfile(MetaProfile other) {
    System.arraycopy(other.__isset_vector, 0, __isset_vector, 0, other.__isset_vector.length);
    this.createTime = other.createTime;
    if (other.isSetRegionCode()) {
      this.regionCode = other.regionCode;
    }
    if (other.isSetIdentities()) {
      Hashtable __this__identities = new Hashtable();
      for (Enumeration other_enum = other.identities.keys(); other_enum.hasMoreElements(); ) {

        RegistrationType other_element_key = (RegistrationType)other_enum.nextElement();
        String other_element_value = (String)other.identities.get(other_element_key);

        RegistrationType __this__identities_copy_key = other_element_key;

        String __this__identities_copy_value = other_element_value;

        __this__identities.put(__this__identities_copy_key, __this__identities_copy_value);
      }
      this.identities = __this__identities;
    }
  }

  public MetaProfile deepCopy() {
    return new MetaProfile(this);
  }

  public void clear() {
    setCreateTimeIsSet(false);
    this.createTime = 0;
    this.regionCode = null;
    this.identities = null;
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public void setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
  }

  public void unsetCreateTime() {
    __isset_vector[__CREATETIME_ISSET_ID] = false;
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return __isset_vector[__CREATETIME_ISSET_ID];
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_vector[__CREATETIME_ISSET_ID] = value;
  }

  public String getRegionCode() {
    return this.regionCode;
  }

  public void setRegionCode(String regionCode) {
    this.regionCode = regionCode;
  }

  public void unsetRegionCode() {
    this.regionCode = null;
  }

  /** Returns true if field regionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionCode() {
    return this.regionCode != null;
  }

  public void setRegionCodeIsSet(boolean value) {
    if (!value) {
      this.regionCode = null;
    }
  }

  public int getIdentitiesSize() {
    return (this.identities == null) ? 0 : this.identities.size();
  }

  public void putToIdentities(RegistrationType key, String val) {
    if (this.identities == null) {
      this.identities = new Hashtable();
    }
    this.identities.put(key, val);
  }

  public Hashtable getIdentities() {
    return this.identities;
  }

  public void setIdentities(Hashtable identities) {
    this.identities = identities;
  }

  public void unsetIdentities() {
    this.identities = null;
  }

  /** Returns true if field identities is set (has been assigned a value) and false otherwise */
  public boolean isSetIdentities() {
    return this.identities != null;
  }

  public void setIdentitiesIsSet(boolean value) {
    if (!value) {
      this.identities = null;
    }
  }

  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetaProfile)
      return this.equals((MetaProfile)that);
    return false;
  }

  public boolean equals(MetaProfile that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_regionCode = true && this.isSetRegionCode();
    boolean that_present_regionCode = true && that.isSetRegionCode();
    if (this_present_regionCode || that_present_regionCode) {
      if (!(this_present_regionCode && that_present_regionCode))
        return false;
      if (!this.regionCode.equals(that.regionCode))
        return false;
    }

    boolean this_present_identities = true && this.isSetIdentities();
    boolean that_present_identities = true && that.isSetIdentities();
    if (this_present_identities || that_present_identities) {
      if (!(this_present_identities && that_present_identities))
        return false;
      if (!this.identities.equals(that.identities))
        return false;
    }

    return true;
  }

  public int hashCode() {
    return 0;
  }

  public int compareTo(Object otherObject) {
    if (!getClass().equals(otherObject.getClass())) {
      return getClass().getName().compareTo(otherObject.getClass().getName());
    }

    MetaProfile other = (MetaProfile)otherObject;    int lastComparison = 0;

    lastComparison = TBaseHelper.compareTo(isSetCreateTime(), other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetRegionCode(), other.isSetRegionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionCode()) {
      lastComparison = TBaseHelper.compareTo(this.regionCode, other.regionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = TBaseHelper.compareTo(isSetIdentities(), other.isSetIdentities());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdentities()) {
      lastComparison = TBaseHelper.compareTo(this.identities, other.identities);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // CREATE_TIME
          if (field.type == TType.I64) {
            this.createTime = iprot.readI64();
            setCreateTimeIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // REGION_CODE
          if (field.type == TType.STRING) {
            this.regionCode = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 3: // IDENTITIES
          if (field.type == TType.MAP) {
            {
              TMap _map174 = iprot.readMapBegin();
              this.identities = new Hashtable(2*_map174.size);
              for (int _i175 = 0; _i175 < _map174.size; ++_i175)
              {
                RegistrationType _key176;
                String _val177;
                _key176 = RegistrationType.findByValue(iprot.readI32());
                _val177 = iprot.readString();
                this.identities.put(_key176, _val177);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
    oprot.writeI64(this.createTime);
    oprot.writeFieldEnd();
    if (this.regionCode != null) {
      oprot.writeFieldBegin(REGION_CODE_FIELD_DESC);
      oprot.writeString(this.regionCode);
      oprot.writeFieldEnd();
    }
    if (this.identities != null) {
      oprot.writeFieldBegin(IDENTITIES_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.I32, TType.STRING, this.identities.size()));
        for (Enumeration _iter178_enum = this.identities.keys(); _iter178_enum.hasMoreElements(); )         {
          RegistrationType _iter178 = (RegistrationType)_iter178_enum.nextElement();
          oprot.writeI32(_iter178.getValue());
          oprot.writeString(((String)this.identities.get(_iter178)));
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  public String toString() {
    StringBuffer sb = new StringBuffer("MetaProfile(");
    boolean first = true;

    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionCode:");
    if (this.regionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.regionCode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("identities:");
    if (this.identities == null) {
      sb.append("null");
    } else {
      sb.append(this.identities);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

